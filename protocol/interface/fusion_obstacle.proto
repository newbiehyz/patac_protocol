syntax = "proto3";
import "basic.proto";
import "common.proto";
package autodrive.workflow.proto;

enum FusionObstacleType {
  kFusionObstacleTypeVehicle = 0;
  kFusionObstacleTypePedestrain = 1;
  kFusionObstacleTypeCyclist = 2;
  kFusionObstacleTypeAnimal = 3;
  kFusionObstacleTypeTrafficCone = 50;
  kFusionObstacleTypeCementColumn = 51;
  kFusionObstacleTypeParkingLock = 52;
  kFusionObstacleTypeAFrameSign = 53;
  kFusionObstacleTypeCurb = 54;
  kFusionObstacleTypeFence = 55;
  kFusionObstacleTypeWaterBarrier = 56;
  kFusionObstacleTypeTrolley = 57;
  kFusionObstacleTypeWall = 58;
  kFusionObstacleTypeUnknown = 100;
}

enum ObstacleMotionCategory {
  kObstacleMotionCategoryInvalid = 0;
  kObstacleMotionCategoryUndefined = 1;
  kObstacleMotionCategoryPassing = 2;
  kObstacleMotionCategoryPassingIn = 3;
  kObstacleMotionCategoryPassingOut = 4;
  kObstacleMotionCategoryCloseCutIn = 5;
  kObstacleMotionCategoryMovingIn = 6;
  kObstacleMotionCategoryMovingOut = 7;
  kObstacleMotionCategoryCrossing = 8;
  kObstacleMotionCategoryLeftTurnAP = 9;
  kObstacleMotionCategoryRightTurnAP = 10;
  kObstacleMotionCategoryMoving = 11;
  kObstacleMotionCategoryPreceding = 12;
  kObstacleMotionCategoryOncoming = 13;
  kObstacleMotionCategoryEnumSize = 14;
}

enum ObstacleMotionOrientation {
  kObstacleMotionOrientationUndefined = 0;
  kObstacleMotionOrientationDriftingRight = 1;
  kObstacleMotionOrientationCrossingRight = 2;
  kObstacleMotionOrientationOncomingDriftRight = 3;
  kObstacleMotionOrientationOncoming = 4;
  kObstacleMotionOrientationOncomingDriftLeft = 5;
  kObstacleMotionOrientationCrossingLeft = 6;
  kObstacleMotionOrientationDriftingLeft = 7;
  kObstacleMotionOrientationPreceding = 8;
}

enum ObstacleMotionStatus {
  kObstacleMotionStatusUnknown = 0;
  kObstacleMotionStatusMoving = 1;
  kObstacleMotionStatusOncoming = 2;
  kObstacleMotionStatusStopped = 3;
  kObstacleMotionStatusStationary = 4;
}

enum VehicleSubType {
  kVehicleSubTypeUnknown = 0;
  kVehicleSubTypeCar = 1;
  kVehicleSubTypeSUV = 2;
  kVehicleSubTypeVan = 3;
  kVehicleSubTypeBus = 4;
  kVehicleSubTypeTruck = 5;
  kVehicleSubTypeAmbulance = 6;
  kVehicleSubTypePoliceCar = 7;
  kVehicleSubTypeFireTruck = 8;
  kVehicleSubTypeTricycle = 9;
  kVehicleSubTypeSpecialCar = 10;
  kVehicleSubTypeTinyCar = 11;
  kVehicleSubTypeMotor = 12;
}


enum FusionObstacleStaticSubType {
  kSubTypeParkLockTypeUnknown = 0;
  kSubTypeParkLockTypeOpen = 1;
  kSubTypeParkLockTypeClose = 2;
  kSubTypeFireHydrantTypeAir = 3;
  kSubTypeFireHydrantTypeGnd = 4;
}

message TwoPoints {
  // uss_only using ,default value will set
  Vector3f pos1 = 1;
  Vector3f pos2 = 2;
}

message FusionObstacleOutPut {
  bool is_updated = 1;
  // Bit1:IPM; Bit2:USS; Bit3:Mono;
  // For example,IPM only: uint8_t(1);IPM+USS: uint8_t(3);
  uint32 sensor_source = 2;
  // Fusion id
  uint32 id = 3;
  // Vision id
  uint32 vision_id = 4;
  // Uss id
  uint32 uss_id = 5;
  // Mono id
  uint32 mono_id = 6;
  // Position [x, y] center point only for fusion and vision
  Vector3f pos = 7;
  // Velocity [x, y], uss_only will give default value 0
  Vector3f vel = 8;
  // Acceleration [x, y],uss_only will give default value 0
  Vector3f acc = 9;
  // Heading for this object
  float heading = 10;
  // Obstacle Probability
  float obstacle_conf = 11;
  // [m] only for fusion and vision
  float width = 12;
  // [m] only for fusion and vision
  float length = 13;
  // [m] only for fusion and vision
  float height = 14;
  // Type
  FusionObstacleType type = 15;
  // Vehicle subtype
  VehicleSubType veh_sub_type = 16;
  FusionObstacleStaticSubType static_sub_type = 17;
  // Motion stats, uss_only set default value unkown
  ObstacleMotionStatus motion_state = 18;
  // Two point uss_only usinng
  TwoPoints uss_pos = 19;
  uint32 age = 20;
  /// @brief Position variance only for fusion and vision
  Vector3f pos_std = 21;
  /// @brief Momentary angular speed [rad/s] for this object
  float angular_speed = 22;
  /// @brief [s] ttc for this object
  float ttc = 23;
  /// @brief Motion category, uss_only set default value invalid
  ObstacleMotionCategory motion_category = 24;
  /// @brief Motion orientation, uss_only set default value undefined
  ObstacleMotionOrientation motion_orientation = 25;
  /// @brief Velocity  wcs[x, y], uss_only will give default value 0
  Vector3f vel_abs_world = 26;
  /// @brief Acceleration wcs [x, y],uss_only will give default value 0
  Vector3f acc_abs_world = 27;
}

message FusionObstacles {
  int64 timestamp = 1;
  repeated FusionObstacleOutPut obstacle_list = 2;
}

message FusionObstacleMsg {
  // Header
  MsgHeader header = 1;
  // Error
  Error error = 2;
  FusionObstacles fusion_obstacles = 3;
}