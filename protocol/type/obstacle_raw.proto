syntax = "proto3";

import "basic.proto";
import "perception_base.proto";
package autodrive.workflow.proto;

enum VehPropertyPerceptionType {
  kVehPerceptionTypeLicensePlate = 0;
  kVehPerceptionTypeWheel = 1;
  kVehPerceptionTypeCnt = 2;
}

message PropertyPerceptionBBox {
  perception_base.Rect rect = 1;
  float conf = 2;
  int32 type = 3;
  repeated perception_base.Category category = 4;
}

message ObstacleRawKeyPoint {
  Vector3f pt = 1;
  float type = 2;
  float conf = 3;
  float boundary_conf_x = 4;
  float boundary_conf_y = 5;
}

message TrackingFeatureRaw {
  int32 model_id = 1;
  repeated int32 data = 2;
}

message PoseNetRaw {
  float roll_raw = 1;
  float roll_filter = 2;
  float pitch_raw = 3;
  float pitch_filter = 4;
  float yaw_raw = 5;
  float yaw_filter = 6;
  int32 type = 7;
  float conf = 8;
}

enum ObstacleRawModelType {
  kObstacleRawModelCar = 0;
  kObstacleRawModelFullCar = 1;
  kObstacleRawModelPed = 2;
  kObstacleRawModelHead = 3;
  kObstacleRawModelRare = 4;
  kObstacleRawModelTrafficSign = 5;
  kObstacleRawModelTrafficLight = 6;
  kObstacleRawModelLane = 7;
  kObstacleRawModelRoadSign = 10;
  kObstacleRawModelTrafficArrow = 11;
  kObstacleRawModelYieldMark = 12;
  kObstacleRawModelTrafficCone = 13;
  kObstacleRawModelBarrel = 14;
  kObstacleRawModelSpeedMark = 15;
  kObstacleRawModelCyclist = 16;
  kObstacleRawModelParkingLock = 17;
  kObstacleRawModelSpeedCamera = 18;
  kObstacleRawModelTrafficLightLens = 19;
  kObstacleRawModelParkingSlot = 22;
  kObstacleRawModelFace = 34;
  kObstacleRawModelVehiclePlat = 35;
  kObstacleRawModelLaneCrossPoints = 37;
  kObstacleRawModelVerticalPolePoints = 38;
  kObstacleRawModelTollgate = 39;
  kObstacleRawModelParkingLockClose = 40;
  kObstacleRawModelParkingLockOpen = 41;
  kObstacleRawModelParkingColumn = 42;
  kObstacleRawModelParkingAFrameSign = 43;
  kObstacleRawModelTrafficBollard = 44;
  kObstacleRawModelParkingObstacles = 45;
  kObstacleRawModelHpp = 46;
}

message KpsClsRaw {
  repeated int32 id = 1;
  repeated float conf = 2;
  repeated string name = 3;
  int32 type = 4;
}

message KeyPointsRaw {
  int32 task_type = 1;
  repeated ObstacleRawKeyPoint key_points = 2;
}

enum Global2peResultType {
  kGlobal2PeResultTypeWeather = 0;
  kGlobal2PeResultTypeLight = 1;
  kGlobal2PeResultTypeScene = 2;
  kGlobal2PeResultTypeTime = 3;
  kGlobal2PeResultTypeVanishPoint = 4;
  kGlobal2PeResultTypePosenet = 5;
  kGlobal2PeResultTypeBlockcls = 6;
  kGlobal2PeResultTypeBlurcls = 7;
  kGlobal2PeResultTypeGlarecls = 8;
  kGlobal2PeResultTypePrFromDepth = 9;
}

enum KeyPointType {
  kColumnKps = 0;
  kSmallSodKps = 1;
  kWheelKps = 2;
};

message PRFromGround {
  float roll = 1;
  float pitch = 2;
  Global2peResultType type = 3;
}

message KeyPointsRawData {
  KeyPointType type = 1;
  repeated ObstacleRawKeyPoint key_points = 2;
};

message ObstacleRaw {
  perception_base.Rect rect = 1;
  float conf = 2;
  int32 model = 3;
  int32 source = 4;
  repeated perception_base.Category category = 5;
  repeated PropertyPerceptionBBox property_bbox = 6;
  repeated ObstacleRawKeyPoint key_points = 7;
  float depth = 8;
  int32 expand = 9;
  perception_base.Rect input_roi = 10;
}

message ObstacleRawsData {
  perception_base.Header header = 1;
  perception_base.Category category = 2;
  float conf_scale = 3;
  repeated KeyPointsRawData key_points_raws = 4;
  repeated ObstacleRaw obstacle_raws = 5;
}