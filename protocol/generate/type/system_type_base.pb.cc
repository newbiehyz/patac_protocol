// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_type_base.proto

#include "system_type_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class ApaStateInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ApaStateInfo>
      _instance;
} _ApaStateInfo_default_instance_;
class UserSelectedParkingSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserSelectedParkingSlot>
      _instance;
} _UserSelectedParkingSlot_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_system_5ftype_5fbase_2eproto {
void InitDefaultsApaStateInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_ApaStateInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ApaStateInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ApaStateInfo::InitAsDefaultInstance();
}

void InitDefaultsApaStateInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsApaStateInfoImpl);
}

void InitDefaultsUserSelectedParkingSlotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_parking_5fslot_2eproto::InitDefaultsParkingSlotInfo();
  {
    void* ptr = &::autodrive::workflow::proto::_UserSelectedParkingSlot_default_instance_;
    new (ptr) ::autodrive::workflow::proto::UserSelectedParkingSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::UserSelectedParkingSlot::InitAsDefaultInstance();
}

void InitDefaultsUserSelectedParkingSlot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserSelectedParkingSlotImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ApaStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ApaStateInfo, state_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ApaStateInfo, func_stage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::UserSelectedParkingSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::UserSelectedParkingSlot, user_sel_parking_slot_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::UserSelectedParkingSlot, usersel_parking_slot_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::ApaStateInfo)},
  { 7, -1, sizeof(::autodrive::workflow::proto::UserSelectedParkingSlot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ApaStateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_UserSelectedParkingSlot_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "system_type_base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026system_type_base.proto\022\030autodrive.work"
      "flow.proto\032\022parking_slot.proto\"\220\001\n\014ApaSt"
      "ateInfo\022@\n\nstate_type\030\001 \001(\0162,.autodrive."
      "workflow.proto.ApaStateDetailType\022>\n\nfun"
      "c_stage\030\002 \001(\0162*.autodrive.workflow.proto"
      ".ApaFunctionStage\"\227\001\n\027UserSelectedParkin"
      "gSlot\022&\n\036user_sel_parking_slot_received\030"
      "\001 \001(\010\022T\n\024usersel_parking_slot\030\002 \001(\01326.au"
      "todrive.workflow.proto.parking_slot.Park"
      "ingSlotInfo*\236\002\n\020ApaFunctionStage\022\031\n\025kApa"
      "FunctionStageNone\020\000\022\036\n\032kApaFunctionStage"
      "Searching\020\001\022\037\n\033kApaFunctionStagePreParki"
      "ng\020\002\022\034\n\030kApaFunctionStageParking\020\003\022\035\n\031kA"
      "paFunctionStageComplete\020\004\022\032\n\026kApaFunctio"
      "nStageAbort\020\005\022\034\n\030kApaFunctionStageSuspen"
      "d\020\006\022\033\n\027kApaFunctionStageFailed\020\007\022\032\n\026kApa"
      "FunctionStageOther\020\010*\256\004\n\022ApaStateDetailT"
      "ype\022\033\n\027kApaStateDetailTypeNone\020\000\022\032\n\026kApa"
      "StateDetailTypeOff\020\001\022\036\n\032kApaStateDetailT"
      "ypeStandby\020\002\022\035\n\031kApaStateDetailTypeFaile"
      "d\020\003\022\034\n\030kApaStateDetailTypeAbort\020\004\022)\n%kAp"
      "aStateDetailTypeSearchingParkingIn\020\005\022*\n&"
      "kApaStateDetailTypeSearchingParkingOut\020\006"
      "\022#\n\037kApaStateDetailTypePreParkingIn\020\007\022$\n"
      " kApaStateDetailTypePreParkingOut\020\010\022 \n\034k"
      "ApaStateDetailTypeParkingIn\020\t\022!\n\035kApaSta"
      "teDetailTypeParkingOut\020\n\022)\n%kApaStateDet"
      "ailTypeSuspendNotContinue\020\013\022&\n\"kApaState"
      "DetailTypeSuspendContinue\020\014\022\037\n\033kApaState"
      "DetailTypeComplete\020\r\022\'\n#kApaStateDetailT"
      "ypePreParkingSelect\020\016*\221\004\n\022VpaStateDetail"
      "Type\022\016\n\nkStateNone\020\000\022\031\n\025kRequestMapWeakA"
      "ctive\020\001\022\014\n\010kInitMap\020\002\022\026\n\022kBuildMapClicka"
      "ble\020\003\022\024\n\020kMapBuildRunning\020\004\022\025\n\021kMapBuild"
      "Complete\020\005\022\021\n\rkMapBuildExit\020\006\022\027\n\023kMapBui"
      "ldOptimizing\020\007\022\020\n\014kMapBuildApa\020\010\022\026\n\022kMap"
      "BuildDrivePark\020\t\022\031\n\025kRequestVpaWeakActiv"
      "e\020\n\022\014\n\010kInitVpa\020\013\022\026\n\022kStartVpaClickable\020"
      "\014\022\017\n\013kVpaRunning\020\r\022\021\n\rkVpaRandomApa\020\016\022\016\n"
      "\nkVpaFixApa\020\017\022\020\n\014kVpaComplete\020\020\022\014\n\010kVpaE"
      "xit\020\021\022\r\n\tkVpaPause\020\022\022\020\n\014kVpaContinue\020\023\022\024"
      "\n\020kVpaEpsInterrupt\020\024\022\023\n\017kVpaEpsContinue\020"
      "\025\022\t\n\005kDiag\020\026\022\014\n\010kPureApa\020\027\022\014\n\010kPureRpa\020\030"
      "\022\r\n\tkMapPause\020\031\022\020\n\014kMapContinue\020\032*\305\001\n\016Mi"
      "rrFoldStsTyp\022%\n!MirrFoldStsTyp_MirrFoldP"
      "osnUndefd\020\000\022\"\n\036MirrFoldStsTyp_MirrNotFol"
      "dPosn\020\001\022\037\n\033MirrFoldStsTyp_MirrFoldPosn\020\002"
      "\022$\n MirrFoldStsTyp_MirrMovgToNotFold\020\003\022!"
      "\n\035MirrFoldStsTyp_MirrMovgToFold\020\004*d\n\nLoc"
      "kIdType\022\t\n\005KNone\020\000\022\016\n\nKParkingIn\020\001\022\025\n\021KP"
      "arkingOutVision\020\002\022\022\n\016KParkingOutUss\020\003\022\020\n"
      "\014KParkingRSPA\020\004*\204\001\n\014WorkModeType\022\025\n\021KWor"
      "kModeTypeNone\020\000\022\024\n\020KWorkModeTypeVPA\020\001\022\024\n"
      "\020KWorkModeTypeAPA\020\002\022\024\n\020KWorkModeTypeRPA\020"
      "\003\022\033\n\027KWorkModeTypeRPAParkOut\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "system_type_base.proto", &protobuf_RegisterTypes);
  ::protobuf_parking_5fslot_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_system_5ftype_5fbase_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* ApaFunctionStage_descriptor() {
  protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_system_5ftype_5fbase_2eproto::file_level_enum_descriptors[0];
}
bool ApaFunctionStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApaStateDetailType_descriptor() {
  protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_system_5ftype_5fbase_2eproto::file_level_enum_descriptors[1];
}
bool ApaStateDetailType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VpaStateDetailType_descriptor() {
  protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_system_5ftype_5fbase_2eproto::file_level_enum_descriptors[2];
}
bool VpaStateDetailType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MirrFoldStsTyp_descriptor() {
  protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_system_5ftype_5fbase_2eproto::file_level_enum_descriptors[3];
}
bool MirrFoldStsTyp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LockIdType_descriptor() {
  protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_system_5ftype_5fbase_2eproto::file_level_enum_descriptors[4];
}
bool LockIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorkModeType_descriptor() {
  protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_system_5ftype_5fbase_2eproto::file_level_enum_descriptors[5];
}
bool WorkModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ApaStateInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ApaStateInfo::kStateTypeFieldNumber;
const int ApaStateInfo::kFuncStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ApaStateInfo::ApaStateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5ftype_5fbase_2eproto::InitDefaultsApaStateInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ApaStateInfo)
}
ApaStateInfo::ApaStateInfo(const ApaStateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_type_, &from.state_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&func_stage_) -
    reinterpret_cast<char*>(&state_type_)) + sizeof(func_stage_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ApaStateInfo)
}

void ApaStateInfo::SharedCtor() {
  ::memset(&state_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&func_stage_) -
      reinterpret_cast<char*>(&state_type_)) + sizeof(func_stage_));
  _cached_size_ = 0;
}

ApaStateInfo::~ApaStateInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ApaStateInfo)
  SharedDtor();
}

void ApaStateInfo::SharedDtor() {
}

void ApaStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApaStateInfo::descriptor() {
  ::protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5ftype_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ApaStateInfo& ApaStateInfo::default_instance() {
  ::protobuf_system_5ftype_5fbase_2eproto::InitDefaultsApaStateInfo();
  return *internal_default_instance();
}

ApaStateInfo* ApaStateInfo::New(::google::protobuf::Arena* arena) const {
  ApaStateInfo* n = new ApaStateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ApaStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ApaStateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&func_stage_) -
      reinterpret_cast<char*>(&state_type_)) + sizeof(func_stage_));
  _internal_metadata_.Clear();
}

bool ApaStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ApaStateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.ApaStateDetailType state_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state_type(static_cast< ::autodrive::workflow::proto::ApaStateDetailType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ApaFunctionStage func_stage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_func_stage(static_cast< ::autodrive::workflow::proto::ApaFunctionStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ApaStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ApaStateInfo)
  return false;
#undef DO_
}

void ApaStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ApaStateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ApaStateDetailType state_type = 1;
  if (this->state_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state_type(), output);
  }

  // .autodrive.workflow.proto.ApaFunctionStage func_stage = 2;
  if (this->func_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->func_stage(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ApaStateInfo)
}

::google::protobuf::uint8* ApaStateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ApaStateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ApaStateDetailType state_type = 1;
  if (this->state_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state_type(), target);
  }

  // .autodrive.workflow.proto.ApaFunctionStage func_stage = 2;
  if (this->func_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->func_stage(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ApaStateInfo)
  return target;
}

size_t ApaStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ApaStateInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.ApaStateDetailType state_type = 1;
  if (this->state_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state_type());
  }

  // .autodrive.workflow.proto.ApaFunctionStage func_stage = 2;
  if (this->func_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->func_stage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApaStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ApaStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ApaStateInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ApaStateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ApaStateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ApaStateInfo)
    MergeFrom(*source);
  }
}

void ApaStateInfo::MergeFrom(const ApaStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ApaStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state_type() != 0) {
    set_state_type(from.state_type());
  }
  if (from.func_stage() != 0) {
    set_func_stage(from.func_stage());
  }
}

void ApaStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ApaStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApaStateInfo::CopyFrom(const ApaStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ApaStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApaStateInfo::IsInitialized() const {
  return true;
}

void ApaStateInfo::Swap(ApaStateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApaStateInfo::InternalSwap(ApaStateInfo* other) {
  using std::swap;
  swap(state_type_, other->state_type_);
  swap(func_stage_, other->func_stage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ApaStateInfo::GetMetadata() const {
  protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5ftype_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserSelectedParkingSlot::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_UserSelectedParkingSlot_default_instance_._instance.get_mutable()->usersel_parking_slot_ = const_cast< ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo*>(
      ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo::internal_default_instance());
}
void UserSelectedParkingSlot::clear_usersel_parking_slot() {
  if (GetArenaNoVirtual() == NULL && usersel_parking_slot_ != NULL) {
    delete usersel_parking_slot_;
  }
  usersel_parking_slot_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSelectedParkingSlot::kUserSelParkingSlotReceivedFieldNumber;
const int UserSelectedParkingSlot::kUserselParkingSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSelectedParkingSlot::UserSelectedParkingSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_system_5ftype_5fbase_2eproto::InitDefaultsUserSelectedParkingSlot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.UserSelectedParkingSlot)
}
UserSelectedParkingSlot::UserSelectedParkingSlot(const UserSelectedParkingSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_usersel_parking_slot()) {
    usersel_parking_slot_ = new ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo(*from.usersel_parking_slot_);
  } else {
    usersel_parking_slot_ = NULL;
  }
  user_sel_parking_slot_received_ = from.user_sel_parking_slot_received_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.UserSelectedParkingSlot)
}

void UserSelectedParkingSlot::SharedCtor() {
  ::memset(&usersel_parking_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_sel_parking_slot_received_) -
      reinterpret_cast<char*>(&usersel_parking_slot_)) + sizeof(user_sel_parking_slot_received_));
  _cached_size_ = 0;
}

UserSelectedParkingSlot::~UserSelectedParkingSlot() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.UserSelectedParkingSlot)
  SharedDtor();
}

void UserSelectedParkingSlot::SharedDtor() {
  if (this != internal_default_instance()) delete usersel_parking_slot_;
}

void UserSelectedParkingSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSelectedParkingSlot::descriptor() {
  ::protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5ftype_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserSelectedParkingSlot& UserSelectedParkingSlot::default_instance() {
  ::protobuf_system_5ftype_5fbase_2eproto::InitDefaultsUserSelectedParkingSlot();
  return *internal_default_instance();
}

UserSelectedParkingSlot* UserSelectedParkingSlot::New(::google::protobuf::Arena* arena) const {
  UserSelectedParkingSlot* n = new UserSelectedParkingSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserSelectedParkingSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.UserSelectedParkingSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && usersel_parking_slot_ != NULL) {
    delete usersel_parking_slot_;
  }
  usersel_parking_slot_ = NULL;
  user_sel_parking_slot_received_ = false;
  _internal_metadata_.Clear();
}

bool UserSelectedParkingSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.UserSelectedParkingSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool user_sel_parking_slot_received = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_sel_parking_slot_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.parking_slot.ParkingSlotInfo usersel_parking_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_usersel_parking_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.UserSelectedParkingSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.UserSelectedParkingSlot)
  return false;
#undef DO_
}

void UserSelectedParkingSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.UserSelectedParkingSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool user_sel_parking_slot_received = 1;
  if (this->user_sel_parking_slot_received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->user_sel_parking_slot_received(), output);
  }

  // .autodrive.workflow.proto.parking_slot.ParkingSlotInfo usersel_parking_slot = 2;
  if (this->has_usersel_parking_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->usersel_parking_slot_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.UserSelectedParkingSlot)
}

::google::protobuf::uint8* UserSelectedParkingSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.UserSelectedParkingSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool user_sel_parking_slot_received = 1;
  if (this->user_sel_parking_slot_received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->user_sel_parking_slot_received(), target);
  }

  // .autodrive.workflow.proto.parking_slot.ParkingSlotInfo usersel_parking_slot = 2;
  if (this->has_usersel_parking_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->usersel_parking_slot_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.UserSelectedParkingSlot)
  return target;
}

size_t UserSelectedParkingSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.UserSelectedParkingSlot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.parking_slot.ParkingSlotInfo usersel_parking_slot = 2;
  if (this->has_usersel_parking_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->usersel_parking_slot_);
  }

  // bool user_sel_parking_slot_received = 1;
  if (this->user_sel_parking_slot_received() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSelectedParkingSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.UserSelectedParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSelectedParkingSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSelectedParkingSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.UserSelectedParkingSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.UserSelectedParkingSlot)
    MergeFrom(*source);
  }
}

void UserSelectedParkingSlot::MergeFrom(const UserSelectedParkingSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.UserSelectedParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_usersel_parking_slot()) {
    mutable_usersel_parking_slot()->::autodrive::workflow::proto::parking_slot::ParkingSlotInfo::MergeFrom(from.usersel_parking_slot());
  }
  if (from.user_sel_parking_slot_received() != 0) {
    set_user_sel_parking_slot_received(from.user_sel_parking_slot_received());
  }
}

void UserSelectedParkingSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.UserSelectedParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSelectedParkingSlot::CopyFrom(const UserSelectedParkingSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.UserSelectedParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSelectedParkingSlot::IsInitialized() const {
  return true;
}

void UserSelectedParkingSlot::Swap(UserSelectedParkingSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserSelectedParkingSlot::InternalSwap(UserSelectedParkingSlot* other) {
  using std::swap;
  swap(usersel_parking_slot_, other->usersel_parking_slot_);
  swap(user_sel_parking_slot_received_, other->user_sel_parking_slot_received_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserSelectedParkingSlot::GetMetadata() const {
  protobuf_system_5ftype_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_system_5ftype_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
