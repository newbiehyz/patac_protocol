// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_obstacle.proto

#include "dynamic_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class DynamicObstVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DynamicObstVelocity>
      _instance;
} _DynamicObstVelocity_default_instance_;
class DynamicObstAccelerateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DynamicObstAccelerate>
      _instance;
} _DynamicObstAccelerate_default_instance_;
class ObstacleAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleAngle>
      _instance;
} _ObstacleAngle_default_instance_;
class DynamicObstWorldSpaceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DynamicObstWorldSpaceInfo>
      _instance;
} _DynamicObstWorldSpaceInfo_default_instance_;
class DynamicObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DynamicObstacle>
      _instance;
} _DynamicObstacle_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_dynamic_5fobstacle_2eproto {
void InitDefaultsDynamicObstVelocityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_DynamicObstVelocity_default_instance_;
    new (ptr) ::autodrive::workflow::proto::DynamicObstVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::DynamicObstVelocity::InitAsDefaultInstance();
}

void InitDefaultsDynamicObstVelocity() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDynamicObstVelocityImpl);
}

void InitDefaultsDynamicObstAccelerateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_DynamicObstAccelerate_default_instance_;
    new (ptr) ::autodrive::workflow::proto::DynamicObstAccelerate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::DynamicObstAccelerate::InitAsDefaultInstance();
}

void InitDefaultsDynamicObstAccelerate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDynamicObstAccelerateImpl);
}

void InitDefaultsObstacleAngleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_ObstacleAngle_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ObstacleAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ObstacleAngle::InitAsDefaultInstance();
}

void InitDefaultsObstacleAngle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObstacleAngleImpl);
}

void InitDefaultsDynamicObstWorldSpaceInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3f();
  protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstVelocity();
  protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstAccelerate();
  protobuf_dynamic_5fobstacle_2eproto::InitDefaultsObstacleAngle();
  protobuf_perception_5fbase_2eproto::InitDefaultsPolygon();
  {
    void* ptr = &::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::DynamicObstWorldSpaceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::DynamicObstWorldSpaceInfo::InitAsDefaultInstance();
}

void InitDefaultsDynamicObstWorldSpaceInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDynamicObstWorldSpaceInfoImpl);
}

void InitDefaultsDynamicObstacleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsImageSpace();
  protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstWorldSpaceInfo();
  protobuf_perception_5fbase_2eproto::InitDefaultsCategory();
  {
    void* ptr = &::autodrive::workflow::proto::_DynamicObstacle_default_instance_;
    new (ptr) ::autodrive::workflow::proto::DynamicObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::DynamicObstacle::InitAsDefaultInstance();
}

void InitDefaultsDynamicObstacle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDynamicObstacleImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstVelocity, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstVelocity, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstVelocity, vz_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstAccelerate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstAccelerate, ax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstAccelerate, ay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstAccelerate, az_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleAngle, angle_left_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleAngle, angle_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleAngle, angle_middle_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleAngle, angle_middle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleAngle, angle_right_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleAngle, angle_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleAngle, angle_side_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleAngle, angle_side_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, ttc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, vel_abs_world_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, acc_abs_world_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, motion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, motion_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, position_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, visible_side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, motion_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, sigma_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, sigma_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, sigma_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, sigma_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, sigma_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, sigma_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, sigma_yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, head_rear_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, sigma_acc_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, obj_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, lane_assignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, traversable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, poly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, poly_vcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, visible_rect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, rbc_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, sigma_rbc_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, cipv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo, acc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, life_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, cam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, sub_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, img_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, world_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, valid_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, select_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacle, category_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::DynamicObstVelocity)},
  { 8, -1, sizeof(::autodrive::workflow::proto::DynamicObstAccelerate)},
  { 16, -1, sizeof(::autodrive::workflow::proto::ObstacleAngle)},
  { 29, -1, sizeof(::autodrive::workflow::proto::DynamicObstWorldSpaceInfo)},
  { 68, -1, sizeof(::autodrive::workflow::proto::DynamicObstacle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_DynamicObstVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_DynamicObstAccelerate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ObstacleAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_DynamicObstacle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dynamic_obstacle.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026dynamic_obstacle.proto\022\030autodrive.work"
      "flow.proto\032\013basic.proto\032\025perception_base"
      ".proto\"9\n\023DynamicObstVelocity\022\n\n\002vx\030\001 \001("
      "\002\022\n\n\002vy\030\002 \001(\002\022\n\n\002vz\030\003 \001(\002\";\n\025DynamicObst"
      "Accelerate\022\n\n\002ax\030\001 \001(\002\022\n\n\002ay\030\002 \001(\002\022\n\n\002az"
      "\030\003 \001(\002\"\275\001\n\rObstacleAngle\022\024\n\014angle_left_v"
      "\030\001 \001(\002\022\022\n\nangle_left\030\002 \001(\002\022\026\n\016angle_midd"
      "le_v\030\003 \001(\002\022\024\n\014angle_middle\030\004 \001(\002\022\025\n\rangl"
      "e_right_v\030\005 \001(\002\022\023\n\013angle_right\030\006 \001(\002\022\024\n\014"
      "angle_side_v\030\007 \001(\002\022\022\n\nangle_side\030\010 \001(\002\"\352"
      "\n\n\031DynamicObstWorldSpaceInfo\022\013\n\003yaw\030\001 \001("
      "\002\022\016\n\006length\030\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006heig"
      "ht\030\004 \001(\002\0224\n\010position\030\005 \001(\0132\".autodrive.w"
      "orkflow.proto.Vector3f\022\013\n\003ttc\030\006 \001(\002\022D\n\rv"
      "el_abs_world\030\007 \001(\0132-.autodrive.workflow."
      "proto.DynamicObstVelocity\022F\n\racc_abs_wor"
      "ld\030\010 \001(\0132/.autodrive.workflow.proto.Dyna"
      "micObstAccelerate\022L\n\rmotion_status\030\t \001(\016"
      "25.autodrive.workflow.proto.DynamicObsta"
      "cleMotionStatus\022A\n\017motion_category\030\n \001(\016"
      "2(.autodrive.workflow.proto.MotionCatego"
      "ry\022F\n\rposition_type\030\013 \001(\0162/.autodrive.wo"
      "rkflow.proto.OutputObsPositionType\022\020\n\010ya"
      "w_rate\030\014 \001(\002\022;\n\014visible_side\030\r \001(\0162%.aut"
      "odrive.workflow.proto.VisibleSide\022G\n\022mot"
      "ion_orientation\030\016 \001(\0162+.autodrive.workfl"
      "ow.proto.MotionOrientation\022\021\n\tsigma_vel\030"
      "\017 \003(\002\022\021\n\tsigma_yaw\030\020 \001(\002\022\023\n\013sigma_width\030"
      "\021 \001(\002\022\024\n\014sigma_height\030\022 \001(\002\022\024\n\014sigma_len"
      "gth\030\023 \001(\002\022\026\n\016sigma_position\030\024 \003(\002\022\026\n\016sig"
      "ma_yaw_rate\030\025 \001(\002\022\026\n\016head_rear_type\030\026 \001("
      "\005\022\025\n\rsigma_acc_ref\030\027 \003(\002\022:\n\tobj_angle\030\030 "
      "\001(\0132\'.autodrive.workflow.proto.ObstacleA"
      "ngle\022\027\n\017lane_assignment\030\031 \001(\005\022\023\n\013travers"
      "able\030\032 \001(\005\022:\n\003vel\030\033 \001(\0132-.autodrive.work"
      "flow.proto.DynamicObstVelocity\022\?\n\004poly\030\034"
      " \001(\01321.autodrive.workflow.proto.percepti"
      "on_base.Polygon\022C\n\010poly_vcs\030\035 \001(\01321.auto"
      "drive.workflow.proto.perception_base.Pol"
      "ygon\022;\n\014visible_rect\030\036 \001(\0162%.autodrive.w"
      "orkflow.proto.VisibleRect\0228\n\014rbc_positio"
      "n\030\037 \001(\0132\".autodrive.workflow.proto.Vecto"
      "r3f\022\032\n\022sigma_rbc_position\030  \003(\002\022\014\n\004cipv\030"
      "! \001(\005\022<\n\003acc\030\" \001(\0132/.autodrive.workflow."
      "proto.DynamicObstAccelerate\"\346\003\n\017DynamicO"
      "bstacle\022\n\n\002id\030\001 \001(\r\022\021\n\tlife_time\030\002 \001(\005\022\016"
      "\n\006cam_id\030\003 \001(\005\022;\n\004type\030\004 \001(\0162-.autodrive"
      ".workflow.proto.DynamicObstacleType\0227\n\010s"
      "ub_type\030\005 \001(\0162%.autodrive.workflow.proto"
      ".VehicleType\022\022\n\ntime_stamp\030\006 \001(\003\022\014\n\004conf"
      "\030\007 \001(\002\022\013\n\003age\030\010 \001(\r\022F\n\010img_info\030\t \001(\01324."
      "autodrive.workflow.proto.perception_base"
      ".ImageSpace\022G\n\nworld_info\030\n \001(\01323.autodr"
      "ive.workflow.proto.DynamicObstWorldSpace"
      "Info\022\022\n\nvalid_info\030\013 \001(\005\022\024\n\014select_level"
      "\030\014 \001(\005\022D\n\010category\030\r \003(\01322.autodrive.wor"
      "kflow.proto.perception_base.Category*\273\001\n"
      "\023DynamicObstacleType\022\034\n\030kObstacleTypeVeh"
      "icleRear\020\000\022\034\n\030kObstacleTypeVehicleFull\020\001"
      "\022\033\n\027kObstacleTypePedestrian\020\002\022\030\n\024kObstac"
      "leTypeCyclist\020\022\022\027\n\023kObstacleTypeAnimal\020\034"
      "\022\030\n\024kObstacleTypeUnknown\0202*\310\002\n\013VehicleTy"
      "pe\022\027\n\023kVehicleTypeUnknown\020\000\022\023\n\017kVehicleT"
      "ypeCar\020\001\022\023\n\017kVehicleTypeSUV\020\002\022\023\n\017kVehicl"
      "eTypeVan\020\003\022\023\n\017kVehicleTypeBus\020\004\022\025\n\021kVehi"
      "cleTypeTruck\020\005\022\031\n\025kVehicleTypeAmbulance\020"
      "\006\022\031\n\025kVehicleTypePoliceCar\020\007\022\031\n\025kVehicle"
      "TypeFireTruck\020\010\022\030\n\024kVehicleTypeTricycle\020"
      "\t\022\032\n\026kVehicleTypeSpecialCar\020\n\022\027\n\023kVehicl"
      "eTypeTinyCar\020\013\022\025\n\021kVehicleTypeMotor\020\014*\333\001"
      "\n\033DynamicObstacleMotionStatus\022\030\n\024kMotion"
      "StatusInvalid\020\000\022\030\n\024kMotionStatusUnknown\020"
      "\001\022\027\n\023kMotionStatusMoving\020\002\022\033\n\027kMotionSta"
      "tusStationary\020\003\022\030\n\024kMotionStatusStopped\020"
      "\004\022\035\n\031kMotionStatusMovingSlowly\020\005\022\031\n\025kMot"
      "ionStatusEnumSize\020\006*\314\003\n\016MotionCategory\022\032"
      "\n\026kMotionCategoryInvalid\020\000\022\034\n\030kMotionCat"
      "egoryUndefined\020\001\022\032\n\026kMotionCategoryPassi"
      "ng\020\002\022\034\n\030kMotionCategoryPassingIn\020\003\022\035\n\031kM"
      "otionCategoryPassingOut\020\004\022\035\n\031kMotionCate"
      "goryCloseCutIn\020\005\022\033\n\027kMotionCategoryMovin"
      "gIn\020\006\022\034\n\030kMotionCategoryMovingOut\020\007\022\033\n\027k"
      "MotionCategoryCrossing\020\010\022\035\n\031kMotionCateg"
      "oryLeftTurnAP\020\t\022\036\n\032kMotionCategoryRightT"
      "urnAP\020\n\022\031\n\025kMotionCategoryMoving\020\013\022\034\n\030kM"
      "otionCategoryPreceding\020\014\022\033\n\027kMotionCateg"
      "oryOncoming\020\r\022\033\n\027kMotionCategoryEnumSize"
      "\020\016*\332\002\n\021MotionOrientation\022\037\n\033kMotionOrien"
      "tationUndefined\020\000\022#\n\037kMotionOrientationD"
      "riftingRight\020\001\022#\n\037kMotionOrientationCros"
      "singRight\020\002\022(\n$kMotionOrientationOncomin"
      "gDriftRight\020\003\022\036\n\032kMotionOrientationOncom"
      "ing\020\004\022\'\n#kMotionOrientationOncomingDrift"
      "Left\020\005\022\"\n\036kMotionOrientationCrossingLeft"
      "\020\006\022\"\n\036kMotionOrientationDriftingLeft\020\007\022\037"
      "\n\033kMotionOrientationPreceding\020\010*S\n\013Visib"
      "leSide\022\027\n\023kVisibleSideUnknown\020\000\022\025\n\021kVisi"
      "bleSideRight\020\001\022\024\n\020kVisibleSideLeft\020\002*S\n\013"
      "VisibleRect\022\027\n\023kVisibleRectUnknown\020\000\022\025\n\021"
      "kVisibleRectFront\020\001\022\024\n\020kVisibleRectBack\020"
      "\002*\274\003\n\025OutputObsPositionType\022&\n\"kOutputOb"
      "sPositionTypeUnknownPoint\020\000\022\'\n#kOutputOb"
      "sPositionTypeRearLeftPoint\020\001\022)\n%kOutputO"
      "bsPositionTypeRearCenterPoint\020\002\022(\n$kOutp"
      "utObsPositionTypeRearRightPoint\020\003\022(\n$kOu"
      "tputObsPositionTypeFrontLeftPoint\020\004\022*\n&k"
      "OutputObsPositionTypeFrontCenterPoint\020\005\022"
      ")\n%kOutputObsPositionTypeFrontRightPoint"
      "\020\006\022)\n%kOutputObsPositionTypeLeftCenterPo"
      "int\020\007\022*\n&kOutputObsPositionTypeRightCent"
      "erPoint\020\010\022%\n!kOutputObsPositionTypeCente"
      "rPoint\020\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dynamic_obstacle.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dynamic_5fobstacle_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* DynamicObstacleType_descriptor() {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynamic_5fobstacle_2eproto::file_level_enum_descriptors[0];
}
bool DynamicObstacleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 18:
    case 28:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VehicleType_descriptor() {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynamic_5fobstacle_2eproto::file_level_enum_descriptors[1];
}
bool VehicleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DynamicObstacleMotionStatus_descriptor() {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynamic_5fobstacle_2eproto::file_level_enum_descriptors[2];
}
bool DynamicObstacleMotionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotionCategory_descriptor() {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynamic_5fobstacle_2eproto::file_level_enum_descriptors[3];
}
bool MotionCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotionOrientation_descriptor() {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynamic_5fobstacle_2eproto::file_level_enum_descriptors[4];
}
bool MotionOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VisibleSide_descriptor() {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynamic_5fobstacle_2eproto::file_level_enum_descriptors[5];
}
bool VisibleSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VisibleRect_descriptor() {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynamic_5fobstacle_2eproto::file_level_enum_descriptors[6];
}
bool VisibleRect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OutputObsPositionType_descriptor() {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynamic_5fobstacle_2eproto::file_level_enum_descriptors[7];
}
bool OutputObsPositionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DynamicObstVelocity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicObstVelocity::kVxFieldNumber;
const int DynamicObstVelocity::kVyFieldNumber;
const int DynamicObstVelocity::kVzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicObstVelocity::DynamicObstVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstVelocity();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.DynamicObstVelocity)
}
DynamicObstVelocity::DynamicObstVelocity(const DynamicObstVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vx_, &from.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(vz_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.DynamicObstVelocity)
}

void DynamicObstVelocity::SharedCtor() {
  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vz_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(vz_));
  _cached_size_ = 0;
}

DynamicObstVelocity::~DynamicObstVelocity() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.DynamicObstVelocity)
  SharedDtor();
}

void DynamicObstVelocity::SharedDtor() {
}

void DynamicObstVelocity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicObstVelocity::descriptor() {
  ::protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DynamicObstVelocity& DynamicObstVelocity::default_instance() {
  ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstVelocity();
  return *internal_default_instance();
}

DynamicObstVelocity* DynamicObstVelocity::New(::google::protobuf::Arena* arena) const {
  DynamicObstVelocity* n = new DynamicObstVelocity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamicObstVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.DynamicObstVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vz_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(vz_));
  _internal_metadata_.Clear();
}

bool DynamicObstVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.DynamicObstVelocity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float vx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.DynamicObstVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.DynamicObstVelocity)
  return false;
#undef DO_
}

void DynamicObstVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.DynamicObstVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vx = 1;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->vx(), output);
  }

  // float vy = 2;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vy(), output);
  }

  // float vz = 3;
  if (this->vz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->vz(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.DynamicObstVelocity)
}

::google::protobuf::uint8* DynamicObstVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.DynamicObstVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vx = 1;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->vx(), target);
  }

  // float vy = 2;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vy(), target);
  }

  // float vz = 3;
  if (this->vz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->vz(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.DynamicObstVelocity)
  return target;
}

size_t DynamicObstVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.DynamicObstVelocity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float vx = 1;
  if (this->vx() != 0) {
    total_size += 1 + 4;
  }

  // float vy = 2;
  if (this->vy() != 0) {
    total_size += 1 + 4;
  }

  // float vz = 3;
  if (this->vz() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicObstVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.DynamicObstVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicObstVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.DynamicObstVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.DynamicObstVelocity)
    MergeFrom(*source);
  }
}

void DynamicObstVelocity::MergeFrom(const DynamicObstVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.DynamicObstVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.vz() != 0) {
    set_vz(from.vz());
  }
}

void DynamicObstVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.DynamicObstVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstVelocity::CopyFrom(const DynamicObstVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.DynamicObstVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstVelocity::IsInitialized() const {
  return true;
}

void DynamicObstVelocity::Swap(DynamicObstVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicObstVelocity::InternalSwap(DynamicObstVelocity* other) {
  using std::swap;
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(vz_, other->vz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicObstVelocity::GetMetadata() const {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DynamicObstAccelerate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicObstAccelerate::kAxFieldNumber;
const int DynamicObstAccelerate::kAyFieldNumber;
const int DynamicObstAccelerate::kAzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicObstAccelerate::DynamicObstAccelerate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstAccelerate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.DynamicObstAccelerate)
}
DynamicObstAccelerate::DynamicObstAccelerate(const DynamicObstAccelerate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ax_, &from.ax_,
    static_cast<size_t>(reinterpret_cast<char*>(&az_) -
    reinterpret_cast<char*>(&ax_)) + sizeof(az_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.DynamicObstAccelerate)
}

void DynamicObstAccelerate::SharedCtor() {
  ::memset(&ax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&az_) -
      reinterpret_cast<char*>(&ax_)) + sizeof(az_));
  _cached_size_ = 0;
}

DynamicObstAccelerate::~DynamicObstAccelerate() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.DynamicObstAccelerate)
  SharedDtor();
}

void DynamicObstAccelerate::SharedDtor() {
}

void DynamicObstAccelerate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicObstAccelerate::descriptor() {
  ::protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DynamicObstAccelerate& DynamicObstAccelerate::default_instance() {
  ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstAccelerate();
  return *internal_default_instance();
}

DynamicObstAccelerate* DynamicObstAccelerate::New(::google::protobuf::Arena* arena) const {
  DynamicObstAccelerate* n = new DynamicObstAccelerate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamicObstAccelerate::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.DynamicObstAccelerate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&az_) -
      reinterpret_cast<char*>(&ax_)) + sizeof(az_));
  _internal_metadata_.Clear();
}

bool DynamicObstAccelerate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.DynamicObstAccelerate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float ax = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float az = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &az_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.DynamicObstAccelerate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.DynamicObstAccelerate)
  return false;
#undef DO_
}

void DynamicObstAccelerate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.DynamicObstAccelerate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ax = 1;
  if (this->ax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ax(), output);
  }

  // float ay = 2;
  if (this->ay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ay(), output);
  }

  // float az = 3;
  if (this->az() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->az(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.DynamicObstAccelerate)
}

::google::protobuf::uint8* DynamicObstAccelerate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.DynamicObstAccelerate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ax = 1;
  if (this->ax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ax(), target);
  }

  // float ay = 2;
  if (this->ay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ay(), target);
  }

  // float az = 3;
  if (this->az() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->az(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.DynamicObstAccelerate)
  return target;
}

size_t DynamicObstAccelerate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.DynamicObstAccelerate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float ax = 1;
  if (this->ax() != 0) {
    total_size += 1 + 4;
  }

  // float ay = 2;
  if (this->ay() != 0) {
    total_size += 1 + 4;
  }

  // float az = 3;
  if (this->az() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicObstAccelerate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.DynamicObstAccelerate)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstAccelerate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicObstAccelerate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.DynamicObstAccelerate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.DynamicObstAccelerate)
    MergeFrom(*source);
  }
}

void DynamicObstAccelerate::MergeFrom(const DynamicObstAccelerate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.DynamicObstAccelerate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ax() != 0) {
    set_ax(from.ax());
  }
  if (from.ay() != 0) {
    set_ay(from.ay());
  }
  if (from.az() != 0) {
    set_az(from.az());
  }
}

void DynamicObstAccelerate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.DynamicObstAccelerate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstAccelerate::CopyFrom(const DynamicObstAccelerate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.DynamicObstAccelerate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstAccelerate::IsInitialized() const {
  return true;
}

void DynamicObstAccelerate::Swap(DynamicObstAccelerate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicObstAccelerate::InternalSwap(DynamicObstAccelerate* other) {
  using std::swap;
  swap(ax_, other->ax_);
  swap(ay_, other->ay_);
  swap(az_, other->az_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicObstAccelerate::GetMetadata() const {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleAngle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleAngle::kAngleLeftVFieldNumber;
const int ObstacleAngle::kAngleLeftFieldNumber;
const int ObstacleAngle::kAngleMiddleVFieldNumber;
const int ObstacleAngle::kAngleMiddleFieldNumber;
const int ObstacleAngle::kAngleRightVFieldNumber;
const int ObstacleAngle::kAngleRightFieldNumber;
const int ObstacleAngle::kAngleSideVFieldNumber;
const int ObstacleAngle::kAngleSideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleAngle::ObstacleAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsObstacleAngle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ObstacleAngle)
}
ObstacleAngle::ObstacleAngle(const ObstacleAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angle_left_v_, &from.angle_left_v_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_side_) -
    reinterpret_cast<char*>(&angle_left_v_)) + sizeof(angle_side_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ObstacleAngle)
}

void ObstacleAngle::SharedCtor() {
  ::memset(&angle_left_v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_side_) -
      reinterpret_cast<char*>(&angle_left_v_)) + sizeof(angle_side_));
  _cached_size_ = 0;
}

ObstacleAngle::~ObstacleAngle() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ObstacleAngle)
  SharedDtor();
}

void ObstacleAngle::SharedDtor() {
}

void ObstacleAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleAngle::descriptor() {
  ::protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleAngle& ObstacleAngle::default_instance() {
  ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsObstacleAngle();
  return *internal_default_instance();
}

ObstacleAngle* ObstacleAngle::New(::google::protobuf::Arena* arena) const {
  ObstacleAngle* n = new ObstacleAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ObstacleAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_left_v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_side_) -
      reinterpret_cast<char*>(&angle_left_v_)) + sizeof(angle_side_));
  _internal_metadata_.Clear();
}

bool ObstacleAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ObstacleAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float angle_left_v = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_left_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_middle_v = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_middle_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_middle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_middle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_right_v = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_right_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_right = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_side_v = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_side_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_side = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ObstacleAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ObstacleAngle)
  return false;
#undef DO_
}

void ObstacleAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ObstacleAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle_left_v = 1;
  if (this->angle_left_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle_left_v(), output);
  }

  // float angle_left = 2;
  if (this->angle_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle_left(), output);
  }

  // float angle_middle_v = 3;
  if (this->angle_middle_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_middle_v(), output);
  }

  // float angle_middle = 4;
  if (this->angle_middle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle_middle(), output);
  }

  // float angle_right_v = 5;
  if (this->angle_right_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angle_right_v(), output);
  }

  // float angle_right = 6;
  if (this->angle_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->angle_right(), output);
  }

  // float angle_side_v = 7;
  if (this->angle_side_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->angle_side_v(), output);
  }

  // float angle_side = 8;
  if (this->angle_side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->angle_side(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ObstacleAngle)
}

::google::protobuf::uint8* ObstacleAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ObstacleAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle_left_v = 1;
  if (this->angle_left_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle_left_v(), target);
  }

  // float angle_left = 2;
  if (this->angle_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle_left(), target);
  }

  // float angle_middle_v = 3;
  if (this->angle_middle_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_middle_v(), target);
  }

  // float angle_middle = 4;
  if (this->angle_middle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle_middle(), target);
  }

  // float angle_right_v = 5;
  if (this->angle_right_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angle_right_v(), target);
  }

  // float angle_right = 6;
  if (this->angle_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->angle_right(), target);
  }

  // float angle_side_v = 7;
  if (this->angle_side_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->angle_side_v(), target);
  }

  // float angle_side = 8;
  if (this->angle_side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->angle_side(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ObstacleAngle)
  return target;
}

size_t ObstacleAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ObstacleAngle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float angle_left_v = 1;
  if (this->angle_left_v() != 0) {
    total_size += 1 + 4;
  }

  // float angle_left = 2;
  if (this->angle_left() != 0) {
    total_size += 1 + 4;
  }

  // float angle_middle_v = 3;
  if (this->angle_middle_v() != 0) {
    total_size += 1 + 4;
  }

  // float angle_middle = 4;
  if (this->angle_middle() != 0) {
    total_size += 1 + 4;
  }

  // float angle_right_v = 5;
  if (this->angle_right_v() != 0) {
    total_size += 1 + 4;
  }

  // float angle_right = 6;
  if (this->angle_right() != 0) {
    total_size += 1 + 4;
  }

  // float angle_side_v = 7;
  if (this->angle_side_v() != 0) {
    total_size += 1 + 4;
  }

  // float angle_side = 8;
  if (this->angle_side() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ObstacleAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ObstacleAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ObstacleAngle)
    MergeFrom(*source);
  }
}

void ObstacleAngle::MergeFrom(const ObstacleAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ObstacleAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.angle_left_v() != 0) {
    set_angle_left_v(from.angle_left_v());
  }
  if (from.angle_left() != 0) {
    set_angle_left(from.angle_left());
  }
  if (from.angle_middle_v() != 0) {
    set_angle_middle_v(from.angle_middle_v());
  }
  if (from.angle_middle() != 0) {
    set_angle_middle(from.angle_middle());
  }
  if (from.angle_right_v() != 0) {
    set_angle_right_v(from.angle_right_v());
  }
  if (from.angle_right() != 0) {
    set_angle_right(from.angle_right());
  }
  if (from.angle_side_v() != 0) {
    set_angle_side_v(from.angle_side_v());
  }
  if (from.angle_side() != 0) {
    set_angle_side(from.angle_side());
  }
}

void ObstacleAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ObstacleAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleAngle::CopyFrom(const ObstacleAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ObstacleAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleAngle::IsInitialized() const {
  return true;
}

void ObstacleAngle::Swap(ObstacleAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleAngle::InternalSwap(ObstacleAngle* other) {
  using std::swap;
  swap(angle_left_v_, other->angle_left_v_);
  swap(angle_left_, other->angle_left_);
  swap(angle_middle_v_, other->angle_middle_v_);
  swap(angle_middle_, other->angle_middle_);
  swap(angle_right_v_, other->angle_right_v_);
  swap(angle_right_, other->angle_right_);
  swap(angle_side_v_, other->angle_side_v_);
  swap(angle_side_, other->angle_side_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleAngle::GetMetadata() const {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DynamicObstWorldSpaceInfo::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_._instance.get_mutable()->position_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_._instance.get_mutable()->vel_abs_world_ = const_cast< ::autodrive::workflow::proto::DynamicObstVelocity*>(
      ::autodrive::workflow::proto::DynamicObstVelocity::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_._instance.get_mutable()->acc_abs_world_ = const_cast< ::autodrive::workflow::proto::DynamicObstAccelerate*>(
      ::autodrive::workflow::proto::DynamicObstAccelerate::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_._instance.get_mutable()->obj_angle_ = const_cast< ::autodrive::workflow::proto::ObstacleAngle*>(
      ::autodrive::workflow::proto::ObstacleAngle::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_._instance.get_mutable()->vel_ = const_cast< ::autodrive::workflow::proto::DynamicObstVelocity*>(
      ::autodrive::workflow::proto::DynamicObstVelocity::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_._instance.get_mutable()->poly_ = const_cast< ::autodrive::workflow::proto::perception_base::Polygon*>(
      ::autodrive::workflow::proto::perception_base::Polygon::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_._instance.get_mutable()->poly_vcs_ = const_cast< ::autodrive::workflow::proto::perception_base::Polygon*>(
      ::autodrive::workflow::proto::perception_base::Polygon::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_._instance.get_mutable()->rbc_position_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstWorldSpaceInfo_default_instance_._instance.get_mutable()->acc_ = const_cast< ::autodrive::workflow::proto::DynamicObstAccelerate*>(
      ::autodrive::workflow::proto::DynamicObstAccelerate::internal_default_instance());
}
void DynamicObstWorldSpaceInfo::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void DynamicObstWorldSpaceInfo::clear_poly() {
  if (GetArenaNoVirtual() == NULL && poly_ != NULL) {
    delete poly_;
  }
  poly_ = NULL;
}
void DynamicObstWorldSpaceInfo::clear_poly_vcs() {
  if (GetArenaNoVirtual() == NULL && poly_vcs_ != NULL) {
    delete poly_vcs_;
  }
  poly_vcs_ = NULL;
}
void DynamicObstWorldSpaceInfo::clear_rbc_position() {
  if (GetArenaNoVirtual() == NULL && rbc_position_ != NULL) {
    delete rbc_position_;
  }
  rbc_position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicObstWorldSpaceInfo::kYawFieldNumber;
const int DynamicObstWorldSpaceInfo::kLengthFieldNumber;
const int DynamicObstWorldSpaceInfo::kWidthFieldNumber;
const int DynamicObstWorldSpaceInfo::kHeightFieldNumber;
const int DynamicObstWorldSpaceInfo::kPositionFieldNumber;
const int DynamicObstWorldSpaceInfo::kTtcFieldNumber;
const int DynamicObstWorldSpaceInfo::kVelAbsWorldFieldNumber;
const int DynamicObstWorldSpaceInfo::kAccAbsWorldFieldNumber;
const int DynamicObstWorldSpaceInfo::kMotionStatusFieldNumber;
const int DynamicObstWorldSpaceInfo::kMotionCategoryFieldNumber;
const int DynamicObstWorldSpaceInfo::kPositionTypeFieldNumber;
const int DynamicObstWorldSpaceInfo::kYawRateFieldNumber;
const int DynamicObstWorldSpaceInfo::kVisibleSideFieldNumber;
const int DynamicObstWorldSpaceInfo::kMotionOrientationFieldNumber;
const int DynamicObstWorldSpaceInfo::kSigmaVelFieldNumber;
const int DynamicObstWorldSpaceInfo::kSigmaYawFieldNumber;
const int DynamicObstWorldSpaceInfo::kSigmaWidthFieldNumber;
const int DynamicObstWorldSpaceInfo::kSigmaHeightFieldNumber;
const int DynamicObstWorldSpaceInfo::kSigmaLengthFieldNumber;
const int DynamicObstWorldSpaceInfo::kSigmaPositionFieldNumber;
const int DynamicObstWorldSpaceInfo::kSigmaYawRateFieldNumber;
const int DynamicObstWorldSpaceInfo::kHeadRearTypeFieldNumber;
const int DynamicObstWorldSpaceInfo::kSigmaAccRefFieldNumber;
const int DynamicObstWorldSpaceInfo::kObjAngleFieldNumber;
const int DynamicObstWorldSpaceInfo::kLaneAssignmentFieldNumber;
const int DynamicObstWorldSpaceInfo::kTraversableFieldNumber;
const int DynamicObstWorldSpaceInfo::kVelFieldNumber;
const int DynamicObstWorldSpaceInfo::kPolyFieldNumber;
const int DynamicObstWorldSpaceInfo::kPolyVcsFieldNumber;
const int DynamicObstWorldSpaceInfo::kVisibleRectFieldNumber;
const int DynamicObstWorldSpaceInfo::kRbcPositionFieldNumber;
const int DynamicObstWorldSpaceInfo::kSigmaRbcPositionFieldNumber;
const int DynamicObstWorldSpaceInfo::kCipvFieldNumber;
const int DynamicObstWorldSpaceInfo::kAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicObstWorldSpaceInfo::DynamicObstWorldSpaceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstWorldSpaceInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
}
DynamicObstWorldSpaceInfo::DynamicObstWorldSpaceInfo(const DynamicObstWorldSpaceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sigma_vel_(from.sigma_vel_),
      sigma_position_(from.sigma_position_),
      sigma_acc_ref_(from.sigma_acc_ref_),
      sigma_rbc_position_(from.sigma_rbc_position_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::autodrive::workflow::proto::Vector3f(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_vel_abs_world()) {
    vel_abs_world_ = new ::autodrive::workflow::proto::DynamicObstVelocity(*from.vel_abs_world_);
  } else {
    vel_abs_world_ = NULL;
  }
  if (from.has_acc_abs_world()) {
    acc_abs_world_ = new ::autodrive::workflow::proto::DynamicObstAccelerate(*from.acc_abs_world_);
  } else {
    acc_abs_world_ = NULL;
  }
  if (from.has_obj_angle()) {
    obj_angle_ = new ::autodrive::workflow::proto::ObstacleAngle(*from.obj_angle_);
  } else {
    obj_angle_ = NULL;
  }
  if (from.has_vel()) {
    vel_ = new ::autodrive::workflow::proto::DynamicObstVelocity(*from.vel_);
  } else {
    vel_ = NULL;
  }
  if (from.has_poly()) {
    poly_ = new ::autodrive::workflow::proto::perception_base::Polygon(*from.poly_);
  } else {
    poly_ = NULL;
  }
  if (from.has_poly_vcs()) {
    poly_vcs_ = new ::autodrive::workflow::proto::perception_base::Polygon(*from.poly_vcs_);
  } else {
    poly_vcs_ = NULL;
  }
  if (from.has_rbc_position()) {
    rbc_position_ = new ::autodrive::workflow::proto::Vector3f(*from.rbc_position_);
  } else {
    rbc_position_ = NULL;
  }
  if (from.has_acc()) {
    acc_ = new ::autodrive::workflow::proto::DynamicObstAccelerate(*from.acc_);
  } else {
    acc_ = NULL;
  }
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&cipv_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(cipv_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
}

void DynamicObstWorldSpaceInfo::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cipv_) -
      reinterpret_cast<char*>(&position_)) + sizeof(cipv_));
  _cached_size_ = 0;
}

DynamicObstWorldSpaceInfo::~DynamicObstWorldSpaceInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  SharedDtor();
}

void DynamicObstWorldSpaceInfo::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete vel_abs_world_;
  if (this != internal_default_instance()) delete acc_abs_world_;
  if (this != internal_default_instance()) delete obj_angle_;
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete poly_;
  if (this != internal_default_instance()) delete poly_vcs_;
  if (this != internal_default_instance()) delete rbc_position_;
  if (this != internal_default_instance()) delete acc_;
}

void DynamicObstWorldSpaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicObstWorldSpaceInfo::descriptor() {
  ::protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DynamicObstWorldSpaceInfo& DynamicObstWorldSpaceInfo::default_instance() {
  ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstWorldSpaceInfo();
  return *internal_default_instance();
}

DynamicObstWorldSpaceInfo* DynamicObstWorldSpaceInfo::New(::google::protobuf::Arena* arena) const {
  DynamicObstWorldSpaceInfo* n = new DynamicObstWorldSpaceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamicObstWorldSpaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sigma_vel_.Clear();
  sigma_position_.Clear();
  sigma_acc_ref_.Clear();
  sigma_rbc_position_.Clear();
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && vel_abs_world_ != NULL) {
    delete vel_abs_world_;
  }
  vel_abs_world_ = NULL;
  if (GetArenaNoVirtual() == NULL && acc_abs_world_ != NULL) {
    delete acc_abs_world_;
  }
  acc_abs_world_ = NULL;
  if (GetArenaNoVirtual() == NULL && obj_angle_ != NULL) {
    delete obj_angle_;
  }
  obj_angle_ = NULL;
  if (GetArenaNoVirtual() == NULL && vel_ != NULL) {
    delete vel_;
  }
  vel_ = NULL;
  if (GetArenaNoVirtual() == NULL && poly_ != NULL) {
    delete poly_;
  }
  poly_ = NULL;
  if (GetArenaNoVirtual() == NULL && poly_vcs_ != NULL) {
    delete poly_vcs_;
  }
  poly_vcs_ = NULL;
  if (GetArenaNoVirtual() == NULL && rbc_position_ != NULL) {
    delete rbc_position_;
  }
  rbc_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && acc_ != NULL) {
    delete acc_;
  }
  acc_ = NULL;
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cipv_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(cipv_));
  _internal_metadata_.Clear();
}

bool DynamicObstWorldSpaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float yaw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ttc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ttc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.DynamicObstVelocity vel_abs_world = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vel_abs_world()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.DynamicObstAccelerate acc_abs_world = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acc_abs_world()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.DynamicObstacleMotionStatus motion_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_status(static_cast< ::autodrive::workflow::proto::DynamicObstacleMotionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MotionCategory motion_category = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_category(static_cast< ::autodrive::workflow::proto::MotionCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.OutputObsPositionType position_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position_type(static_cast< ::autodrive::workflow::proto::OutputObsPositionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VisibleSide visible_side = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_visible_side(static_cast< ::autodrive::workflow::proto::VisibleSide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MotionOrientation motion_orientation = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_orientation(static_cast< ::autodrive::workflow::proto::MotionOrientation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sigma_vel = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sigma_vel())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 122u, input, this->mutable_sigma_vel())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sigma_yaw = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sigma_width = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sigma_height = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sigma_length = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sigma_position = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sigma_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162u, input, this->mutable_sigma_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sigma_yaw_rate = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 head_rear_type = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_rear_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sigma_acc_ref = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sigma_acc_ref())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 186u, input, this->mutable_sigma_acc_ref())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ObstacleAngle obj_angle = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obj_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_assignment = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_assignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 traversable = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traversable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.DynamicObstVelocity vel = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Polygon poly = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_poly()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Polygon poly_vcs = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_poly_vcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VisibleRect visible_rect = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_visible_rect(static_cast< ::autodrive::workflow::proto::VisibleRect >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f rbc_position = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rbc_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sigma_rbc_position = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sigma_rbc_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 258u, input, this->mutable_sigma_rbc_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cipv = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cipv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.DynamicObstAccelerate acc = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  return false;
#undef DO_
}

void DynamicObstWorldSpaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float yaw = 1;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->yaw(), output);
  }

  // float length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->length(), output);
  }

  // float width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // float height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // .autodrive.workflow.proto.Vector3f position = 5;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->position_, output);
  }

  // float ttc = 6;
  if (this->ttc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ttc(), output);
  }

  // .autodrive.workflow.proto.DynamicObstVelocity vel_abs_world = 7;
  if (this->has_vel_abs_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->vel_abs_world_, output);
  }

  // .autodrive.workflow.proto.DynamicObstAccelerate acc_abs_world = 8;
  if (this->has_acc_abs_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->acc_abs_world_, output);
  }

  // .autodrive.workflow.proto.DynamicObstacleMotionStatus motion_status = 9;
  if (this->motion_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->motion_status(), output);
  }

  // .autodrive.workflow.proto.MotionCategory motion_category = 10;
  if (this->motion_category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->motion_category(), output);
  }

  // .autodrive.workflow.proto.OutputObsPositionType position_type = 11;
  if (this->position_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->position_type(), output);
  }

  // float yaw_rate = 12;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->yaw_rate(), output);
  }

  // .autodrive.workflow.proto.VisibleSide visible_side = 13;
  if (this->visible_side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->visible_side(), output);
  }

  // .autodrive.workflow.proto.MotionOrientation motion_orientation = 14;
  if (this->motion_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->motion_orientation(), output);
  }

  // repeated float sigma_vel = 15;
  if (this->sigma_vel_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sigma_vel_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->sigma_vel().data(), this->sigma_vel_size(), output);
  }

  // float sigma_yaw = 16;
  if (this->sigma_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->sigma_yaw(), output);
  }

  // float sigma_width = 17;
  if (this->sigma_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->sigma_width(), output);
  }

  // float sigma_height = 18;
  if (this->sigma_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->sigma_height(), output);
  }

  // float sigma_length = 19;
  if (this->sigma_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->sigma_length(), output);
  }

  // repeated float sigma_position = 20;
  if (this->sigma_position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sigma_position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->sigma_position().data(), this->sigma_position_size(), output);
  }

  // float sigma_yaw_rate = 21;
  if (this->sigma_yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->sigma_yaw_rate(), output);
  }

  // int32 head_rear_type = 22;
  if (this->head_rear_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->head_rear_type(), output);
  }

  // repeated float sigma_acc_ref = 23;
  if (this->sigma_acc_ref_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sigma_acc_ref_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->sigma_acc_ref().data(), this->sigma_acc_ref_size(), output);
  }

  // .autodrive.workflow.proto.ObstacleAngle obj_angle = 24;
  if (this->has_obj_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->obj_angle_, output);
  }

  // int32 lane_assignment = 25;
  if (this->lane_assignment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->lane_assignment(), output);
  }

  // int32 traversable = 26;
  if (this->traversable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->traversable(), output);
  }

  // .autodrive.workflow.proto.DynamicObstVelocity vel = 27;
  if (this->has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->vel_, output);
  }

  // .autodrive.workflow.proto.perception_base.Polygon poly = 28;
  if (this->has_poly()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->poly_, output);
  }

  // .autodrive.workflow.proto.perception_base.Polygon poly_vcs = 29;
  if (this->has_poly_vcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->poly_vcs_, output);
  }

  // .autodrive.workflow.proto.VisibleRect visible_rect = 30;
  if (this->visible_rect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->visible_rect(), output);
  }

  // .autodrive.workflow.proto.Vector3f rbc_position = 31;
  if (this->has_rbc_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->rbc_position_, output);
  }

  // repeated float sigma_rbc_position = 32;
  if (this->sigma_rbc_position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(32, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sigma_rbc_position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->sigma_rbc_position().data(), this->sigma_rbc_position_size(), output);
  }

  // int32 cipv = 33;
  if (this->cipv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->cipv(), output);
  }

  // .autodrive.workflow.proto.DynamicObstAccelerate acc = 34;
  if (this->has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->acc_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
}

::google::protobuf::uint8* DynamicObstWorldSpaceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float yaw = 1;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->yaw(), target);
  }

  // float length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->length(), target);
  }

  // float width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // float height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // .autodrive.workflow.proto.Vector3f position = 5;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->position_, deterministic, target);
  }

  // float ttc = 6;
  if (this->ttc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ttc(), target);
  }

  // .autodrive.workflow.proto.DynamicObstVelocity vel_abs_world = 7;
  if (this->has_vel_abs_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->vel_abs_world_, deterministic, target);
  }

  // .autodrive.workflow.proto.DynamicObstAccelerate acc_abs_world = 8;
  if (this->has_acc_abs_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->acc_abs_world_, deterministic, target);
  }

  // .autodrive.workflow.proto.DynamicObstacleMotionStatus motion_status = 9;
  if (this->motion_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->motion_status(), target);
  }

  // .autodrive.workflow.proto.MotionCategory motion_category = 10;
  if (this->motion_category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->motion_category(), target);
  }

  // .autodrive.workflow.proto.OutputObsPositionType position_type = 11;
  if (this->position_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->position_type(), target);
  }

  // float yaw_rate = 12;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->yaw_rate(), target);
  }

  // .autodrive.workflow.proto.VisibleSide visible_side = 13;
  if (this->visible_side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->visible_side(), target);
  }

  // .autodrive.workflow.proto.MotionOrientation motion_orientation = 14;
  if (this->motion_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->motion_orientation(), target);
  }

  // repeated float sigma_vel = 15;
  if (this->sigma_vel_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sigma_vel_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sigma_vel_, target);
  }

  // float sigma_yaw = 16;
  if (this->sigma_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->sigma_yaw(), target);
  }

  // float sigma_width = 17;
  if (this->sigma_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->sigma_width(), target);
  }

  // float sigma_height = 18;
  if (this->sigma_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->sigma_height(), target);
  }

  // float sigma_length = 19;
  if (this->sigma_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->sigma_length(), target);
  }

  // repeated float sigma_position = 20;
  if (this->sigma_position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sigma_position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sigma_position_, target);
  }

  // float sigma_yaw_rate = 21;
  if (this->sigma_yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->sigma_yaw_rate(), target);
  }

  // int32 head_rear_type = 22;
  if (this->head_rear_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->head_rear_type(), target);
  }

  // repeated float sigma_acc_ref = 23;
  if (this->sigma_acc_ref_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sigma_acc_ref_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sigma_acc_ref_, target);
  }

  // .autodrive.workflow.proto.ObstacleAngle obj_angle = 24;
  if (this->has_obj_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, *this->obj_angle_, deterministic, target);
  }

  // int32 lane_assignment = 25;
  if (this->lane_assignment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->lane_assignment(), target);
  }

  // int32 traversable = 26;
  if (this->traversable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->traversable(), target);
  }

  // .autodrive.workflow.proto.DynamicObstVelocity vel = 27;
  if (this->has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, *this->vel_, deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.Polygon poly = 28;
  if (this->has_poly()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, *this->poly_, deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.Polygon poly_vcs = 29;
  if (this->has_poly_vcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, *this->poly_vcs_, deterministic, target);
  }

  // .autodrive.workflow.proto.VisibleRect visible_rect = 30;
  if (this->visible_rect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->visible_rect(), target);
  }

  // .autodrive.workflow.proto.Vector3f rbc_position = 31;
  if (this->has_rbc_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, *this->rbc_position_, deterministic, target);
  }

  // repeated float sigma_rbc_position = 32;
  if (this->sigma_rbc_position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      32,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sigma_rbc_position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sigma_rbc_position_, target);
  }

  // int32 cipv = 33;
  if (this->cipv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->cipv(), target);
  }

  // .autodrive.workflow.proto.DynamicObstAccelerate acc = 34;
  if (this->has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, *this->acc_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  return target;
}

size_t DynamicObstWorldSpaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float sigma_vel = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->sigma_vel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sigma_vel_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float sigma_position = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->sigma_position_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sigma_position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float sigma_acc_ref = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->sigma_acc_ref_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sigma_acc_ref_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float sigma_rbc_position = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->sigma_rbc_position_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sigma_rbc_position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .autodrive.workflow.proto.Vector3f position = 5;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_);
  }

  // .autodrive.workflow.proto.DynamicObstVelocity vel_abs_world = 7;
  if (this->has_vel_abs_world()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vel_abs_world_);
  }

  // .autodrive.workflow.proto.DynamicObstAccelerate acc_abs_world = 8;
  if (this->has_acc_abs_world()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acc_abs_world_);
  }

  // .autodrive.workflow.proto.ObstacleAngle obj_angle = 24;
  if (this->has_obj_angle()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->obj_angle_);
  }

  // .autodrive.workflow.proto.DynamicObstVelocity vel = 27;
  if (this->has_vel()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vel_);
  }

  // .autodrive.workflow.proto.perception_base.Polygon poly = 28;
  if (this->has_poly()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->poly_);
  }

  // .autodrive.workflow.proto.perception_base.Polygon poly_vcs = 29;
  if (this->has_poly_vcs()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->poly_vcs_);
  }

  // .autodrive.workflow.proto.Vector3f rbc_position = 31;
  if (this->has_rbc_position()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rbc_position_);
  }

  // .autodrive.workflow.proto.DynamicObstAccelerate acc = 34;
  if (this->has_acc()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acc_);
  }

  // float yaw = 1;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float length = 2;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float width = 3;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float height = 4;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float ttc = 6;
  if (this->ttc() != 0) {
    total_size += 1 + 4;
  }

  // .autodrive.workflow.proto.DynamicObstacleMotionStatus motion_status = 9;
  if (this->motion_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_status());
  }

  // .autodrive.workflow.proto.MotionCategory motion_category = 10;
  if (this->motion_category() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_category());
  }

  // .autodrive.workflow.proto.OutputObsPositionType position_type = 11;
  if (this->position_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_type());
  }

  // float yaw_rate = 12;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  // .autodrive.workflow.proto.VisibleSide visible_side = 13;
  if (this->visible_side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->visible_side());
  }

  // .autodrive.workflow.proto.MotionOrientation motion_orientation = 14;
  if (this->motion_orientation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_orientation());
  }

  // float sigma_yaw = 16;
  if (this->sigma_yaw() != 0) {
    total_size += 2 + 4;
  }

  // float sigma_width = 17;
  if (this->sigma_width() != 0) {
    total_size += 2 + 4;
  }

  // float sigma_height = 18;
  if (this->sigma_height() != 0) {
    total_size += 2 + 4;
  }

  // float sigma_length = 19;
  if (this->sigma_length() != 0) {
    total_size += 2 + 4;
  }

  // float sigma_yaw_rate = 21;
  if (this->sigma_yaw_rate() != 0) {
    total_size += 2 + 4;
  }

  // int32 head_rear_type = 22;
  if (this->head_rear_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->head_rear_type());
  }

  // int32 lane_assignment = 25;
  if (this->lane_assignment() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_assignment());
  }

  // int32 traversable = 26;
  if (this->traversable() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->traversable());
  }

  // .autodrive.workflow.proto.VisibleRect visible_rect = 30;
  if (this->visible_rect() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->visible_rect());
  }

  // int32 cipv = 33;
  if (this->cipv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cipv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicObstWorldSpaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstWorldSpaceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicObstWorldSpaceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
    MergeFrom(*source);
  }
}

void DynamicObstWorldSpaceInfo::MergeFrom(const DynamicObstWorldSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sigma_vel_.MergeFrom(from.sigma_vel_);
  sigma_position_.MergeFrom(from.sigma_position_);
  sigma_acc_ref_.MergeFrom(from.sigma_acc_ref_);
  sigma_rbc_position_.MergeFrom(from.sigma_rbc_position_);
  if (from.has_position()) {
    mutable_position()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.position());
  }
  if (from.has_vel_abs_world()) {
    mutable_vel_abs_world()->::autodrive::workflow::proto::DynamicObstVelocity::MergeFrom(from.vel_abs_world());
  }
  if (from.has_acc_abs_world()) {
    mutable_acc_abs_world()->::autodrive::workflow::proto::DynamicObstAccelerate::MergeFrom(from.acc_abs_world());
  }
  if (from.has_obj_angle()) {
    mutable_obj_angle()->::autodrive::workflow::proto::ObstacleAngle::MergeFrom(from.obj_angle());
  }
  if (from.has_vel()) {
    mutable_vel()->::autodrive::workflow::proto::DynamicObstVelocity::MergeFrom(from.vel());
  }
  if (from.has_poly()) {
    mutable_poly()->::autodrive::workflow::proto::perception_base::Polygon::MergeFrom(from.poly());
  }
  if (from.has_poly_vcs()) {
    mutable_poly_vcs()->::autodrive::workflow::proto::perception_base::Polygon::MergeFrom(from.poly_vcs());
  }
  if (from.has_rbc_position()) {
    mutable_rbc_position()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.rbc_position());
  }
  if (from.has_acc()) {
    mutable_acc()->::autodrive::workflow::proto::DynamicObstAccelerate::MergeFrom(from.acc());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.ttc() != 0) {
    set_ttc(from.ttc());
  }
  if (from.motion_status() != 0) {
    set_motion_status(from.motion_status());
  }
  if (from.motion_category() != 0) {
    set_motion_category(from.motion_category());
  }
  if (from.position_type() != 0) {
    set_position_type(from.position_type());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
  if (from.visible_side() != 0) {
    set_visible_side(from.visible_side());
  }
  if (from.motion_orientation() != 0) {
    set_motion_orientation(from.motion_orientation());
  }
  if (from.sigma_yaw() != 0) {
    set_sigma_yaw(from.sigma_yaw());
  }
  if (from.sigma_width() != 0) {
    set_sigma_width(from.sigma_width());
  }
  if (from.sigma_height() != 0) {
    set_sigma_height(from.sigma_height());
  }
  if (from.sigma_length() != 0) {
    set_sigma_length(from.sigma_length());
  }
  if (from.sigma_yaw_rate() != 0) {
    set_sigma_yaw_rate(from.sigma_yaw_rate());
  }
  if (from.head_rear_type() != 0) {
    set_head_rear_type(from.head_rear_type());
  }
  if (from.lane_assignment() != 0) {
    set_lane_assignment(from.lane_assignment());
  }
  if (from.traversable() != 0) {
    set_traversable(from.traversable());
  }
  if (from.visible_rect() != 0) {
    set_visible_rect(from.visible_rect());
  }
  if (from.cipv() != 0) {
    set_cipv(from.cipv());
  }
}

void DynamicObstWorldSpaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstWorldSpaceInfo::CopyFrom(const DynamicObstWorldSpaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.DynamicObstWorldSpaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstWorldSpaceInfo::IsInitialized() const {
  return true;
}

void DynamicObstWorldSpaceInfo::Swap(DynamicObstWorldSpaceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicObstWorldSpaceInfo::InternalSwap(DynamicObstWorldSpaceInfo* other) {
  using std::swap;
  sigma_vel_.InternalSwap(&other->sigma_vel_);
  sigma_position_.InternalSwap(&other->sigma_position_);
  sigma_acc_ref_.InternalSwap(&other->sigma_acc_ref_);
  sigma_rbc_position_.InternalSwap(&other->sigma_rbc_position_);
  swap(position_, other->position_);
  swap(vel_abs_world_, other->vel_abs_world_);
  swap(acc_abs_world_, other->acc_abs_world_);
  swap(obj_angle_, other->obj_angle_);
  swap(vel_, other->vel_);
  swap(poly_, other->poly_);
  swap(poly_vcs_, other->poly_vcs_);
  swap(rbc_position_, other->rbc_position_);
  swap(acc_, other->acc_);
  swap(yaw_, other->yaw_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(ttc_, other->ttc_);
  swap(motion_status_, other->motion_status_);
  swap(motion_category_, other->motion_category_);
  swap(position_type_, other->position_type_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(visible_side_, other->visible_side_);
  swap(motion_orientation_, other->motion_orientation_);
  swap(sigma_yaw_, other->sigma_yaw_);
  swap(sigma_width_, other->sigma_width_);
  swap(sigma_height_, other->sigma_height_);
  swap(sigma_length_, other->sigma_length_);
  swap(sigma_yaw_rate_, other->sigma_yaw_rate_);
  swap(head_rear_type_, other->head_rear_type_);
  swap(lane_assignment_, other->lane_assignment_);
  swap(traversable_, other->traversable_);
  swap(visible_rect_, other->visible_rect_);
  swap(cipv_, other->cipv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicObstWorldSpaceInfo::GetMetadata() const {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DynamicObstacle::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_DynamicObstacle_default_instance_._instance.get_mutable()->img_info_ = const_cast< ::autodrive::workflow::proto::perception_base::ImageSpace*>(
      ::autodrive::workflow::proto::perception_base::ImageSpace::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstacle_default_instance_._instance.get_mutable()->world_info_ = const_cast< ::autodrive::workflow::proto::DynamicObstWorldSpaceInfo*>(
      ::autodrive::workflow::proto::DynamicObstWorldSpaceInfo::internal_default_instance());
}
void DynamicObstacle::clear_img_info() {
  if (GetArenaNoVirtual() == NULL && img_info_ != NULL) {
    delete img_info_;
  }
  img_info_ = NULL;
}
void DynamicObstacle::clear_category() {
  category_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicObstacle::kIdFieldNumber;
const int DynamicObstacle::kLifeTimeFieldNumber;
const int DynamicObstacle::kCamIdFieldNumber;
const int DynamicObstacle::kTypeFieldNumber;
const int DynamicObstacle::kSubTypeFieldNumber;
const int DynamicObstacle::kTimeStampFieldNumber;
const int DynamicObstacle::kConfFieldNumber;
const int DynamicObstacle::kAgeFieldNumber;
const int DynamicObstacle::kImgInfoFieldNumber;
const int DynamicObstacle::kWorldInfoFieldNumber;
const int DynamicObstacle::kValidInfoFieldNumber;
const int DynamicObstacle::kSelectLevelFieldNumber;
const int DynamicObstacle::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicObstacle::DynamicObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstacle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.DynamicObstacle)
}
DynamicObstacle::DynamicObstacle(const DynamicObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      category_(from.category_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_img_info()) {
    img_info_ = new ::autodrive::workflow::proto::perception_base::ImageSpace(*from.img_info_);
  } else {
    img_info_ = NULL;
  }
  if (from.has_world_info()) {
    world_info_ = new ::autodrive::workflow::proto::DynamicObstWorldSpaceInfo(*from.world_info_);
  } else {
    world_info_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&select_level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(select_level_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.DynamicObstacle)
}

void DynamicObstacle::SharedCtor() {
  ::memset(&img_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&select_level_) -
      reinterpret_cast<char*>(&img_info_)) + sizeof(select_level_));
  _cached_size_ = 0;
}

DynamicObstacle::~DynamicObstacle() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.DynamicObstacle)
  SharedDtor();
}

void DynamicObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete img_info_;
  if (this != internal_default_instance()) delete world_info_;
}

void DynamicObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicObstacle::descriptor() {
  ::protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DynamicObstacle& DynamicObstacle::default_instance() {
  ::protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstacle();
  return *internal_default_instance();
}

DynamicObstacle* DynamicObstacle::New(::google::protobuf::Arena* arena) const {
  DynamicObstacle* n = new DynamicObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamicObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.DynamicObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  if (GetArenaNoVirtual() == NULL && img_info_ != NULL) {
    delete img_info_;
  }
  img_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && world_info_ != NULL) {
    delete world_info_;
  }
  world_info_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&select_level_) -
      reinterpret_cast<char*>(&id_)) + sizeof(select_level_));
  _internal_metadata_.Clear();
}

bool DynamicObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.DynamicObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 life_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.DynamicObstacleType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::autodrive::workflow::proto::DynamicObstacleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VehicleType sub_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sub_type(static_cast< ::autodrive::workflow::proto::VehicleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_stamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 age = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_img_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.DynamicObstWorldSpaceInfo world_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 valid_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 select_level = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &select_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.perception_base.Category category = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.DynamicObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.DynamicObstacle)
  return false;
#undef DO_
}

void DynamicObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.DynamicObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // int32 life_time = 2;
  if (this->life_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->life_time(), output);
  }

  // int32 cam_id = 3;
  if (this->cam_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cam_id(), output);
  }

  // .autodrive.workflow.proto.DynamicObstacleType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // .autodrive.workflow.proto.VehicleType sub_type = 5;
  if (this->sub_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sub_type(), output);
  }

  // int64 time_stamp = 6;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->time_stamp(), output);
  }

  // float conf = 7;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->conf(), output);
  }

  // uint32 age = 8;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->age(), output);
  }

  // .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
  if (this->has_img_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->img_info_, output);
  }

  // .autodrive.workflow.proto.DynamicObstWorldSpaceInfo world_info = 10;
  if (this->has_world_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->world_info_, output);
  }

  // int32 valid_info = 11;
  if (this->valid_info() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->valid_info(), output);
  }

  // int32 select_level = 12;
  if (this->select_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->select_level(), output);
  }

  // repeated .autodrive.workflow.proto.perception_base.Category category = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->category(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.DynamicObstacle)
}

::google::protobuf::uint8* DynamicObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.DynamicObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // int32 life_time = 2;
  if (this->life_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->life_time(), target);
  }

  // int32 cam_id = 3;
  if (this->cam_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cam_id(), target);
  }

  // .autodrive.workflow.proto.DynamicObstacleType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // .autodrive.workflow.proto.VehicleType sub_type = 5;
  if (this->sub_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sub_type(), target);
  }

  // int64 time_stamp = 6;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time_stamp(), target);
  }

  // float conf = 7;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->conf(), target);
  }

  // uint32 age = 8;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->age(), target);
  }

  // .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
  if (this->has_img_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->img_info_, deterministic, target);
  }

  // .autodrive.workflow.proto.DynamicObstWorldSpaceInfo world_info = 10;
  if (this->has_world_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->world_info_, deterministic, target);
  }

  // int32 valid_info = 11;
  if (this->valid_info() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->valid_info(), target);
  }

  // int32 select_level = 12;
  if (this->select_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->select_level(), target);
  }

  // repeated .autodrive.workflow.proto.perception_base.Category category = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->category(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.DynamicObstacle)
  return target;
}

size_t DynamicObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.DynamicObstacle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.perception_base.Category category = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->category_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->category(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
  if (this->has_img_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->img_info_);
  }

  // .autodrive.workflow.proto.DynamicObstWorldSpaceInfo world_info = 10;
  if (this->has_world_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->world_info_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // int32 life_time = 2;
  if (this->life_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->life_time());
  }

  // int32 cam_id = 3;
  if (this->cam_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cam_id());
  }

  // .autodrive.workflow.proto.DynamicObstacleType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int64 time_stamp = 6;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_stamp());
  }

  // .autodrive.workflow.proto.VehicleType sub_type = 5;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_type());
  }

  // float conf = 7;
  if (this->conf() != 0) {
    total_size += 1 + 4;
  }

  // uint32 age = 8;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->age());
  }

  // int32 valid_info = 11;
  if (this->valid_info() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->valid_info());
  }

  // int32 select_level = 12;
  if (this->select_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->select_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.DynamicObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.DynamicObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.DynamicObstacle)
    MergeFrom(*source);
  }
}

void DynamicObstacle::MergeFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.DynamicObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  if (from.has_img_info()) {
    mutable_img_info()->::autodrive::workflow::proto::perception_base::ImageSpace::MergeFrom(from.img_info());
  }
  if (from.has_world_info()) {
    mutable_world_info()->::autodrive::workflow::proto::DynamicObstWorldSpaceInfo::MergeFrom(from.world_info());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.life_time() != 0) {
    set_life_time(from.life_time());
  }
  if (from.cam_id() != 0) {
    set_cam_id(from.cam_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.sub_type() != 0) {
    set_sub_type(from.sub_type());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.valid_info() != 0) {
    set_valid_info(from.valid_info());
  }
  if (from.select_level() != 0) {
    set_select_level(from.select_level());
  }
}

void DynamicObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.DynamicObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstacle::CopyFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.DynamicObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacle::IsInitialized() const {
  return true;
}

void DynamicObstacle::Swap(DynamicObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicObstacle::InternalSwap(DynamicObstacle* other) {
  using std::swap;
  category_.InternalSwap(&other->category_);
  swap(img_info_, other->img_info_);
  swap(world_info_, other->world_info_);
  swap(id_, other->id_);
  swap(life_time_, other->life_time_);
  swap(cam_id_, other->cam_id_);
  swap(type_, other->type_);
  swap(time_stamp_, other->time_stamp_);
  swap(sub_type_, other->sub_type_);
  swap(conf_, other->conf_);
  swap(age_, other->age_);
  swap(valid_info_, other->valid_info_);
  swap(select_level_, other->select_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicObstacle::GetMetadata() const {
  protobuf_dynamic_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
