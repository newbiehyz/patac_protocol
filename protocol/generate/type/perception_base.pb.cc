// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_base.proto

#include "perception_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
namespace perception_base {
class RectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rect>
      _instance;
} _Rect_default_instance_;
class RectIntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RectInt>
      _instance;
} _RectInt_default_instance_;
class ImageSpaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageSpace>
      _instance;
} _ImageSpace_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polygon>
      _instance;
} _Polygon_default_instance_;
class CameraMatrixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraMatrix>
      _instance;
} _CameraMatrix_default_instance_;
class RoiMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoiMap>
      _instance;
} _RoiMap_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Category>
      _instance;
} _Category_default_instance_;
class Box3DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Box3D>
      _instance;
} _Box3D_default_instance_;
class SceneParsingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SceneParsing>
      _instance;
} _SceneParsing_default_instance_;
}  // namespace perception_base
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_perception_5fbase_2eproto {
void InitDefaultsRectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_Rect_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::Rect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::Rect::InitAsDefaultInstance();
}

void InitDefaultsRect() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRectImpl);
}

void InitDefaultsRectIntImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_RectInt_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::RectInt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::RectInt::InitAsDefaultInstance();
}

void InitDefaultsRectInt() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRectIntImpl);
}

void InitDefaultsImageSpaceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsRectInt();
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_ImageSpace_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::ImageSpace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::ImageSpace::InitAsDefaultInstance();
}

void InitDefaultsImageSpace() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageSpaceImpl);
}

void InitDefaultsPolygonImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_Polygon_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::Polygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::Polygon::InitAsDefaultInstance();
}

void InitDefaultsPolygon() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPolygonImpl);
}

void InitDefaultsCameraMatrixImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_CameraMatrix_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::CameraMatrix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::CameraMatrix::InitAsDefaultInstance();
}

void InitDefaultsCameraMatrix() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraMatrixImpl);
}

void InitDefaultsRoiMapImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_RoiMap_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::RoiMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::RoiMap::InitAsDefaultInstance();
}

void InitDefaultsRoiMap() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoiMapImpl);
}

void InitDefaultsHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_Header_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::Header::InitAsDefaultInstance();
}

void InitDefaultsHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderImpl);
}

void InitDefaultsCategoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_Category_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::Category();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::Category::InitAsDefaultInstance();
}

void InitDefaultsCategory() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCategoryImpl);
}

void InitDefaultsBox3DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_Box3D_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::Box3D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::Box3D::InitAsDefaultInstance();
}

void InitDefaultsBox3D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBox3DImpl);
}

void InitDefaultsSceneParsingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::perception_base::_SceneParsing_default_instance_;
    new (ptr) ::autodrive::workflow::proto::perception_base::SceneParsing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::perception_base::SceneParsing::InitAsDefaultInstance();
}

void InitDefaultsSceneParsing() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSceneParsingImpl);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Rect, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Rect, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Rect, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Rect, bottom_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::RectInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::RectInt, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::RectInt, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::RectInt, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::RectInt, bottom_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::ImageSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::ImageSpace, rect_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Polygon, polygon_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::CameraMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::CameraMatrix, mat_gnd2img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::CameraMatrix, mat_img2gnd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::CameraMatrix, mat_vcsgnd2img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::CameraMatrix, mat_img2vcsgnd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::CameraMatrix, mat_local2img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::CameraMatrix, mat_img2local_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::CameraMatrix, mat_vcs2img_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::RoiMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::RoiMap, model_roi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::RoiMap, model_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Header, cam_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Header, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Header, time_stamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Category, property_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Category, property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Category, property_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Category, property_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, lower_lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, lower_lb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, lower_rb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, lower_rt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, upper_lt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, upper_lb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, upper_rb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, upper_rt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::Box3D, conf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::SceneParsing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::SceneParsing, image_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::SceneParsing, region_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::SceneParsing, illu_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::SceneParsing, parking_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::SceneParsing, region_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::SceneParsing, illu_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::perception_base::SceneParsing, parking_conf_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::perception_base::Rect)},
  { 9, -1, sizeof(::autodrive::workflow::proto::perception_base::RectInt)},
  { 18, -1, sizeof(::autodrive::workflow::proto::perception_base::ImageSpace)},
  { 24, -1, sizeof(::autodrive::workflow::proto::perception_base::Polygon)},
  { 30, -1, sizeof(::autodrive::workflow::proto::perception_base::CameraMatrix)},
  { 42, -1, sizeof(::autodrive::workflow::proto::perception_base::RoiMap)},
  { 49, -1, sizeof(::autodrive::workflow::proto::perception_base::Header)},
  { 57, -1, sizeof(::autodrive::workflow::proto::perception_base::Category)},
  { 66, -1, sizeof(::autodrive::workflow::proto::perception_base::Box3D)},
  { 80, -1, sizeof(::autodrive::workflow::proto::perception_base::SceneParsing)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_Rect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_RectInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_ImageSpace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_CameraMatrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_RoiMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_Category_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_Box3D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::perception_base::_SceneParsing_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "perception_base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025perception_base.proto\022(autodrive.workf"
      "low.proto.perception_base\032\013basic.proto\"@"
      "\n\004Rect\022\014\n\004left\030\001 \001(\002\022\013\n\003top\030\002 \001(\002\022\r\n\005rig"
      "ht\030\003 \001(\002\022\016\n\006bottom\030\004 \001(\002\"C\n\007RectInt\022\014\n\004l"
      "eft\030\001 \001(\005\022\013\n\003top\030\002 \001(\005\022\r\n\005right\030\003 \001(\005\022\016\n"
      "\006bottom\030\004 \001(\005\"M\n\nImageSpace\022\?\n\004rect\030\001 \001("
      "\01321.autodrive.workflow.proto.perception_"
      "base.RectInt\"E\n\007Polygon\022:\n\016polygon_point"
      "s\030\001 \003(\0132\".autodrive.workflow.proto.Vecto"
      "r3f\"\253\001\n\014CameraMatrix\022\023\n\013mat_gnd2img\030\001 \003("
      "\002\022\023\n\013mat_img2gnd\030\002 \003(\002\022\026\n\016mat_vcsgnd2img"
      "\030\003 \003(\002\022\026\n\016mat_img2vcsgnd\030\004 \003(\002\022\025\n\rmat_lo"
      "cal2img\030\005 \003(\002\022\025\n\rmat_img2local\030\006 \003(\002\022\023\n\013"
      "mat_vcs2img\030\007 \003(\002\"]\n\006RoiMap\022A\n\tmodel_roi"
      "\030\001 \001(\0132..autodrive.workflow.proto.percep"
      "tion_base.Rect\022\020\n\010model_id\030\002 \001(\005\"\?\n\006Head"
      "er\022\017\n\007cam_idx\030\001 \001(\005\022\020\n\010frame_id\030\002 \001(\003\022\022\n"
      "\ntime_stamp\030\003 \001(\003\"a\n\010Category\022\025\n\rpropert"
      "y_type\030\001 \001(\005\022\020\n\010property\030\002 \001(\005\022\025\n\rproper"
      "ty_conf\030\003 \001(\002\022\025\n\rproperty_name\030\004 \001(\t\"\305\003\n"
      "\005Box3D\0224\n\010lower_lt\030\001 \001(\0132\".autodrive.wor"
      "kflow.proto.Vector3f\0224\n\010lower_lb\030\002 \001(\0132\""
      ".autodrive.workflow.proto.Vector3f\0224\n\010lo"
      "wer_rb\030\003 \001(\0132\".autodrive.workflow.proto."
      "Vector3f\0224\n\010lower_rt\030\004 \001(\0132\".autodrive.w"
      "orkflow.proto.Vector3f\0224\n\010upper_lt\030\005 \001(\013"
      "2\".autodrive.workflow.proto.Vector3f\0224\n\010"
      "upper_lb\030\006 \001(\0132\".autodrive.workflow.prot"
      "o.Vector3f\0224\n\010upper_rb\030\007 \001(\0132\".autodrive"
      ".workflow.proto.Vector3f\0224\n\010upper_rt\030\010 \001"
      "(\0132\".autodrive.workflow.proto.Vector3f\022\014"
      "\n\004conf\030\t \001(\002\"\207\003\n\014SceneParsing\022C\n\010image_i"
      "d\030\001 \001(\01621.autodrive.workflow.proto.perce"
      "ption_base.ImageId\022N\n\013region_type\030\002 \001(\0162"
      "9.autodrive.workflow.proto.perception_ba"
      "se.SceneRegionType\022R\n\tillu_type\030\003 \001(\0162\?."
      "autodrive.workflow.proto.perception_base"
      ".SceneIlluminationType\022P\n\014parking_type\030\004"
      " \001(\0162:.autodrive.workflow.proto.percepti"
      "on_base.SceneParkingType\022\023\n\013region_conf\030"
      "\005 \001(\002\022\021\n\tillu_conf\030\006 \001(\002\022\024\n\014parking_conf"
      "\030\007 \001(\002*\274\001\n\007ImageId\022\030\n\024kImageIdCylinderRe"
      "ar\020\000\022\031\n\025kImageIdCylinderFront\020\001\022\030\n\024kImag"
      "eIdCylinderLeft\020\002\022\031\n\025kImageIdCylinderRig"
      "ht\020\003\022\017\n\013kImageIdIpm\020\004\022\020\n\014kImageIdRear\020\005\022"
      "\021\n\rkImageIdFront\020\006\022\021\n\rkImageIdCount\020\007*c\n"
      "\005RoiId\022\016\n\nkRoiIdNone\020\000\022\023\n\017kRoiIdObstacle"
      "1\020\001\022\023\n\017kRoiIdObstacle2\020\002\022\017\n\013kRoiIdLane3\020"
      "\003\022\017\n\013kRoiIdLane4\020\004*\222\004\n\013VehProperty\022\024\n\020kV"
      "ehPropertyType\020\000\022\036\n\032kVehPropertyClassifi"
      "cation\020\001\022\025\n\021kVehPropertyLight\020\002\022\025\n\021kVehP"
      "roperty3DBox\020\003\022\031\n\025kVehPropertyKeyPoints\020"
      "\004\022\027\n\023kVehPropertyVehBBox\020\005\022\035\n\031kVehProper"
      "tyKeyPointsConf\020\006\022\033\n\027kVehPropertyBigSmal"
      "lCls\020\007\022\033\n\027kVehPropertyPoliceLight\020\010\022\031\n\025k"
      "VehPropertyOcclusion\020\t\022\024\n\020kVehPropertyPo"
      "se\020\n\022\027\n\023kVehPropertyVehFull\020\013\022\034\n\030kVehPro"
      "pertyOritationCls\020\014\022\033\n\027kVehPropertyOrita"
      "tionRe\020\r\022\033\n\027kVehProperty12KeyPoints\020\016\022\037\n"
      "\033kVehProperty12KeyPointsConf\020\017\022\036\n\032kVehpr"
      "operty12KeyPointsCls\020\020\022\032\n\026kVehPropertyTr"
      "uncation\020\021\022\023\n\017kVehPropertyCnt\020\022*\377\001\n\013PedP"
      "roperty\022\033\n\027kPedPropertyOrientation\020\000\022\027\n\023"
      "kPedPropertyCyclist\020\001\022\023\n\017kPedPropertyAge"
      "\020\002\022\024\n\020kPedPropertyPose\020\003\022\026\n\022kPedProperty"
      "PosNeg\020\004\022\024\n\020kPedPropertyBBox\020\005\022\031\n\025kPedPr"
      "opertyOcclusion\020\006\022\031\n\025kPedPropertyPosNegO"
      "cc\020\007\022\026\n\022kPedProperty2PEDet\020\010\022\023\n\017kPedProp"
      "ertyCnt\020\t*\320\001\n\017VehRearProperty\022\035\n\031kVehRea"
      "rPropertyOcclusion\020\000\022\030\n\024kVehRearProperty"
      "Part\020\001\022\030\n\024kVehRearPropertyBBox\020\002\022\031\n\025kVeh"
      "RearPropertyLmks3\020\003\022\033\n\027kVehRearPropertyS"
      "caleRe\020\004\022\031\n\025kVehRearPropertyPlate\020\005\022\027\n\023k"
      "VehRearPropertyCnt\020\006*I\n\017SceneRegionType\022"
      "\033\n\027kSceneRegionTypeUnknown\020\000\022\013\n\007kIndoor\020"
      "\001\022\014\n\010kOutdoor\020\002*R\n\025SceneIlluminationType"
      "\022!\n\035kSceneIlluminationTypeUnknown\020\000\022\t\n\005k"
      "Dark\020\001\022\013\n\007kBright\020\002*P\n\020SceneParkingType\022"
      "\034\n\030kSceneParkingTypeUnknown\020\000\022\t\n\005kSlot\020\001"
      "\022\023\n\017kMechanicalSlot\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception_base.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perception_5fbase_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
namespace perception_base {
const ::google::protobuf::EnumDescriptor* ImageId_descriptor() {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fbase_2eproto::file_level_enum_descriptors[0];
}
bool ImageId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoiId_descriptor() {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fbase_2eproto::file_level_enum_descriptors[1];
}
bool RoiId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VehProperty_descriptor() {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fbase_2eproto::file_level_enum_descriptors[2];
}
bool VehProperty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PedProperty_descriptor() {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fbase_2eproto::file_level_enum_descriptors[3];
}
bool PedProperty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VehRearProperty_descriptor() {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fbase_2eproto::file_level_enum_descriptors[4];
}
bool VehRearProperty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SceneRegionType_descriptor() {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fbase_2eproto::file_level_enum_descriptors[5];
}
bool SceneRegionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SceneIlluminationType_descriptor() {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fbase_2eproto::file_level_enum_descriptors[6];
}
bool SceneIlluminationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SceneParkingType_descriptor() {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fbase_2eproto::file_level_enum_descriptors[7];
}
bool SceneParkingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kLeftFieldNumber;
const int Rect::kTopFieldNumber;
const int Rect::kRightFieldNumber;
const int Rect::kBottomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.Rect)
}
Rect::Rect(const Rect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.Rect)
}

void Rect::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  _cached_size_ = 0;
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rect& Rect::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  return *internal_default_instance();
}

Rect* Rect::New(::google::protobuf::Arena* arena) const {
  Rect* n = new Rect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  _internal_metadata_.Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float top = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float bottom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // float top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->top(), output);
  }

  // float right = 3;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->right(), output);
  }

  // float bottom = 4;
  if (this->bottom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bottom(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.Rect)
}

::google::protobuf::uint8* Rect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left(), target);
  }

  // float top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->top(), target);
  }

  // float right = 3;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->right(), target);
  }

  // float bottom = 4;
  if (this->bottom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bottom(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.Rect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float left = 1;
  if (this->left() != 0) {
    total_size += 1 + 4;
  }

  // float top = 2;
  if (this->top() != 0) {
    total_size += 1 + 4;
  }

  // float right = 3;
  if (this->right() != 0) {
    total_size += 1 + 4;
  }

  // float bottom = 4;
  if (this->bottom() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.bottom() != 0) {
    set_bottom(from.bottom());
  }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  using std::swap;
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(right_, other->right_);
  swap(bottom_, other->bottom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RectInt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectInt::kLeftFieldNumber;
const int RectInt::kTopFieldNumber;
const int RectInt::kRightFieldNumber;
const int RectInt::kBottomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RectInt::RectInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsRectInt();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.RectInt)
}
RectInt::RectInt(const RectInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.RectInt)
}

void RectInt::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  _cached_size_ = 0;
}

RectInt::~RectInt() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.RectInt)
  SharedDtor();
}

void RectInt::SharedDtor() {
}

void RectInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectInt::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RectInt& RectInt::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsRectInt();
  return *internal_default_instance();
}

RectInt* RectInt::New(::google::protobuf::Arena* arena) const {
  RectInt* n = new RectInt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RectInt::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.RectInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  _internal_metadata_.Clear();
}

bool RectInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.RectInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 top = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bottom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.RectInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.RectInt)
  return false;
#undef DO_
}

void RectInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.RectInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // int32 top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top(), output);
  }

  // int32 right = 3;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // int32 bottom = 4;
  if (this->bottom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottom(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.RectInt)
}

::google::protobuf::uint8* RectInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.RectInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // int32 top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top(), target);
  }

  // int32 right = 3;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right(), target);
  }

  // int32 bottom = 4;
  if (this->bottom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bottom(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.RectInt)
  return target;
}

size_t RectInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.RectInt)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 left = 1;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // int32 top = 2;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // int32 right = 3;
  if (this->right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right());
  }

  // int32 bottom = 4;
  if (this->bottom() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bottom());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.RectInt)
  GOOGLE_DCHECK_NE(&from, this);
  const RectInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RectInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.RectInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.RectInt)
    MergeFrom(*source);
  }
}

void RectInt::MergeFrom(const RectInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.RectInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.bottom() != 0) {
    set_bottom(from.bottom());
  }
}

void RectInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.RectInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectInt::CopyFrom(const RectInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.RectInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectInt::IsInitialized() const {
  return true;
}

void RectInt::Swap(RectInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RectInt::InternalSwap(RectInt* other) {
  using std::swap;
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(right_, other->right_);
  swap(bottom_, other->bottom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RectInt::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageSpace::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::perception_base::_ImageSpace_default_instance_._instance.get_mutable()->rect_ = const_cast< ::autodrive::workflow::proto::perception_base::RectInt*>(
      ::autodrive::workflow::proto::perception_base::RectInt::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageSpace::kRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageSpace::ImageSpace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsImageSpace();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.ImageSpace)
}
ImageSpace::ImageSpace(const ImageSpace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rect()) {
    rect_ = new ::autodrive::workflow::proto::perception_base::RectInt(*from.rect_);
  } else {
    rect_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.ImageSpace)
}

void ImageSpace::SharedCtor() {
  rect_ = NULL;
  _cached_size_ = 0;
}

ImageSpace::~ImageSpace() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.ImageSpace)
  SharedDtor();
}

void ImageSpace::SharedDtor() {
  if (this != internal_default_instance()) delete rect_;
}

void ImageSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageSpace::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageSpace& ImageSpace::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsImageSpace();
  return *internal_default_instance();
}

ImageSpace* ImageSpace::New(::google::protobuf::Arena* arena) const {
  ImageSpace* n = new ImageSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.ImageSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && rect_ != NULL) {
    delete rect_;
  }
  rect_ = NULL;
  _internal_metadata_.Clear();
}

bool ImageSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.ImageSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.RectInt rect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.ImageSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.ImageSpace)
  return false;
#undef DO_
}

void ImageSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.ImageSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.RectInt rect = 1;
  if (this->has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rect_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.ImageSpace)
}

::google::protobuf::uint8* ImageSpace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.ImageSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.RectInt rect = 1;
  if (this->has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->rect_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.ImageSpace)
  return target;
}

size_t ImageSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.ImageSpace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.perception_base.RectInt rect = 1;
  if (this->has_rect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rect_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageSpace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.ImageSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSpace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageSpace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.ImageSpace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.ImageSpace)
    MergeFrom(*source);
  }
}

void ImageSpace::MergeFrom(const ImageSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.ImageSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rect()) {
    mutable_rect()->::autodrive::workflow::proto::perception_base::RectInt::MergeFrom(from.rect());
  }
}

void ImageSpace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.ImageSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSpace::CopyFrom(const ImageSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.ImageSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSpace::IsInitialized() const {
  return true;
}

void ImageSpace::Swap(ImageSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageSpace::InternalSwap(ImageSpace* other) {
  using std::swap;
  swap(rect_, other->rect_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageSpace::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
void Polygon::clear_polygon_points() {
  polygon_points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kPolygonPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsPolygon();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      polygon_points_(from.polygon_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.Polygon)
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsPolygon();
  return *internal_default_instance();
}

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_points_.Clear();
  _internal_metadata_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.Vector3f polygon_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_polygon_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.Vector3f polygon_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->polygon_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.Vector3f polygon_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->polygon_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.Polygon)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.Vector3f polygon_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon_points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_points_.MergeFrom(from.polygon_points_);
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  polygon_points_.InternalSwap(&other->polygon_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraMatrix::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraMatrix::kMatGnd2ImgFieldNumber;
const int CameraMatrix::kMatImg2GndFieldNumber;
const int CameraMatrix::kMatVcsgnd2ImgFieldNumber;
const int CameraMatrix::kMatImg2VcsgndFieldNumber;
const int CameraMatrix::kMatLocal2ImgFieldNumber;
const int CameraMatrix::kMatImg2LocalFieldNumber;
const int CameraMatrix::kMatVcs2ImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraMatrix::CameraMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsCameraMatrix();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.CameraMatrix)
}
CameraMatrix::CameraMatrix(const CameraMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mat_gnd2img_(from.mat_gnd2img_),
      mat_img2gnd_(from.mat_img2gnd_),
      mat_vcsgnd2img_(from.mat_vcsgnd2img_),
      mat_img2vcsgnd_(from.mat_img2vcsgnd_),
      mat_local2img_(from.mat_local2img_),
      mat_img2local_(from.mat_img2local_),
      mat_vcs2img_(from.mat_vcs2img_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.CameraMatrix)
}

void CameraMatrix::SharedCtor() {
  _cached_size_ = 0;
}

CameraMatrix::~CameraMatrix() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.CameraMatrix)
  SharedDtor();
}

void CameraMatrix::SharedDtor() {
}

void CameraMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraMatrix::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraMatrix& CameraMatrix::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsCameraMatrix();
  return *internal_default_instance();
}

CameraMatrix* CameraMatrix::New(::google::protobuf::Arena* arena) const {
  CameraMatrix* n = new CameraMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.CameraMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mat_gnd2img_.Clear();
  mat_img2gnd_.Clear();
  mat_vcsgnd2img_.Clear();
  mat_img2vcsgnd_.Clear();
  mat_local2img_.Clear();
  mat_img2local_.Clear();
  mat_vcs2img_.Clear();
  _internal_metadata_.Clear();
}

bool CameraMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.CameraMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float mat_gnd2img = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mat_gnd2img())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_mat_gnd2img())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mat_img2gnd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mat_img2gnd())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_mat_img2gnd())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mat_vcsgnd2img = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mat_vcsgnd2img())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_mat_vcsgnd2img())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mat_img2vcsgnd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mat_img2vcsgnd())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_mat_img2vcsgnd())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mat_local2img = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mat_local2img())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_mat_local2img())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mat_img2local = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mat_img2local())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_mat_img2local())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float mat_vcs2img = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mat_vcs2img())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_mat_vcs2img())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.CameraMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.CameraMatrix)
  return false;
#undef DO_
}

void CameraMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.CameraMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mat_gnd2img = 1;
  if (this->mat_gnd2img_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mat_gnd2img_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->mat_gnd2img().data(), this->mat_gnd2img_size(), output);
  }

  // repeated float mat_img2gnd = 2;
  if (this->mat_img2gnd_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mat_img2gnd_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->mat_img2gnd().data(), this->mat_img2gnd_size(), output);
  }

  // repeated float mat_vcsgnd2img = 3;
  if (this->mat_vcsgnd2img_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mat_vcsgnd2img_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->mat_vcsgnd2img().data(), this->mat_vcsgnd2img_size(), output);
  }

  // repeated float mat_img2vcsgnd = 4;
  if (this->mat_img2vcsgnd_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mat_img2vcsgnd_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->mat_img2vcsgnd().data(), this->mat_img2vcsgnd_size(), output);
  }

  // repeated float mat_local2img = 5;
  if (this->mat_local2img_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mat_local2img_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->mat_local2img().data(), this->mat_local2img_size(), output);
  }

  // repeated float mat_img2local = 6;
  if (this->mat_img2local_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mat_img2local_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->mat_img2local().data(), this->mat_img2local_size(), output);
  }

  // repeated float mat_vcs2img = 7;
  if (this->mat_vcs2img_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mat_vcs2img_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->mat_vcs2img().data(), this->mat_vcs2img_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.CameraMatrix)
}

::google::protobuf::uint8* CameraMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.CameraMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mat_gnd2img = 1;
  if (this->mat_gnd2img_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mat_gnd2img_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mat_gnd2img_, target);
  }

  // repeated float mat_img2gnd = 2;
  if (this->mat_img2gnd_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mat_img2gnd_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mat_img2gnd_, target);
  }

  // repeated float mat_vcsgnd2img = 3;
  if (this->mat_vcsgnd2img_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mat_vcsgnd2img_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mat_vcsgnd2img_, target);
  }

  // repeated float mat_img2vcsgnd = 4;
  if (this->mat_img2vcsgnd_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mat_img2vcsgnd_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mat_img2vcsgnd_, target);
  }

  // repeated float mat_local2img = 5;
  if (this->mat_local2img_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mat_local2img_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mat_local2img_, target);
  }

  // repeated float mat_img2local = 6;
  if (this->mat_img2local_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mat_img2local_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mat_img2local_, target);
  }

  // repeated float mat_vcs2img = 7;
  if (this->mat_vcs2img_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mat_vcs2img_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mat_vcs2img_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.CameraMatrix)
  return target;
}

size_t CameraMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.CameraMatrix)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float mat_gnd2img = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mat_gnd2img_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mat_gnd2img_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mat_img2gnd = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->mat_img2gnd_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mat_img2gnd_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mat_vcsgnd2img = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mat_vcsgnd2img_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mat_vcsgnd2img_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mat_img2vcsgnd = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mat_img2vcsgnd_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mat_img2vcsgnd_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mat_local2img = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->mat_local2img_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mat_local2img_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mat_img2local = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->mat_img2local_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mat_img2local_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mat_vcs2img = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->mat_vcs2img_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mat_vcs2img_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.CameraMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.CameraMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.CameraMatrix)
    MergeFrom(*source);
  }
}

void CameraMatrix::MergeFrom(const CameraMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.CameraMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mat_gnd2img_.MergeFrom(from.mat_gnd2img_);
  mat_img2gnd_.MergeFrom(from.mat_img2gnd_);
  mat_vcsgnd2img_.MergeFrom(from.mat_vcsgnd2img_);
  mat_img2vcsgnd_.MergeFrom(from.mat_img2vcsgnd_);
  mat_local2img_.MergeFrom(from.mat_local2img_);
  mat_img2local_.MergeFrom(from.mat_img2local_);
  mat_vcs2img_.MergeFrom(from.mat_vcs2img_);
}

void CameraMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.CameraMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMatrix::CopyFrom(const CameraMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.CameraMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMatrix::IsInitialized() const {
  return true;
}

void CameraMatrix::Swap(CameraMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraMatrix::InternalSwap(CameraMatrix* other) {
  using std::swap;
  mat_gnd2img_.InternalSwap(&other->mat_gnd2img_);
  mat_img2gnd_.InternalSwap(&other->mat_img2gnd_);
  mat_vcsgnd2img_.InternalSwap(&other->mat_vcsgnd2img_);
  mat_img2vcsgnd_.InternalSwap(&other->mat_img2vcsgnd_);
  mat_local2img_.InternalSwap(&other->mat_local2img_);
  mat_img2local_.InternalSwap(&other->mat_img2local_);
  mat_vcs2img_.InternalSwap(&other->mat_vcs2img_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraMatrix::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoiMap::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::perception_base::_RoiMap_default_instance_._instance.get_mutable()->model_roi_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoiMap::kModelRoiFieldNumber;
const int RoiMap::kModelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoiMap::RoiMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsRoiMap();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.RoiMap)
}
RoiMap::RoiMap(const RoiMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_model_roi()) {
    model_roi_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.model_roi_);
  } else {
    model_roi_ = NULL;
  }
  model_id_ = from.model_id_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.RoiMap)
}

void RoiMap::SharedCtor() {
  ::memset(&model_roi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_id_) -
      reinterpret_cast<char*>(&model_roi_)) + sizeof(model_id_));
  _cached_size_ = 0;
}

RoiMap::~RoiMap() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.RoiMap)
  SharedDtor();
}

void RoiMap::SharedDtor() {
  if (this != internal_default_instance()) delete model_roi_;
}

void RoiMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoiMap::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoiMap& RoiMap::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsRoiMap();
  return *internal_default_instance();
}

RoiMap* RoiMap::New(::google::protobuf::Arena* arena) const {
  RoiMap* n = new RoiMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoiMap::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.RoiMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && model_roi_ != NULL) {
    delete model_roi_;
  }
  model_roi_ = NULL;
  model_id_ = 0;
  _internal_metadata_.Clear();
}

bool RoiMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.RoiMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.Rect model_roi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_model_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 model_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.RoiMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.RoiMap)
  return false;
#undef DO_
}

void RoiMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.RoiMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Rect model_roi = 1;
  if (this->has_model_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->model_roi_, output);
  }

  // int32 model_id = 2;
  if (this->model_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->model_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.RoiMap)
}

::google::protobuf::uint8* RoiMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.RoiMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Rect model_roi = 1;
  if (this->has_model_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->model_roi_, deterministic, target);
  }

  // int32 model_id = 2;
  if (this->model_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->model_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.RoiMap)
  return target;
}

size_t RoiMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.RoiMap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.perception_base.Rect model_roi = 1;
  if (this->has_model_roi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->model_roi_);
  }

  // int32 model_id = 2;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoiMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.RoiMap)
  GOOGLE_DCHECK_NE(&from, this);
  const RoiMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoiMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.RoiMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.RoiMap)
    MergeFrom(*source);
  }
}

void RoiMap::MergeFrom(const RoiMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.RoiMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_model_roi()) {
    mutable_model_roi()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.model_roi());
  }
  if (from.model_id() != 0) {
    set_model_id(from.model_id());
  }
}

void RoiMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.RoiMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoiMap::CopyFrom(const RoiMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.RoiMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoiMap::IsInitialized() const {
  return true;
}

void RoiMap::Swap(RoiMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoiMap::InternalSwap(RoiMap* other) {
  using std::swap;
  swap(model_roi_, other->model_roi_);
  swap(model_id_, other->model_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoiMap::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kCamIdxFieldNumber;
const int Header::kFrameIdFieldNumber;
const int Header::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_id_, &from.frame_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cam_idx_) -
    reinterpret_cast<char*>(&frame_id_)) + sizeof(cam_idx_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.Header)
}

void Header::SharedCtor() {
  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cam_idx_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(cam_idx_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsHeader();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frame_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cam_idx_) -
      reinterpret_cast<char*>(&frame_id_)) + sizeof(cam_idx_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cam_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cam_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frame_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cam_idx = 1;
  if (this->cam_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cam_idx(), output);
  }

  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->frame_id(), output);
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_stamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cam_idx = 1;
  if (this->cam_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cam_idx(), target);
  }

  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->frame_id(), target);
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_stamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frame_id());
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_stamp());
  }

  // int32 cam_idx = 1;
  if (this->cam_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cam_idx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.cam_idx() != 0) {
    set_cam_idx(from.cam_idx());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  swap(frame_id_, other->frame_id_);
  swap(time_stamp_, other->time_stamp_);
  swap(cam_idx_, other->cam_idx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Category::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Category::kPropertyTypeFieldNumber;
const int Category::kPropertyFieldNumber;
const int Category::kPropertyConfFieldNumber;
const int Category::kPropertyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Category::Category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsCategory();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.Category)
}
Category::Category(const Category& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.property_name().size() > 0) {
    property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  ::memcpy(&property_type_, &from.property_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&property_conf_) -
    reinterpret_cast<char*>(&property_type_)) + sizeof(property_conf_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.Category)
}

void Category::SharedCtor() {
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&property_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_conf_) -
      reinterpret_cast<char*>(&property_type_)) + sizeof(property_conf_));
  _cached_size_ = 0;
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.Category)
  SharedDtor();
}

void Category::SharedDtor() {
  property_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Category::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Category& Category::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsCategory();
  return *internal_default_instance();
}

Category* Category::New(::google::protobuf::Arena* arena) const {
  Category* n = new Category;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&property_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_conf_) -
      reinterpret_cast<char*>(&property_type_)) + sizeof(property_conf_));
  _internal_metadata_.Clear();
}

bool Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 property_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 property = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float property_conf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &property_conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string property_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->property_name().data(), static_cast<int>(this->property_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.perception_base.Category.property_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.Category)
  return false;
#undef DO_
}

void Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 property_type = 1;
  if (this->property_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->property_type(), output);
  }

  // int32 property = 2;
  if (this->property() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->property(), output);
  }

  // float property_conf = 3;
  if (this->property_conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->property_conf(), output);
  }

  // string property_name = 4;
  if (this->property_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property_name().data(), static_cast<int>(this->property_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.perception_base.Category.property_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->property_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.Category)
}

::google::protobuf::uint8* Category::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.Category)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 property_type = 1;
  if (this->property_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->property_type(), target);
  }

  // int32 property = 2;
  if (this->property() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->property(), target);
  }

  // float property_conf = 3;
  if (this->property_conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->property_conf(), target);
  }

  // string property_name = 4;
  if (this->property_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property_name().data(), static_cast<int>(this->property_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.perception_base.Category.property_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->property_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.Category)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string property_name = 4;
  if (this->property_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->property_name());
  }

  // int32 property_type = 1;
  if (this->property_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->property_type());
  }

  // int32 property = 2;
  if (this->property() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->property());
  }

  // float property_conf = 3;
  if (this->property_conf() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Category::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Category>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.Category)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.property_name().size() > 0) {

    property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  if (from.property_type() != 0) {
    set_property_type(from.property_type());
  }
  if (from.property() != 0) {
    set_property(from.property());
  }
  if (from.property_conf() != 0) {
    set_property_conf(from.property_conf());
  }
}

void Category::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::Swap(Category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Category::InternalSwap(Category* other) {
  using std::swap;
  property_name_.Swap(&other->property_name_);
  swap(property_type_, other->property_type_);
  swap(property_, other->property_);
  swap(property_conf_, other->property_conf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Category::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Box3D::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::perception_base::_Box3D_default_instance_._instance.get_mutable()->lower_lt_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::perception_base::_Box3D_default_instance_._instance.get_mutable()->lower_lb_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::perception_base::_Box3D_default_instance_._instance.get_mutable()->lower_rb_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::perception_base::_Box3D_default_instance_._instance.get_mutable()->lower_rt_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::perception_base::_Box3D_default_instance_._instance.get_mutable()->upper_lt_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::perception_base::_Box3D_default_instance_._instance.get_mutable()->upper_lb_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::perception_base::_Box3D_default_instance_._instance.get_mutable()->upper_rb_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::perception_base::_Box3D_default_instance_._instance.get_mutable()->upper_rt_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
}
void Box3D::clear_lower_lt() {
  if (GetArenaNoVirtual() == NULL && lower_lt_ != NULL) {
    delete lower_lt_;
  }
  lower_lt_ = NULL;
}
void Box3D::clear_lower_lb() {
  if (GetArenaNoVirtual() == NULL && lower_lb_ != NULL) {
    delete lower_lb_;
  }
  lower_lb_ = NULL;
}
void Box3D::clear_lower_rb() {
  if (GetArenaNoVirtual() == NULL && lower_rb_ != NULL) {
    delete lower_rb_;
  }
  lower_rb_ = NULL;
}
void Box3D::clear_lower_rt() {
  if (GetArenaNoVirtual() == NULL && lower_rt_ != NULL) {
    delete lower_rt_;
  }
  lower_rt_ = NULL;
}
void Box3D::clear_upper_lt() {
  if (GetArenaNoVirtual() == NULL && upper_lt_ != NULL) {
    delete upper_lt_;
  }
  upper_lt_ = NULL;
}
void Box3D::clear_upper_lb() {
  if (GetArenaNoVirtual() == NULL && upper_lb_ != NULL) {
    delete upper_lb_;
  }
  upper_lb_ = NULL;
}
void Box3D::clear_upper_rb() {
  if (GetArenaNoVirtual() == NULL && upper_rb_ != NULL) {
    delete upper_rb_;
  }
  upper_rb_ = NULL;
}
void Box3D::clear_upper_rt() {
  if (GetArenaNoVirtual() == NULL && upper_rt_ != NULL) {
    delete upper_rt_;
  }
  upper_rt_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Box3D::kLowerLtFieldNumber;
const int Box3D::kLowerLbFieldNumber;
const int Box3D::kLowerRbFieldNumber;
const int Box3D::kLowerRtFieldNumber;
const int Box3D::kUpperLtFieldNumber;
const int Box3D::kUpperLbFieldNumber;
const int Box3D::kUpperRbFieldNumber;
const int Box3D::kUpperRtFieldNumber;
const int Box3D::kConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Box3D::Box3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsBox3D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.Box3D)
}
Box3D::Box3D(const Box3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lower_lt()) {
    lower_lt_ = new ::autodrive::workflow::proto::Vector3f(*from.lower_lt_);
  } else {
    lower_lt_ = NULL;
  }
  if (from.has_lower_lb()) {
    lower_lb_ = new ::autodrive::workflow::proto::Vector3f(*from.lower_lb_);
  } else {
    lower_lb_ = NULL;
  }
  if (from.has_lower_rb()) {
    lower_rb_ = new ::autodrive::workflow::proto::Vector3f(*from.lower_rb_);
  } else {
    lower_rb_ = NULL;
  }
  if (from.has_lower_rt()) {
    lower_rt_ = new ::autodrive::workflow::proto::Vector3f(*from.lower_rt_);
  } else {
    lower_rt_ = NULL;
  }
  if (from.has_upper_lt()) {
    upper_lt_ = new ::autodrive::workflow::proto::Vector3f(*from.upper_lt_);
  } else {
    upper_lt_ = NULL;
  }
  if (from.has_upper_lb()) {
    upper_lb_ = new ::autodrive::workflow::proto::Vector3f(*from.upper_lb_);
  } else {
    upper_lb_ = NULL;
  }
  if (from.has_upper_rb()) {
    upper_rb_ = new ::autodrive::workflow::proto::Vector3f(*from.upper_rb_);
  } else {
    upper_rb_ = NULL;
  }
  if (from.has_upper_rt()) {
    upper_rt_ = new ::autodrive::workflow::proto::Vector3f(*from.upper_rt_);
  } else {
    upper_rt_ = NULL;
  }
  conf_ = from.conf_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.Box3D)
}

void Box3D::SharedCtor() {
  ::memset(&lower_lt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&lower_lt_)) + sizeof(conf_));
  _cached_size_ = 0;
}

Box3D::~Box3D() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.Box3D)
  SharedDtor();
}

void Box3D::SharedDtor() {
  if (this != internal_default_instance()) delete lower_lt_;
  if (this != internal_default_instance()) delete lower_lb_;
  if (this != internal_default_instance()) delete lower_rb_;
  if (this != internal_default_instance()) delete lower_rt_;
  if (this != internal_default_instance()) delete upper_lt_;
  if (this != internal_default_instance()) delete upper_lb_;
  if (this != internal_default_instance()) delete upper_rb_;
  if (this != internal_default_instance()) delete upper_rt_;
}

void Box3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box3D::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Box3D& Box3D::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsBox3D();
  return *internal_default_instance();
}

Box3D* Box3D::New(::google::protobuf::Arena* arena) const {
  Box3D* n = new Box3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Box3D::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.Box3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && lower_lt_ != NULL) {
    delete lower_lt_;
  }
  lower_lt_ = NULL;
  if (GetArenaNoVirtual() == NULL && lower_lb_ != NULL) {
    delete lower_lb_;
  }
  lower_lb_ = NULL;
  if (GetArenaNoVirtual() == NULL && lower_rb_ != NULL) {
    delete lower_rb_;
  }
  lower_rb_ = NULL;
  if (GetArenaNoVirtual() == NULL && lower_rt_ != NULL) {
    delete lower_rt_;
  }
  lower_rt_ = NULL;
  if (GetArenaNoVirtual() == NULL && upper_lt_ != NULL) {
    delete upper_lt_;
  }
  upper_lt_ = NULL;
  if (GetArenaNoVirtual() == NULL && upper_lb_ != NULL) {
    delete upper_lb_;
  }
  upper_lb_ = NULL;
  if (GetArenaNoVirtual() == NULL && upper_rb_ != NULL) {
    delete upper_rb_;
  }
  upper_rb_ = NULL;
  if (GetArenaNoVirtual() == NULL && upper_rt_ != NULL) {
    delete upper_rt_;
  }
  upper_rt_ = NULL;
  conf_ = 0;
  _internal_metadata_.Clear();
}

bool Box3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.Box3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.Vector3f lower_lt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_lt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f lower_lb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_lb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f lower_rb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_rb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f lower_rt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_rt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f upper_lt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_lt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f upper_lb = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_lb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f upper_rb = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_rb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f upper_rt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_rt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.Box3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.Box3D)
  return false;
#undef DO_
}

void Box3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.Box3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f lower_lt = 1;
  if (this->has_lower_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lower_lt_, output);
  }

  // .autodrive.workflow.proto.Vector3f lower_lb = 2;
  if (this->has_lower_lb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lower_lb_, output);
  }

  // .autodrive.workflow.proto.Vector3f lower_rb = 3;
  if (this->has_lower_rb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lower_rb_, output);
  }

  // .autodrive.workflow.proto.Vector3f lower_rt = 4;
  if (this->has_lower_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lower_rt_, output);
  }

  // .autodrive.workflow.proto.Vector3f upper_lt = 5;
  if (this->has_upper_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->upper_lt_, output);
  }

  // .autodrive.workflow.proto.Vector3f upper_lb = 6;
  if (this->has_upper_lb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->upper_lb_, output);
  }

  // .autodrive.workflow.proto.Vector3f upper_rb = 7;
  if (this->has_upper_rb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->upper_rb_, output);
  }

  // .autodrive.workflow.proto.Vector3f upper_rt = 8;
  if (this->has_upper_rt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->upper_rt_, output);
  }

  // float conf = 9;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->conf(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.Box3D)
}

::google::protobuf::uint8* Box3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.Box3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f lower_lt = 1;
  if (this->has_lower_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->lower_lt_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f lower_lb = 2;
  if (this->has_lower_lb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->lower_lb_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f lower_rb = 3;
  if (this->has_lower_rb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->lower_rb_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f lower_rt = 4;
  if (this->has_lower_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->lower_rt_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f upper_lt = 5;
  if (this->has_upper_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->upper_lt_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f upper_lb = 6;
  if (this->has_upper_lb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->upper_lb_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f upper_rb = 7;
  if (this->has_upper_rb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->upper_rb_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f upper_rt = 8;
  if (this->has_upper_rt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->upper_rt_, deterministic, target);
  }

  // float conf = 9;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->conf(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.Box3D)
  return target;
}

size_t Box3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.Box3D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector3f lower_lt = 1;
  if (this->has_lower_lt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lower_lt_);
  }

  // .autodrive.workflow.proto.Vector3f lower_lb = 2;
  if (this->has_lower_lb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lower_lb_);
  }

  // .autodrive.workflow.proto.Vector3f lower_rb = 3;
  if (this->has_lower_rb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lower_rb_);
  }

  // .autodrive.workflow.proto.Vector3f lower_rt = 4;
  if (this->has_lower_rt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lower_rt_);
  }

  // .autodrive.workflow.proto.Vector3f upper_lt = 5;
  if (this->has_upper_lt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->upper_lt_);
  }

  // .autodrive.workflow.proto.Vector3f upper_lb = 6;
  if (this->has_upper_lb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->upper_lb_);
  }

  // .autodrive.workflow.proto.Vector3f upper_rb = 7;
  if (this->has_upper_rb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->upper_rb_);
  }

  // .autodrive.workflow.proto.Vector3f upper_rt = 8;
  if (this->has_upper_rt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->upper_rt_);
  }

  // float conf = 9;
  if (this->conf() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.Box3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Box3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Box3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.Box3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.Box3D)
    MergeFrom(*source);
  }
}

void Box3D::MergeFrom(const Box3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.Box3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lower_lt()) {
    mutable_lower_lt()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.lower_lt());
  }
  if (from.has_lower_lb()) {
    mutable_lower_lb()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.lower_lb());
  }
  if (from.has_lower_rb()) {
    mutable_lower_rb()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.lower_rb());
  }
  if (from.has_lower_rt()) {
    mutable_lower_rt()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.lower_rt());
  }
  if (from.has_upper_lt()) {
    mutable_upper_lt()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.upper_lt());
  }
  if (from.has_upper_lb()) {
    mutable_upper_lb()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.upper_lb());
  }
  if (from.has_upper_rb()) {
    mutable_upper_rb()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.upper_rb());
  }
  if (from.has_upper_rt()) {
    mutable_upper_rt()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.upper_rt());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
}

void Box3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.Box3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box3D::CopyFrom(const Box3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.Box3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3D::IsInitialized() const {
  return true;
}

void Box3D::Swap(Box3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Box3D::InternalSwap(Box3D* other) {
  using std::swap;
  swap(lower_lt_, other->lower_lt_);
  swap(lower_lb_, other->lower_lb_);
  swap(lower_rb_, other->lower_rb_);
  swap(lower_rt_, other->lower_rt_);
  swap(upper_lt_, other->upper_lt_);
  swap(upper_lb_, other->upper_lb_);
  swap(upper_rb_, other->upper_rb_);
  swap(upper_rt_, other->upper_rt_);
  swap(conf_, other->conf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Box3D::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SceneParsing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneParsing::kImageIdFieldNumber;
const int SceneParsing::kRegionTypeFieldNumber;
const int SceneParsing::kIlluTypeFieldNumber;
const int SceneParsing::kParkingTypeFieldNumber;
const int SceneParsing::kRegionConfFieldNumber;
const int SceneParsing::kIlluConfFieldNumber;
const int SceneParsing::kParkingConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneParsing::SceneParsing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fbase_2eproto::InitDefaultsSceneParsing();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.perception_base.SceneParsing)
}
SceneParsing::SceneParsing(const SceneParsing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&image_id_, &from.image_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parking_conf_) -
    reinterpret_cast<char*>(&image_id_)) + sizeof(parking_conf_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.perception_base.SceneParsing)
}

void SceneParsing::SharedCtor() {
  ::memset(&image_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_conf_) -
      reinterpret_cast<char*>(&image_id_)) + sizeof(parking_conf_));
  _cached_size_ = 0;
}

SceneParsing::~SceneParsing() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.perception_base.SceneParsing)
  SharedDtor();
}

void SceneParsing::SharedDtor() {
}

void SceneParsing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneParsing::descriptor() {
  ::protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneParsing& SceneParsing::default_instance() {
  ::protobuf_perception_5fbase_2eproto::InitDefaultsSceneParsing();
  return *internal_default_instance();
}

SceneParsing* SceneParsing::New(::google::protobuf::Arena* arena) const {
  SceneParsing* n = new SceneParsing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneParsing::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.perception_base.SceneParsing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&image_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_conf_) -
      reinterpret_cast<char*>(&image_id_)) + sizeof(parking_conf_));
  _internal_metadata_.Clear();
}

bool SceneParsing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.perception_base.SceneParsing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_image_id(static_cast< ::autodrive::workflow::proto::perception_base::ImageId >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.SceneRegionType region_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_region_type(static_cast< ::autodrive::workflow::proto::perception_base::SceneRegionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.SceneIlluminationType illu_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_illu_type(static_cast< ::autodrive::workflow::proto::perception_base::SceneIlluminationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.SceneParkingType parking_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parking_type(static_cast< ::autodrive::workflow::proto::perception_base::SceneParkingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float region_conf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &region_conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float illu_conf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &illu_conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float parking_conf = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parking_conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.perception_base.SceneParsing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.perception_base.SceneParsing)
  return false;
#undef DO_
}

void SceneParsing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.perception_base.SceneParsing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
  if (this->image_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->image_id(), output);
  }

  // .autodrive.workflow.proto.perception_base.SceneRegionType region_type = 2;
  if (this->region_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->region_type(), output);
  }

  // .autodrive.workflow.proto.perception_base.SceneIlluminationType illu_type = 3;
  if (this->illu_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->illu_type(), output);
  }

  // .autodrive.workflow.proto.perception_base.SceneParkingType parking_type = 4;
  if (this->parking_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->parking_type(), output);
  }

  // float region_conf = 5;
  if (this->region_conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->region_conf(), output);
  }

  // float illu_conf = 6;
  if (this->illu_conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->illu_conf(), output);
  }

  // float parking_conf = 7;
  if (this->parking_conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->parking_conf(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.perception_base.SceneParsing)
}

::google::protobuf::uint8* SceneParsing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.perception_base.SceneParsing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
  if (this->image_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->image_id(), target);
  }

  // .autodrive.workflow.proto.perception_base.SceneRegionType region_type = 2;
  if (this->region_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->region_type(), target);
  }

  // .autodrive.workflow.proto.perception_base.SceneIlluminationType illu_type = 3;
  if (this->illu_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->illu_type(), target);
  }

  // .autodrive.workflow.proto.perception_base.SceneParkingType parking_type = 4;
  if (this->parking_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->parking_type(), target);
  }

  // float region_conf = 5;
  if (this->region_conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->region_conf(), target);
  }

  // float illu_conf = 6;
  if (this->illu_conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->illu_conf(), target);
  }

  // float parking_conf = 7;
  if (this->parking_conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->parking_conf(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.perception_base.SceneParsing)
  return target;
}

size_t SceneParsing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.perception_base.SceneParsing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
  if (this->image_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->image_id());
  }

  // .autodrive.workflow.proto.perception_base.SceneRegionType region_type = 2;
  if (this->region_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->region_type());
  }

  // .autodrive.workflow.proto.perception_base.SceneIlluminationType illu_type = 3;
  if (this->illu_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->illu_type());
  }

  // .autodrive.workflow.proto.perception_base.SceneParkingType parking_type = 4;
  if (this->parking_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parking_type());
  }

  // float region_conf = 5;
  if (this->region_conf() != 0) {
    total_size += 1 + 4;
  }

  // float illu_conf = 6;
  if (this->illu_conf() != 0) {
    total_size += 1 + 4;
  }

  // float parking_conf = 7;
  if (this->parking_conf() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneParsing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.perception_base.SceneParsing)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneParsing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneParsing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.perception_base.SceneParsing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.perception_base.SceneParsing)
    MergeFrom(*source);
  }
}

void SceneParsing::MergeFrom(const SceneParsing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.perception_base.SceneParsing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_id() != 0) {
    set_image_id(from.image_id());
  }
  if (from.region_type() != 0) {
    set_region_type(from.region_type());
  }
  if (from.illu_type() != 0) {
    set_illu_type(from.illu_type());
  }
  if (from.parking_type() != 0) {
    set_parking_type(from.parking_type());
  }
  if (from.region_conf() != 0) {
    set_region_conf(from.region_conf());
  }
  if (from.illu_conf() != 0) {
    set_illu_conf(from.illu_conf());
  }
  if (from.parking_conf() != 0) {
    set_parking_conf(from.parking_conf());
  }
}

void SceneParsing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.perception_base.SceneParsing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneParsing::CopyFrom(const SceneParsing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.perception_base.SceneParsing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneParsing::IsInitialized() const {
  return true;
}

void SceneParsing::Swap(SceneParsing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneParsing::InternalSwap(SceneParsing* other) {
  using std::swap;
  swap(image_id_, other->image_id_);
  swap(region_type_, other->region_type_);
  swap(illu_type_, other->illu_type_);
  swap(parking_type_, other->parking_type_);
  swap(region_conf_, other->region_conf_);
  swap(illu_conf_, other->illu_conf_);
  swap(parking_conf_, other->parking_conf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneParsing::GetMetadata() const {
  protobuf_perception_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception_base
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
