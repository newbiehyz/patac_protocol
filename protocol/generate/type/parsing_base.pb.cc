// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parsing_base.proto

#include "parsing_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class IpmParsingImageDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpmParsingImageData>
      _instance;
} _IpmParsingImageData_default_instance_;
class RleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rle>
      _instance;
} _Rle_default_instance_;
class RleContourPointerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RleContourPointer>
      _instance;
} _RleContourPointer_default_instance_;
class ConnectRegionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectRegion>
      _instance;
} _ConnectRegion_default_instance_;
class RleCompressedDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RleCompressedData>
      _instance;
} _RleCompressedData_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_parsing_5fbase_2eproto {
void InitDefaultsIpmParsingImageDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_IpmParsingImageData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::IpmParsingImageData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::IpmParsingImageData::InitAsDefaultInstance();
}

void InitDefaultsIpmParsingImageData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIpmParsingImageDataImpl);
}

void InitDefaultsRleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_Rle_default_instance_;
    new (ptr) ::autodrive::workflow::proto::Rle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::Rle::InitAsDefaultInstance();
}

void InitDefaultsRle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRleImpl);
}

void InitDefaultsRleContourPointerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_RleContourPointer_default_instance_;
    new (ptr) ::autodrive::workflow::proto::RleContourPointer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::RleContourPointer::InitAsDefaultInstance();
}

void InitDefaultsRleContourPointer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRleContourPointerImpl);
}

void InitDefaultsConnectRegionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  protobuf_parsing_5fbase_2eproto::InitDefaultsRle();
  protobuf_parsing_5fbase_2eproto::InitDefaultsRleContourPointer();
  {
    void* ptr = &::autodrive::workflow::proto::_ConnectRegion_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ConnectRegion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ConnectRegion::InitAsDefaultInstance();
}

void InitDefaultsConnectRegion() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectRegionImpl);
}

void InitDefaultsRleCompressedDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_parsing_5fbase_2eproto::InitDefaultsRle();
  protobuf_parsing_5fbase_2eproto::InitDefaultsConnectRegion();
  {
    void* ptr = &::autodrive::workflow::proto::_RleCompressedData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::RleCompressedData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::RleCompressedData::InitAsDefaultInstance();
}

void InitDefaultsRleCompressedData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRleCompressedDataImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingImageData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingImageData, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingImageData, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingImageData, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Rle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Rle, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Rle, xstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Rle, xend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Rle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Rle, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleContourPointer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleContourPointer, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleContourPointer, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ConnectRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ConnectRegion, boundbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ConnectRegion, narea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ConnectRegion, rle_list_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ConnectRegion, contour_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, valid_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, free_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, inited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, rle_list_buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, connect_regions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, begin_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, end_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, begin_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, end_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RleCompressedData, has_build_connect_region_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::IpmParsingImageData)},
  { 9, -1, sizeof(::autodrive::workflow::proto::Rle)},
  { 19, -1, sizeof(::autodrive::workflow::proto::RleContourPointer)},
  { 26, -1, sizeof(::autodrive::workflow::proto::ConnectRegion)},
  { 35, -1, sizeof(::autodrive::workflow::proto::RleCompressedData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_IpmParsingImageData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_Rle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_RleContourPointer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ConnectRegion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_RleCompressedData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "parsing_base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022parsing_base.proto\022\030autodrive.workflow"
      ".proto\032\025perception_base.proto\"S\n\023IpmPars"
      "ingImageData\022\014\n\004data\030\001 \001(\014\022\r\n\005width\030\002 \001("
      "\r\022\016\n\006height\030\003 \001(\r\022\017\n\007channel\030\004 \001(\r\"M\n\003Rl"
      "e\022\t\n\001y\030\001 \001(\005\022\016\n\006xstart\030\002 \001(\005\022\014\n\004xend\030\003 \001"
      "(\005\022\016\n\006length\030\004 \001(\005\022\r\n\005value\030\005 \001(\005\")\n\021Rle"
      "ContourPointer\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\335\001\n"
      "\rConnectRegion\022@\n\010boundbox\030\001 \001(\0132..autod"
      "rive.workflow.proto.perception_base.Rect"
      "\022\r\n\005nArea\030\002 \001(\005\0226\n\017rle_list_region\030\003 \003(\013"
      "2\035.autodrive.workflow.proto.Rle\022C\n\016conto"
      "ur_points\030\004 \003(\0132+.autodrive.workflow.pro"
      "to.RleContourPointer\"\323\002\n\021RleCompressedDa"
      "ta\022\024\n\014valid_height\030\001 \001(\005\022\r\n\005width\030\002 \001(\005\022"
      "\016\n\006height\030\003 \001(\005\022\022\n\nfree_label\030\004 \001(\r\022\016\n\006i"
      "nited\030\005 \001(\010\0223\n\014rle_list_buf\030\006 \003(\0132\035.auto"
      "drive.workflow.proto.Rle\022@\n\017connect_regi"
      "ons\030\007 \003(\0132\'.autodrive.workflow.proto.Con"
      "nectRegion\022\017\n\007begin_y\030\010 \001(\005\022\r\n\005end_y\030\t \001"
      "(\005\022\017\n\007begin_x\030\n \001(\005\022\r\n\005end_x\030\013 \001(\005\022\014\n\004st"
      "ep\030\014 \001(\005\022 \n\030has_build_connect_region\030\r \001"
      "(\010*N\n\016RLEContourMode\022\037\n\033kRLEContourModeR"
      "etrExternal\020\000\022\033\n\027kRLEContourModeRetrList"
      "\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 930);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "parsing_base.proto", &protobuf_RegisterTypes);
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_parsing_5fbase_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* RLEContourMode_descriptor() {
  protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_5fbase_2eproto::file_level_enum_descriptors[0];
}
bool RLEContourMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void IpmParsingImageData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpmParsingImageData::kDataFieldNumber;
const int IpmParsingImageData::kWidthFieldNumber;
const int IpmParsingImageData::kHeightFieldNumber;
const int IpmParsingImageData::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpmParsingImageData::IpmParsingImageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_5fbase_2eproto::InitDefaultsIpmParsingImageData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.IpmParsingImageData)
}
IpmParsingImageData::IpmParsingImageData(const IpmParsingImageData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.IpmParsingImageData)
}

void IpmParsingImageData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  _cached_size_ = 0;
}

IpmParsingImageData::~IpmParsingImageData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.IpmParsingImageData)
  SharedDtor();
}

void IpmParsingImageData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IpmParsingImageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpmParsingImageData::descriptor() {
  ::protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpmParsingImageData& IpmParsingImageData::default_instance() {
  ::protobuf_parsing_5fbase_2eproto::InitDefaultsIpmParsingImageData();
  return *internal_default_instance();
}

IpmParsingImageData* IpmParsingImageData::New(::google::protobuf::Arena* arena) const {
  IpmParsingImageData* n = new IpmParsingImageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IpmParsingImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.IpmParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

bool IpmParsingImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.IpmParsingImageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.IpmParsingImageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.IpmParsingImageData)
  return false;
#undef DO_
}

void IpmParsingImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.IpmParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.IpmParsingImageData)
}

::google::protobuf::uint8* IpmParsingImageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.IpmParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.IpmParsingImageData)
  return target;
}

size_t IpmParsingImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.IpmParsingImageData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpmParsingImageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.IpmParsingImageData)
  GOOGLE_DCHECK_NE(&from, this);
  const IpmParsingImageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpmParsingImageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.IpmParsingImageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.IpmParsingImageData)
    MergeFrom(*source);
  }
}

void IpmParsingImageData::MergeFrom(const IpmParsingImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.IpmParsingImageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void IpmParsingImageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.IpmParsingImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpmParsingImageData::CopyFrom(const IpmParsingImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.IpmParsingImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpmParsingImageData::IsInitialized() const {
  return true;
}

void IpmParsingImageData::Swap(IpmParsingImageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpmParsingImageData::InternalSwap(IpmParsingImageData* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IpmParsingImageData::GetMetadata() const {
  protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rle::kYFieldNumber;
const int Rle::kXstartFieldNumber;
const int Rle::kXendFieldNumber;
const int Rle::kLengthFieldNumber;
const int Rle::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rle::Rle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_5fbase_2eproto::InitDefaultsRle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.Rle)
}
Rle::Rle(const Rle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&y_, &from.y_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&y_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.Rle)
}

void Rle::SharedCtor() {
  ::memset(&y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&y_)) + sizeof(value_));
  _cached_size_ = 0;
}

Rle::~Rle() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.Rle)
  SharedDtor();
}

void Rle::SharedDtor() {
}

void Rle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rle::descriptor() {
  ::protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rle& Rle::default_instance() {
  ::protobuf_parsing_5fbase_2eproto::InitDefaultsRle();
  return *internal_default_instance();
}

Rle* Rle::New(::google::protobuf::Arena* arena) const {
  Rle* n = new Rle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rle::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.Rle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&y_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool Rle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.Rle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 y = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 xstart = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 xend = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.Rle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.Rle)
  return false;
#undef DO_
}

void Rle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.Rle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 y = 1;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->y(), output);
  }

  // int32 xstart = 2;
  if (this->xstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xstart(), output);
  }

  // int32 xend = 3;
  if (this->xend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->xend(), output);
  }

  // int32 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // int32 value = 5;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.Rle)
}

::google::protobuf::uint8* Rle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.Rle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 y = 1;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->y(), target);
  }

  // int32 xstart = 2;
  if (this->xstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xstart(), target);
  }

  // int32 xend = 3;
  if (this->xend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->xend(), target);
  }

  // int32 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  // int32 value = 5;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.Rle)
  return target;
}

size_t Rle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.Rle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 y = 1;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 xstart = 2;
  if (this->xstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xstart());
  }

  // int32 xend = 3;
  if (this->xend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xend());
  }

  // int32 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // int32 value = 5;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.Rle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.Rle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.Rle)
    MergeFrom(*source);
  }
}

void Rle::MergeFrom(const Rle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.Rle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.xstart() != 0) {
    set_xstart(from.xstart());
  }
  if (from.xend() != 0) {
    set_xend(from.xend());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Rle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.Rle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rle::CopyFrom(const Rle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.Rle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rle::IsInitialized() const {
  return true;
}

void Rle::Swap(Rle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rle::InternalSwap(Rle* other) {
  using std::swap;
  swap(y_, other->y_);
  swap(xstart_, other->xstart_);
  swap(xend_, other->xend_);
  swap(length_, other->length_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rle::GetMetadata() const {
  protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RleContourPointer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RleContourPointer::kXFieldNumber;
const int RleContourPointer::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RleContourPointer::RleContourPointer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_5fbase_2eproto::InitDefaultsRleContourPointer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.RleContourPointer)
}
RleContourPointer::RleContourPointer(const RleContourPointer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.RleContourPointer)
}

void RleContourPointer::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

RleContourPointer::~RleContourPointer() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.RleContourPointer)
  SharedDtor();
}

void RleContourPointer::SharedDtor() {
}

void RleContourPointer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RleContourPointer::descriptor() {
  ::protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RleContourPointer& RleContourPointer::default_instance() {
  ::protobuf_parsing_5fbase_2eproto::InitDefaultsRleContourPointer();
  return *internal_default_instance();
}

RleContourPointer* RleContourPointer::New(::google::protobuf::Arena* arena) const {
  RleContourPointer* n = new RleContourPointer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RleContourPointer::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.RleContourPointer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool RleContourPointer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.RleContourPointer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.RleContourPointer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.RleContourPointer)
  return false;
#undef DO_
}

void RleContourPointer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.RleContourPointer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.RleContourPointer)
}

::google::protobuf::uint8* RleContourPointer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.RleContourPointer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.RleContourPointer)
  return target;
}

size_t RleContourPointer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.RleContourPointer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RleContourPointer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.RleContourPointer)
  GOOGLE_DCHECK_NE(&from, this);
  const RleContourPointer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RleContourPointer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.RleContourPointer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.RleContourPointer)
    MergeFrom(*source);
  }
}

void RleContourPointer::MergeFrom(const RleContourPointer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.RleContourPointer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void RleContourPointer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.RleContourPointer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RleContourPointer::CopyFrom(const RleContourPointer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.RleContourPointer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RleContourPointer::IsInitialized() const {
  return true;
}

void RleContourPointer::Swap(RleContourPointer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RleContourPointer::InternalSwap(RleContourPointer* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RleContourPointer::GetMetadata() const {
  protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectRegion::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ConnectRegion_default_instance_._instance.get_mutable()->boundbox_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
void ConnectRegion::clear_boundbox() {
  if (GetArenaNoVirtual() == NULL && boundbox_ != NULL) {
    delete boundbox_;
  }
  boundbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectRegion::kBoundboxFieldNumber;
const int ConnectRegion::kNAreaFieldNumber;
const int ConnectRegion::kRleListRegionFieldNumber;
const int ConnectRegion::kContourPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectRegion::ConnectRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_5fbase_2eproto::InitDefaultsConnectRegion();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ConnectRegion)
}
ConnectRegion::ConnectRegion(const ConnectRegion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rle_list_region_(from.rle_list_region_),
      contour_points_(from.contour_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_boundbox()) {
    boundbox_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.boundbox_);
  } else {
    boundbox_ = NULL;
  }
  narea_ = from.narea_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ConnectRegion)
}

void ConnectRegion::SharedCtor() {
  ::memset(&boundbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&narea_) -
      reinterpret_cast<char*>(&boundbox_)) + sizeof(narea_));
  _cached_size_ = 0;
}

ConnectRegion::~ConnectRegion() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ConnectRegion)
  SharedDtor();
}

void ConnectRegion::SharedDtor() {
  if (this != internal_default_instance()) delete boundbox_;
}

void ConnectRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRegion::descriptor() {
  ::protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectRegion& ConnectRegion::default_instance() {
  ::protobuf_parsing_5fbase_2eproto::InitDefaultsConnectRegion();
  return *internal_default_instance();
}

ConnectRegion* ConnectRegion::New(::google::protobuf::Arena* arena) const {
  ConnectRegion* n = new ConnectRegion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ConnectRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rle_list_region_.Clear();
  contour_points_.Clear();
  if (GetArenaNoVirtual() == NULL && boundbox_ != NULL) {
    delete boundbox_;
  }
  boundbox_ = NULL;
  narea_ = 0;
  _internal_metadata_.Clear();
}

bool ConnectRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ConnectRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.Rect boundbox = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boundbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nArea = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &narea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.Rle rle_list_region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rle_list_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.RleContourPointer contour_points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_contour_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ConnectRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ConnectRegion)
  return false;
#undef DO_
}

void ConnectRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ConnectRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Rect boundbox = 1;
  if (this->has_boundbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->boundbox_, output);
  }

  // int32 nArea = 2;
  if (this->narea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->narea(), output);
  }

  // repeated .autodrive.workflow.proto.Rle rle_list_region = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rle_list_region_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rle_list_region(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.RleContourPointer contour_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contour_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->contour_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ConnectRegion)
}

::google::protobuf::uint8* ConnectRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ConnectRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Rect boundbox = 1;
  if (this->has_boundbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->boundbox_, deterministic, target);
  }

  // int32 nArea = 2;
  if (this->narea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->narea(), target);
  }

  // repeated .autodrive.workflow.proto.Rle rle_list_region = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rle_list_region_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->rle_list_region(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.RleContourPointer contour_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contour_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->contour_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ConnectRegion)
  return target;
}

size_t ConnectRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ConnectRegion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.Rle rle_list_region = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->rle_list_region_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rle_list_region(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.RleContourPointer contour_points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->contour_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->contour_points(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.perception_base.Rect boundbox = 1;
  if (this->has_boundbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->boundbox_);
  }

  // int32 nArea = 2;
  if (this->narea() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->narea());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ConnectRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRegion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ConnectRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ConnectRegion)
    MergeFrom(*source);
  }
}

void ConnectRegion::MergeFrom(const ConnectRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ConnectRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rle_list_region_.MergeFrom(from.rle_list_region_);
  contour_points_.MergeFrom(from.contour_points_);
  if (from.has_boundbox()) {
    mutable_boundbox()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.boundbox());
  }
  if (from.narea() != 0) {
    set_narea(from.narea());
  }
}

void ConnectRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ConnectRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRegion::CopyFrom(const ConnectRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ConnectRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRegion::IsInitialized() const {
  return true;
}

void ConnectRegion::Swap(ConnectRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectRegion::InternalSwap(ConnectRegion* other) {
  using std::swap;
  rle_list_region_.InternalSwap(&other->rle_list_region_);
  contour_points_.InternalSwap(&other->contour_points_);
  swap(boundbox_, other->boundbox_);
  swap(narea_, other->narea_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectRegion::GetMetadata() const {
  protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RleCompressedData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RleCompressedData::kValidHeightFieldNumber;
const int RleCompressedData::kWidthFieldNumber;
const int RleCompressedData::kHeightFieldNumber;
const int RleCompressedData::kFreeLabelFieldNumber;
const int RleCompressedData::kInitedFieldNumber;
const int RleCompressedData::kRleListBufFieldNumber;
const int RleCompressedData::kConnectRegionsFieldNumber;
const int RleCompressedData::kBeginYFieldNumber;
const int RleCompressedData::kEndYFieldNumber;
const int RleCompressedData::kBeginXFieldNumber;
const int RleCompressedData::kEndXFieldNumber;
const int RleCompressedData::kStepFieldNumber;
const int RleCompressedData::kHasBuildConnectRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RleCompressedData::RleCompressedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_5fbase_2eproto::InitDefaultsRleCompressedData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.RleCompressedData)
}
RleCompressedData::RleCompressedData(const RleCompressedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rle_list_buf_(from.rle_list_buf_),
      connect_regions_(from.connect_regions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&valid_height_, &from.valid_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&valid_height_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.RleCompressedData)
}

void RleCompressedData::SharedCtor() {
  ::memset(&valid_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&valid_height_)) + sizeof(step_));
  _cached_size_ = 0;
}

RleCompressedData::~RleCompressedData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.RleCompressedData)
  SharedDtor();
}

void RleCompressedData::SharedDtor() {
}

void RleCompressedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RleCompressedData::descriptor() {
  ::protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RleCompressedData& RleCompressedData::default_instance() {
  ::protobuf_parsing_5fbase_2eproto::InitDefaultsRleCompressedData();
  return *internal_default_instance();
}

RleCompressedData* RleCompressedData::New(::google::protobuf::Arena* arena) const {
  RleCompressedData* n = new RleCompressedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RleCompressedData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.RleCompressedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rle_list_buf_.Clear();
  connect_regions_.Clear();
  ::memset(&valid_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&valid_height_)) + sizeof(step_));
  _internal_metadata_.Clear();
}

bool RleCompressedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.RleCompressedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 valid_height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 free_label = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inited = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.Rle rle_list_buf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rle_list_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ConnectRegion connect_regions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_connect_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 begin_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_y = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 begin_x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_x = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 step = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_build_connect_region = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_build_connect_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.RleCompressedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.RleCompressedData)
  return false;
#undef DO_
}

void RleCompressedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.RleCompressedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 valid_height = 1;
  if (this->valid_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->valid_height(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // uint32 free_label = 4;
  if (this->free_label() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->free_label(), output);
  }

  // bool inited = 5;
  if (this->inited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->inited(), output);
  }

  // repeated .autodrive.workflow.proto.Rle rle_list_buf = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rle_list_buf_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rle_list_buf(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.ConnectRegion connect_regions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connect_regions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->connect_regions(static_cast<int>(i)), output);
  }

  // int32 begin_y = 8;
  if (this->begin_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->begin_y(), output);
  }

  // int32 end_y = 9;
  if (this->end_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->end_y(), output);
  }

  // int32 begin_x = 10;
  if (this->begin_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->begin_x(), output);
  }

  // int32 end_x = 11;
  if (this->end_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->end_x(), output);
  }

  // int32 step = 12;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->step(), output);
  }

  // bool has_build_connect_region = 13;
  if (this->has_build_connect_region() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->has_build_connect_region(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.RleCompressedData)
}

::google::protobuf::uint8* RleCompressedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.RleCompressedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 valid_height = 1;
  if (this->valid_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->valid_height(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // uint32 free_label = 4;
  if (this->free_label() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->free_label(), target);
  }

  // bool inited = 5;
  if (this->inited() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->inited(), target);
  }

  // repeated .autodrive.workflow.proto.Rle rle_list_buf = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rle_list_buf_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->rle_list_buf(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.ConnectRegion connect_regions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connect_regions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->connect_regions(static_cast<int>(i)), deterministic, target);
  }

  // int32 begin_y = 8;
  if (this->begin_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->begin_y(), target);
  }

  // int32 end_y = 9;
  if (this->end_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->end_y(), target);
  }

  // int32 begin_x = 10;
  if (this->begin_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->begin_x(), target);
  }

  // int32 end_x = 11;
  if (this->end_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->end_x(), target);
  }

  // int32 step = 12;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->step(), target);
  }

  // bool has_build_connect_region = 13;
  if (this->has_build_connect_region() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->has_build_connect_region(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.RleCompressedData)
  return target;
}

size_t RleCompressedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.RleCompressedData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.Rle rle_list_buf = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->rle_list_buf_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rle_list_buf(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.ConnectRegion connect_regions = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->connect_regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connect_regions(static_cast<int>(i)));
    }
  }

  // int32 valid_height = 1;
  if (this->valid_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->valid_height());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // uint32 free_label = 4;
  if (this->free_label() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->free_label());
  }

  // int32 begin_y = 8;
  if (this->begin_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin_y());
  }

  // int32 end_y = 9;
  if (this->end_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_y());
  }

  // bool inited = 5;
  if (this->inited() != 0) {
    total_size += 1 + 1;
  }

  // bool has_build_connect_region = 13;
  if (this->has_build_connect_region() != 0) {
    total_size += 1 + 1;
  }

  // int32 begin_x = 10;
  if (this->begin_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->begin_x());
  }

  // int32 end_x = 11;
  if (this->end_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_x());
  }

  // int32 step = 12;
  if (this->step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RleCompressedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.RleCompressedData)
  GOOGLE_DCHECK_NE(&from, this);
  const RleCompressedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RleCompressedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.RleCompressedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.RleCompressedData)
    MergeFrom(*source);
  }
}

void RleCompressedData::MergeFrom(const RleCompressedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.RleCompressedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rle_list_buf_.MergeFrom(from.rle_list_buf_);
  connect_regions_.MergeFrom(from.connect_regions_);
  if (from.valid_height() != 0) {
    set_valid_height(from.valid_height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.free_label() != 0) {
    set_free_label(from.free_label());
  }
  if (from.begin_y() != 0) {
    set_begin_y(from.begin_y());
  }
  if (from.end_y() != 0) {
    set_end_y(from.end_y());
  }
  if (from.inited() != 0) {
    set_inited(from.inited());
  }
  if (from.has_build_connect_region() != 0) {
    set_has_build_connect_region(from.has_build_connect_region());
  }
  if (from.begin_x() != 0) {
    set_begin_x(from.begin_x());
  }
  if (from.end_x() != 0) {
    set_end_x(from.end_x());
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
}

void RleCompressedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.RleCompressedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RleCompressedData::CopyFrom(const RleCompressedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.RleCompressedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RleCompressedData::IsInitialized() const {
  return true;
}

void RleCompressedData::Swap(RleCompressedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RleCompressedData::InternalSwap(RleCompressedData* other) {
  using std::swap;
  rle_list_buf_.InternalSwap(&other->rle_list_buf_);
  connect_regions_.InternalSwap(&other->connect_regions_);
  swap(valid_height_, other->valid_height_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(free_label_, other->free_label_);
  swap(begin_y_, other->begin_y_);
  swap(end_y_, other->end_y_);
  swap(inited_, other->inited_);
  swap(has_build_connect_region_, other->has_build_connect_region_);
  swap(begin_x_, other->begin_x_);
  swap(end_x_, other->end_x_);
  swap(step_, other->step_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RleCompressedData::GetMetadata() const {
  protobuf_parsing_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
