// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_obstacle_debug_info.proto

#include "dynamic_obstacle_debug_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class PositionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionResult>
      _instance;
} _PositionResult_default_instance_;
class PositionDebugInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionDebugInfo>
      _instance;
} _PositionDebugInfo_default_instance_;
class SpeedResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedResult>
      _instance;
} _SpeedResult_default_instance_;
class SpeedDebugInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedDebugInfo>
      _instance;
} _SpeedDebugInfo_default_instance_;
class SizeDebugInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SizeDebugInfo>
      _instance;
} _SizeDebugInfo_default_instance_;
class YawDebugInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<YawDebugInfo>
      _instance;
} _YawDebugInfo_default_instance_;
class DynamicObstacleDebugInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DynamicObstacleDebugInfo>
      _instance;
} _DynamicObstacleDebugInfo_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto {
void InitDefaultsPositionResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::autodrive::workflow::proto::_PositionResult_default_instance_;
    new (ptr) ::autodrive::workflow::proto::PositionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::PositionResult::InitAsDefaultInstance();
}

void InitDefaultsPositionResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPositionResultImpl);
}

void InitDefaultsPositionDebugInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsPositionResult();
  {
    void* ptr = &::autodrive::workflow::proto::_PositionDebugInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::PositionDebugInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::PositionDebugInfo::InitAsDefaultInstance();
}

void InitDefaultsPositionDebugInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPositionDebugInfoImpl);
}

void InitDefaultsSpeedResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector2f();
  {
    void* ptr = &::autodrive::workflow::proto::_SpeedResult_default_instance_;
    new (ptr) ::autodrive::workflow::proto::SpeedResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::SpeedResult::InitAsDefaultInstance();
}

void InitDefaultsSpeedResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeedResultImpl);
}

void InitDefaultsSpeedDebugInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSpeedResult();
  protobuf_basic_2eproto::InitDefaultsVector2f();
  {
    void* ptr = &::autodrive::workflow::proto::_SpeedDebugInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::SpeedDebugInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::SpeedDebugInfo::InitAsDefaultInstance();
}

void InitDefaultsSpeedDebugInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeedDebugInfoImpl);
}

void InitDefaultsSizeDebugInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_SizeDebugInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::SizeDebugInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::SizeDebugInfo::InitAsDefaultInstance();
}

void InitDefaultsSizeDebugInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSizeDebugInfoImpl);
}

void InitDefaultsYawDebugInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_YawDebugInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::YawDebugInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::YawDebugInfo::InitAsDefaultInstance();
}

void InitDefaultsYawDebugInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsYawDebugInfoImpl);
}

void InitDefaultsDynamicObstacleDebugInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsPositionDebugInfo();
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSpeedDebugInfo();
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSizeDebugInfo();
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsYawDebugInfo();
  {
    void* ptr = &::autodrive::workflow::proto::_DynamicObstacleDebugInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::DynamicObstacleDebugInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::DynamicObstacleDebugInfo::InitAsDefaultInstance();
}

void InitDefaultsDynamicObstacleDebugInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDynamicObstacleDebugInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionResult, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionResult, var_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionResult, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionDebugInfo, in_sensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionDebugInfo, use_measures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionDebugInfo, position_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionDebugInfo, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionDebugInfo, fusion_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionDebugInfo, pre_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionDebugInfo, post_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PositionDebugInfo, time_gap_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, speed_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, measure_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, measure_isvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, real_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, img_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, raw_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, world_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, pos_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, state_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, state_pos_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, state_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedResult, state_speed_noise_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedDebugInfo, speed_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedDebugInfo, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedDebugInfo, speed_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedDebugInfo, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedDebugInfo, acc_noise_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, veh_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, veh_type_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, h_measure_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, h_measure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, h_measure_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, h_wh_measure_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, h_wh_measure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, h_wh_measure_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, h_3d_measure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, h_3d_measure_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, w_3d_measure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, w_3d_measure_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, l_3d_measure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, l_3d_measure_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SizeDebugInfo, l_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::YawDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::YawDebugInfo, yaw_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::YawDebugInfo, vcs_pi_measure_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::YawDebugInfo, world_pi_measure_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::YawDebugInfo, yaw_measure_var_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::YawDebugInfo, vcs_pi_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::YawDebugInfo, world_pi_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::YawDebugInfo, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::YawDebugInfo, yaw_var_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacleDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacleDebugInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacleDebugInfo, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacleDebugInfo, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacleDebugInfo, pos_debug_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacleDebugInfo, speed_debug_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacleDebugInfo, size_debug_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DynamicObstacleDebugInfo, yaw_debug_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::PositionResult)},
  { 8, -1, sizeof(::autodrive::workflow::proto::PositionDebugInfo)},
  { 21, -1, sizeof(::autodrive::workflow::proto::SpeedResult)},
  { 40, -1, sizeof(::autodrive::workflow::proto::SpeedDebugInfo)},
  { 50, -1, sizeof(::autodrive::workflow::proto::SizeDebugInfo)},
  { 72, -1, sizeof(::autodrive::workflow::proto::YawDebugInfo)},
  { 85, -1, sizeof(::autodrive::workflow::proto::DynamicObstacleDebugInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_PositionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_PositionDebugInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_SpeedResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_SpeedDebugInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_SizeDebugInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_YawDebugInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_DynamicObstacleDebugInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dynamic_obstacle_debug_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!dynamic_obstacle_debug_info.proto\022\030aut"
      "odrive.workflow.proto\032\013basic.proto\"\205\001\n\016P"
      "ositionResult\0224\n\010position\030\001 \001(\0132\".autodr"
      "ive.workflow.proto.Vector3f\022/\n\003var\030\002 \001(\013"
      "2\".autodrive.workflow.proto.Vector3f\022\014\n\004"
      "type\030\003 \001(\r\"\327\002\n\021PositionDebugInfo\022\022\n\nin_s"
      "ensors\030\001 \001(\005\022\024\n\014use_measures\030\002 \001(\005\022B\n\020po"
      "sition_results\030\003 \003(\0132(.autodrive.workflo"
      "w.proto.PositionResult\022\r\n\005speed\030\004 \001(\002\022<\n"
      "\nfusion_pos\030\005 \001(\0132(.autodrive.workflow.p"
      "roto.PositionResult\0229\n\007pre_pos\030\006 \001(\0132(.a"
      "utodrive.workflow.proto.PositionResult\022:"
      "\n\010post_pos\030\007 \001(\0132(.autodrive.workflow.pr"
      "oto.PositionResult\022\020\n\010time_gap\030\010 \001(\003\"\241\004\n"
      "\013SpeedResult\022\022\n\nspeed_type\030\001 \001(\r\022\024\n\014meas"
      "ure_type\030\002 \001(\r\022\027\n\017measure_isvalid\030\003 \001(\010\022"
      "\021\n\treal_size\030\004 \001(\002\022\r\n\005img_x\030\005 \001(\002\022\t\n\001h\030\006"
      " \001(\002\022\t\n\001w\030\007 \001(\002\0228\n\014raw_position\030\010 \001(\0132\"."
      "autodrive.workflow.proto.Vector2f\022:\n\016wor"
      "ld_position\030\t \001(\0132\".autodrive.workflow.p"
      "roto.Vector2f\0225\n\tpos_noise\030\n \001(\0132\".autod"
      "rive.workflow.proto.Vector2f\0225\n\tstate_po"
      "s\030\013 \001(\0132\".autodrive.workflow.proto.Vecto"
      "r2f\022;\n\017state_pos_noise\030\014 \001(\0132\".autodrive"
      ".workflow.proto.Vector2f\0227\n\013state_speed\030"
      "\r \001(\0132\".autodrive.workflow.proto.Vector2"
      "f\022=\n\021state_speed_noise\030\016 \001(\0132\".autodrive"
      ".workflow.proto.Vector2f\"\242\002\n\016SpeedDebugI"
      "nfo\022<\n\rspeed_results\030\001 \003(\0132%.autodrive.w"
      "orkflow.proto.SpeedResult\0221\n\005speed\030\002 \001(\013"
      "2\".autodrive.workflow.proto.Vector2f\0227\n\013"
      "speed_noise\030\003 \001(\0132\".autodrive.workflow.p"
      "roto.Vector2f\022/\n\003acc\030\004 \001(\0132\".autodrive.w"
      "orkflow.proto.Vector2f\0225\n\tacc_noise\030\005 \001("
      "\0132\".autodrive.workflow.proto.Vector2f\"\376\002"
      "\n\rSizeDebugInfo\022\020\n\010veh_type\030\001 \001(\r\022\025\n\rveh"
      "_type_conf\030\002 \001(\002\022\025\n\rH_measure_raw\030\003 \001(\002\022"
      "\021\n\tH_measure\030\004 \001(\002\022\027\n\017H_measure_noise\030\005 "
      "\001(\002\022\030\n\020H_wh_measure_raw\030\006 \001(\002\022\024\n\014H_wh_me"
      "asure\030\007 \001(\002\022\032\n\022H_wh_measure_noise\030\010 \001(\002\022"
      "\024\n\014H_3d_measure\030\t \001(\002\022\032\n\022H_3d_measure_no"
      "ise\030\n \001(\002\022\024\n\014W_3d_measure\030\013 \001(\002\022\032\n\022W_3d_"
      "measure_noise\030\014 \001(\002\022\024\n\014L_3d_measure\030\r \001("
      "\002\022\032\n\022L_3d_measure_noise\030\016 \001(\002\022\t\n\001W\030\017 \001(\002"
      "\022\t\n\001H\030\020 \001(\002\022\t\n\001L\030\021 \001(\002\"\300\001\n\014YawDebugInfo\022"
      "\020\n\010yaw_type\030\001 \001(\r\022\032\n\022vcs_pi_measure_yaw\030"
      "\002 \001(\002\022\034\n\024world_pi_measure_yaw\030\003 \001(\002\022\027\n\017y"
      "aw_measure_var\030\004 \001(\002\022\022\n\nvcs_pi_yaw\030\005 \001(\002"
      "\022\024\n\014world_pi_yaw\030\006 \001(\002\022\020\n\010yaw_rate\030\007 \001(\002"
      "\022\017\n\007yaw_var\030\010 \001(\002\"\326\002\n\030DynamicObstacleDeb"
      "ugInfo\022\n\n\002id\030\001 \001(\005\022\020\n\010frame_id\030\002 \001(\005\022\021\n\t"
      "sensor_id\030\003 \001(\005\022C\n\016pos_debug_info\030\004 \001(\0132"
      "+.autodrive.workflow.proto.PositionDebug"
      "Info\022B\n\020speed_debug_info\030\005 \001(\0132(.autodri"
      "ve.workflow.proto.SpeedDebugInfo\022@\n\017size"
      "_debug_info\030\006 \001(\0132\'.autodrive.workflow.p"
      "roto.SizeDebugInfo\022>\n\016yaw_debug_info\030\007 \001"
      "(\0132&.autodrive.workflow.proto.YawDebugIn"
      "fob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2330);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dynamic_obstacle_debug_info.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void PositionResult::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_PositionResult_default_instance_._instance.get_mutable()->position_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_PositionResult_default_instance_._instance.get_mutable()->var_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
}
void PositionResult::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void PositionResult::clear_var() {
  if (GetArenaNoVirtual() == NULL && var_ != NULL) {
    delete var_;
  }
  var_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionResult::kPositionFieldNumber;
const int PositionResult::kVarFieldNumber;
const int PositionResult::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionResult::PositionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsPositionResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.PositionResult)
}
PositionResult::PositionResult(const PositionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::autodrive::workflow::proto::Vector3f(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_var()) {
    var_ = new ::autodrive::workflow::proto::Vector3f(*from.var_);
  } else {
    var_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.PositionResult)
}

void PositionResult::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(type_));
  _cached_size_ = 0;
}

PositionResult::~PositionResult() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.PositionResult)
  SharedDtor();
}

void PositionResult::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete var_;
}

void PositionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionResult::descriptor() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionResult& PositionResult::default_instance() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsPositionResult();
  return *internal_default_instance();
}

PositionResult* PositionResult::New(::google::protobuf::Arena* arena) const {
  PositionResult* n = new PositionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PositionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.PositionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && var_ != NULL) {
    delete var_;
  }
  var_ = NULL;
  type_ = 0u;
  _internal_metadata_.Clear();
}

bool PositionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.PositionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.Vector3f position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f var = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_var()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.PositionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.PositionResult)
  return false;
#undef DO_
}

void PositionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.PositionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // .autodrive.workflow.proto.Vector3f var = 2;
  if (this->has_var()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->var_, output);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.PositionResult)
}

::google::protobuf::uint8* PositionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.PositionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->position_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f var = 2;
  if (this->has_var()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->var_, deterministic, target);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.PositionResult)
  return target;
}

size_t PositionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.PositionResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector3f position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_);
  }

  // .autodrive.workflow.proto.Vector3f var = 2;
  if (this->has_var()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->var_);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.PositionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.PositionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.PositionResult)
    MergeFrom(*source);
  }
}

void PositionResult::MergeFrom(const PositionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.PositionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.position());
  }
  if (from.has_var()) {
    mutable_var()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.var());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PositionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.PositionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionResult::CopyFrom(const PositionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.PositionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionResult::IsInitialized() const {
  return true;
}

void PositionResult::Swap(PositionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionResult::InternalSwap(PositionResult* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(var_, other->var_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PositionResult::GetMetadata() const {
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PositionDebugInfo::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_PositionDebugInfo_default_instance_._instance.get_mutable()->fusion_pos_ = const_cast< ::autodrive::workflow::proto::PositionResult*>(
      ::autodrive::workflow::proto::PositionResult::internal_default_instance());
  ::autodrive::workflow::proto::_PositionDebugInfo_default_instance_._instance.get_mutable()->pre_pos_ = const_cast< ::autodrive::workflow::proto::PositionResult*>(
      ::autodrive::workflow::proto::PositionResult::internal_default_instance());
  ::autodrive::workflow::proto::_PositionDebugInfo_default_instance_._instance.get_mutable()->post_pos_ = const_cast< ::autodrive::workflow::proto::PositionResult*>(
      ::autodrive::workflow::proto::PositionResult::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionDebugInfo::kInSensorsFieldNumber;
const int PositionDebugInfo::kUseMeasuresFieldNumber;
const int PositionDebugInfo::kPositionResultsFieldNumber;
const int PositionDebugInfo::kSpeedFieldNumber;
const int PositionDebugInfo::kFusionPosFieldNumber;
const int PositionDebugInfo::kPrePosFieldNumber;
const int PositionDebugInfo::kPostPosFieldNumber;
const int PositionDebugInfo::kTimeGapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionDebugInfo::PositionDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsPositionDebugInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.PositionDebugInfo)
}
PositionDebugInfo::PositionDebugInfo(const PositionDebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_results_(from.position_results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fusion_pos()) {
    fusion_pos_ = new ::autodrive::workflow::proto::PositionResult(*from.fusion_pos_);
  } else {
    fusion_pos_ = NULL;
  }
  if (from.has_pre_pos()) {
    pre_pos_ = new ::autodrive::workflow::proto::PositionResult(*from.pre_pos_);
  } else {
    pre_pos_ = NULL;
  }
  if (from.has_post_pos()) {
    post_pos_ = new ::autodrive::workflow::proto::PositionResult(*from.post_pos_);
  } else {
    post_pos_ = NULL;
  }
  ::memcpy(&in_sensors_, &from.in_sensors_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&in_sensors_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.PositionDebugInfo)
}

void PositionDebugInfo::SharedCtor() {
  ::memset(&fusion_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&fusion_pos_)) + sizeof(speed_));
  _cached_size_ = 0;
}

PositionDebugInfo::~PositionDebugInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.PositionDebugInfo)
  SharedDtor();
}

void PositionDebugInfo::SharedDtor() {
  if (this != internal_default_instance()) delete fusion_pos_;
  if (this != internal_default_instance()) delete pre_pos_;
  if (this != internal_default_instance()) delete post_pos_;
}

void PositionDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionDebugInfo::descriptor() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionDebugInfo& PositionDebugInfo::default_instance() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsPositionDebugInfo();
  return *internal_default_instance();
}

PositionDebugInfo* PositionDebugInfo::New(::google::protobuf::Arena* arena) const {
  PositionDebugInfo* n = new PositionDebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PositionDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.PositionDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_results_.Clear();
  if (GetArenaNoVirtual() == NULL && fusion_pos_ != NULL) {
    delete fusion_pos_;
  }
  fusion_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && pre_pos_ != NULL) {
    delete pre_pos_;
  }
  pre_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && post_pos_ != NULL) {
    delete post_pos_;
  }
  post_pos_ = NULL;
  ::memset(&in_sensors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&in_sensors_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

bool PositionDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.PositionDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 in_sensors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_sensors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 use_measures = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_measures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.PositionResult position_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_position_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.PositionResult fusion_pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fusion_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.PositionResult pre_pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pre_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.PositionResult post_pos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_post_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_gap = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.PositionDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.PositionDebugInfo)
  return false;
#undef DO_
}

void PositionDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.PositionDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 in_sensors = 1;
  if (this->in_sensors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->in_sensors(), output);
  }

  // int32 use_measures = 2;
  if (this->use_measures() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->use_measures(), output);
  }

  // repeated .autodrive.workflow.proto.PositionResult position_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position_results(static_cast<int>(i)), output);
  }

  // float speed = 4;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // .autodrive.workflow.proto.PositionResult fusion_pos = 5;
  if (this->has_fusion_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fusion_pos_, output);
  }

  // .autodrive.workflow.proto.PositionResult pre_pos = 6;
  if (this->has_pre_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pre_pos_, output);
  }

  // .autodrive.workflow.proto.PositionResult post_pos = 7;
  if (this->has_post_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->post_pos_, output);
  }

  // int64 time_gap = 8;
  if (this->time_gap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->time_gap(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.PositionDebugInfo)
}

::google::protobuf::uint8* PositionDebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.PositionDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 in_sensors = 1;
  if (this->in_sensors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->in_sensors(), target);
  }

  // int32 use_measures = 2;
  if (this->use_measures() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->use_measures(), target);
  }

  // repeated .autodrive.workflow.proto.PositionResult position_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->position_results(static_cast<int>(i)), deterministic, target);
  }

  // float speed = 4;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // .autodrive.workflow.proto.PositionResult fusion_pos = 5;
  if (this->has_fusion_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->fusion_pos_, deterministic, target);
  }

  // .autodrive.workflow.proto.PositionResult pre_pos = 6;
  if (this->has_pre_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->pre_pos_, deterministic, target);
  }

  // .autodrive.workflow.proto.PositionResult post_pos = 7;
  if (this->has_post_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->post_pos_, deterministic, target);
  }

  // int64 time_gap = 8;
  if (this->time_gap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->time_gap(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.PositionDebugInfo)
  return target;
}

size_t PositionDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.PositionDebugInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.PositionResult position_results = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->position_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->position_results(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.PositionResult fusion_pos = 5;
  if (this->has_fusion_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fusion_pos_);
  }

  // .autodrive.workflow.proto.PositionResult pre_pos = 6;
  if (this->has_pre_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pre_pos_);
  }

  // .autodrive.workflow.proto.PositionResult post_pos = 7;
  if (this->has_post_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->post_pos_);
  }

  // int32 in_sensors = 1;
  if (this->in_sensors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->in_sensors());
  }

  // int32 use_measures = 2;
  if (this->use_measures() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_measures());
  }

  // int64 time_gap = 8;
  if (this->time_gap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_gap());
  }

  // float speed = 4;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.PositionDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionDebugInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionDebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.PositionDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.PositionDebugInfo)
    MergeFrom(*source);
  }
}

void PositionDebugInfo::MergeFrom(const PositionDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.PositionDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_results_.MergeFrom(from.position_results_);
  if (from.has_fusion_pos()) {
    mutable_fusion_pos()->::autodrive::workflow::proto::PositionResult::MergeFrom(from.fusion_pos());
  }
  if (from.has_pre_pos()) {
    mutable_pre_pos()->::autodrive::workflow::proto::PositionResult::MergeFrom(from.pre_pos());
  }
  if (from.has_post_pos()) {
    mutable_post_pos()->::autodrive::workflow::proto::PositionResult::MergeFrom(from.post_pos());
  }
  if (from.in_sensors() != 0) {
    set_in_sensors(from.in_sensors());
  }
  if (from.use_measures() != 0) {
    set_use_measures(from.use_measures());
  }
  if (from.time_gap() != 0) {
    set_time_gap(from.time_gap());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void PositionDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.PositionDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionDebugInfo::CopyFrom(const PositionDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.PositionDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionDebugInfo::IsInitialized() const {
  return true;
}

void PositionDebugInfo::Swap(PositionDebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PositionDebugInfo::InternalSwap(PositionDebugInfo* other) {
  using std::swap;
  position_results_.InternalSwap(&other->position_results_);
  swap(fusion_pos_, other->fusion_pos_);
  swap(pre_pos_, other->pre_pos_);
  swap(post_pos_, other->post_pos_);
  swap(in_sensors_, other->in_sensors_);
  swap(use_measures_, other->use_measures_);
  swap(time_gap_, other->time_gap_);
  swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PositionDebugInfo::GetMetadata() const {
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedResult::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_SpeedResult_default_instance_._instance.get_mutable()->raw_position_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedResult_default_instance_._instance.get_mutable()->world_position_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedResult_default_instance_._instance.get_mutable()->pos_noise_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedResult_default_instance_._instance.get_mutable()->state_pos_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedResult_default_instance_._instance.get_mutable()->state_pos_noise_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedResult_default_instance_._instance.get_mutable()->state_speed_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedResult_default_instance_._instance.get_mutable()->state_speed_noise_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
}
void SpeedResult::clear_raw_position() {
  if (GetArenaNoVirtual() == NULL && raw_position_ != NULL) {
    delete raw_position_;
  }
  raw_position_ = NULL;
}
void SpeedResult::clear_world_position() {
  if (GetArenaNoVirtual() == NULL && world_position_ != NULL) {
    delete world_position_;
  }
  world_position_ = NULL;
}
void SpeedResult::clear_pos_noise() {
  if (GetArenaNoVirtual() == NULL && pos_noise_ != NULL) {
    delete pos_noise_;
  }
  pos_noise_ = NULL;
}
void SpeedResult::clear_state_pos() {
  if (GetArenaNoVirtual() == NULL && state_pos_ != NULL) {
    delete state_pos_;
  }
  state_pos_ = NULL;
}
void SpeedResult::clear_state_pos_noise() {
  if (GetArenaNoVirtual() == NULL && state_pos_noise_ != NULL) {
    delete state_pos_noise_;
  }
  state_pos_noise_ = NULL;
}
void SpeedResult::clear_state_speed() {
  if (GetArenaNoVirtual() == NULL && state_speed_ != NULL) {
    delete state_speed_;
  }
  state_speed_ = NULL;
}
void SpeedResult::clear_state_speed_noise() {
  if (GetArenaNoVirtual() == NULL && state_speed_noise_ != NULL) {
    delete state_speed_noise_;
  }
  state_speed_noise_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedResult::kSpeedTypeFieldNumber;
const int SpeedResult::kMeasureTypeFieldNumber;
const int SpeedResult::kMeasureIsvalidFieldNumber;
const int SpeedResult::kRealSizeFieldNumber;
const int SpeedResult::kImgXFieldNumber;
const int SpeedResult::kHFieldNumber;
const int SpeedResult::kWFieldNumber;
const int SpeedResult::kRawPositionFieldNumber;
const int SpeedResult::kWorldPositionFieldNumber;
const int SpeedResult::kPosNoiseFieldNumber;
const int SpeedResult::kStatePosFieldNumber;
const int SpeedResult::kStatePosNoiseFieldNumber;
const int SpeedResult::kStateSpeedFieldNumber;
const int SpeedResult::kStateSpeedNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedResult::SpeedResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSpeedResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.SpeedResult)
}
SpeedResult::SpeedResult(const SpeedResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_raw_position()) {
    raw_position_ = new ::autodrive::workflow::proto::Vector2f(*from.raw_position_);
  } else {
    raw_position_ = NULL;
  }
  if (from.has_world_position()) {
    world_position_ = new ::autodrive::workflow::proto::Vector2f(*from.world_position_);
  } else {
    world_position_ = NULL;
  }
  if (from.has_pos_noise()) {
    pos_noise_ = new ::autodrive::workflow::proto::Vector2f(*from.pos_noise_);
  } else {
    pos_noise_ = NULL;
  }
  if (from.has_state_pos()) {
    state_pos_ = new ::autodrive::workflow::proto::Vector2f(*from.state_pos_);
  } else {
    state_pos_ = NULL;
  }
  if (from.has_state_pos_noise()) {
    state_pos_noise_ = new ::autodrive::workflow::proto::Vector2f(*from.state_pos_noise_);
  } else {
    state_pos_noise_ = NULL;
  }
  if (from.has_state_speed()) {
    state_speed_ = new ::autodrive::workflow::proto::Vector2f(*from.state_speed_);
  } else {
    state_speed_ = NULL;
  }
  if (from.has_state_speed_noise()) {
    state_speed_noise_ = new ::autodrive::workflow::proto::Vector2f(*from.state_speed_noise_);
  } else {
    state_speed_noise_ = NULL;
  }
  ::memcpy(&speed_type_, &from.speed_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&speed_type_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.SpeedResult)
}

void SpeedResult::SharedCtor() {
  ::memset(&raw_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&raw_position_)) + sizeof(w_));
  _cached_size_ = 0;
}

SpeedResult::~SpeedResult() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.SpeedResult)
  SharedDtor();
}

void SpeedResult::SharedDtor() {
  if (this != internal_default_instance()) delete raw_position_;
  if (this != internal_default_instance()) delete world_position_;
  if (this != internal_default_instance()) delete pos_noise_;
  if (this != internal_default_instance()) delete state_pos_;
  if (this != internal_default_instance()) delete state_pos_noise_;
  if (this != internal_default_instance()) delete state_speed_;
  if (this != internal_default_instance()) delete state_speed_noise_;
}

void SpeedResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedResult::descriptor() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedResult& SpeedResult::default_instance() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSpeedResult();
  return *internal_default_instance();
}

SpeedResult* SpeedResult::New(::google::protobuf::Arena* arena) const {
  SpeedResult* n = new SpeedResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedResult::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.SpeedResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && raw_position_ != NULL) {
    delete raw_position_;
  }
  raw_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && world_position_ != NULL) {
    delete world_position_;
  }
  world_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos_noise_ != NULL) {
    delete pos_noise_;
  }
  pos_noise_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_pos_ != NULL) {
    delete state_pos_;
  }
  state_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_pos_noise_ != NULL) {
    delete state_pos_noise_;
  }
  state_pos_noise_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_speed_ != NULL) {
    delete state_speed_;
  }
  state_speed_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_speed_noise_ != NULL) {
    delete state_speed_noise_;
  }
  state_speed_noise_ = NULL;
  ::memset(&speed_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&speed_type_)) + sizeof(w_));
  _internal_metadata_.Clear();
}

bool SpeedResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.SpeedResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 speed_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 measure_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &measure_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool measure_isvalid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &measure_isvalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float real_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float img_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &img_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float h = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float w = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f raw_position = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f world_position = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f pos_noise = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f state_pos = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f state_pos_noise = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_pos_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f state_speed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f state_speed_noise = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_speed_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.SpeedResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.SpeedResult)
  return false;
#undef DO_
}

void SpeedResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.SpeedResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed_type = 1;
  if (this->speed_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->speed_type(), output);
  }

  // uint32 measure_type = 2;
  if (this->measure_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->measure_type(), output);
  }

  // bool measure_isvalid = 3;
  if (this->measure_isvalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->measure_isvalid(), output);
  }

  // float real_size = 4;
  if (this->real_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->real_size(), output);
  }

  // float img_x = 5;
  if (this->img_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->img_x(), output);
  }

  // float h = 6;
  if (this->h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->h(), output);
  }

  // float w = 7;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->w(), output);
  }

  // .autodrive.workflow.proto.Vector2f raw_position = 8;
  if (this->has_raw_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->raw_position_, output);
  }

  // .autodrive.workflow.proto.Vector2f world_position = 9;
  if (this->has_world_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->world_position_, output);
  }

  // .autodrive.workflow.proto.Vector2f pos_noise = 10;
  if (this->has_pos_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->pos_noise_, output);
  }

  // .autodrive.workflow.proto.Vector2f state_pos = 11;
  if (this->has_state_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->state_pos_, output);
  }

  // .autodrive.workflow.proto.Vector2f state_pos_noise = 12;
  if (this->has_state_pos_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->state_pos_noise_, output);
  }

  // .autodrive.workflow.proto.Vector2f state_speed = 13;
  if (this->has_state_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->state_speed_, output);
  }

  // .autodrive.workflow.proto.Vector2f state_speed_noise = 14;
  if (this->has_state_speed_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->state_speed_noise_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.SpeedResult)
}

::google::protobuf::uint8* SpeedResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.SpeedResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed_type = 1;
  if (this->speed_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->speed_type(), target);
  }

  // uint32 measure_type = 2;
  if (this->measure_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->measure_type(), target);
  }

  // bool measure_isvalid = 3;
  if (this->measure_isvalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->measure_isvalid(), target);
  }

  // float real_size = 4;
  if (this->real_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->real_size(), target);
  }

  // float img_x = 5;
  if (this->img_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->img_x(), target);
  }

  // float h = 6;
  if (this->h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->h(), target);
  }

  // float w = 7;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->w(), target);
  }

  // .autodrive.workflow.proto.Vector2f raw_position = 8;
  if (this->has_raw_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->raw_position_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f world_position = 9;
  if (this->has_world_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->world_position_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f pos_noise = 10;
  if (this->has_pos_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->pos_noise_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f state_pos = 11;
  if (this->has_state_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->state_pos_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f state_pos_noise = 12;
  if (this->has_state_pos_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->state_pos_noise_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f state_speed = 13;
  if (this->has_state_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->state_speed_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f state_speed_noise = 14;
  if (this->has_state_speed_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->state_speed_noise_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.SpeedResult)
  return target;
}

size_t SpeedResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.SpeedResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector2f raw_position = 8;
  if (this->has_raw_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->raw_position_);
  }

  // .autodrive.workflow.proto.Vector2f world_position = 9;
  if (this->has_world_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->world_position_);
  }

  // .autodrive.workflow.proto.Vector2f pos_noise = 10;
  if (this->has_pos_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pos_noise_);
  }

  // .autodrive.workflow.proto.Vector2f state_pos = 11;
  if (this->has_state_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_pos_);
  }

  // .autodrive.workflow.proto.Vector2f state_pos_noise = 12;
  if (this->has_state_pos_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_pos_noise_);
  }

  // .autodrive.workflow.proto.Vector2f state_speed = 13;
  if (this->has_state_speed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_speed_);
  }

  // .autodrive.workflow.proto.Vector2f state_speed_noise = 14;
  if (this->has_state_speed_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_speed_noise_);
  }

  // uint32 speed_type = 1;
  if (this->speed_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed_type());
  }

  // uint32 measure_type = 2;
  if (this->measure_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->measure_type());
  }

  // bool measure_isvalid = 3;
  if (this->measure_isvalid() != 0) {
    total_size += 1 + 1;
  }

  // float real_size = 4;
  if (this->real_size() != 0) {
    total_size += 1 + 4;
  }

  // float img_x = 5;
  if (this->img_x() != 0) {
    total_size += 1 + 4;
  }

  // float h = 6;
  if (this->h() != 0) {
    total_size += 1 + 4;
  }

  // float w = 7;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.SpeedResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.SpeedResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.SpeedResult)
    MergeFrom(*source);
  }
}

void SpeedResult::MergeFrom(const SpeedResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.SpeedResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_raw_position()) {
    mutable_raw_position()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.raw_position());
  }
  if (from.has_world_position()) {
    mutable_world_position()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.world_position());
  }
  if (from.has_pos_noise()) {
    mutable_pos_noise()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.pos_noise());
  }
  if (from.has_state_pos()) {
    mutable_state_pos()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.state_pos());
  }
  if (from.has_state_pos_noise()) {
    mutable_state_pos_noise()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.state_pos_noise());
  }
  if (from.has_state_speed()) {
    mutable_state_speed()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.state_speed());
  }
  if (from.has_state_speed_noise()) {
    mutable_state_speed_noise()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.state_speed_noise());
  }
  if (from.speed_type() != 0) {
    set_speed_type(from.speed_type());
  }
  if (from.measure_type() != 0) {
    set_measure_type(from.measure_type());
  }
  if (from.measure_isvalid() != 0) {
    set_measure_isvalid(from.measure_isvalid());
  }
  if (from.real_size() != 0) {
    set_real_size(from.real_size());
  }
  if (from.img_x() != 0) {
    set_img_x(from.img_x());
  }
  if (from.h() != 0) {
    set_h(from.h());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void SpeedResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.SpeedResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedResult::CopyFrom(const SpeedResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.SpeedResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedResult::IsInitialized() const {
  return true;
}

void SpeedResult::Swap(SpeedResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedResult::InternalSwap(SpeedResult* other) {
  using std::swap;
  swap(raw_position_, other->raw_position_);
  swap(world_position_, other->world_position_);
  swap(pos_noise_, other->pos_noise_);
  swap(state_pos_, other->state_pos_);
  swap(state_pos_noise_, other->state_pos_noise_);
  swap(state_speed_, other->state_speed_);
  swap(state_speed_noise_, other->state_speed_noise_);
  swap(speed_type_, other->speed_type_);
  swap(measure_type_, other->measure_type_);
  swap(measure_isvalid_, other->measure_isvalid_);
  swap(real_size_, other->real_size_);
  swap(img_x_, other->img_x_);
  swap(h_, other->h_);
  swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedResult::GetMetadata() const {
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedDebugInfo::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_SpeedDebugInfo_default_instance_._instance.get_mutable()->speed_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedDebugInfo_default_instance_._instance.get_mutable()->speed_noise_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedDebugInfo_default_instance_._instance.get_mutable()->acc_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedDebugInfo_default_instance_._instance.get_mutable()->acc_noise_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
}
void SpeedDebugInfo::clear_speed() {
  if (GetArenaNoVirtual() == NULL && speed_ != NULL) {
    delete speed_;
  }
  speed_ = NULL;
}
void SpeedDebugInfo::clear_speed_noise() {
  if (GetArenaNoVirtual() == NULL && speed_noise_ != NULL) {
    delete speed_noise_;
  }
  speed_noise_ = NULL;
}
void SpeedDebugInfo::clear_acc() {
  if (GetArenaNoVirtual() == NULL && acc_ != NULL) {
    delete acc_;
  }
  acc_ = NULL;
}
void SpeedDebugInfo::clear_acc_noise() {
  if (GetArenaNoVirtual() == NULL && acc_noise_ != NULL) {
    delete acc_noise_;
  }
  acc_noise_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedDebugInfo::kSpeedResultsFieldNumber;
const int SpeedDebugInfo::kSpeedFieldNumber;
const int SpeedDebugInfo::kSpeedNoiseFieldNumber;
const int SpeedDebugInfo::kAccFieldNumber;
const int SpeedDebugInfo::kAccNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedDebugInfo::SpeedDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSpeedDebugInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.SpeedDebugInfo)
}
SpeedDebugInfo::SpeedDebugInfo(const SpeedDebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      speed_results_(from.speed_results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_speed()) {
    speed_ = new ::autodrive::workflow::proto::Vector2f(*from.speed_);
  } else {
    speed_ = NULL;
  }
  if (from.has_speed_noise()) {
    speed_noise_ = new ::autodrive::workflow::proto::Vector2f(*from.speed_noise_);
  } else {
    speed_noise_ = NULL;
  }
  if (from.has_acc()) {
    acc_ = new ::autodrive::workflow::proto::Vector2f(*from.acc_);
  } else {
    acc_ = NULL;
  }
  if (from.has_acc_noise()) {
    acc_noise_ = new ::autodrive::workflow::proto::Vector2f(*from.acc_noise_);
  } else {
    acc_noise_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.SpeedDebugInfo)
}

void SpeedDebugInfo::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_noise_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(acc_noise_));
  _cached_size_ = 0;
}

SpeedDebugInfo::~SpeedDebugInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.SpeedDebugInfo)
  SharedDtor();
}

void SpeedDebugInfo::SharedDtor() {
  if (this != internal_default_instance()) delete speed_;
  if (this != internal_default_instance()) delete speed_noise_;
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete acc_noise_;
}

void SpeedDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedDebugInfo::descriptor() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedDebugInfo& SpeedDebugInfo::default_instance() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSpeedDebugInfo();
  return *internal_default_instance();
}

SpeedDebugInfo* SpeedDebugInfo::New(::google::protobuf::Arena* arena) const {
  SpeedDebugInfo* n = new SpeedDebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.SpeedDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_results_.Clear();
  if (GetArenaNoVirtual() == NULL && speed_ != NULL) {
    delete speed_;
  }
  speed_ = NULL;
  if (GetArenaNoVirtual() == NULL && speed_noise_ != NULL) {
    delete speed_noise_;
  }
  speed_noise_ = NULL;
  if (GetArenaNoVirtual() == NULL && acc_ != NULL) {
    delete acc_;
  }
  acc_ = NULL;
  if (GetArenaNoVirtual() == NULL && acc_noise_ != NULL) {
    delete acc_noise_;
  }
  acc_noise_ = NULL;
  _internal_metadata_.Clear();
}

bool SpeedDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.SpeedDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.SpeedResult speed_results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_speed_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f speed_noise = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f acc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f acc_noise = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acc_noise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.SpeedDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.SpeedDebugInfo)
  return false;
#undef DO_
}

void SpeedDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.SpeedDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.SpeedResult speed_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->speed_results(static_cast<int>(i)), output);
  }

  // .autodrive.workflow.proto.Vector2f speed = 2;
  if (this->has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->speed_, output);
  }

  // .autodrive.workflow.proto.Vector2f speed_noise = 3;
  if (this->has_speed_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->speed_noise_, output);
  }

  // .autodrive.workflow.proto.Vector2f acc = 4;
  if (this->has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->acc_, output);
  }

  // .autodrive.workflow.proto.Vector2f acc_noise = 5;
  if (this->has_acc_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->acc_noise_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.SpeedDebugInfo)
}

::google::protobuf::uint8* SpeedDebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.SpeedDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.SpeedResult speed_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->speed_results(static_cast<int>(i)), deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f speed = 2;
  if (this->has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->speed_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f speed_noise = 3;
  if (this->has_speed_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->speed_noise_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f acc = 4;
  if (this->has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->acc_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f acc_noise = 5;
  if (this->has_acc_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->acc_noise_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.SpeedDebugInfo)
  return target;
}

size_t SpeedDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.SpeedDebugInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.SpeedResult speed_results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->speed_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->speed_results(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.Vector2f speed = 2;
  if (this->has_speed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->speed_);
  }

  // .autodrive.workflow.proto.Vector2f speed_noise = 3;
  if (this->has_speed_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->speed_noise_);
  }

  // .autodrive.workflow.proto.Vector2f acc = 4;
  if (this->has_acc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acc_);
  }

  // .autodrive.workflow.proto.Vector2f acc_noise = 5;
  if (this->has_acc_noise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acc_noise_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.SpeedDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedDebugInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedDebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.SpeedDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.SpeedDebugInfo)
    MergeFrom(*source);
  }
}

void SpeedDebugInfo::MergeFrom(const SpeedDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.SpeedDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_results_.MergeFrom(from.speed_results_);
  if (from.has_speed()) {
    mutable_speed()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.speed());
  }
  if (from.has_speed_noise()) {
    mutable_speed_noise()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.speed_noise());
  }
  if (from.has_acc()) {
    mutable_acc()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.acc());
  }
  if (from.has_acc_noise()) {
    mutable_acc_noise()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.acc_noise());
  }
}

void SpeedDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.SpeedDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedDebugInfo::CopyFrom(const SpeedDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.SpeedDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedDebugInfo::IsInitialized() const {
  return true;
}

void SpeedDebugInfo::Swap(SpeedDebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedDebugInfo::InternalSwap(SpeedDebugInfo* other) {
  using std::swap;
  speed_results_.InternalSwap(&other->speed_results_);
  swap(speed_, other->speed_);
  swap(speed_noise_, other->speed_noise_);
  swap(acc_, other->acc_);
  swap(acc_noise_, other->acc_noise_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedDebugInfo::GetMetadata() const {
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SizeDebugInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SizeDebugInfo::kVehTypeFieldNumber;
const int SizeDebugInfo::kVehTypeConfFieldNumber;
const int SizeDebugInfo::kHMeasureRawFieldNumber;
const int SizeDebugInfo::kHMeasureFieldNumber;
const int SizeDebugInfo::kHMeasureNoiseFieldNumber;
const int SizeDebugInfo::kHWhMeasureRawFieldNumber;
const int SizeDebugInfo::kHWhMeasureFieldNumber;
const int SizeDebugInfo::kHWhMeasureNoiseFieldNumber;
const int SizeDebugInfo::kH3DMeasureFieldNumber;
const int SizeDebugInfo::kH3DMeasureNoiseFieldNumber;
const int SizeDebugInfo::kW3DMeasureFieldNumber;
const int SizeDebugInfo::kW3DMeasureNoiseFieldNumber;
const int SizeDebugInfo::kL3DMeasureFieldNumber;
const int SizeDebugInfo::kL3DMeasureNoiseFieldNumber;
const int SizeDebugInfo::kWFieldNumber;
const int SizeDebugInfo::kHFieldNumber;
const int SizeDebugInfo::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SizeDebugInfo::SizeDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSizeDebugInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.SizeDebugInfo)
}
SizeDebugInfo::SizeDebugInfo(const SizeDebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&veh_type_, &from.veh_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&veh_type_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.SizeDebugInfo)
}

void SizeDebugInfo::SharedCtor() {
  ::memset(&veh_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&veh_type_)) + sizeof(l_));
  _cached_size_ = 0;
}

SizeDebugInfo::~SizeDebugInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.SizeDebugInfo)
  SharedDtor();
}

void SizeDebugInfo::SharedDtor() {
}

void SizeDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SizeDebugInfo::descriptor() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SizeDebugInfo& SizeDebugInfo::default_instance() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSizeDebugInfo();
  return *internal_default_instance();
}

SizeDebugInfo* SizeDebugInfo::New(::google::protobuf::Arena* arena) const {
  SizeDebugInfo* n = new SizeDebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SizeDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.SizeDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&veh_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&veh_type_)) + sizeof(l_));
  _internal_metadata_.Clear();
}

bool SizeDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.SizeDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 veh_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &veh_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float veh_type_conf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &veh_type_conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float H_measure_raw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_measure_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float H_measure = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_measure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float H_measure_noise = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_measure_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float H_wh_measure_raw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_wh_measure_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float H_wh_measure = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_wh_measure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float H_wh_measure_noise = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_wh_measure_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float H_3d_measure = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_3d_measure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float H_3d_measure_noise = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_3d_measure_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float W_3d_measure = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_3d_measure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float W_3d_measure_noise = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_3d_measure_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float L_3d_measure = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_3d_measure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float L_3d_measure_noise = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_3d_measure_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float W = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float H = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float L = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.SizeDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.SizeDebugInfo)
  return false;
#undef DO_
}

void SizeDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.SizeDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 veh_type = 1;
  if (this->veh_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->veh_type(), output);
  }

  // float veh_type_conf = 2;
  if (this->veh_type_conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->veh_type_conf(), output);
  }

  // float H_measure_raw = 3;
  if (this->h_measure_raw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->h_measure_raw(), output);
  }

  // float H_measure = 4;
  if (this->h_measure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h_measure(), output);
  }

  // float H_measure_noise = 5;
  if (this->h_measure_noise() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->h_measure_noise(), output);
  }

  // float H_wh_measure_raw = 6;
  if (this->h_wh_measure_raw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->h_wh_measure_raw(), output);
  }

  // float H_wh_measure = 7;
  if (this->h_wh_measure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->h_wh_measure(), output);
  }

  // float H_wh_measure_noise = 8;
  if (this->h_wh_measure_noise() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->h_wh_measure_noise(), output);
  }

  // float H_3d_measure = 9;
  if (this->h_3d_measure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->h_3d_measure(), output);
  }

  // float H_3d_measure_noise = 10;
  if (this->h_3d_measure_noise() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->h_3d_measure_noise(), output);
  }

  // float W_3d_measure = 11;
  if (this->w_3d_measure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->w_3d_measure(), output);
  }

  // float W_3d_measure_noise = 12;
  if (this->w_3d_measure_noise() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->w_3d_measure_noise(), output);
  }

  // float L_3d_measure = 13;
  if (this->l_3d_measure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->l_3d_measure(), output);
  }

  // float L_3d_measure_noise = 14;
  if (this->l_3d_measure_noise() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->l_3d_measure_noise(), output);
  }

  // float W = 15;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->w(), output);
  }

  // float H = 16;
  if (this->h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->h(), output);
  }

  // float L = 17;
  if (this->l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->l(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.SizeDebugInfo)
}

::google::protobuf::uint8* SizeDebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.SizeDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 veh_type = 1;
  if (this->veh_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->veh_type(), target);
  }

  // float veh_type_conf = 2;
  if (this->veh_type_conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->veh_type_conf(), target);
  }

  // float H_measure_raw = 3;
  if (this->h_measure_raw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->h_measure_raw(), target);
  }

  // float H_measure = 4;
  if (this->h_measure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->h_measure(), target);
  }

  // float H_measure_noise = 5;
  if (this->h_measure_noise() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->h_measure_noise(), target);
  }

  // float H_wh_measure_raw = 6;
  if (this->h_wh_measure_raw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->h_wh_measure_raw(), target);
  }

  // float H_wh_measure = 7;
  if (this->h_wh_measure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->h_wh_measure(), target);
  }

  // float H_wh_measure_noise = 8;
  if (this->h_wh_measure_noise() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->h_wh_measure_noise(), target);
  }

  // float H_3d_measure = 9;
  if (this->h_3d_measure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->h_3d_measure(), target);
  }

  // float H_3d_measure_noise = 10;
  if (this->h_3d_measure_noise() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->h_3d_measure_noise(), target);
  }

  // float W_3d_measure = 11;
  if (this->w_3d_measure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->w_3d_measure(), target);
  }

  // float W_3d_measure_noise = 12;
  if (this->w_3d_measure_noise() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->w_3d_measure_noise(), target);
  }

  // float L_3d_measure = 13;
  if (this->l_3d_measure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->l_3d_measure(), target);
  }

  // float L_3d_measure_noise = 14;
  if (this->l_3d_measure_noise() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->l_3d_measure_noise(), target);
  }

  // float W = 15;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->w(), target);
  }

  // float H = 16;
  if (this->h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->h(), target);
  }

  // float L = 17;
  if (this->l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->l(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.SizeDebugInfo)
  return target;
}

size_t SizeDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.SizeDebugInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 veh_type = 1;
  if (this->veh_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->veh_type());
  }

  // float veh_type_conf = 2;
  if (this->veh_type_conf() != 0) {
    total_size += 1 + 4;
  }

  // float H_measure_raw = 3;
  if (this->h_measure_raw() != 0) {
    total_size += 1 + 4;
  }

  // float H_measure = 4;
  if (this->h_measure() != 0) {
    total_size += 1 + 4;
  }

  // float H_measure_noise = 5;
  if (this->h_measure_noise() != 0) {
    total_size += 1 + 4;
  }

  // float H_wh_measure_raw = 6;
  if (this->h_wh_measure_raw() != 0) {
    total_size += 1 + 4;
  }

  // float H_wh_measure = 7;
  if (this->h_wh_measure() != 0) {
    total_size += 1 + 4;
  }

  // float H_wh_measure_noise = 8;
  if (this->h_wh_measure_noise() != 0) {
    total_size += 1 + 4;
  }

  // float H_3d_measure = 9;
  if (this->h_3d_measure() != 0) {
    total_size += 1 + 4;
  }

  // float H_3d_measure_noise = 10;
  if (this->h_3d_measure_noise() != 0) {
    total_size += 1 + 4;
  }

  // float W_3d_measure = 11;
  if (this->w_3d_measure() != 0) {
    total_size += 1 + 4;
  }

  // float W_3d_measure_noise = 12;
  if (this->w_3d_measure_noise() != 0) {
    total_size += 1 + 4;
  }

  // float L_3d_measure = 13;
  if (this->l_3d_measure() != 0) {
    total_size += 1 + 4;
  }

  // float L_3d_measure_noise = 14;
  if (this->l_3d_measure_noise() != 0) {
    total_size += 1 + 4;
  }

  // float W = 15;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  // float H = 16;
  if (this->h() != 0) {
    total_size += 2 + 4;
  }

  // float L = 17;
  if (this->l() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SizeDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.SizeDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SizeDebugInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SizeDebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.SizeDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.SizeDebugInfo)
    MergeFrom(*source);
  }
}

void SizeDebugInfo::MergeFrom(const SizeDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.SizeDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.veh_type() != 0) {
    set_veh_type(from.veh_type());
  }
  if (from.veh_type_conf() != 0) {
    set_veh_type_conf(from.veh_type_conf());
  }
  if (from.h_measure_raw() != 0) {
    set_h_measure_raw(from.h_measure_raw());
  }
  if (from.h_measure() != 0) {
    set_h_measure(from.h_measure());
  }
  if (from.h_measure_noise() != 0) {
    set_h_measure_noise(from.h_measure_noise());
  }
  if (from.h_wh_measure_raw() != 0) {
    set_h_wh_measure_raw(from.h_wh_measure_raw());
  }
  if (from.h_wh_measure() != 0) {
    set_h_wh_measure(from.h_wh_measure());
  }
  if (from.h_wh_measure_noise() != 0) {
    set_h_wh_measure_noise(from.h_wh_measure_noise());
  }
  if (from.h_3d_measure() != 0) {
    set_h_3d_measure(from.h_3d_measure());
  }
  if (from.h_3d_measure_noise() != 0) {
    set_h_3d_measure_noise(from.h_3d_measure_noise());
  }
  if (from.w_3d_measure() != 0) {
    set_w_3d_measure(from.w_3d_measure());
  }
  if (from.w_3d_measure_noise() != 0) {
    set_w_3d_measure_noise(from.w_3d_measure_noise());
  }
  if (from.l_3d_measure() != 0) {
    set_l_3d_measure(from.l_3d_measure());
  }
  if (from.l_3d_measure_noise() != 0) {
    set_l_3d_measure_noise(from.l_3d_measure_noise());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
  if (from.h() != 0) {
    set_h(from.h());
  }
  if (from.l() != 0) {
    set_l(from.l());
  }
}

void SizeDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.SizeDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SizeDebugInfo::CopyFrom(const SizeDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.SizeDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SizeDebugInfo::IsInitialized() const {
  return true;
}

void SizeDebugInfo::Swap(SizeDebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SizeDebugInfo::InternalSwap(SizeDebugInfo* other) {
  using std::swap;
  swap(veh_type_, other->veh_type_);
  swap(veh_type_conf_, other->veh_type_conf_);
  swap(h_measure_raw_, other->h_measure_raw_);
  swap(h_measure_, other->h_measure_);
  swap(h_measure_noise_, other->h_measure_noise_);
  swap(h_wh_measure_raw_, other->h_wh_measure_raw_);
  swap(h_wh_measure_, other->h_wh_measure_);
  swap(h_wh_measure_noise_, other->h_wh_measure_noise_);
  swap(h_3d_measure_, other->h_3d_measure_);
  swap(h_3d_measure_noise_, other->h_3d_measure_noise_);
  swap(w_3d_measure_, other->w_3d_measure_);
  swap(w_3d_measure_noise_, other->w_3d_measure_noise_);
  swap(l_3d_measure_, other->l_3d_measure_);
  swap(l_3d_measure_noise_, other->l_3d_measure_noise_);
  swap(w_, other->w_);
  swap(h_, other->h_);
  swap(l_, other->l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SizeDebugInfo::GetMetadata() const {
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void YawDebugInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YawDebugInfo::kYawTypeFieldNumber;
const int YawDebugInfo::kVcsPiMeasureYawFieldNumber;
const int YawDebugInfo::kWorldPiMeasureYawFieldNumber;
const int YawDebugInfo::kYawMeasureVarFieldNumber;
const int YawDebugInfo::kVcsPiYawFieldNumber;
const int YawDebugInfo::kWorldPiYawFieldNumber;
const int YawDebugInfo::kYawRateFieldNumber;
const int YawDebugInfo::kYawVarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YawDebugInfo::YawDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsYawDebugInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.YawDebugInfo)
}
YawDebugInfo::YawDebugInfo(const YawDebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&yaw_type_, &from.yaw_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_var_) -
    reinterpret_cast<char*>(&yaw_type_)) + sizeof(yaw_var_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.YawDebugInfo)
}

void YawDebugInfo::SharedCtor() {
  ::memset(&yaw_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_var_) -
      reinterpret_cast<char*>(&yaw_type_)) + sizeof(yaw_var_));
  _cached_size_ = 0;
}

YawDebugInfo::~YawDebugInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.YawDebugInfo)
  SharedDtor();
}

void YawDebugInfo::SharedDtor() {
}

void YawDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YawDebugInfo::descriptor() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YawDebugInfo& YawDebugInfo::default_instance() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsYawDebugInfo();
  return *internal_default_instance();
}

YawDebugInfo* YawDebugInfo::New(::google::protobuf::Arena* arena) const {
  YawDebugInfo* n = new YawDebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YawDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.YawDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_var_) -
      reinterpret_cast<char*>(&yaw_type_)) + sizeof(yaw_var_));
  _internal_metadata_.Clear();
}

bool YawDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.YawDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 yaw_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaw_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vcs_pi_measure_yaw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vcs_pi_measure_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float world_pi_measure_yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &world_pi_measure_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_measure_var = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_measure_var_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vcs_pi_yaw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vcs_pi_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float world_pi_yaw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &world_pi_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_var = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_var_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.YawDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.YawDebugInfo)
  return false;
#undef DO_
}

void YawDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.YawDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 yaw_type = 1;
  if (this->yaw_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->yaw_type(), output);
  }

  // float vcs_pi_measure_yaw = 2;
  if (this->vcs_pi_measure_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vcs_pi_measure_yaw(), output);
  }

  // float world_pi_measure_yaw = 3;
  if (this->world_pi_measure_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->world_pi_measure_yaw(), output);
  }

  // float yaw_measure_var = 4;
  if (this->yaw_measure_var() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw_measure_var(), output);
  }

  // float vcs_pi_yaw = 5;
  if (this->vcs_pi_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vcs_pi_yaw(), output);
  }

  // float world_pi_yaw = 6;
  if (this->world_pi_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->world_pi_yaw(), output);
  }

  // float yaw_rate = 7;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw_rate(), output);
  }

  // float yaw_var = 8;
  if (this->yaw_var() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->yaw_var(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.YawDebugInfo)
}

::google::protobuf::uint8* YawDebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.YawDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 yaw_type = 1;
  if (this->yaw_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->yaw_type(), target);
  }

  // float vcs_pi_measure_yaw = 2;
  if (this->vcs_pi_measure_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vcs_pi_measure_yaw(), target);
  }

  // float world_pi_measure_yaw = 3;
  if (this->world_pi_measure_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->world_pi_measure_yaw(), target);
  }

  // float yaw_measure_var = 4;
  if (this->yaw_measure_var() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw_measure_var(), target);
  }

  // float vcs_pi_yaw = 5;
  if (this->vcs_pi_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vcs_pi_yaw(), target);
  }

  // float world_pi_yaw = 6;
  if (this->world_pi_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->world_pi_yaw(), target);
  }

  // float yaw_rate = 7;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw_rate(), target);
  }

  // float yaw_var = 8;
  if (this->yaw_var() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->yaw_var(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.YawDebugInfo)
  return target;
}

size_t YawDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.YawDebugInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 yaw_type = 1;
  if (this->yaw_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yaw_type());
  }

  // float vcs_pi_measure_yaw = 2;
  if (this->vcs_pi_measure_yaw() != 0) {
    total_size += 1 + 4;
  }

  // float world_pi_measure_yaw = 3;
  if (this->world_pi_measure_yaw() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_measure_var = 4;
  if (this->yaw_measure_var() != 0) {
    total_size += 1 + 4;
  }

  // float vcs_pi_yaw = 5;
  if (this->vcs_pi_yaw() != 0) {
    total_size += 1 + 4;
  }

  // float world_pi_yaw = 6;
  if (this->world_pi_yaw() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate = 7;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_var = 8;
  if (this->yaw_var() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YawDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.YawDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const YawDebugInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YawDebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.YawDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.YawDebugInfo)
    MergeFrom(*source);
  }
}

void YawDebugInfo::MergeFrom(const YawDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.YawDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.yaw_type() != 0) {
    set_yaw_type(from.yaw_type());
  }
  if (from.vcs_pi_measure_yaw() != 0) {
    set_vcs_pi_measure_yaw(from.vcs_pi_measure_yaw());
  }
  if (from.world_pi_measure_yaw() != 0) {
    set_world_pi_measure_yaw(from.world_pi_measure_yaw());
  }
  if (from.yaw_measure_var() != 0) {
    set_yaw_measure_var(from.yaw_measure_var());
  }
  if (from.vcs_pi_yaw() != 0) {
    set_vcs_pi_yaw(from.vcs_pi_yaw());
  }
  if (from.world_pi_yaw() != 0) {
    set_world_pi_yaw(from.world_pi_yaw());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
  if (from.yaw_var() != 0) {
    set_yaw_var(from.yaw_var());
  }
}

void YawDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.YawDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YawDebugInfo::CopyFrom(const YawDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.YawDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YawDebugInfo::IsInitialized() const {
  return true;
}

void YawDebugInfo::Swap(YawDebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YawDebugInfo::InternalSwap(YawDebugInfo* other) {
  using std::swap;
  swap(yaw_type_, other->yaw_type_);
  swap(vcs_pi_measure_yaw_, other->vcs_pi_measure_yaw_);
  swap(world_pi_measure_yaw_, other->world_pi_measure_yaw_);
  swap(yaw_measure_var_, other->yaw_measure_var_);
  swap(vcs_pi_yaw_, other->vcs_pi_yaw_);
  swap(world_pi_yaw_, other->world_pi_yaw_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(yaw_var_, other->yaw_var_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YawDebugInfo::GetMetadata() const {
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DynamicObstacleDebugInfo::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_DynamicObstacleDebugInfo_default_instance_._instance.get_mutable()->pos_debug_info_ = const_cast< ::autodrive::workflow::proto::PositionDebugInfo*>(
      ::autodrive::workflow::proto::PositionDebugInfo::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstacleDebugInfo_default_instance_._instance.get_mutable()->speed_debug_info_ = const_cast< ::autodrive::workflow::proto::SpeedDebugInfo*>(
      ::autodrive::workflow::proto::SpeedDebugInfo::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstacleDebugInfo_default_instance_._instance.get_mutable()->size_debug_info_ = const_cast< ::autodrive::workflow::proto::SizeDebugInfo*>(
      ::autodrive::workflow::proto::SizeDebugInfo::internal_default_instance());
  ::autodrive::workflow::proto::_DynamicObstacleDebugInfo_default_instance_._instance.get_mutable()->yaw_debug_info_ = const_cast< ::autodrive::workflow::proto::YawDebugInfo*>(
      ::autodrive::workflow::proto::YawDebugInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicObstacleDebugInfo::kIdFieldNumber;
const int DynamicObstacleDebugInfo::kFrameIdFieldNumber;
const int DynamicObstacleDebugInfo::kSensorIdFieldNumber;
const int DynamicObstacleDebugInfo::kPosDebugInfoFieldNumber;
const int DynamicObstacleDebugInfo::kSpeedDebugInfoFieldNumber;
const int DynamicObstacleDebugInfo::kSizeDebugInfoFieldNumber;
const int DynamicObstacleDebugInfo::kYawDebugInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicObstacleDebugInfo::DynamicObstacleDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsDynamicObstacleDebugInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.DynamicObstacleDebugInfo)
}
DynamicObstacleDebugInfo::DynamicObstacleDebugInfo(const DynamicObstacleDebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos_debug_info()) {
    pos_debug_info_ = new ::autodrive::workflow::proto::PositionDebugInfo(*from.pos_debug_info_);
  } else {
    pos_debug_info_ = NULL;
  }
  if (from.has_speed_debug_info()) {
    speed_debug_info_ = new ::autodrive::workflow::proto::SpeedDebugInfo(*from.speed_debug_info_);
  } else {
    speed_debug_info_ = NULL;
  }
  if (from.has_size_debug_info()) {
    size_debug_info_ = new ::autodrive::workflow::proto::SizeDebugInfo(*from.size_debug_info_);
  } else {
    size_debug_info_ = NULL;
  }
  if (from.has_yaw_debug_info()) {
    yaw_debug_info_ = new ::autodrive::workflow::proto::YawDebugInfo(*from.yaw_debug_info_);
  } else {
    yaw_debug_info_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(sensor_id_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.DynamicObstacleDebugInfo)
}

void DynamicObstacleDebugInfo::SharedCtor() {
  ::memset(&pos_debug_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_id_) -
      reinterpret_cast<char*>(&pos_debug_info_)) + sizeof(sensor_id_));
  _cached_size_ = 0;
}

DynamicObstacleDebugInfo::~DynamicObstacleDebugInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  SharedDtor();
}

void DynamicObstacleDebugInfo::SharedDtor() {
  if (this != internal_default_instance()) delete pos_debug_info_;
  if (this != internal_default_instance()) delete speed_debug_info_;
  if (this != internal_default_instance()) delete size_debug_info_;
  if (this != internal_default_instance()) delete yaw_debug_info_;
}

void DynamicObstacleDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicObstacleDebugInfo::descriptor() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DynamicObstacleDebugInfo& DynamicObstacleDebugInfo::default_instance() {
  ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsDynamicObstacleDebugInfo();
  return *internal_default_instance();
}

DynamicObstacleDebugInfo* DynamicObstacleDebugInfo::New(::google::protobuf::Arena* arena) const {
  DynamicObstacleDebugInfo* n = new DynamicObstacleDebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamicObstacleDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos_debug_info_ != NULL) {
    delete pos_debug_info_;
  }
  pos_debug_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && speed_debug_info_ != NULL) {
    delete speed_debug_info_;
  }
  speed_debug_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_debug_info_ != NULL) {
    delete size_debug_info_;
  }
  size_debug_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && yaw_debug_info_ != NULL) {
    delete yaw_debug_info_;
  }
  yaw_debug_info_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(sensor_id_));
  _internal_metadata_.Clear();
}

bool DynamicObstacleDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frame_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sensor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.PositionDebugInfo pos_debug_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SpeedDebugInfo speed_debug_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SizeDebugInfo size_debug_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.YawDebugInfo yaw_debug_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  return false;
#undef DO_
}

void DynamicObstacleDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 frame_id = 2;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_id(), output);
  }

  // int32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sensor_id(), output);
  }

  // .autodrive.workflow.proto.PositionDebugInfo pos_debug_info = 4;
  if (this->has_pos_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pos_debug_info_, output);
  }

  // .autodrive.workflow.proto.SpeedDebugInfo speed_debug_info = 5;
  if (this->has_speed_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->speed_debug_info_, output);
  }

  // .autodrive.workflow.proto.SizeDebugInfo size_debug_info = 6;
  if (this->has_size_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->size_debug_info_, output);
  }

  // .autodrive.workflow.proto.YawDebugInfo yaw_debug_info = 7;
  if (this->has_yaw_debug_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->yaw_debug_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.DynamicObstacleDebugInfo)
}

::google::protobuf::uint8* DynamicObstacleDebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 frame_id = 2;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame_id(), target);
  }

  // int32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sensor_id(), target);
  }

  // .autodrive.workflow.proto.PositionDebugInfo pos_debug_info = 4;
  if (this->has_pos_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->pos_debug_info_, deterministic, target);
  }

  // .autodrive.workflow.proto.SpeedDebugInfo speed_debug_info = 5;
  if (this->has_speed_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->speed_debug_info_, deterministic, target);
  }

  // .autodrive.workflow.proto.SizeDebugInfo size_debug_info = 6;
  if (this->has_size_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->size_debug_info_, deterministic, target);
  }

  // .autodrive.workflow.proto.YawDebugInfo yaw_debug_info = 7;
  if (this->has_yaw_debug_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->yaw_debug_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  return target;
}

size_t DynamicObstacleDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.PositionDebugInfo pos_debug_info = 4;
  if (this->has_pos_debug_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pos_debug_info_);
  }

  // .autodrive.workflow.proto.SpeedDebugInfo speed_debug_info = 5;
  if (this->has_speed_debug_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->speed_debug_info_);
  }

  // .autodrive.workflow.proto.SizeDebugInfo size_debug_info = 6;
  if (this->has_size_debug_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->size_debug_info_);
  }

  // .autodrive.workflow.proto.YawDebugInfo yaw_debug_info = 7;
  if (this->has_yaw_debug_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->yaw_debug_info_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_id());
  }

  // int32 sensor_id = 3;
  if (this->sensor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensor_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicObstacleDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstacleDebugInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicObstacleDebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.DynamicObstacleDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.DynamicObstacleDebugInfo)
    MergeFrom(*source);
  }
}

void DynamicObstacleDebugInfo::MergeFrom(const DynamicObstacleDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos_debug_info()) {
    mutable_pos_debug_info()->::autodrive::workflow::proto::PositionDebugInfo::MergeFrom(from.pos_debug_info());
  }
  if (from.has_speed_debug_info()) {
    mutable_speed_debug_info()->::autodrive::workflow::proto::SpeedDebugInfo::MergeFrom(from.speed_debug_info());
  }
  if (from.has_size_debug_info()) {
    mutable_size_debug_info()->::autodrive::workflow::proto::SizeDebugInfo::MergeFrom(from.size_debug_info());
  }
  if (from.has_yaw_debug_info()) {
    mutable_yaw_debug_info()->::autodrive::workflow::proto::YawDebugInfo::MergeFrom(from.yaw_debug_info());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
  if (from.sensor_id() != 0) {
    set_sensor_id(from.sensor_id());
  }
}

void DynamicObstacleDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstacleDebugInfo::CopyFrom(const DynamicObstacleDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.DynamicObstacleDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacleDebugInfo::IsInitialized() const {
  return true;
}

void DynamicObstacleDebugInfo::Swap(DynamicObstacleDebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicObstacleDebugInfo::InternalSwap(DynamicObstacleDebugInfo* other) {
  using std::swap;
  swap(pos_debug_info_, other->pos_debug_info_);
  swap(speed_debug_info_, other->speed_debug_info_);
  swap(size_debug_info_, other->size_debug_info_);
  swap(yaw_debug_info_, other->yaw_debug_info_);
  swap(id_, other->id_);
  swap(frame_id_, other->frame_id_);
  swap(sensor_id_, other->sensor_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicObstacleDebugInfo::GetMetadata() const {
  protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
