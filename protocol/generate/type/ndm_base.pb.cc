// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ndm_base.proto

#include "ndm_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
namespace ndm_base {
class NdmSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NdmSpec>
      _instance;
} _NdmSpec_default_instance_;
class IdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Id>
      _instance;
} _Id_default_instance_;
class LinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Link>
      _instance;
} _Link_default_instance_;
class NdmVehicleTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NdmVehicleType>
      _instance;
} _NdmVehicleType_default_instance_;
class SpeedLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedLimit>
      _instance;
} _SpeedLimit_default_instance_;
class NumberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Number>
      _instance;
} _Number_default_instance_;
class TimeLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeLimit>
      _instance;
} _TimeLimit_default_instance_;
class ParkingSpaceRestrictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingSpaceRestriction>
      _instance;
} _ParkingSpaceRestriction_default_instance_;
class IndexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Index>
      _instance;
} _Index_default_instance_;
}  // namespace ndm_base
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_ndm_5fbase_2eproto {
void InitDefaultsNdmSpecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3d();
  {
    void* ptr = &::autodrive::workflow::proto::ndm_base::_NdmSpec_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ndm_base::NdmSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ndm_base::NdmSpec::InitAsDefaultInstance();
}

void InitDefaultsNdmSpec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNdmSpecImpl);
}

void InitDefaultsIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::ndm_base::_Id_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ndm_base::Id();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ndm_base::Id::InitAsDefaultInstance();
}

void InitDefaultsId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIdImpl);
}

void InitDefaultsLinkImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ndm_5fbase_2eproto::InitDefaultsId();
  {
    void* ptr = &::autodrive::workflow::proto::ndm_base::_Link_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ndm_base::Link();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ndm_base::Link::InitAsDefaultInstance();
}

void InitDefaultsLink() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLinkImpl);
}

void InitDefaultsNdmVehicleTypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::ndm_base::_NdmVehicleType_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ndm_base::NdmVehicleType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ndm_base::NdmVehicleType::InitAsDefaultInstance();
}

void InitDefaultsNdmVehicleType() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNdmVehicleTypeImpl);
}

void InitDefaultsSpeedLimitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::ndm_base::_SpeedLimit_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ndm_base::SpeedLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ndm_base::SpeedLimit::InitAsDefaultInstance();
}

void InitDefaultsSpeedLimit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeedLimitImpl);
}

void InitDefaultsNumberImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::ndm_base::_Number_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ndm_base::Number();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ndm_base::Number::InitAsDefaultInstance();
}

void InitDefaultsNumber() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNumberImpl);
}

void InitDefaultsTimeLimitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::ndm_base::_TimeLimit_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ndm_base::TimeLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ndm_base::TimeLimit::InitAsDefaultInstance();
}

void InitDefaultsTimeLimit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimeLimitImpl);
}

void InitDefaultsParkingSpaceRestrictionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ndm_5fbase_2eproto::InitDefaultsNumber();
  protobuf_ndm_5fbase_2eproto::InitDefaultsTimeLimit();
  protobuf_ndm_5fbase_2eproto::InitDefaultsNdmVehicleType();
  {
    void* ptr = &::autodrive::workflow::proto::ndm_base::_ParkingSpaceRestriction_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ndm_base::ParkingSpaceRestriction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ndm_base::ParkingSpaceRestriction::InitAsDefaultInstance();
}

void InitDefaultsParkingSpaceRestriction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParkingSpaceRestrictionImpl);
}

void InitDefaultsIndexImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::ndm_base::_Index_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ndm_base::Index();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ndm_base::Index::InitAsDefaultInstance();
}

void InitDefaultsIndex() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIndexImpl);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmSpec, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmSpec, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmSpec, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmSpec, seq_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmSpec, projection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmSpec, utm_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmSpec, base_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Id, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Id, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Link, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Link, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Link, end_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmVehicleType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmVehicleType, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::NdmVehicleType, conf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::SpeedLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::SpeedLimit, limit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::SpeedLimit, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::SpeedLimit, speed_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::SpeedLimit, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::SpeedLimit, end_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Number, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Number, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Number, cov_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::TimeLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::TimeLimit, time_begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::TimeLimit, time_end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::ParkingSpaceRestriction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::ParkingSpaceRestriction, number_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::ParkingSpaceRestriction, time_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::ParkingSpaceRestriction, vehicle_types_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Index, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Index, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ndm_base::Index, z_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::ndm_base::NdmSpec)},
  { 12, -1, sizeof(::autodrive::workflow::proto::ndm_base::Id)},
  { 19, -1, sizeof(::autodrive::workflow::proto::ndm_base::Link)},
  { 27, -1, sizeof(::autodrive::workflow::proto::ndm_base::NdmVehicleType)},
  { 34, -1, sizeof(::autodrive::workflow::proto::ndm_base::SpeedLimit)},
  { 44, -1, sizeof(::autodrive::workflow::proto::ndm_base::Number)},
  { 51, -1, sizeof(::autodrive::workflow::proto::ndm_base::TimeLimit)},
  { 58, -1, sizeof(::autodrive::workflow::proto::ndm_base::ParkingSpaceRestriction)},
  { 66, -1, sizeof(::autodrive::workflow::proto::ndm_base::Index)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::ndm_base::_NdmSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::ndm_base::_Id_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::ndm_base::_Link_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::ndm_base::_NdmVehicleType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::ndm_base::_SpeedLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::ndm_base::_Number_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::ndm_base::_TimeLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::ndm_base::_ParkingSpaceRestriction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::ndm_base::_Index_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ndm_base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016ndm_base.proto\022!autodrive.workflow.pro"
      "to.ndm_base\032\013basic.proto\"\252\001\n\007NdmSpec\022\017\n\007"
      "version\030\001 \001(\t\022\014\n\004date\030\002 \001(\t\022\021\n\ttimestamp"
      "\030\003 \001(\004\022\016\n\006seq_id\030\004 \001(\004\022\022\n\nprojection\030\005 \001"
      "(\t\022\020\n\010utm_zone\030\006 \001(\t\0227\n\013base_offset\030\007 \001("
      "\0132\".autodrive.workflow.proto.Vector3d\"\036\n"
      "\002Id\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\"]\n\004Link\0221\n"
      "\002id\030\001 \001(\0132%.autodrive.workflow.proto.ndm"
      "_base.Id\022\016\n\006offset\030\002 \001(\002\022\022\n\nend_offset\030\003"
      " \001(\002\"\211\002\n\016NdmVehicleType\022D\n\004type\030\001 \001(\01626."
      "autodrive.workflow.proto.ndm_base.NdmVeh"
      "icleType.Type\022\014\n\004conf\030\002 \001(\002\"\242\001\n\004Type\022\020\n\014"
      "kTypeUnknown\020\000\022\014\n\010kTypeCar\020\001\022\023\n\017kTypeMot"
      "orcycle\020\002\022\020\n\014kTypeBicycle\020\003\022\016\n\nkTypeTruc"
      "k\020\004\022\r\n\tkTypeTaxi\020\005\022\014\n\010kTypeBus\020\006\022\023\n\017kTyp"
      "ePedestrian\020\007\022\021\n\rkTypeCableCar\020\010\"\321\001\n\nSpe"
      "edLimit\022E\n\nlimit_type\030\001 \001(\01621.autodrive."
      "workflow.proto.ndm_base.SpeedLimitType\022C"
      "\n\006source\030\002 \001(\01623.autodrive.workflow.prot"
      "o.ndm_base.SpeedLimitSource\022\023\n\013speed_val"
      "ue\030\003 \001(\002\022\016\n\006offset\030\004 \001(\002\022\022\n\nend_offset\030\005"
      " \001(\002\"$\n\006Number\022\r\n\005value\030\001 \001(\002\022\013\n\003cov\030\002 \001"
      "(\002\"1\n\tTimeLimit\022\022\n\ntime_begin\030\001 \001(\002\022\020\n\010t"
      "ime_end\030\002 \001(\002\"\347\001\n\027ParkingSpaceRestrictio"
      "n\022\?\n\014number_limit\030\001 \001(\0132).autodrive.work"
      "flow.proto.ndm_base.Number\022A\n\013time_limit"
      "s\030\002 \003(\0132,.autodrive.workflow.proto.ndm_b"
      "ase.TimeLimit\022H\n\rvehicle_types\030\003 \003(\01321.a"
      "utodrive.workflow.proto.ndm_base.NdmVehi"
      "cleType\"(\n\005Index\022\t\n\001x\030\001 \001(\004\022\t\n\001y\030\002 \001(\004\022\t"
      "\n\001z\030\003 \001(\004*:\n\013DrivingSide\022\025\n\021kRightHandDr"
      "iving\020\000\022\024\n\020kLeftHandDriving\020\001*\\\n\016SpeedLi"
      "mitType\022\032\n\026kSpeedLimitTypeUnknown\020\000\022\026\n\022k"
      "SpeedLimitTypeMin\020\001\022\026\n\022kSpeedLimitTypeMa"
      "x\020\002*n\n\020SpeedLimitSource\022\034\n\030kSpeedLimitSo"
      "urceUnknown\020\000\022\035\n\031kSpeedLimitSourceImplic"
      "it\020\001\022\035\n\031kSpeedLimitSourceExplicit\020\002b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1483);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ndm_base.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ndm_5fbase_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
namespace ndm_base {
const ::google::protobuf::EnumDescriptor* NdmVehicleType_Type_descriptor() {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ndm_5fbase_2eproto::file_level_enum_descriptors[0];
}
bool NdmVehicleType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NdmVehicleType_Type NdmVehicleType::kTypeUnknown;
const NdmVehicleType_Type NdmVehicleType::kTypeCar;
const NdmVehicleType_Type NdmVehicleType::kTypeMotorcycle;
const NdmVehicleType_Type NdmVehicleType::kTypeBicycle;
const NdmVehicleType_Type NdmVehicleType::kTypeTruck;
const NdmVehicleType_Type NdmVehicleType::kTypeTaxi;
const NdmVehicleType_Type NdmVehicleType::kTypeBus;
const NdmVehicleType_Type NdmVehicleType::kTypePedestrian;
const NdmVehicleType_Type NdmVehicleType::kTypeCableCar;
const NdmVehicleType_Type NdmVehicleType::Type_MIN;
const NdmVehicleType_Type NdmVehicleType::Type_MAX;
const int NdmVehicleType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DrivingSide_descriptor() {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ndm_5fbase_2eproto::file_level_enum_descriptors[1];
}
bool DrivingSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SpeedLimitType_descriptor() {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ndm_5fbase_2eproto::file_level_enum_descriptors[2];
}
bool SpeedLimitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SpeedLimitSource_descriptor() {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ndm_5fbase_2eproto::file_level_enum_descriptors[3];
}
bool SpeedLimitSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NdmSpec::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::ndm_base::_NdmSpec_default_instance_._instance.get_mutable()->base_offset_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
}
void NdmSpec::clear_base_offset() {
  if (GetArenaNoVirtual() == NULL && base_offset_ != NULL) {
    delete base_offset_;
  }
  base_offset_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NdmSpec::kVersionFieldNumber;
const int NdmSpec::kDateFieldNumber;
const int NdmSpec::kTimestampFieldNumber;
const int NdmSpec::kSeqIdFieldNumber;
const int NdmSpec::kProjectionFieldNumber;
const int NdmSpec::kUtmZoneFieldNumber;
const int NdmSpec::kBaseOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NdmSpec::NdmSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ndm_5fbase_2eproto::InitDefaultsNdmSpec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ndm_base.NdmSpec)
}
NdmSpec::NdmSpec(const NdmSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  projection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.projection().size() > 0) {
    projection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projection_);
  }
  utm_zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.utm_zone().size() > 0) {
    utm_zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utm_zone_);
  }
  if (from.has_base_offset()) {
    base_offset_ = new ::autodrive::workflow::proto::Vector3d(*from.base_offset_);
  } else {
    base_offset_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(seq_id_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ndm_base.NdmSpec)
}

void NdmSpec::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utm_zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_id_) -
      reinterpret_cast<char*>(&base_offset_)) + sizeof(seq_id_));
  _cached_size_ = 0;
}

NdmSpec::~NdmSpec() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ndm_base.NdmSpec)
  SharedDtor();
}

void NdmSpec::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utm_zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_offset_;
}

void NdmSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NdmSpec::descriptor() {
  ::protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NdmSpec& NdmSpec::default_instance() {
  ::protobuf_ndm_5fbase_2eproto::InitDefaultsNdmSpec();
  return *internal_default_instance();
}

NdmSpec* NdmSpec::New(::google::protobuf::Arena* arena) const {
  NdmSpec* n = new NdmSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NdmSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ndm_base.NdmSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  projection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utm_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && base_offset_ != NULL) {
    delete base_offset_;
  }
  base_offset_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(seq_id_));
  _internal_metadata_.Clear();
}

bool NdmSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ndm_base.NdmSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.ndm_base.NdmSpec.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.ndm_base.NdmSpec.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 seq_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seq_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string projection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projection()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->projection().data(), static_cast<int>(this->projection().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.ndm_base.NdmSpec.projection"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string utm_zone = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_utm_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->utm_zone().data(), static_cast<int>(this->utm_zone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.ndm_base.NdmSpec.utm_zone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d base_offset = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_base_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ndm_base.NdmSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ndm_base.NdmSpec)
  return false;
#undef DO_
}

void NdmSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ndm_base.NdmSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ndm_base.NdmSpec.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ndm_base.NdmSpec.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // uint64 seq_id = 4;
  if (this->seq_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->seq_id(), output);
  }

  // string projection = 5;
  if (this->projection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projection().data(), static_cast<int>(this->projection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ndm_base.NdmSpec.projection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->projection(), output);
  }

  // string utm_zone = 6;
  if (this->utm_zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utm_zone().data(), static_cast<int>(this->utm_zone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ndm_base.NdmSpec.utm_zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->utm_zone(), output);
  }

  // .autodrive.workflow.proto.Vector3d base_offset = 7;
  if (this->has_base_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->base_offset_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ndm_base.NdmSpec)
}

::google::protobuf::uint8* NdmSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ndm_base.NdmSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ndm_base.NdmSpec.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // string date = 2;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ndm_base.NdmSpec.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // uint64 seq_id = 4;
  if (this->seq_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->seq_id(), target);
  }

  // string projection = 5;
  if (this->projection().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->projection().data(), static_cast<int>(this->projection().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ndm_base.NdmSpec.projection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->projection(), target);
  }

  // string utm_zone = 6;
  if (this->utm_zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->utm_zone().data(), static_cast<int>(this->utm_zone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ndm_base.NdmSpec.utm_zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->utm_zone(), target);
  }

  // .autodrive.workflow.proto.Vector3d base_offset = 7;
  if (this->has_base_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->base_offset_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ndm_base.NdmSpec)
  return target;
}

size_t NdmSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ndm_base.NdmSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // string projection = 5;
  if (this->projection().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->projection());
  }

  // string utm_zone = 6;
  if (this->utm_zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->utm_zone());
  }

  // .autodrive.workflow.proto.Vector3d base_offset = 7;
  if (this->has_base_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->base_offset_);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint64 seq_id = 4;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->seq_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NdmSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ndm_base.NdmSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const NdmSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NdmSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ndm_base.NdmSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ndm_base.NdmSpec)
    MergeFrom(*source);
  }
}

void NdmSpec::MergeFrom(const NdmSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ndm_base.NdmSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.projection().size() > 0) {

    projection_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.projection_);
  }
  if (from.utm_zone().size() > 0) {

    utm_zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.utm_zone_);
  }
  if (from.has_base_offset()) {
    mutable_base_offset()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.base_offset());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.seq_id() != 0) {
    set_seq_id(from.seq_id());
  }
}

void NdmSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ndm_base.NdmSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NdmSpec::CopyFrom(const NdmSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ndm_base.NdmSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NdmSpec::IsInitialized() const {
  return true;
}

void NdmSpec::Swap(NdmSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NdmSpec::InternalSwap(NdmSpec* other) {
  using std::swap;
  version_.Swap(&other->version_);
  date_.Swap(&other->date_);
  projection_.Swap(&other->projection_);
  utm_zone_.Swap(&other->utm_zone_);
  swap(base_offset_, other->base_offset_);
  swap(timestamp_, other->timestamp_);
  swap(seq_id_, other->seq_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NdmSpec::GetMetadata() const {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Id::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Id::kIdFieldNumber;
const int Id::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Id::Id()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ndm_5fbase_2eproto::InitDefaultsId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ndm_base.Id)
}
Id::Id(const Id& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ndm_base.Id)
}

void Id::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _cached_size_ = 0;
}

Id::~Id() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ndm_base.Id)
  SharedDtor();
}

void Id::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Id::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Id::descriptor() {
  ::protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Id& Id::default_instance() {
  ::protobuf_ndm_5fbase_2eproto::InitDefaultsId();
  return *internal_default_instance();
}

Id* Id::New(::google::protobuf::Arena* arena) const {
  Id* n = new Id;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Id::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ndm_base.Id)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  _internal_metadata_.Clear();
}

bool Id::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ndm_base.Id)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ndm_base.Id)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ndm_base.Id)
  return false;
#undef DO_
}

void Id::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ndm_base.Id)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ndm_base.Id)
}

::google::protobuf::uint8* Id::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ndm_base.Id)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ndm_base.Id)
  return target;
}

size_t Id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ndm_base.Id)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Id::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ndm_base.Id)
  GOOGLE_DCHECK_NE(&from, this);
  const Id* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Id>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ndm_base.Id)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ndm_base.Id)
    MergeFrom(*source);
  }
}

void Id::MergeFrom(const Id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ndm_base.Id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Id::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ndm_base.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Id::CopyFrom(const Id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ndm_base.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Id::IsInitialized() const {
  return true;
}

void Id::Swap(Id* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Id::InternalSwap(Id* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Id::GetMetadata() const {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Link::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::ndm_base::_Link_default_instance_._instance.get_mutable()->id_ = const_cast< ::autodrive::workflow::proto::ndm_base::Id*>(
      ::autodrive::workflow::proto::ndm_base::Id::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kIdFieldNumber;
const int Link::kOffsetFieldNumber;
const int Link::kEndOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ndm_5fbase_2eproto::InitDefaultsLink();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ndm_base.Link)
}
Link::Link(const Link& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::autodrive::workflow::proto::ndm_base::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_offset_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(end_offset_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ndm_base.Link)
}

void Link::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_offset_) -
      reinterpret_cast<char*>(&id_)) + sizeof(end_offset_));
  _cached_size_ = 0;
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ndm_base.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  ::protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Link& Link::default_instance() {
  ::protobuf_ndm_5fbase_2eproto::InitDefaultsLink();
  return *internal_default_instance();
}

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ndm_base.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_offset_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(end_offset_));
  _internal_metadata_.Clear();
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ndm_base.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.ndm_base.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ndm_base.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ndm_base.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ndm_base.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.Id id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // float offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->offset(), output);
  }

  // float end_offset = 3;
  if (this->end_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end_offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ndm_base.Link)
}

::google::protobuf::uint8* Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ndm_base.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.Id id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // float offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->offset(), target);
  }

  // float end_offset = 3;
  if (this->end_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->end_offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ndm_base.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ndm_base.Link)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.ndm_base.Id id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  // float offset = 2;
  if (this->offset() != 0) {
    total_size += 1 + 4;
  }

  // float end_offset = 3;
  if (this->end_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ndm_base.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ndm_base.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ndm_base.Link)
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ndm_base.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::autodrive::workflow::proto::ndm_base::Id::MergeFrom(from.id());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.end_offset() != 0) {
    set_end_offset(from.end_offset());
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ndm_base.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ndm_base.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(offset_, other->offset_);
  swap(end_offset_, other->end_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NdmVehicleType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NdmVehicleType::kTypeFieldNumber;
const int NdmVehicleType::kConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NdmVehicleType::NdmVehicleType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ndm_5fbase_2eproto::InitDefaultsNdmVehicleType();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ndm_base.NdmVehicleType)
}
NdmVehicleType::NdmVehicleType(const NdmVehicleType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&conf_) -
    reinterpret_cast<char*>(&type_)) + sizeof(conf_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ndm_base.NdmVehicleType)
}

void NdmVehicleType::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&type_)) + sizeof(conf_));
  _cached_size_ = 0;
}

NdmVehicleType::~NdmVehicleType() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  SharedDtor();
}

void NdmVehicleType::SharedDtor() {
}

void NdmVehicleType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NdmVehicleType::descriptor() {
  ::protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NdmVehicleType& NdmVehicleType::default_instance() {
  ::protobuf_ndm_5fbase_2eproto::InitDefaultsNdmVehicleType();
  return *internal_default_instance();
}

NdmVehicleType* NdmVehicleType::New(::google::protobuf::Arena* arena) const {
  NdmVehicleType* n = new NdmVehicleType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NdmVehicleType::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&type_)) + sizeof(conf_));
  _internal_metadata_.Clear();
}

bool NdmVehicleType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.ndm_base.NdmVehicleType.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::autodrive::workflow::proto::ndm_base::NdmVehicleType_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  return false;
#undef DO_
}

void NdmVehicleType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.NdmVehicleType.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // float conf = 2;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->conf(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ndm_base.NdmVehicleType)
}

::google::protobuf::uint8* NdmVehicleType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.NdmVehicleType.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // float conf = 2;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->conf(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  return target;
}

size_t NdmVehicleType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.ndm_base.NdmVehicleType.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float conf = 2;
  if (this->conf() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NdmVehicleType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  GOOGLE_DCHECK_NE(&from, this);
  const NdmVehicleType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NdmVehicleType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ndm_base.NdmVehicleType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ndm_base.NdmVehicleType)
    MergeFrom(*source);
  }
}

void NdmVehicleType::MergeFrom(const NdmVehicleType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
}

void NdmVehicleType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NdmVehicleType::CopyFrom(const NdmVehicleType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ndm_base.NdmVehicleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NdmVehicleType::IsInitialized() const {
  return true;
}

void NdmVehicleType::Swap(NdmVehicleType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NdmVehicleType::InternalSwap(NdmVehicleType* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(conf_, other->conf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NdmVehicleType::GetMetadata() const {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedLimit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedLimit::kLimitTypeFieldNumber;
const int SpeedLimit::kSourceFieldNumber;
const int SpeedLimit::kSpeedValueFieldNumber;
const int SpeedLimit::kOffsetFieldNumber;
const int SpeedLimit::kEndOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedLimit::SpeedLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ndm_5fbase_2eproto::InitDefaultsSpeedLimit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ndm_base.SpeedLimit)
}
SpeedLimit::SpeedLimit(const SpeedLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&limit_type_, &from.limit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_offset_) -
    reinterpret_cast<char*>(&limit_type_)) + sizeof(end_offset_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ndm_base.SpeedLimit)
}

void SpeedLimit::SharedCtor() {
  ::memset(&limit_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_offset_) -
      reinterpret_cast<char*>(&limit_type_)) + sizeof(end_offset_));
  _cached_size_ = 0;
}

SpeedLimit::~SpeedLimit() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ndm_base.SpeedLimit)
  SharedDtor();
}

void SpeedLimit::SharedDtor() {
}

void SpeedLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedLimit::descriptor() {
  ::protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedLimit& SpeedLimit::default_instance() {
  ::protobuf_ndm_5fbase_2eproto::InitDefaultsSpeedLimit();
  return *internal_default_instance();
}

SpeedLimit* SpeedLimit::New(::google::protobuf::Arena* arena) const {
  SpeedLimit* n = new SpeedLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ndm_base.SpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limit_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_offset_) -
      reinterpret_cast<char*>(&limit_type_)) + sizeof(end_offset_));
  _internal_metadata_.Clear();
}

bool SpeedLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ndm_base.SpeedLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.ndm_base.SpeedLimitType limit_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_limit_type(static_cast< ::autodrive::workflow::proto::ndm_base::SpeedLimitType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ndm_base.SpeedLimitSource source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source(static_cast< ::autodrive::workflow::proto::ndm_base::SpeedLimitSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end_offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ndm_base.SpeedLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ndm_base.SpeedLimit)
  return false;
#undef DO_
}

void SpeedLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ndm_base.SpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.SpeedLimitType limit_type = 1;
  if (this->limit_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->limit_type(), output);
  }

  // .autodrive.workflow.proto.ndm_base.SpeedLimitSource source = 2;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->source(), output);
  }

  // float speed_value = 3;
  if (this->speed_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed_value(), output);
  }

  // float offset = 4;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offset(), output);
  }

  // float end_offset = 5;
  if (this->end_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->end_offset(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ndm_base.SpeedLimit)
}

::google::protobuf::uint8* SpeedLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ndm_base.SpeedLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.SpeedLimitType limit_type = 1;
  if (this->limit_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->limit_type(), target);
  }

  // .autodrive.workflow.proto.ndm_base.SpeedLimitSource source = 2;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->source(), target);
  }

  // float speed_value = 3;
  if (this->speed_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed_value(), target);
  }

  // float offset = 4;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offset(), target);
  }

  // float end_offset = 5;
  if (this->end_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->end_offset(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ndm_base.SpeedLimit)
  return target;
}

size_t SpeedLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ndm_base.SpeedLimit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.ndm_base.SpeedLimitType limit_type = 1;
  if (this->limit_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->limit_type());
  }

  // .autodrive.workflow.proto.ndm_base.SpeedLimitSource source = 2;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  // float speed_value = 3;
  if (this->speed_value() != 0) {
    total_size += 1 + 4;
  }

  // float offset = 4;
  if (this->offset() != 0) {
    total_size += 1 + 4;
  }

  // float end_offset = 5;
  if (this->end_offset() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ndm_base.SpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ndm_base.SpeedLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ndm_base.SpeedLimit)
    MergeFrom(*source);
  }
}

void SpeedLimit::MergeFrom(const SpeedLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ndm_base.SpeedLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit_type() != 0) {
    set_limit_type(from.limit_type());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.speed_value() != 0) {
    set_speed_value(from.speed_value());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.end_offset() != 0) {
    set_end_offset(from.end_offset());
  }
}

void SpeedLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ndm_base.SpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedLimit::CopyFrom(const SpeedLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ndm_base.SpeedLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedLimit::IsInitialized() const {
  return true;
}

void SpeedLimit::Swap(SpeedLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedLimit::InternalSwap(SpeedLimit* other) {
  using std::swap;
  swap(limit_type_, other->limit_type_);
  swap(source_, other->source_);
  swap(speed_value_, other->speed_value_);
  swap(offset_, other->offset_);
  swap(end_offset_, other->end_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedLimit::GetMetadata() const {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Number::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Number::kValueFieldNumber;
const int Number::kCovFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Number::Number()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ndm_5fbase_2eproto::InitDefaultsNumber();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ndm_base.Number)
}
Number::Number(const Number& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&cov_) -
    reinterpret_cast<char*>(&value_)) + sizeof(cov_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ndm_base.Number)
}

void Number::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cov_) -
      reinterpret_cast<char*>(&value_)) + sizeof(cov_));
  _cached_size_ = 0;
}

Number::~Number() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ndm_base.Number)
  SharedDtor();
}

void Number::SharedDtor() {
}

void Number::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Number::descriptor() {
  ::protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Number& Number::default_instance() {
  ::protobuf_ndm_5fbase_2eproto::InitDefaultsNumber();
  return *internal_default_instance();
}

Number* Number::New(::google::protobuf::Arena* arena) const {
  Number* n = new Number;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Number::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ndm_base.Number)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cov_) -
      reinterpret_cast<char*>(&value_)) + sizeof(cov_));
  _internal_metadata_.Clear();
}

bool Number::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ndm_base.Number)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cov = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cov_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ndm_base.Number)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ndm_base.Number)
  return false;
#undef DO_
}

void Number::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ndm_base.Number)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value(), output);
  }

  // float cov = 2;
  if (this->cov() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cov(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ndm_base.Number)
}

::google::protobuf::uint8* Number::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ndm_base.Number)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value(), target);
  }

  // float cov = 2;
  if (this->cov() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cov(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ndm_base.Number)
  return target;
}

size_t Number::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ndm_base.Number)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  // float cov = 2;
  if (this->cov() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Number::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ndm_base.Number)
  GOOGLE_DCHECK_NE(&from, this);
  const Number* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Number>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ndm_base.Number)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ndm_base.Number)
    MergeFrom(*source);
  }
}

void Number::MergeFrom(const Number& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ndm_base.Number)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.cov() != 0) {
    set_cov(from.cov());
  }
}

void Number::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ndm_base.Number)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Number::CopyFrom(const Number& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ndm_base.Number)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Number::IsInitialized() const {
  return true;
}

void Number::Swap(Number* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Number::InternalSwap(Number* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(cov_, other->cov_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Number::GetMetadata() const {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeLimit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeLimit::kTimeBeginFieldNumber;
const int TimeLimit::kTimeEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeLimit::TimeLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ndm_5fbase_2eproto::InitDefaultsTimeLimit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ndm_base.TimeLimit)
}
TimeLimit::TimeLimit(const TimeLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_begin_, &from.time_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_end_) -
    reinterpret_cast<char*>(&time_begin_)) + sizeof(time_end_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ndm_base.TimeLimit)
}

void TimeLimit::SharedCtor() {
  ::memset(&time_begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_end_) -
      reinterpret_cast<char*>(&time_begin_)) + sizeof(time_end_));
  _cached_size_ = 0;
}

TimeLimit::~TimeLimit() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ndm_base.TimeLimit)
  SharedDtor();
}

void TimeLimit::SharedDtor() {
}

void TimeLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeLimit::descriptor() {
  ::protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeLimit& TimeLimit::default_instance() {
  ::protobuf_ndm_5fbase_2eproto::InitDefaultsTimeLimit();
  return *internal_default_instance();
}

TimeLimit* TimeLimit::New(::google::protobuf::Arena* arena) const {
  TimeLimit* n = new TimeLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ndm_base.TimeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_end_) -
      reinterpret_cast<char*>(&time_begin_)) + sizeof(time_end_));
  _internal_metadata_.Clear();
}

bool TimeLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ndm_base.TimeLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float time_begin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time_end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ndm_base.TimeLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ndm_base.TimeLimit)
  return false;
#undef DO_
}

void TimeLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ndm_base.TimeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time_begin = 1;
  if (this->time_begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time_begin(), output);
  }

  // float time_end = 2;
  if (this->time_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time_end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ndm_base.TimeLimit)
}

::google::protobuf::uint8* TimeLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ndm_base.TimeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time_begin = 1;
  if (this->time_begin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time_begin(), target);
  }

  // float time_end = 2;
  if (this->time_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time_end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ndm_base.TimeLimit)
  return target;
}

size_t TimeLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ndm_base.TimeLimit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float time_begin = 1;
  if (this->time_begin() != 0) {
    total_size += 1 + 4;
  }

  // float time_end = 2;
  if (this->time_end() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ndm_base.TimeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ndm_base.TimeLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ndm_base.TimeLimit)
    MergeFrom(*source);
  }
}

void TimeLimit::MergeFrom(const TimeLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ndm_base.TimeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_begin() != 0) {
    set_time_begin(from.time_begin());
  }
  if (from.time_end() != 0) {
    set_time_end(from.time_end());
  }
}

void TimeLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ndm_base.TimeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeLimit::CopyFrom(const TimeLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ndm_base.TimeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLimit::IsInitialized() const {
  return true;
}

void TimeLimit::Swap(TimeLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeLimit::InternalSwap(TimeLimit* other) {
  using std::swap;
  swap(time_begin_, other->time_begin_);
  swap(time_end_, other->time_end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeLimit::GetMetadata() const {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkingSpaceRestriction::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::ndm_base::_ParkingSpaceRestriction_default_instance_._instance.get_mutable()->number_limit_ = const_cast< ::autodrive::workflow::proto::ndm_base::Number*>(
      ::autodrive::workflow::proto::ndm_base::Number::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingSpaceRestriction::kNumberLimitFieldNumber;
const int ParkingSpaceRestriction::kTimeLimitsFieldNumber;
const int ParkingSpaceRestriction::kVehicleTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingSpaceRestriction::ParkingSpaceRestriction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ndm_5fbase_2eproto::InitDefaultsParkingSpaceRestriction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
}
ParkingSpaceRestriction::ParkingSpaceRestriction(const ParkingSpaceRestriction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      time_limits_(from.time_limits_),
      vehicle_types_(from.vehicle_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_number_limit()) {
    number_limit_ = new ::autodrive::workflow::proto::ndm_base::Number(*from.number_limit_);
  } else {
    number_limit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
}

void ParkingSpaceRestriction::SharedCtor() {
  number_limit_ = NULL;
  _cached_size_ = 0;
}

ParkingSpaceRestriction::~ParkingSpaceRestriction() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  SharedDtor();
}

void ParkingSpaceRestriction::SharedDtor() {
  if (this != internal_default_instance()) delete number_limit_;
}

void ParkingSpaceRestriction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingSpaceRestriction::descriptor() {
  ::protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingSpaceRestriction& ParkingSpaceRestriction::default_instance() {
  ::protobuf_ndm_5fbase_2eproto::InitDefaultsParkingSpaceRestriction();
  return *internal_default_instance();
}

ParkingSpaceRestriction* ParkingSpaceRestriction::New(::google::protobuf::Arena* arena) const {
  ParkingSpaceRestriction* n = new ParkingSpaceRestriction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingSpaceRestriction::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_limits_.Clear();
  vehicle_types_.Clear();
  if (GetArenaNoVirtual() == NULL && number_limit_ != NULL) {
    delete number_limit_;
  }
  number_limit_ = NULL;
  _internal_metadata_.Clear();
}

bool ParkingSpaceRestriction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.ndm_base.Number number_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_number_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ndm_base.TimeLimit time_limits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_time_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ndm_base.NdmVehicleType vehicle_types = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_vehicle_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  return false;
#undef DO_
}

void ParkingSpaceRestriction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.Number number_limit = 1;
  if (this->has_number_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->number_limit_, output);
  }

  // repeated .autodrive.workflow.proto.ndm_base.TimeLimit time_limits = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->time_limits(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.ndm_base.NdmVehicleType vehicle_types = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vehicle_types(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
}

::google::protobuf::uint8* ParkingSpaceRestriction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.Number number_limit = 1;
  if (this->has_number_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->number_limit_, deterministic, target);
  }

  // repeated .autodrive.workflow.proto.ndm_base.TimeLimit time_limits = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->time_limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->time_limits(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.ndm_base.NdmVehicleType vehicle_types = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->vehicle_types(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  return target;
}

size_t ParkingSpaceRestriction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.ndm_base.TimeLimit time_limits = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->time_limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->time_limits(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.ndm_base.NdmVehicleType vehicle_types = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicle_types(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.ndm_base.Number number_limit = 1;
  if (this->has_number_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->number_limit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingSpaceRestriction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSpaceRestriction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingSpaceRestriction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
    MergeFrom(*source);
  }
}

void ParkingSpaceRestriction::MergeFrom(const ParkingSpaceRestriction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_limits_.MergeFrom(from.time_limits_);
  vehicle_types_.MergeFrom(from.vehicle_types_);
  if (from.has_number_limit()) {
    mutable_number_limit()->::autodrive::workflow::proto::ndm_base::Number::MergeFrom(from.number_limit());
  }
}

void ParkingSpaceRestriction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSpaceRestriction::CopyFrom(const ParkingSpaceRestriction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ndm_base.ParkingSpaceRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpaceRestriction::IsInitialized() const {
  return true;
}

void ParkingSpaceRestriction::Swap(ParkingSpaceRestriction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingSpaceRestriction::InternalSwap(ParkingSpaceRestriction* other) {
  using std::swap;
  time_limits_.InternalSwap(&other->time_limits_);
  vehicle_types_.InternalSwap(&other->vehicle_types_);
  swap(number_limit_, other->number_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingSpaceRestriction::GetMetadata() const {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Index::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Index::kXFieldNumber;
const int Index::kYFieldNumber;
const int Index::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Index::Index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ndm_5fbase_2eproto::InitDefaultsIndex();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ndm_base.Index)
}
Index::Index(const Index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ndm_base.Index)
}

void Index::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ndm_base.Index)
  SharedDtor();
}

void Index::SharedDtor() {
}

void Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index::descriptor() {
  ::protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Index& Index::default_instance() {
  ::protobuf_ndm_5fbase_2eproto::InitDefaultsIndex();
  return *internal_default_instance();
}

Index* Index::New(::google::protobuf::Arena* arena) const {
  Index* n = new Index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ndm_base.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ndm_base.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ndm_base.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ndm_base.Index)
  return false;
#undef DO_
}

void Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ndm_base.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->x(), output);
  }

  // uint64 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->y(), output);
  }

  // uint64 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ndm_base.Index)
}

::google::protobuf::uint8* Index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ndm_base.Index)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->x(), target);
  }

  // uint64 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->y(), target);
  }

  // uint64 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ndm_base.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ndm_base.Index)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->x());
  }

  // uint64 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->y());
  }

  // uint64 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->z());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ndm_base.Index)
  GOOGLE_DCHECK_NE(&from, this);
  const Index* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ndm_base.Index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ndm_base.Index)
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ndm_base.Index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ndm_base.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ndm_base.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::Swap(Index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Index::InternalSwap(Index* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Index::GetMetadata() const {
  protobuf_ndm_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ndm_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ndm_base
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
