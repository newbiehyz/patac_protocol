// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basic.proto

#ifndef PROTOBUF_basic_2eproto__INCLUDED
#define PROTOBUF_basic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_basic_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVector2fImpl();
void InitDefaultsVector2f();
void InitDefaultsVector2dImpl();
void InitDefaultsVector2d();
void InitDefaultsVector2Impl();
void InitDefaultsVector2();
void InitDefaultsVector2iImpl();
void InitDefaultsVector2i();
void InitDefaultsVector2u8NonaImpl();
void InitDefaultsVector2u8Nona();
void InitDefaultsVector2u16NonaImpl();
void InitDefaultsVector2u16Nona();
void InitDefaultsVector2i8NonaImpl();
void InitDefaultsVector2i8Nona();
void InitDefaultsVector2i16NonaImpl();
void InitDefaultsVector2i16Nona();
void InitDefaultsVector3u8NonaImpl();
void InitDefaultsVector3u8Nona();
void InitDefaultsVector3u16NonaImpl();
void InitDefaultsVector3u16Nona();
void InitDefaultsVector3i8NonaImpl();
void InitDefaultsVector3i8Nona();
void InitDefaultsVector3i16NonaImpl();
void InitDefaultsVector3i16Nona();
void InitDefaultsVector3fImpl();
void InitDefaultsVector3f();
void InitDefaultsVector3dImpl();
void InitDefaultsVector3d();
void InitDefaultsVector3Impl();
void InitDefaultsVector3();
void InitDefaultsEulerImpl();
void InitDefaultsEuler();
void InitDefaultsVector4fImpl();
void InitDefaultsVector4f();
void InitDefaultsVector4dImpl();
void InitDefaultsVector4d();
inline void InitDefaults() {
  InitDefaultsVector2f();
  InitDefaultsVector2d();
  InitDefaultsVector2();
  InitDefaultsVector2i();
  InitDefaultsVector2u8Nona();
  InitDefaultsVector2u16Nona();
  InitDefaultsVector2i8Nona();
  InitDefaultsVector2i16Nona();
  InitDefaultsVector3u8Nona();
  InitDefaultsVector3u16Nona();
  InitDefaultsVector3i8Nona();
  InitDefaultsVector3i16Nona();
  InitDefaultsVector3f();
  InitDefaultsVector3d();
  InitDefaultsVector3();
  InitDefaultsEuler();
  InitDefaultsVector4f();
  InitDefaultsVector4d();
}
}  // namespace protobuf_basic_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class Euler;
class EulerDefaultTypeInternal;
extern EulerDefaultTypeInternal _Euler_default_instance_;
class Vector2;
class Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
class Vector2d;
class Vector2dDefaultTypeInternal;
extern Vector2dDefaultTypeInternal _Vector2d_default_instance_;
class Vector2f;
class Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
class Vector2i;
class Vector2iDefaultTypeInternal;
extern Vector2iDefaultTypeInternal _Vector2i_default_instance_;
class Vector2i16Nona;
class Vector2i16NonaDefaultTypeInternal;
extern Vector2i16NonaDefaultTypeInternal _Vector2i16Nona_default_instance_;
class Vector2i8Nona;
class Vector2i8NonaDefaultTypeInternal;
extern Vector2i8NonaDefaultTypeInternal _Vector2i8Nona_default_instance_;
class Vector2u16Nona;
class Vector2u16NonaDefaultTypeInternal;
extern Vector2u16NonaDefaultTypeInternal _Vector2u16Nona_default_instance_;
class Vector2u8Nona;
class Vector2u8NonaDefaultTypeInternal;
extern Vector2u8NonaDefaultTypeInternal _Vector2u8Nona_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector3d;
class Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
class Vector3f;
class Vector3fDefaultTypeInternal;
extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
class Vector3i16Nona;
class Vector3i16NonaDefaultTypeInternal;
extern Vector3i16NonaDefaultTypeInternal _Vector3i16Nona_default_instance_;
class Vector3i8Nona;
class Vector3i8NonaDefaultTypeInternal;
extern Vector3i8NonaDefaultTypeInternal _Vector3i8Nona_default_instance_;
class Vector3u16Nona;
class Vector3u16NonaDefaultTypeInternal;
extern Vector3u16NonaDefaultTypeInternal _Vector3u16Nona_default_instance_;
class Vector3u8Nona;
class Vector3u8NonaDefaultTypeInternal;
extern Vector3u8NonaDefaultTypeInternal _Vector3u8Nona_default_instance_;
class Vector4d;
class Vector4dDefaultTypeInternal;
extern Vector4dDefaultTypeInternal _Vector4d_default_instance_;
class Vector4f;
class Vector4fDefaultTypeInternal;
extern Vector4fDefaultTypeInternal _Vector4f_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class Vector2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector2f) */ {
 public:
  Vector2f();
  virtual ~Vector2f();

  Vector2f(const Vector2f& from);

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2f(Vector2f&& from) noexcept
    : Vector2f() {
    *this = ::std::move(from);
  }

  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
               &_Vector2f_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Vector2f* other);
  friend void swap(Vector2f& a, Vector2f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2f* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector2f* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector2f& from);
  void MergeFrom(const Vector2f& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector2f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector2f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector2fImpl();
};
// -------------------------------------------------------------------

class Vector2d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector2d) */ {
 public:
  Vector2d();
  virtual ~Vector2d();

  Vector2d(const Vector2d& from);

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2d(Vector2d&& from) noexcept
    : Vector2d() {
    *this = ::std::move(from);
  }

  inline Vector2d& operator=(Vector2d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2d* internal_default_instance() {
    return reinterpret_cast<const Vector2d*>(
               &_Vector2d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Vector2d* other);
  friend void swap(Vector2d& a, Vector2d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2d* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector2d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector2d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector2d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector2dImpl();
};
// -------------------------------------------------------------------

class Vector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector2) */ {
 public:
  Vector2();
  virtual ~Vector2();

  Vector2(const Vector2& from);

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(Vector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Vector2* other);
  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector2& from);
  void MergeFrom(const Vector2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector2Impl();
};
// -------------------------------------------------------------------

class Vector2i : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector2i) */ {
 public:
  Vector2i();
  virtual ~Vector2i();

  Vector2i(const Vector2i& from);

  inline Vector2i& operator=(const Vector2i& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2i(Vector2i&& from) noexcept
    : Vector2i() {
    *this = ::std::move(from);
  }

  inline Vector2i& operator=(Vector2i&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2i& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2i* internal_default_instance() {
    return reinterpret_cast<const Vector2i*>(
               &_Vector2i_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Vector2i* other);
  friend void swap(Vector2i& a, Vector2i& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2i* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector2i* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector2i& from);
  void MergeFrom(const Vector2i& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector2i* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector2i)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector2iImpl();
};
// -------------------------------------------------------------------

class Vector2u8Nona : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector2u8Nona) */ {
 public:
  Vector2u8Nona();
  virtual ~Vector2u8Nona();

  Vector2u8Nona(const Vector2u8Nona& from);

  inline Vector2u8Nona& operator=(const Vector2u8Nona& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2u8Nona(Vector2u8Nona&& from) noexcept
    : Vector2u8Nona() {
    *this = ::std::move(from);
  }

  inline Vector2u8Nona& operator=(Vector2u8Nona&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2u8Nona& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2u8Nona* internal_default_instance() {
    return reinterpret_cast<const Vector2u8Nona*>(
               &_Vector2u8Nona_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Vector2u8Nona* other);
  friend void swap(Vector2u8Nona& a, Vector2u8Nona& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2u8Nona* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector2u8Nona* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector2u8Nona& from);
  void MergeFrom(const Vector2u8Nona& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector2u8Nona* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector2u8Nona)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector2u8NonaImpl();
};
// -------------------------------------------------------------------

class Vector2u16Nona : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector2u16Nona) */ {
 public:
  Vector2u16Nona();
  virtual ~Vector2u16Nona();

  Vector2u16Nona(const Vector2u16Nona& from);

  inline Vector2u16Nona& operator=(const Vector2u16Nona& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2u16Nona(Vector2u16Nona&& from) noexcept
    : Vector2u16Nona() {
    *this = ::std::move(from);
  }

  inline Vector2u16Nona& operator=(Vector2u16Nona&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2u16Nona& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2u16Nona* internal_default_instance() {
    return reinterpret_cast<const Vector2u16Nona*>(
               &_Vector2u16Nona_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Vector2u16Nona* other);
  friend void swap(Vector2u16Nona& a, Vector2u16Nona& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2u16Nona* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector2u16Nona* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector2u16Nona& from);
  void MergeFrom(const Vector2u16Nona& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector2u16Nona* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector2u16Nona)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector2u16NonaImpl();
};
// -------------------------------------------------------------------

class Vector2i8Nona : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector2i8Nona) */ {
 public:
  Vector2i8Nona();
  virtual ~Vector2i8Nona();

  Vector2i8Nona(const Vector2i8Nona& from);

  inline Vector2i8Nona& operator=(const Vector2i8Nona& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2i8Nona(Vector2i8Nona&& from) noexcept
    : Vector2i8Nona() {
    *this = ::std::move(from);
  }

  inline Vector2i8Nona& operator=(Vector2i8Nona&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2i8Nona& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2i8Nona* internal_default_instance() {
    return reinterpret_cast<const Vector2i8Nona*>(
               &_Vector2i8Nona_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Vector2i8Nona* other);
  friend void swap(Vector2i8Nona& a, Vector2i8Nona& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2i8Nona* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector2i8Nona* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector2i8Nona& from);
  void MergeFrom(const Vector2i8Nona& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector2i8Nona* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector2i8Nona)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector2i8NonaImpl();
};
// -------------------------------------------------------------------

class Vector2i16Nona : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector2i16Nona) */ {
 public:
  Vector2i16Nona();
  virtual ~Vector2i16Nona();

  Vector2i16Nona(const Vector2i16Nona& from);

  inline Vector2i16Nona& operator=(const Vector2i16Nona& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2i16Nona(Vector2i16Nona&& from) noexcept
    : Vector2i16Nona() {
    *this = ::std::move(from);
  }

  inline Vector2i16Nona& operator=(Vector2i16Nona&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2i16Nona& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2i16Nona* internal_default_instance() {
    return reinterpret_cast<const Vector2i16Nona*>(
               &_Vector2i16Nona_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Vector2i16Nona* other);
  friend void swap(Vector2i16Nona& a, Vector2i16Nona& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2i16Nona* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector2i16Nona* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector2i16Nona& from);
  void MergeFrom(const Vector2i16Nona& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector2i16Nona* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector2i16Nona)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector2i16NonaImpl();
};
// -------------------------------------------------------------------

class Vector3u8Nona : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector3u8Nona) */ {
 public:
  Vector3u8Nona();
  virtual ~Vector3u8Nona();

  Vector3u8Nona(const Vector3u8Nona& from);

  inline Vector3u8Nona& operator=(const Vector3u8Nona& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3u8Nona(Vector3u8Nona&& from) noexcept
    : Vector3u8Nona() {
    *this = ::std::move(from);
  }

  inline Vector3u8Nona& operator=(Vector3u8Nona&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3u8Nona& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3u8Nona* internal_default_instance() {
    return reinterpret_cast<const Vector3u8Nona*>(
               &_Vector3u8Nona_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Vector3u8Nona* other);
  friend void swap(Vector3u8Nona& a, Vector3u8Nona& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3u8Nona* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3u8Nona* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3u8Nona& from);
  void MergeFrom(const Vector3u8Nona& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3u8Nona* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector3u8Nona)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector3u8NonaImpl();
};
// -------------------------------------------------------------------

class Vector3u16Nona : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector3u16Nona) */ {
 public:
  Vector3u16Nona();
  virtual ~Vector3u16Nona();

  Vector3u16Nona(const Vector3u16Nona& from);

  inline Vector3u16Nona& operator=(const Vector3u16Nona& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3u16Nona(Vector3u16Nona&& from) noexcept
    : Vector3u16Nona() {
    *this = ::std::move(from);
  }

  inline Vector3u16Nona& operator=(Vector3u16Nona&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3u16Nona& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3u16Nona* internal_default_instance() {
    return reinterpret_cast<const Vector3u16Nona*>(
               &_Vector3u16Nona_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Vector3u16Nona* other);
  friend void swap(Vector3u16Nona& a, Vector3u16Nona& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3u16Nona* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3u16Nona* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3u16Nona& from);
  void MergeFrom(const Vector3u16Nona& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3u16Nona* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector3u16Nona)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector3u16NonaImpl();
};
// -------------------------------------------------------------------

class Vector3i8Nona : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector3i8Nona) */ {
 public:
  Vector3i8Nona();
  virtual ~Vector3i8Nona();

  Vector3i8Nona(const Vector3i8Nona& from);

  inline Vector3i8Nona& operator=(const Vector3i8Nona& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3i8Nona(Vector3i8Nona&& from) noexcept
    : Vector3i8Nona() {
    *this = ::std::move(from);
  }

  inline Vector3i8Nona& operator=(Vector3i8Nona&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3i8Nona& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3i8Nona* internal_default_instance() {
    return reinterpret_cast<const Vector3i8Nona*>(
               &_Vector3i8Nona_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Vector3i8Nona* other);
  friend void swap(Vector3i8Nona& a, Vector3i8Nona& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3i8Nona* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3i8Nona* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3i8Nona& from);
  void MergeFrom(const Vector3i8Nona& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3i8Nona* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector3i8Nona)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector3i8NonaImpl();
};
// -------------------------------------------------------------------

class Vector3i16Nona : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector3i16Nona) */ {
 public:
  Vector3i16Nona();
  virtual ~Vector3i16Nona();

  Vector3i16Nona(const Vector3i16Nona& from);

  inline Vector3i16Nona& operator=(const Vector3i16Nona& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3i16Nona(Vector3i16Nona&& from) noexcept
    : Vector3i16Nona() {
    *this = ::std::move(from);
  }

  inline Vector3i16Nona& operator=(Vector3i16Nona&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3i16Nona& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3i16Nona* internal_default_instance() {
    return reinterpret_cast<const Vector3i16Nona*>(
               &_Vector3i16Nona_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Vector3i16Nona* other);
  friend void swap(Vector3i16Nona& a, Vector3i16Nona& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3i16Nona* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3i16Nona* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3i16Nona& from);
  void MergeFrom(const Vector3i16Nona& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3i16Nona* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector3i16Nona)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector3i16NonaImpl();
};
// -------------------------------------------------------------------

class Vector3f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector3f) */ {
 public:
  Vector3f();
  virtual ~Vector3f();

  Vector3f(const Vector3f& from);

  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3f(Vector3f&& from) noexcept
    : Vector3f() {
    *this = ::std::move(from);
  }

  inline Vector3f& operator=(Vector3f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3f* internal_default_instance() {
    return reinterpret_cast<const Vector3f*>(
               &_Vector3f_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Vector3f* other);
  friend void swap(Vector3f& a, Vector3f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3f* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3f* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3f& from);
  void MergeFrom(const Vector3f& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector3f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector3fImpl();
};
// -------------------------------------------------------------------

class Vector3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector3d) */ {
 public:
  Vector3d();
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Vector3d* other);
  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3d* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector3d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector3dImpl();
};
// -------------------------------------------------------------------

class Vector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Vector3* other);
  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector3Impl();
};
// -------------------------------------------------------------------

class Euler : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Euler) */ {
 public:
  Euler();
  virtual ~Euler();

  Euler(const Euler& from);

  inline Euler& operator=(const Euler& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Euler(Euler&& from) noexcept
    : Euler() {
    *this = ::std::move(from);
  }

  inline Euler& operator=(Euler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Euler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Euler* internal_default_instance() {
    return reinterpret_cast<const Euler*>(
               &_Euler_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Euler* other);
  friend void swap(Euler& a, Euler& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Euler* New() const PROTOBUF_FINAL { return New(NULL); }

  Euler* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Euler& from);
  void MergeFrom(const Euler& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Euler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double roll = 1;
  void clear_roll();
  static const int kRollFieldNumber = 1;
  double roll() const;
  void set_roll(double value);

  // double pitch = 2;
  void clear_pitch();
  static const int kPitchFieldNumber = 2;
  double pitch() const;
  void set_pitch(double value);

  // double yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  double yaw() const;
  void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Euler)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double roll_;
  double pitch_;
  double yaw_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsEulerImpl();
};
// -------------------------------------------------------------------

class Vector4f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector4f) */ {
 public:
  Vector4f();
  virtual ~Vector4f();

  Vector4f(const Vector4f& from);

  inline Vector4f& operator=(const Vector4f& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector4f(Vector4f&& from) noexcept
    : Vector4f() {
    *this = ::std::move(from);
  }

  inline Vector4f& operator=(Vector4f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector4f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector4f* internal_default_instance() {
    return reinterpret_cast<const Vector4f*>(
               &_Vector4f_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Vector4f* other);
  friend void swap(Vector4f& a, Vector4f& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector4f* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector4f* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector4f& from);
  void MergeFrom(const Vector4f& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector4f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float w = 1;
  void clear_w();
  static const int kWFieldNumber = 1;
  float w() const;
  void set_w(float value);

  // float x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // float y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // float z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector4f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float w_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector4fImpl();
};
// -------------------------------------------------------------------

class Vector4d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Vector4d) */ {
 public:
  Vector4d();
  virtual ~Vector4d();

  Vector4d(const Vector4d& from);

  inline Vector4d& operator=(const Vector4d& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector4d(Vector4d&& from) noexcept
    : Vector4d() {
    *this = ::std::move(from);
  }

  inline Vector4d& operator=(Vector4d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector4d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector4d* internal_default_instance() {
    return reinterpret_cast<const Vector4d*>(
               &_Vector4d_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(Vector4d* other);
  friend void swap(Vector4d& a, Vector4d& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector4d* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector4d* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector4d& from);
  void MergeFrom(const Vector4d& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector4d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double w = 1;
  void clear_w();
  static const int kWFieldNumber = 1;
  double w() const;
  void set_w(double value);

  // double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // double z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Vector4d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double w_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend struct ::protobuf_basic_2eproto::TableStruct;
  friend void ::protobuf_basic_2eproto::InitDefaultsVector4dImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2f

// float x = 1;
inline void Vector2f::clear_x() {
  x_ = 0;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2f.x)
  return x_;
}
inline void Vector2f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2f.x)
}

// float y = 2;
inline void Vector2f::clear_y() {
  y_ = 0;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2f.y)
  return y_;
}
inline void Vector2f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2f.y)
}

// -------------------------------------------------------------------

// Vector2d

// double x = 1;
inline void Vector2d::clear_x() {
  x_ = 0;
}
inline double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2d.x)
  return x_;
}
inline void Vector2d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2d.x)
}

// double y = 2;
inline void Vector2d::clear_y() {
  y_ = 0;
}
inline double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2d.y)
  return y_;
}
inline void Vector2d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2d.y)
}

// -------------------------------------------------------------------

// Vector2

// double x = 1;
inline void Vector2::clear_x() {
  x_ = 0;
}
inline double Vector2::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2.x)
  return x_;
}
inline void Vector2::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2.x)
}

// double y = 2;
inline void Vector2::clear_y() {
  y_ = 0;
}
inline double Vector2::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2.y)
  return y_;
}
inline void Vector2::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2.y)
}

// -------------------------------------------------------------------

// Vector2i

// int32 x = 1;
inline void Vector2i::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector2i::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2i.x)
  return x_;
}
inline void Vector2i::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2i.x)
}

// int32 y = 2;
inline void Vector2i::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector2i::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2i.y)
  return y_;
}
inline void Vector2i::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2i.y)
}

// -------------------------------------------------------------------

// Vector2u8Nona

// int32 x = 1;
inline void Vector2u8Nona::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector2u8Nona::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2u8Nona.x)
  return x_;
}
inline void Vector2u8Nona::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2u8Nona.x)
}

// int32 y = 2;
inline void Vector2u8Nona::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector2u8Nona::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2u8Nona.y)
  return y_;
}
inline void Vector2u8Nona::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2u8Nona.y)
}

// -------------------------------------------------------------------

// Vector2u16Nona

// int32 x = 1;
inline void Vector2u16Nona::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector2u16Nona::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2u16Nona.x)
  return x_;
}
inline void Vector2u16Nona::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2u16Nona.x)
}

// int32 y = 2;
inline void Vector2u16Nona::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector2u16Nona::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2u16Nona.y)
  return y_;
}
inline void Vector2u16Nona::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2u16Nona.y)
}

// -------------------------------------------------------------------

// Vector2i8Nona

// int32 x = 1;
inline void Vector2i8Nona::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector2i8Nona::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2i8Nona.x)
  return x_;
}
inline void Vector2i8Nona::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2i8Nona.x)
}

// int32 y = 2;
inline void Vector2i8Nona::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector2i8Nona::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2i8Nona.y)
  return y_;
}
inline void Vector2i8Nona::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2i8Nona.y)
}

// -------------------------------------------------------------------

// Vector2i16Nona

// int32 x = 1;
inline void Vector2i16Nona::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector2i16Nona::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2i16Nona.x)
  return x_;
}
inline void Vector2i16Nona::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2i16Nona.x)
}

// int32 y = 2;
inline void Vector2i16Nona::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector2i16Nona::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector2i16Nona.y)
  return y_;
}
inline void Vector2i16Nona::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector2i16Nona.y)
}

// -------------------------------------------------------------------

// Vector3u8Nona

// int32 x = 1;
inline void Vector3u8Nona::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector3u8Nona::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3u8Nona.x)
  return x_;
}
inline void Vector3u8Nona::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3u8Nona.x)
}

// int32 y = 2;
inline void Vector3u8Nona::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector3u8Nona::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3u8Nona.y)
  return y_;
}
inline void Vector3u8Nona::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3u8Nona.y)
}

// int32 z = 3;
inline void Vector3u8Nona::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 Vector3u8Nona::z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3u8Nona.z)
  return z_;
}
inline void Vector3u8Nona::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3u8Nona.z)
}

// -------------------------------------------------------------------

// Vector3u16Nona

// int32 x = 1;
inline void Vector3u16Nona::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector3u16Nona::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3u16Nona.x)
  return x_;
}
inline void Vector3u16Nona::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3u16Nona.x)
}

// int32 y = 2;
inline void Vector3u16Nona::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector3u16Nona::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3u16Nona.y)
  return y_;
}
inline void Vector3u16Nona::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3u16Nona.y)
}

// int32 z = 3;
inline void Vector3u16Nona::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 Vector3u16Nona::z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3u16Nona.z)
  return z_;
}
inline void Vector3u16Nona::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3u16Nona.z)
}

// -------------------------------------------------------------------

// Vector3i8Nona

// int32 x = 1;
inline void Vector3i8Nona::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector3i8Nona::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3i8Nona.x)
  return x_;
}
inline void Vector3i8Nona::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3i8Nona.x)
}

// int32 y = 2;
inline void Vector3i8Nona::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector3i8Nona::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3i8Nona.y)
  return y_;
}
inline void Vector3i8Nona::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3i8Nona.y)
}

// int32 z = 3;
inline void Vector3i8Nona::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 Vector3i8Nona::z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3i8Nona.z)
  return z_;
}
inline void Vector3i8Nona::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3i8Nona.z)
}

// -------------------------------------------------------------------

// Vector3i16Nona

// int32 x = 1;
inline void Vector3i16Nona::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Vector3i16Nona::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3i16Nona.x)
  return x_;
}
inline void Vector3i16Nona::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3i16Nona.x)
}

// int32 y = 2;
inline void Vector3i16Nona::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Vector3i16Nona::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3i16Nona.y)
  return y_;
}
inline void Vector3i16Nona::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3i16Nona.y)
}

// int32 z = 3;
inline void Vector3i16Nona::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 Vector3i16Nona::z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3i16Nona.z)
  return z_;
}
inline void Vector3i16Nona::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3i16Nona.z)
}

// -------------------------------------------------------------------

// Vector3f

// float x = 1;
inline void Vector3f::clear_x() {
  x_ = 0;
}
inline float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3f.x)
  return x_;
}
inline void Vector3f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3f.x)
}

// float y = 2;
inline void Vector3f::clear_y() {
  y_ = 0;
}
inline float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3f.y)
  return y_;
}
inline void Vector3f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3f.y)
}

// float z = 3;
inline void Vector3f::clear_z() {
  z_ = 0;
}
inline float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3f.z)
  return z_;
}
inline void Vector3f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3f.z)
}

// -------------------------------------------------------------------

// Vector3d

// double x = 1;
inline void Vector3d::clear_x() {
  x_ = 0;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3d.x)
  return x_;
}
inline void Vector3d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3d.x)
}

// double y = 2;
inline void Vector3d::clear_y() {
  y_ = 0;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3d.y)
  return y_;
}
inline void Vector3d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3d.y)
}

// double z = 3;
inline void Vector3d::clear_z() {
  z_ = 0;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3d.z)
  return z_;
}
inline void Vector3d::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3d.z)
}

// -------------------------------------------------------------------

// Vector3

// double x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3.x)
  return x_;
}
inline void Vector3::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3.x)
}

// double y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3.y)
  return y_;
}
inline void Vector3::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3.y)
}

// double z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector3.z)
  return z_;
}
inline void Vector3::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector3.z)
}

// -------------------------------------------------------------------

// Euler

// double roll = 1;
inline void Euler::clear_roll() {
  roll_ = 0;
}
inline double Euler::roll() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Euler.roll)
  return roll_;
}
inline void Euler::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Euler.roll)
}

// double pitch = 2;
inline void Euler::clear_pitch() {
  pitch_ = 0;
}
inline double Euler::pitch() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Euler.pitch)
  return pitch_;
}
inline void Euler::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Euler.pitch)
}

// double yaw = 3;
inline void Euler::clear_yaw() {
  yaw_ = 0;
}
inline double Euler::yaw() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Euler.yaw)
  return yaw_;
}
inline void Euler::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Euler.yaw)
}

// -------------------------------------------------------------------

// Vector4f

// float w = 1;
inline void Vector4f::clear_w() {
  w_ = 0;
}
inline float Vector4f::w() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector4f.w)
  return w_;
}
inline void Vector4f::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector4f.w)
}

// float x = 2;
inline void Vector4f::clear_x() {
  x_ = 0;
}
inline float Vector4f::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector4f.x)
  return x_;
}
inline void Vector4f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector4f.x)
}

// float y = 3;
inline void Vector4f::clear_y() {
  y_ = 0;
}
inline float Vector4f::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector4f.y)
  return y_;
}
inline void Vector4f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector4f.y)
}

// float z = 4;
inline void Vector4f::clear_z() {
  z_ = 0;
}
inline float Vector4f::z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector4f.z)
  return z_;
}
inline void Vector4f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector4f.z)
}

// -------------------------------------------------------------------

// Vector4d

// double w = 1;
inline void Vector4d::clear_w() {
  w_ = 0;
}
inline double Vector4d::w() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector4d.w)
  return w_;
}
inline void Vector4d::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector4d.w)
}

// double x = 2;
inline void Vector4d::clear_x() {
  x_ = 0;
}
inline double Vector4d::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector4d.x)
  return x_;
}
inline void Vector4d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector4d.x)
}

// double y = 3;
inline void Vector4d::clear_y() {
  y_ = 0;
}
inline double Vector4d::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector4d.y)
  return y_;
}
inline void Vector4d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector4d.y)
}

// double z = 4;
inline void Vector4d::clear_z() {
  z_ = 0;
}
inline double Vector4d::z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Vector4d.z)
  return z_;
}
inline void Vector4d::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Vector4d.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_basic_2eproto__INCLUDED
