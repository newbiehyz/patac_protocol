// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: real3d.proto

#include "real3d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class Real3DResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Real3DResult>
      _instance;
} _Real3DResult_default_instance_;
class Real3DResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Real3DResults>
      _instance;
} _Real3DResults_default_instance_;
class Real3DDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Real3DData>
      _instance;
} _Real3DData_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_real3d_2eproto {
void InitDefaultsReal3DResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dynamic_5fobstacle_2eproto::InitDefaultsDynamicObstacle();
  protobuf_perception_5fbase_2eproto::InitDefaultsBox3D();
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  {
    void* ptr = &::autodrive::workflow::proto::_Real3DResult_default_instance_;
    new (ptr) ::autodrive::workflow::proto::Real3DResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::Real3DResult::InitAsDefaultInstance();
}

void InitDefaultsReal3DResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReal3DResultImpl);
}

void InitDefaultsReal3DResultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsHeader();
  protobuf_real3d_2eproto::InitDefaultsReal3DResult();
  {
    void* ptr = &::autodrive::workflow::proto::_Real3DResults_default_instance_;
    new (ptr) ::autodrive::workflow::proto::Real3DResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::Real3DResults::InitAsDefaultInstance();
}

void InitDefaultsReal3DResults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReal3DResultsImpl);
}

void InitDefaultsReal3DDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsHeader();
  protobuf_real3d_2eproto::InitDefaultsReal3DResults();
  {
    void* ptr = &::autodrive::workflow::proto::_Real3DData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::Real3DData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::Real3DData::InitAsDefaultInstance();
}

void InitDefaultsReal3DData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReal3DDataImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DResult, bev_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DResult, img_3dbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DResult, img_rect_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DResults, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DResults, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DResults, coordinate_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DResults, real3d_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DData, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Real3DData, real3d_results_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::Real3DResult)},
  { 8, -1, sizeof(::autodrive::workflow::proto::Real3DResults)},
  { 17, -1, sizeof(::autodrive::workflow::proto::Real3DData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_Real3DResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_Real3DResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_Real3DData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "real3d.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014real3d.proto\022\030autodrive.workflow.proto"
      "\032\026dynamic_obstacle.proto\032\025perception_bas"
      "e.proto\"\325\001\n\014Real3DResult\022\?\n\014bev_obstacle"
      "\030\001 \001(\0132).autodrive.workflow.proto.Dynami"
      "cObstacle\022B\n\timg_3dbox\030\002 \001(\0132/.autodrive"
      ".workflow.proto.perception_base.Box3D\022@\n"
      "\010img_rect\030\003 \001(\0132..autodrive.workflow.pro"
      "to.perception_base.Rect\"\335\001\n\rReal3DResult"
      "s\022@\n\006header\030\001 \001(\01320.autodrive.workflow.p"
      "roto.perception_base.Header\0222\n\004type\030\002 \001("
      "\0162$.autodrive.workflow.proto.Real3DType\022"
      "\027\n\017coordinate_type\030\003 \001(\t\022=\n\rreal3d_resul"
      "t\030\004 \003(\0132&.autodrive.workflow.proto.Real3"
      "DResult\"\217\001\n\nReal3DData\022@\n\006header\030\001 \001(\01320"
      ".autodrive.workflow.proto.perception_bas"
      "e.Header\022\?\n\016real3d_results\030\002 \003(\0132\'.autod"
      "rive.workflow.proto.Real3DResults*W\n\nRea"
      "l3DType\022\031\n\025kReal3DTypePedestrian\020\000\022\026\n\022kR"
      "eal3DTypeVehicle\020\001\022\026\n\022kReal3DTypeCyclist"
      "\020\002*\204\001\n\014Roi3DMapType\022\037\n\033kRoi3DMapTypePtUn"
      "distortMap\020\000\022\035\n\031kRoi3DMapTypePtDistortMa"
      "p\020\001\022\031\n\025kRoi3DMapTypeEqflUMap\020\002\022\031\n\025kRoi3D"
      "MapTypeEqflVMap\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 905);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "real3d.proto", &protobuf_RegisterTypes);
  ::protobuf_dynamic_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_real3d_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* Real3DType_descriptor() {
  protobuf_real3d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_real3d_2eproto::file_level_enum_descriptors[0];
}
bool Real3DType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Roi3DMapType_descriptor() {
  protobuf_real3d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_real3d_2eproto::file_level_enum_descriptors[1];
}
bool Roi3DMapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Real3DResult::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_Real3DResult_default_instance_._instance.get_mutable()->bev_obstacle_ = const_cast< ::autodrive::workflow::proto::DynamicObstacle*>(
      ::autodrive::workflow::proto::DynamicObstacle::internal_default_instance());
  ::autodrive::workflow::proto::_Real3DResult_default_instance_._instance.get_mutable()->img_3dbox_ = const_cast< ::autodrive::workflow::proto::perception_base::Box3D*>(
      ::autodrive::workflow::proto::perception_base::Box3D::internal_default_instance());
  ::autodrive::workflow::proto::_Real3DResult_default_instance_._instance.get_mutable()->img_rect_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
void Real3DResult::clear_bev_obstacle() {
  if (GetArenaNoVirtual() == NULL && bev_obstacle_ != NULL) {
    delete bev_obstacle_;
  }
  bev_obstacle_ = NULL;
}
void Real3DResult::clear_img_3dbox() {
  if (GetArenaNoVirtual() == NULL && img_3dbox_ != NULL) {
    delete img_3dbox_;
  }
  img_3dbox_ = NULL;
}
void Real3DResult::clear_img_rect() {
  if (GetArenaNoVirtual() == NULL && img_rect_ != NULL) {
    delete img_rect_;
  }
  img_rect_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Real3DResult::kBevObstacleFieldNumber;
const int Real3DResult::kImg3DboxFieldNumber;
const int Real3DResult::kImgRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Real3DResult::Real3DResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_real3d_2eproto::InitDefaultsReal3DResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.Real3DResult)
}
Real3DResult::Real3DResult(const Real3DResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bev_obstacle()) {
    bev_obstacle_ = new ::autodrive::workflow::proto::DynamicObstacle(*from.bev_obstacle_);
  } else {
    bev_obstacle_ = NULL;
  }
  if (from.has_img_3dbox()) {
    img_3dbox_ = new ::autodrive::workflow::proto::perception_base::Box3D(*from.img_3dbox_);
  } else {
    img_3dbox_ = NULL;
  }
  if (from.has_img_rect()) {
    img_rect_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.img_rect_);
  } else {
    img_rect_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.Real3DResult)
}

void Real3DResult::SharedCtor() {
  ::memset(&bev_obstacle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&img_rect_) -
      reinterpret_cast<char*>(&bev_obstacle_)) + sizeof(img_rect_));
  _cached_size_ = 0;
}

Real3DResult::~Real3DResult() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.Real3DResult)
  SharedDtor();
}

void Real3DResult::SharedDtor() {
  if (this != internal_default_instance()) delete bev_obstacle_;
  if (this != internal_default_instance()) delete img_3dbox_;
  if (this != internal_default_instance()) delete img_rect_;
}

void Real3DResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Real3DResult::descriptor() {
  ::protobuf_real3d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_real3d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Real3DResult& Real3DResult::default_instance() {
  ::protobuf_real3d_2eproto::InitDefaultsReal3DResult();
  return *internal_default_instance();
}

Real3DResult* Real3DResult::New(::google::protobuf::Arena* arena) const {
  Real3DResult* n = new Real3DResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Real3DResult::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.Real3DResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && bev_obstacle_ != NULL) {
    delete bev_obstacle_;
  }
  bev_obstacle_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_3dbox_ != NULL) {
    delete img_3dbox_;
  }
  img_3dbox_ = NULL;
  if (GetArenaNoVirtual() == NULL && img_rect_ != NULL) {
    delete img_rect_;
  }
  img_rect_ = NULL;
  _internal_metadata_.Clear();
}

bool Real3DResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.Real3DResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.DynamicObstacle bev_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bev_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Box3D img_3dbox = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_img_3dbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Rect img_rect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_img_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.Real3DResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.Real3DResult)
  return false;
#undef DO_
}

void Real3DResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.Real3DResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.DynamicObstacle bev_obstacle = 1;
  if (this->has_bev_obstacle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->bev_obstacle_, output);
  }

  // .autodrive.workflow.proto.perception_base.Box3D img_3dbox = 2;
  if (this->has_img_3dbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_3dbox_, output);
  }

  // .autodrive.workflow.proto.perception_base.Rect img_rect = 3;
  if (this->has_img_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->img_rect_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.Real3DResult)
}

::google::protobuf::uint8* Real3DResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.Real3DResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.DynamicObstacle bev_obstacle = 1;
  if (this->has_bev_obstacle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->bev_obstacle_, deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.Box3D img_3dbox = 2;
  if (this->has_img_3dbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->img_3dbox_, deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.Rect img_rect = 3;
  if (this->has_img_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->img_rect_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.Real3DResult)
  return target;
}

size_t Real3DResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.Real3DResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.DynamicObstacle bev_obstacle = 1;
  if (this->has_bev_obstacle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bev_obstacle_);
  }

  // .autodrive.workflow.proto.perception_base.Box3D img_3dbox = 2;
  if (this->has_img_3dbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->img_3dbox_);
  }

  // .autodrive.workflow.proto.perception_base.Rect img_rect = 3;
  if (this->has_img_rect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->img_rect_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Real3DResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.Real3DResult)
  GOOGLE_DCHECK_NE(&from, this);
  const Real3DResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Real3DResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.Real3DResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.Real3DResult)
    MergeFrom(*source);
  }
}

void Real3DResult::MergeFrom(const Real3DResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.Real3DResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bev_obstacle()) {
    mutable_bev_obstacle()->::autodrive::workflow::proto::DynamicObstacle::MergeFrom(from.bev_obstacle());
  }
  if (from.has_img_3dbox()) {
    mutable_img_3dbox()->::autodrive::workflow::proto::perception_base::Box3D::MergeFrom(from.img_3dbox());
  }
  if (from.has_img_rect()) {
    mutable_img_rect()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.img_rect());
  }
}

void Real3DResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.Real3DResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Real3DResult::CopyFrom(const Real3DResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.Real3DResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Real3DResult::IsInitialized() const {
  return true;
}

void Real3DResult::Swap(Real3DResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Real3DResult::InternalSwap(Real3DResult* other) {
  using std::swap;
  swap(bev_obstacle_, other->bev_obstacle_);
  swap(img_3dbox_, other->img_3dbox_);
  swap(img_rect_, other->img_rect_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Real3DResult::GetMetadata() const {
  protobuf_real3d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_real3d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Real3DResults::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_Real3DResults_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::perception_base::Header*>(
      ::autodrive::workflow::proto::perception_base::Header::internal_default_instance());
}
void Real3DResults::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Real3DResults::kHeaderFieldNumber;
const int Real3DResults::kTypeFieldNumber;
const int Real3DResults::kCoordinateTypeFieldNumber;
const int Real3DResults::kReal3DResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Real3DResults::Real3DResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_real3d_2eproto::InitDefaultsReal3DResults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.Real3DResults)
}
Real3DResults::Real3DResults(const Real3DResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      real3d_result_(from.real3d_result_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coordinate_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.coordinate_type().size() > 0) {
    coordinate_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_type_);
  }
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::perception_base::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.Real3DResults)
}

void Real3DResults::SharedCtor() {
  coordinate_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
  _cached_size_ = 0;
}

Real3DResults::~Real3DResults() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.Real3DResults)
  SharedDtor();
}

void Real3DResults::SharedDtor() {
  coordinate_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Real3DResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Real3DResults::descriptor() {
  ::protobuf_real3d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_real3d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Real3DResults& Real3DResults::default_instance() {
  ::protobuf_real3d_2eproto::InitDefaultsReal3DResults();
  return *internal_default_instance();
}

Real3DResults* Real3DResults::New(::google::protobuf::Arena* arena) const {
  Real3DResults* n = new Real3DResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Real3DResults::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.Real3DResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  real3d_result_.Clear();
  coordinate_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Real3DResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.Real3DResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Real3DType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::autodrive::workflow::proto::Real3DType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string coordinate_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coordinate_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->coordinate_type().data(), static_cast<int>(this->coordinate_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.Real3DResults.coordinate_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.Real3DResult real3d_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_real3d_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.Real3DResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.Real3DResults)
  return false;
#undef DO_
}

void Real3DResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.Real3DResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Real3DType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string coordinate_type = 3;
  if (this->coordinate_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate_type().data(), static_cast<int>(this->coordinate_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.Real3DResults.coordinate_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->coordinate_type(), output);
  }

  // repeated .autodrive.workflow.proto.Real3DResult real3d_result = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->real3d_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->real3d_result(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.Real3DResults)
}

::google::protobuf::uint8* Real3DResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.Real3DResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Real3DType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string coordinate_type = 3;
  if (this->coordinate_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate_type().data(), static_cast<int>(this->coordinate_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.Real3DResults.coordinate_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->coordinate_type(), target);
  }

  // repeated .autodrive.workflow.proto.Real3DResult real3d_result = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->real3d_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->real3d_result(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.Real3DResults)
  return target;
}

size_t Real3DResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.Real3DResults)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.Real3DResult real3d_result = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->real3d_result_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->real3d_result(static_cast<int>(i)));
    }
  }

  // string coordinate_type = 3;
  if (this->coordinate_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coordinate_type());
  }

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Real3DType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Real3DResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.Real3DResults)
  GOOGLE_DCHECK_NE(&from, this);
  const Real3DResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Real3DResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.Real3DResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.Real3DResults)
    MergeFrom(*source);
  }
}

void Real3DResults::MergeFrom(const Real3DResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.Real3DResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  real3d_result_.MergeFrom(from.real3d_result_);
  if (from.coordinate_type().size() > 0) {

    coordinate_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_type_);
  }
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::perception_base::Header::MergeFrom(from.header());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Real3DResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.Real3DResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Real3DResults::CopyFrom(const Real3DResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.Real3DResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Real3DResults::IsInitialized() const {
  return true;
}

void Real3DResults::Swap(Real3DResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Real3DResults::InternalSwap(Real3DResults* other) {
  using std::swap;
  real3d_result_.InternalSwap(&other->real3d_result_);
  coordinate_type_.Swap(&other->coordinate_type_);
  swap(header_, other->header_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Real3DResults::GetMetadata() const {
  protobuf_real3d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_real3d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Real3DData::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_Real3DData_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::perception_base::Header*>(
      ::autodrive::workflow::proto::perception_base::Header::internal_default_instance());
}
void Real3DData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Real3DData::kHeaderFieldNumber;
const int Real3DData::kReal3DResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Real3DData::Real3DData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_real3d_2eproto::InitDefaultsReal3DData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.Real3DData)
}
Real3DData::Real3DData(const Real3DData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      real3d_results_(from.real3d_results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::perception_base::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.Real3DData)
}

void Real3DData::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

Real3DData::~Real3DData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.Real3DData)
  SharedDtor();
}

void Real3DData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Real3DData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Real3DData::descriptor() {
  ::protobuf_real3d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_real3d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Real3DData& Real3DData::default_instance() {
  ::protobuf_real3d_2eproto::InitDefaultsReal3DData();
  return *internal_default_instance();
}

Real3DData* Real3DData::New(::google::protobuf::Arena* arena) const {
  Real3DData* n = new Real3DData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Real3DData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.Real3DData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  real3d_results_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool Real3DData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.Real3DData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.Real3DResults real3d_results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_real3d_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.Real3DData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.Real3DData)
  return false;
#undef DO_
}

void Real3DData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.Real3DData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .autodrive.workflow.proto.Real3DResults real3d_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->real3d_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->real3d_results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.Real3DData)
}

::google::protobuf::uint8* Real3DData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.Real3DData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .autodrive.workflow.proto.Real3DResults real3d_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->real3d_results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->real3d_results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.Real3DData)
  return target;
}

size_t Real3DData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.Real3DData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.Real3DResults real3d_results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->real3d_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->real3d_results(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Real3DData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.Real3DData)
  GOOGLE_DCHECK_NE(&from, this);
  const Real3DData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Real3DData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.Real3DData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.Real3DData)
    MergeFrom(*source);
  }
}

void Real3DData::MergeFrom(const Real3DData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.Real3DData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  real3d_results_.MergeFrom(from.real3d_results_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::perception_base::Header::MergeFrom(from.header());
  }
}

void Real3DData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.Real3DData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Real3DData::CopyFrom(const Real3DData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.Real3DData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Real3DData::IsInitialized() const {
  return true;
}

void Real3DData::Swap(Real3DData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Real3DData::InternalSwap(Real3DData* other) {
  using std::swap;
  real3d_results_.InternalSwap(&other->real3d_results_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Real3DData::GetMetadata() const {
  protobuf_real3d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_real3d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
