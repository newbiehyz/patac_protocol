// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef PROTOBUF_image_2eproto__INCLUDED
#define PROTOBUF_image_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_image_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsImageImpl();
void InitDefaultsImage();
inline void InitDefaults() {
  InitDefaultsImage();
}
}  // namespace protobuf_image_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum Position {
  UPLEFT = 0,
  UPRIGHT = 1,
  LOWER_LEFT = 2,
  LOWER_RIGHT = 3,
  AROUND_LEFT = 4,
  AROUND_RIGHT = 5,
  AROUND_FRONT = 6,
  AROUND_REAR = 7,
  FRONT = 8,
  REAR = 9,
  Position_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Position_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Position_IsValid(int value);
const Position Position_MIN = UPLEFT;
const Position Position_MAX = REAR;
const int Position_ARRAYSIZE = Position_MAX + 1;

const ::google::protobuf::EnumDescriptor* Position_descriptor();
inline const ::std::string& Position_Name(Position value) {
  return ::google::protobuf::internal::NameOfEnum(
    Position_descriptor(), value);
}
inline bool Position_Parse(
    const ::std::string& name, Position* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Position>(
    Position_descriptor(), name, value);
}
enum Type {
  H265 = 0,
  YUV420P = 1,
  BGR = 2,
  RGB = 3,
  JPEG = 4,
  H264 = 5,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_IsValid(int value);
const Type Type_MIN = H265;
const Type Type_MAX = H264;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Mode {
  ORIGINAL = 0,
  STITCH = 1,
  CYL = 2,
  Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Mode_IsValid(int value);
const Mode Mode_MIN = ORIGINAL;
const Mode Mode_MAX = CYL;
const int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mode_descriptor();
inline const ::std::string& Mode_Name(Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mode_descriptor(), value);
}
inline bool Mode_Parse(
    const ::std::string& name, Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
// ===================================================================

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const PROTOBUF_FINAL { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 element_size = 4;
  void clear_element_size();
  static const int kElementSizeFieldNumber = 4;
  ::google::protobuf::uint32 element_size() const;
  void set_element_size(::google::protobuf::uint32 value);

  // .autodrive.workflow.proto.Position pos = 5;
  void clear_pos();
  static const int kPosFieldNumber = 5;
  ::autodrive::workflow::proto::Position pos() const;
  void set_pos(::autodrive::workflow::proto::Position value);

  // .autodrive.workflow.proto.Mode mode = 6;
  void clear_mode();
  static const int kModeFieldNumber = 6;
  ::autodrive::workflow::proto::Mode mode() const;
  void set_mode(::autodrive::workflow::proto::Mode value);

  // .autodrive.workflow.proto.Type type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::autodrive::workflow::proto::Type type() const;
  void set_type(::autodrive::workflow::proto::Type value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 element_size_;
  int pos_;
  int mode_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_image_2eproto::TableStruct;
  friend void ::protobuf_image_2eproto::InitDefaultsImageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// bytes data = 1;
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Image.data)
  return data_.GetNoArena();
}
inline void Image::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Image.data)
}
#if LANG_CXX11
inline void Image::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.Image.data)
}
#endif
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.Image.data)
}
inline ::std::string* Image::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Image.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.Image.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.Image.data)
}

// uint32 width = 2;
inline void Image::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Image.width)
  return width_;
}
inline void Image::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Image.width)
}

// uint32 height = 3;
inline void Image::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Image.height)
  return height_;
}
inline void Image::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Image.height)
}

// uint32 element_size = 4;
inline void Image::clear_element_size() {
  element_size_ = 0u;
}
inline ::google::protobuf::uint32 Image::element_size() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Image.element_size)
  return element_size_;
}
inline void Image::set_element_size(::google::protobuf::uint32 value) {
  
  element_size_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Image.element_size)
}

// .autodrive.workflow.proto.Position pos = 5;
inline void Image::clear_pos() {
  pos_ = 0;
}
inline ::autodrive::workflow::proto::Position Image::pos() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Image.pos)
  return static_cast< ::autodrive::workflow::proto::Position >(pos_);
}
inline void Image::set_pos(::autodrive::workflow::proto::Position value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Image.pos)
}

// .autodrive.workflow.proto.Mode mode = 6;
inline void Image::clear_mode() {
  mode_ = 0;
}
inline ::autodrive::workflow::proto::Mode Image::mode() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Image.mode)
  return static_cast< ::autodrive::workflow::proto::Mode >(mode_);
}
inline void Image::set_mode(::autodrive::workflow::proto::Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Image.mode)
}

// .autodrive.workflow.proto.Type type = 7;
inline void Image::clear_type() {
  type_ = 0;
}
inline ::autodrive::workflow::proto::Type Image::type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Image.type)
  return static_cast< ::autodrive::workflow::proto::Type >(type_);
}
inline void Image::set_type(::autodrive::workflow::proto::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Image.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::Position> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::Position>() {
  return ::autodrive::workflow::proto::Position_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::Type>() {
  return ::autodrive::workflow::proto::Type_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::Mode>() {
  return ::autodrive::workflow::proto::Mode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_image_2eproto__INCLUDED
