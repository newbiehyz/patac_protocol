// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: real3d.proto

#ifndef PROTOBUF_real3d_2eproto__INCLUDED
#define PROTOBUF_real3d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dynamic_obstacle.pb.h"
#include "perception_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_real3d_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsReal3DResultImpl();
void InitDefaultsReal3DResult();
void InitDefaultsReal3DResultsImpl();
void InitDefaultsReal3DResults();
void InitDefaultsReal3DDataImpl();
void InitDefaultsReal3DData();
inline void InitDefaults() {
  InitDefaultsReal3DResult();
  InitDefaultsReal3DResults();
  InitDefaultsReal3DData();
}
}  // namespace protobuf_real3d_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class Real3DData;
class Real3DDataDefaultTypeInternal;
extern Real3DDataDefaultTypeInternal _Real3DData_default_instance_;
class Real3DResult;
class Real3DResultDefaultTypeInternal;
extern Real3DResultDefaultTypeInternal _Real3DResult_default_instance_;
class Real3DResults;
class Real3DResultsDefaultTypeInternal;
extern Real3DResultsDefaultTypeInternal _Real3DResults_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum Real3DType {
  kReal3DTypePedestrian = 0,
  kReal3DTypeVehicle = 1,
  kReal3DTypeCyclist = 2,
  Real3DType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Real3DType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Real3DType_IsValid(int value);
const Real3DType Real3DType_MIN = kReal3DTypePedestrian;
const Real3DType Real3DType_MAX = kReal3DTypeCyclist;
const int Real3DType_ARRAYSIZE = Real3DType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Real3DType_descriptor();
inline const ::std::string& Real3DType_Name(Real3DType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Real3DType_descriptor(), value);
}
inline bool Real3DType_Parse(
    const ::std::string& name, Real3DType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Real3DType>(
    Real3DType_descriptor(), name, value);
}
enum Roi3DMapType {
  kRoi3DMapTypePtUndistortMap = 0,
  kRoi3DMapTypePtDistortMap = 1,
  kRoi3DMapTypeEqflUMap = 2,
  kRoi3DMapTypeEqflVMap = 3,
  Roi3DMapType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Roi3DMapType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Roi3DMapType_IsValid(int value);
const Roi3DMapType Roi3DMapType_MIN = kRoi3DMapTypePtUndistortMap;
const Roi3DMapType Roi3DMapType_MAX = kRoi3DMapTypeEqflVMap;
const int Roi3DMapType_ARRAYSIZE = Roi3DMapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Roi3DMapType_descriptor();
inline const ::std::string& Roi3DMapType_Name(Roi3DMapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Roi3DMapType_descriptor(), value);
}
inline bool Roi3DMapType_Parse(
    const ::std::string& name, Roi3DMapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Roi3DMapType>(
    Roi3DMapType_descriptor(), name, value);
}
// ===================================================================

class Real3DResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Real3DResult) */ {
 public:
  Real3DResult();
  virtual ~Real3DResult();

  Real3DResult(const Real3DResult& from);

  inline Real3DResult& operator=(const Real3DResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Real3DResult(Real3DResult&& from) noexcept
    : Real3DResult() {
    *this = ::std::move(from);
  }

  inline Real3DResult& operator=(Real3DResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Real3DResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Real3DResult* internal_default_instance() {
    return reinterpret_cast<const Real3DResult*>(
               &_Real3DResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Real3DResult* other);
  friend void swap(Real3DResult& a, Real3DResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Real3DResult* New() const PROTOBUF_FINAL { return New(NULL); }

  Real3DResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Real3DResult& from);
  void MergeFrom(const Real3DResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Real3DResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.DynamicObstacle bev_obstacle = 1;
  bool has_bev_obstacle() const;
  void clear_bev_obstacle();
  static const int kBevObstacleFieldNumber = 1;
  const ::autodrive::workflow::proto::DynamicObstacle& bev_obstacle() const;
  ::autodrive::workflow::proto::DynamicObstacle* release_bev_obstacle();
  ::autodrive::workflow::proto::DynamicObstacle* mutable_bev_obstacle();
  void set_allocated_bev_obstacle(::autodrive::workflow::proto::DynamicObstacle* bev_obstacle);

  // .autodrive.workflow.proto.perception_base.Box3D img_3dbox = 2;
  bool has_img_3dbox() const;
  void clear_img_3dbox();
  static const int kImg3DboxFieldNumber = 2;
  const ::autodrive::workflow::proto::perception_base::Box3D& img_3dbox() const;
  ::autodrive::workflow::proto::perception_base::Box3D* release_img_3dbox();
  ::autodrive::workflow::proto::perception_base::Box3D* mutable_img_3dbox();
  void set_allocated_img_3dbox(::autodrive::workflow::proto::perception_base::Box3D* img_3dbox);

  // .autodrive.workflow.proto.perception_base.Rect img_rect = 3;
  bool has_img_rect() const;
  void clear_img_rect();
  static const int kImgRectFieldNumber = 3;
  const ::autodrive::workflow::proto::perception_base::Rect& img_rect() const;
  ::autodrive::workflow::proto::perception_base::Rect* release_img_rect();
  ::autodrive::workflow::proto::perception_base::Rect* mutable_img_rect();
  void set_allocated_img_rect(::autodrive::workflow::proto::perception_base::Rect* img_rect);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Real3DResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::DynamicObstacle* bev_obstacle_;
  ::autodrive::workflow::proto::perception_base::Box3D* img_3dbox_;
  ::autodrive::workflow::proto::perception_base::Rect* img_rect_;
  mutable int _cached_size_;
  friend struct ::protobuf_real3d_2eproto::TableStruct;
  friend void ::protobuf_real3d_2eproto::InitDefaultsReal3DResultImpl();
};
// -------------------------------------------------------------------

class Real3DResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Real3DResults) */ {
 public:
  Real3DResults();
  virtual ~Real3DResults();

  Real3DResults(const Real3DResults& from);

  inline Real3DResults& operator=(const Real3DResults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Real3DResults(Real3DResults&& from) noexcept
    : Real3DResults() {
    *this = ::std::move(from);
  }

  inline Real3DResults& operator=(Real3DResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Real3DResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Real3DResults* internal_default_instance() {
    return reinterpret_cast<const Real3DResults*>(
               &_Real3DResults_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Real3DResults* other);
  friend void swap(Real3DResults& a, Real3DResults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Real3DResults* New() const PROTOBUF_FINAL { return New(NULL); }

  Real3DResults* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Real3DResults& from);
  void MergeFrom(const Real3DResults& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Real3DResults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.Real3DResult real3d_result = 4;
  int real3d_result_size() const;
  void clear_real3d_result();
  static const int kReal3DResultFieldNumber = 4;
  const ::autodrive::workflow::proto::Real3DResult& real3d_result(int index) const;
  ::autodrive::workflow::proto::Real3DResult* mutable_real3d_result(int index);
  ::autodrive::workflow::proto::Real3DResult* add_real3d_result();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResult >*
      mutable_real3d_result();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResult >&
      real3d_result() const;

  // string coordinate_type = 3;
  void clear_coordinate_type();
  static const int kCoordinateTypeFieldNumber = 3;
  const ::std::string& coordinate_type() const;
  void set_coordinate_type(const ::std::string& value);
  #if LANG_CXX11
  void set_coordinate_type(::std::string&& value);
  #endif
  void set_coordinate_type(const char* value);
  void set_coordinate_type(const char* value, size_t size);
  ::std::string* mutable_coordinate_type();
  ::std::string* release_coordinate_type();
  void set_allocated_coordinate_type(::std::string* coordinate_type);

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::perception_base::Header& header() const;
  ::autodrive::workflow::proto::perception_base::Header* release_header();
  ::autodrive::workflow::proto::perception_base::Header* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::perception_base::Header* header);

  // .autodrive.workflow.proto.Real3DType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::autodrive::workflow::proto::Real3DType type() const;
  void set_type(::autodrive::workflow::proto::Real3DType value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Real3DResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResult > real3d_result_;
  ::google::protobuf::internal::ArenaStringPtr coordinate_type_;
  ::autodrive::workflow::proto::perception_base::Header* header_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_real3d_2eproto::TableStruct;
  friend void ::protobuf_real3d_2eproto::InitDefaultsReal3DResultsImpl();
};
// -------------------------------------------------------------------

class Real3DData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Real3DData) */ {
 public:
  Real3DData();
  virtual ~Real3DData();

  Real3DData(const Real3DData& from);

  inline Real3DData& operator=(const Real3DData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Real3DData(Real3DData&& from) noexcept
    : Real3DData() {
    *this = ::std::move(from);
  }

  inline Real3DData& operator=(Real3DData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Real3DData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Real3DData* internal_default_instance() {
    return reinterpret_cast<const Real3DData*>(
               &_Real3DData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Real3DData* other);
  friend void swap(Real3DData& a, Real3DData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Real3DData* New() const PROTOBUF_FINAL { return New(NULL); }

  Real3DData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Real3DData& from);
  void MergeFrom(const Real3DData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Real3DData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.Real3DResults real3d_results = 2;
  int real3d_results_size() const;
  void clear_real3d_results();
  static const int kReal3DResultsFieldNumber = 2;
  const ::autodrive::workflow::proto::Real3DResults& real3d_results(int index) const;
  ::autodrive::workflow::proto::Real3DResults* mutable_real3d_results(int index);
  ::autodrive::workflow::proto::Real3DResults* add_real3d_results();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResults >*
      mutable_real3d_results();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResults >&
      real3d_results() const;

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::perception_base::Header& header() const;
  ::autodrive::workflow::proto::perception_base::Header* release_header();
  ::autodrive::workflow::proto::perception_base::Header* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::perception_base::Header* header);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Real3DData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResults > real3d_results_;
  ::autodrive::workflow::proto::perception_base::Header* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_real3d_2eproto::TableStruct;
  friend void ::protobuf_real3d_2eproto::InitDefaultsReal3DDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Real3DResult

// .autodrive.workflow.proto.DynamicObstacle bev_obstacle = 1;
inline bool Real3DResult::has_bev_obstacle() const {
  return this != internal_default_instance() && bev_obstacle_ != NULL;
}
inline const ::autodrive::workflow::proto::DynamicObstacle& Real3DResult::bev_obstacle() const {
  const ::autodrive::workflow::proto::DynamicObstacle* p = bev_obstacle_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Real3DResult.bev_obstacle)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::DynamicObstacle*>(
      &::autodrive::workflow::proto::_DynamicObstacle_default_instance_);
}
inline ::autodrive::workflow::proto::DynamicObstacle* Real3DResult::release_bev_obstacle() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.Real3DResult.bev_obstacle)
  
  ::autodrive::workflow::proto::DynamicObstacle* temp = bev_obstacle_;
  bev_obstacle_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::DynamicObstacle* Real3DResult::mutable_bev_obstacle() {
  
  if (bev_obstacle_ == NULL) {
    bev_obstacle_ = new ::autodrive::workflow::proto::DynamicObstacle;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Real3DResult.bev_obstacle)
  return bev_obstacle_;
}
inline void Real3DResult::set_allocated_bev_obstacle(::autodrive::workflow::proto::DynamicObstacle* bev_obstacle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bev_obstacle_);
  }
  if (bev_obstacle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bev_obstacle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bev_obstacle, submessage_arena);
    }
    
  } else {
    
  }
  bev_obstacle_ = bev_obstacle;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.Real3DResult.bev_obstacle)
}

// .autodrive.workflow.proto.perception_base.Box3D img_3dbox = 2;
inline bool Real3DResult::has_img_3dbox() const {
  return this != internal_default_instance() && img_3dbox_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::Box3D& Real3DResult::img_3dbox() const {
  const ::autodrive::workflow::proto::perception_base::Box3D* p = img_3dbox_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Real3DResult.img_3dbox)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::Box3D*>(
      &::autodrive::workflow::proto::perception_base::_Box3D_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::Box3D* Real3DResult::release_img_3dbox() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.Real3DResult.img_3dbox)
  
  ::autodrive::workflow::proto::perception_base::Box3D* temp = img_3dbox_;
  img_3dbox_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::Box3D* Real3DResult::mutable_img_3dbox() {
  
  if (img_3dbox_ == NULL) {
    img_3dbox_ = new ::autodrive::workflow::proto::perception_base::Box3D;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Real3DResult.img_3dbox)
  return img_3dbox_;
}
inline void Real3DResult::set_allocated_img_3dbox(::autodrive::workflow::proto::perception_base::Box3D* img_3dbox) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(img_3dbox_);
  }
  if (img_3dbox) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      img_3dbox = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, img_3dbox, submessage_arena);
    }
    
  } else {
    
  }
  img_3dbox_ = img_3dbox;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.Real3DResult.img_3dbox)
}

// .autodrive.workflow.proto.perception_base.Rect img_rect = 3;
inline bool Real3DResult::has_img_rect() const {
  return this != internal_default_instance() && img_rect_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::Rect& Real3DResult::img_rect() const {
  const ::autodrive::workflow::proto::perception_base::Rect* p = img_rect_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Real3DResult.img_rect)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::Rect*>(
      &::autodrive::workflow::proto::perception_base::_Rect_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::Rect* Real3DResult::release_img_rect() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.Real3DResult.img_rect)
  
  ::autodrive::workflow::proto::perception_base::Rect* temp = img_rect_;
  img_rect_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::Rect* Real3DResult::mutable_img_rect() {
  
  if (img_rect_ == NULL) {
    img_rect_ = new ::autodrive::workflow::proto::perception_base::Rect;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Real3DResult.img_rect)
  return img_rect_;
}
inline void Real3DResult::set_allocated_img_rect(::autodrive::workflow::proto::perception_base::Rect* img_rect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(img_rect_);
  }
  if (img_rect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      img_rect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, img_rect, submessage_arena);
    }
    
  } else {
    
  }
  img_rect_ = img_rect;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.Real3DResult.img_rect)
}

// -------------------------------------------------------------------

// Real3DResults

// .autodrive.workflow.proto.perception_base.Header header = 1;
inline bool Real3DResults::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::Header& Real3DResults::header() const {
  const ::autodrive::workflow::proto::perception_base::Header* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Real3DResults.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::Header*>(
      &::autodrive::workflow::proto::perception_base::_Header_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::Header* Real3DResults::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.Real3DResults.header)
  
  ::autodrive::workflow::proto::perception_base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::Header* Real3DResults::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::perception_base::Header;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Real3DResults.header)
  return header_;
}
inline void Real3DResults::set_allocated_header(::autodrive::workflow::proto::perception_base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.Real3DResults.header)
}

// .autodrive.workflow.proto.Real3DType type = 2;
inline void Real3DResults::clear_type() {
  type_ = 0;
}
inline ::autodrive::workflow::proto::Real3DType Real3DResults::type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Real3DResults.type)
  return static_cast< ::autodrive::workflow::proto::Real3DType >(type_);
}
inline void Real3DResults::set_type(::autodrive::workflow::proto::Real3DType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Real3DResults.type)
}

// string coordinate_type = 3;
inline void Real3DResults::clear_coordinate_type() {
  coordinate_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Real3DResults::coordinate_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Real3DResults.coordinate_type)
  return coordinate_type_.GetNoArena();
}
inline void Real3DResults::set_coordinate_type(const ::std::string& value) {
  
  coordinate_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Real3DResults.coordinate_type)
}
#if LANG_CXX11
inline void Real3DResults::set_coordinate_type(::std::string&& value) {
  
  coordinate_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.Real3DResults.coordinate_type)
}
#endif
inline void Real3DResults::set_coordinate_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coordinate_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.Real3DResults.coordinate_type)
}
inline void Real3DResults::set_coordinate_type(const char* value, size_t size) {
  
  coordinate_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.Real3DResults.coordinate_type)
}
inline ::std::string* Real3DResults::mutable_coordinate_type() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Real3DResults.coordinate_type)
  return coordinate_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Real3DResults::release_coordinate_type() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.Real3DResults.coordinate_type)
  
  return coordinate_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Real3DResults::set_allocated_coordinate_type(::std::string* coordinate_type) {
  if (coordinate_type != NULL) {
    
  } else {
    
  }
  coordinate_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coordinate_type);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.Real3DResults.coordinate_type)
}

// repeated .autodrive.workflow.proto.Real3DResult real3d_result = 4;
inline int Real3DResults::real3d_result_size() const {
  return real3d_result_.size();
}
inline void Real3DResults::clear_real3d_result() {
  real3d_result_.Clear();
}
inline const ::autodrive::workflow::proto::Real3DResult& Real3DResults::real3d_result(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Real3DResults.real3d_result)
  return real3d_result_.Get(index);
}
inline ::autodrive::workflow::proto::Real3DResult* Real3DResults::mutable_real3d_result(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Real3DResults.real3d_result)
  return real3d_result_.Mutable(index);
}
inline ::autodrive::workflow::proto::Real3DResult* Real3DResults::add_real3d_result() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.Real3DResults.real3d_result)
  return real3d_result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResult >*
Real3DResults::mutable_real3d_result() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.Real3DResults.real3d_result)
  return &real3d_result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResult >&
Real3DResults::real3d_result() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.Real3DResults.real3d_result)
  return real3d_result_;
}

// -------------------------------------------------------------------

// Real3DData

// .autodrive.workflow.proto.perception_base.Header header = 1;
inline bool Real3DData::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::Header& Real3DData::header() const {
  const ::autodrive::workflow::proto::perception_base::Header* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Real3DData.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::Header*>(
      &::autodrive::workflow::proto::perception_base::_Header_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::Header* Real3DData::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.Real3DData.header)
  
  ::autodrive::workflow::proto::perception_base::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::Header* Real3DData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::perception_base::Header;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Real3DData.header)
  return header_;
}
inline void Real3DData::set_allocated_header(::autodrive::workflow::proto::perception_base::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.Real3DData.header)
}

// repeated .autodrive.workflow.proto.Real3DResults real3d_results = 2;
inline int Real3DData::real3d_results_size() const {
  return real3d_results_.size();
}
inline void Real3DData::clear_real3d_results() {
  real3d_results_.Clear();
}
inline const ::autodrive::workflow::proto::Real3DResults& Real3DData::real3d_results(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Real3DData.real3d_results)
  return real3d_results_.Get(index);
}
inline ::autodrive::workflow::proto::Real3DResults* Real3DData::mutable_real3d_results(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Real3DData.real3d_results)
  return real3d_results_.Mutable(index);
}
inline ::autodrive::workflow::proto::Real3DResults* Real3DData::add_real3d_results() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.Real3DData.real3d_results)
  return real3d_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResults >*
Real3DData::mutable_real3d_results() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.Real3DData.real3d_results)
  return &real3d_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DResults >&
Real3DData::real3d_results() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.Real3DData.real3d_results)
  return real3d_results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::Real3DType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::Real3DType>() {
  return ::autodrive::workflow::proto::Real3DType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::Roi3DMapType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::Roi3DMapType>() {
  return ::autodrive::workflow::proto::Roi3DMapType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_real3d_2eproto__INCLUDED
