// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_type_base.proto

#ifndef PROTOBUF_system_5ftype_5fbase_2eproto__INCLUDED
#define PROTOBUF_system_5ftype_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "parking_slot.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_system_5ftype_5fbase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsApaStateInfoImpl();
void InitDefaultsApaStateInfo();
void InitDefaultsUserSelectedParkingSlotImpl();
void InitDefaultsUserSelectedParkingSlot();
inline void InitDefaults() {
  InitDefaultsApaStateInfo();
  InitDefaultsUserSelectedParkingSlot();
}
}  // namespace protobuf_system_5ftype_5fbase_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class ApaStateInfo;
class ApaStateInfoDefaultTypeInternal;
extern ApaStateInfoDefaultTypeInternal _ApaStateInfo_default_instance_;
class UserSelectedParkingSlot;
class UserSelectedParkingSlotDefaultTypeInternal;
extern UserSelectedParkingSlotDefaultTypeInternal _UserSelectedParkingSlot_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum ApaFunctionStage {
  kApaFunctionStageNone = 0,
  kApaFunctionStageSearching = 1,
  kApaFunctionStagePreParking = 2,
  kApaFunctionStageParking = 3,
  kApaFunctionStageComplete = 4,
  kApaFunctionStageAbort = 5,
  kApaFunctionStageSuspend = 6,
  kApaFunctionStageFailed = 7,
  kApaFunctionStageOther = 8,
  ApaFunctionStage_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ApaFunctionStage_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ApaFunctionStage_IsValid(int value);
const ApaFunctionStage ApaFunctionStage_MIN = kApaFunctionStageNone;
const ApaFunctionStage ApaFunctionStage_MAX = kApaFunctionStageOther;
const int ApaFunctionStage_ARRAYSIZE = ApaFunctionStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApaFunctionStage_descriptor();
inline const ::std::string& ApaFunctionStage_Name(ApaFunctionStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApaFunctionStage_descriptor(), value);
}
inline bool ApaFunctionStage_Parse(
    const ::std::string& name, ApaFunctionStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApaFunctionStage>(
    ApaFunctionStage_descriptor(), name, value);
}
enum ApaStateDetailType {
  kApaStateDetailTypeNone = 0,
  kApaStateDetailTypeOff = 1,
  kApaStateDetailTypeStandby = 2,
  kApaStateDetailTypeFailed = 3,
  kApaStateDetailTypeAbort = 4,
  kApaStateDetailTypeSearchingParkingIn = 5,
  kApaStateDetailTypeSearchingParkingOut = 6,
  kApaStateDetailTypePreParkingIn = 7,
  kApaStateDetailTypePreParkingOut = 8,
  kApaStateDetailTypeParkingIn = 9,
  kApaStateDetailTypeParkingOut = 10,
  kApaStateDetailTypeSuspendNotContinue = 11,
  kApaStateDetailTypeSuspendContinue = 12,
  kApaStateDetailTypeComplete = 13,
  kApaStateDetailTypePreParkingSelect = 14,
  ApaStateDetailType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ApaStateDetailType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ApaStateDetailType_IsValid(int value);
const ApaStateDetailType ApaStateDetailType_MIN = kApaStateDetailTypeNone;
const ApaStateDetailType ApaStateDetailType_MAX = kApaStateDetailTypePreParkingSelect;
const int ApaStateDetailType_ARRAYSIZE = ApaStateDetailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApaStateDetailType_descriptor();
inline const ::std::string& ApaStateDetailType_Name(ApaStateDetailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApaStateDetailType_descriptor(), value);
}
inline bool ApaStateDetailType_Parse(
    const ::std::string& name, ApaStateDetailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApaStateDetailType>(
    ApaStateDetailType_descriptor(), name, value);
}
enum VpaStateDetailType {
  kStateNone = 0,
  kRequestMapWeakActive = 1,
  kInitMap = 2,
  kBuildMapClickable = 3,
  kMapBuildRunning = 4,
  kMapBuildComplete = 5,
  kMapBuildExit = 6,
  kMapBuildOptimizing = 7,
  kMapBuildApa = 8,
  kMapBuildDrivePark = 9,
  kRequestVpaWeakActive = 10,
  kInitVpa = 11,
  kStartVpaClickable = 12,
  kVpaRunning = 13,
  kVpaRandomApa = 14,
  kVpaFixApa = 15,
  kVpaComplete = 16,
  kVpaExit = 17,
  kVpaPause = 18,
  kVpaContinue = 19,
  kVpaEpsInterrupt = 20,
  kVpaEpsContinue = 21,
  kDiag = 22,
  kPureApa = 23,
  kPureRpa = 24,
  kMapPause = 25,
  kMapContinue = 26,
  VpaStateDetailType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VpaStateDetailType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VpaStateDetailType_IsValid(int value);
const VpaStateDetailType VpaStateDetailType_MIN = kStateNone;
const VpaStateDetailType VpaStateDetailType_MAX = kMapContinue;
const int VpaStateDetailType_ARRAYSIZE = VpaStateDetailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VpaStateDetailType_descriptor();
inline const ::std::string& VpaStateDetailType_Name(VpaStateDetailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VpaStateDetailType_descriptor(), value);
}
inline bool VpaStateDetailType_Parse(
    const ::std::string& name, VpaStateDetailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VpaStateDetailType>(
    VpaStateDetailType_descriptor(), name, value);
}
enum MirrFoldStsTyp {
  MirrFoldStsTyp_MirrFoldPosnUndefd = 0,
  MirrFoldStsTyp_MirrNotFoldPosn = 1,
  MirrFoldStsTyp_MirrFoldPosn = 2,
  MirrFoldStsTyp_MirrMovgToNotFold = 3,
  MirrFoldStsTyp_MirrMovgToFold = 4,
  MirrFoldStsTyp_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MirrFoldStsTyp_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MirrFoldStsTyp_IsValid(int value);
const MirrFoldStsTyp MirrFoldStsTyp_MIN = MirrFoldStsTyp_MirrFoldPosnUndefd;
const MirrFoldStsTyp MirrFoldStsTyp_MAX = MirrFoldStsTyp_MirrMovgToFold;
const int MirrFoldStsTyp_ARRAYSIZE = MirrFoldStsTyp_MAX + 1;

const ::google::protobuf::EnumDescriptor* MirrFoldStsTyp_descriptor();
inline const ::std::string& MirrFoldStsTyp_Name(MirrFoldStsTyp value) {
  return ::google::protobuf::internal::NameOfEnum(
    MirrFoldStsTyp_descriptor(), value);
}
inline bool MirrFoldStsTyp_Parse(
    const ::std::string& name, MirrFoldStsTyp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MirrFoldStsTyp>(
    MirrFoldStsTyp_descriptor(), name, value);
}
enum LockIdType {
  KNone = 0,
  KParkingIn = 1,
  KParkingOutVision = 2,
  KParkingOutUss = 3,
  KParkingRSPA = 4,
  LockIdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LockIdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LockIdType_IsValid(int value);
const LockIdType LockIdType_MIN = KNone;
const LockIdType LockIdType_MAX = KParkingRSPA;
const int LockIdType_ARRAYSIZE = LockIdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LockIdType_descriptor();
inline const ::std::string& LockIdType_Name(LockIdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LockIdType_descriptor(), value);
}
inline bool LockIdType_Parse(
    const ::std::string& name, LockIdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LockIdType>(
    LockIdType_descriptor(), name, value);
}
enum WorkModeType {
  KWorkModeTypeNone = 0,
  KWorkModeTypeVPA = 1,
  KWorkModeTypeAPA = 2,
  KWorkModeTypeRPA = 3,
  KWorkModeTypeRPAParkOut = 4,
  WorkModeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WorkModeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WorkModeType_IsValid(int value);
const WorkModeType WorkModeType_MIN = KWorkModeTypeNone;
const WorkModeType WorkModeType_MAX = KWorkModeTypeRPAParkOut;
const int WorkModeType_ARRAYSIZE = WorkModeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkModeType_descriptor();
inline const ::std::string& WorkModeType_Name(WorkModeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkModeType_descriptor(), value);
}
inline bool WorkModeType_Parse(
    const ::std::string& name, WorkModeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkModeType>(
    WorkModeType_descriptor(), name, value);
}
// ===================================================================

class ApaStateInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.ApaStateInfo) */ {
 public:
  ApaStateInfo();
  virtual ~ApaStateInfo();

  ApaStateInfo(const ApaStateInfo& from);

  inline ApaStateInfo& operator=(const ApaStateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApaStateInfo(ApaStateInfo&& from) noexcept
    : ApaStateInfo() {
    *this = ::std::move(from);
  }

  inline ApaStateInfo& operator=(ApaStateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApaStateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApaStateInfo* internal_default_instance() {
    return reinterpret_cast<const ApaStateInfo*>(
               &_ApaStateInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ApaStateInfo* other);
  friend void swap(ApaStateInfo& a, ApaStateInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApaStateInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ApaStateInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ApaStateInfo& from);
  void MergeFrom(const ApaStateInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ApaStateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.ApaStateDetailType state_type = 1;
  void clear_state_type();
  static const int kStateTypeFieldNumber = 1;
  ::autodrive::workflow::proto::ApaStateDetailType state_type() const;
  void set_state_type(::autodrive::workflow::proto::ApaStateDetailType value);

  // .autodrive.workflow.proto.ApaFunctionStage func_stage = 2;
  void clear_func_stage();
  static const int kFuncStageFieldNumber = 2;
  ::autodrive::workflow::proto::ApaFunctionStage func_stage() const;
  void set_func_stage(::autodrive::workflow::proto::ApaFunctionStage value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.ApaStateInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int state_type_;
  int func_stage_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_5ftype_5fbase_2eproto::TableStruct;
  friend void ::protobuf_system_5ftype_5fbase_2eproto::InitDefaultsApaStateInfoImpl();
};
// -------------------------------------------------------------------

class UserSelectedParkingSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.UserSelectedParkingSlot) */ {
 public:
  UserSelectedParkingSlot();
  virtual ~UserSelectedParkingSlot();

  UserSelectedParkingSlot(const UserSelectedParkingSlot& from);

  inline UserSelectedParkingSlot& operator=(const UserSelectedParkingSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSelectedParkingSlot(UserSelectedParkingSlot&& from) noexcept
    : UserSelectedParkingSlot() {
    *this = ::std::move(from);
  }

  inline UserSelectedParkingSlot& operator=(UserSelectedParkingSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSelectedParkingSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSelectedParkingSlot* internal_default_instance() {
    return reinterpret_cast<const UserSelectedParkingSlot*>(
               &_UserSelectedParkingSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UserSelectedParkingSlot* other);
  friend void swap(UserSelectedParkingSlot& a, UserSelectedParkingSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSelectedParkingSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  UserSelectedParkingSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserSelectedParkingSlot& from);
  void MergeFrom(const UserSelectedParkingSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserSelectedParkingSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.parking_slot.ParkingSlotInfo usersel_parking_slot = 2;
  bool has_usersel_parking_slot() const;
  void clear_usersel_parking_slot();
  static const int kUserselParkingSlotFieldNumber = 2;
  const ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo& usersel_parking_slot() const;
  ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo* release_usersel_parking_slot();
  ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo* mutable_usersel_parking_slot();
  void set_allocated_usersel_parking_slot(::autodrive::workflow::proto::parking_slot::ParkingSlotInfo* usersel_parking_slot);

  // bool user_sel_parking_slot_received = 1;
  void clear_user_sel_parking_slot_received();
  static const int kUserSelParkingSlotReceivedFieldNumber = 1;
  bool user_sel_parking_slot_received() const;
  void set_user_sel_parking_slot_received(bool value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.UserSelectedParkingSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo* usersel_parking_slot_;
  bool user_sel_parking_slot_received_;
  mutable int _cached_size_;
  friend struct ::protobuf_system_5ftype_5fbase_2eproto::TableStruct;
  friend void ::protobuf_system_5ftype_5fbase_2eproto::InitDefaultsUserSelectedParkingSlotImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApaStateInfo

// .autodrive.workflow.proto.ApaStateDetailType state_type = 1;
inline void ApaStateInfo::clear_state_type() {
  state_type_ = 0;
}
inline ::autodrive::workflow::proto::ApaStateDetailType ApaStateInfo::state_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ApaStateInfo.state_type)
  return static_cast< ::autodrive::workflow::proto::ApaStateDetailType >(state_type_);
}
inline void ApaStateInfo::set_state_type(::autodrive::workflow::proto::ApaStateDetailType value) {
  
  state_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ApaStateInfo.state_type)
}

// .autodrive.workflow.proto.ApaFunctionStage func_stage = 2;
inline void ApaStateInfo::clear_func_stage() {
  func_stage_ = 0;
}
inline ::autodrive::workflow::proto::ApaFunctionStage ApaStateInfo::func_stage() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ApaStateInfo.func_stage)
  return static_cast< ::autodrive::workflow::proto::ApaFunctionStage >(func_stage_);
}
inline void ApaStateInfo::set_func_stage(::autodrive::workflow::proto::ApaFunctionStage value) {
  
  func_stage_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ApaStateInfo.func_stage)
}

// -------------------------------------------------------------------

// UserSelectedParkingSlot

// bool user_sel_parking_slot_received = 1;
inline void UserSelectedParkingSlot::clear_user_sel_parking_slot_received() {
  user_sel_parking_slot_received_ = false;
}
inline bool UserSelectedParkingSlot::user_sel_parking_slot_received() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.UserSelectedParkingSlot.user_sel_parking_slot_received)
  return user_sel_parking_slot_received_;
}
inline void UserSelectedParkingSlot::set_user_sel_parking_slot_received(bool value) {
  
  user_sel_parking_slot_received_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.UserSelectedParkingSlot.user_sel_parking_slot_received)
}

// .autodrive.workflow.proto.parking_slot.ParkingSlotInfo usersel_parking_slot = 2;
inline bool UserSelectedParkingSlot::has_usersel_parking_slot() const {
  return this != internal_default_instance() && usersel_parking_slot_ != NULL;
}
inline const ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo& UserSelectedParkingSlot::usersel_parking_slot() const {
  const ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo* p = usersel_parking_slot_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.UserSelectedParkingSlot.usersel_parking_slot)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo*>(
      &::autodrive::workflow::proto::parking_slot::_ParkingSlotInfo_default_instance_);
}
inline ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo* UserSelectedParkingSlot::release_usersel_parking_slot() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.UserSelectedParkingSlot.usersel_parking_slot)
  
  ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo* temp = usersel_parking_slot_;
  usersel_parking_slot_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo* UserSelectedParkingSlot::mutable_usersel_parking_slot() {
  
  if (usersel_parking_slot_ == NULL) {
    usersel_parking_slot_ = new ::autodrive::workflow::proto::parking_slot::ParkingSlotInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.UserSelectedParkingSlot.usersel_parking_slot)
  return usersel_parking_slot_;
}
inline void UserSelectedParkingSlot::set_allocated_usersel_parking_slot(::autodrive::workflow::proto::parking_slot::ParkingSlotInfo* usersel_parking_slot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(usersel_parking_slot_);
  }
  if (usersel_parking_slot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      usersel_parking_slot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, usersel_parking_slot, submessage_arena);
    }
    
  } else {
    
  }
  usersel_parking_slot_ = usersel_parking_slot;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.UserSelectedParkingSlot.usersel_parking_slot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::ApaFunctionStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::ApaFunctionStage>() {
  return ::autodrive::workflow::proto::ApaFunctionStage_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::ApaStateDetailType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::ApaStateDetailType>() {
  return ::autodrive::workflow::proto::ApaStateDetailType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::VpaStateDetailType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::VpaStateDetailType>() {
  return ::autodrive::workflow::proto::VpaStateDetailType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::MirrFoldStsTyp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::MirrFoldStsTyp>() {
  return ::autodrive::workflow::proto::MirrFoldStsTyp_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::LockIdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::LockIdType>() {
  return ::autodrive::workflow::proto::LockIdType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::WorkModeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::WorkModeType>() {
  return ::autodrive::workflow::proto::WorkModeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_5ftype_5fbase_2eproto__INCLUDED
