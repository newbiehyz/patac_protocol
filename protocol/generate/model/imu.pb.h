// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#ifndef PROTOBUF_imu_2eproto__INCLUDED
#define PROTOBUF_imu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_imu_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsImuImpl();
void InitDefaultsImu();
void InitDefaultsImuMsgImpl();
void InitDefaultsImuMsg();
inline void InitDefaults() {
  InitDefaultsImu();
  InitDefaultsImuMsg();
}
}  // namespace protobuf_imu_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class Imu;
class ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class ImuMsg;
class ImuMsgDefaultTypeInternal;
extern ImuMsgDefaultTypeInternal _ImuMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class Imu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Imu) */ {
 public:
  Imu();
  virtual ~Imu();

  Imu(const Imu& from);

  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Imu(Imu&& from) noexcept
    : Imu() {
    *this = ::std::move(from);
  }

  inline Imu& operator=(Imu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Imu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
               &_Imu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Imu* other);
  friend void swap(Imu& a, Imu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Imu* New() const PROTOBUF_FINAL { return New(NULL); }

  Imu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Imu& from);
  void MergeFrom(const Imu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Imu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 utc_time = 1;
  void clear_utc_time();
  static const int kUtcTimeFieldNumber = 1;
  ::google::protobuf::uint64 utc_time() const;
  void set_utc_time(::google::protobuf::uint64 value);

  // float heading = 2;
  void clear_heading();
  static const int kHeadingFieldNumber = 2;
  float heading() const;
  void set_heading(float value);

  // float pitch = 3;
  void clear_pitch();
  static const int kPitchFieldNumber = 3;
  float pitch() const;
  void set_pitch(float value);

  // float roll = 4;
  void clear_roll();
  static const int kRollFieldNumber = 4;
  float roll() const;
  void set_roll(float value);

  // float raw_acceleration_x = 5;
  void clear_raw_acceleration_x();
  static const int kRawAccelerationXFieldNumber = 5;
  float raw_acceleration_x() const;
  void set_raw_acceleration_x(float value);

  // float raw_acceleration_y = 6;
  void clear_raw_acceleration_y();
  static const int kRawAccelerationYFieldNumber = 6;
  float raw_acceleration_y() const;
  void set_raw_acceleration_y(float value);

  // float raw_acceleration_z = 7;
  void clear_raw_acceleration_z();
  static const int kRawAccelerationZFieldNumber = 7;
  float raw_acceleration_z() const;
  void set_raw_acceleration_z(float value);

  // float raw_angular_rate_x = 8;
  void clear_raw_angular_rate_x();
  static const int kRawAngularRateXFieldNumber = 8;
  float raw_angular_rate_x() const;
  void set_raw_angular_rate_x(float value);

  // float raw_angular_rate_y = 9;
  void clear_raw_angular_rate_y();
  static const int kRawAngularRateYFieldNumber = 9;
  float raw_angular_rate_y() const;
  void set_raw_angular_rate_y(float value);

  // float raw_angular_rate_z = 10;
  void clear_raw_angular_rate_z();
  static const int kRawAngularRateZFieldNumber = 10;
  float raw_angular_rate_z() const;
  void set_raw_angular_rate_z(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Imu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 utc_time_;
  float heading_;
  float pitch_;
  float roll_;
  float raw_acceleration_x_;
  float raw_acceleration_y_;
  float raw_acceleration_z_;
  float raw_angular_rate_x_;
  float raw_angular_rate_y_;
  float raw_angular_rate_z_;
  mutable int _cached_size_;
  friend struct ::protobuf_imu_2eproto::TableStruct;
  friend void ::protobuf_imu_2eproto::InitDefaultsImuImpl();
};
// -------------------------------------------------------------------

class ImuMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.ImuMsg) */ {
 public:
  ImuMsg();
  virtual ~ImuMsg();

  ImuMsg(const ImuMsg& from);

  inline ImuMsg& operator=(const ImuMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImuMsg(ImuMsg&& from) noexcept
    : ImuMsg() {
    *this = ::std::move(from);
  }

  inline ImuMsg& operator=(ImuMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImuMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImuMsg* internal_default_instance() {
    return reinterpret_cast<const ImuMsg*>(
               &_ImuMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ImuMsg* other);
  friend void swap(ImuMsg& a, ImuMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImuMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  ImuMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImuMsg& from);
  void MergeFrom(const ImuMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImuMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.Imu imu = 3;
  bool has_imu() const;
  void clear_imu();
  static const int kImuFieldNumber = 3;
  const ::autodrive::workflow::proto::Imu& imu() const;
  ::autodrive::workflow::proto::Imu* release_imu();
  ::autodrive::workflow::proto::Imu* mutable_imu();
  void set_allocated_imu(::autodrive::workflow::proto::Imu* imu);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.ImuMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::Imu* imu_;
  mutable int _cached_size_;
  friend struct ::protobuf_imu_2eproto::TableStruct;
  friend void ::protobuf_imu_2eproto::InitDefaultsImuMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Imu

// uint64 utc_time = 1;
inline void Imu::clear_utc_time() {
  utc_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Imu::utc_time() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.utc_time)
  return utc_time_;
}
inline void Imu::set_utc_time(::google::protobuf::uint64 value) {
  
  utc_time_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.utc_time)
}

// float heading = 2;
inline void Imu::clear_heading() {
  heading_ = 0;
}
inline float Imu::heading() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.heading)
  return heading_;
}
inline void Imu::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.heading)
}

// float pitch = 3;
inline void Imu::clear_pitch() {
  pitch_ = 0;
}
inline float Imu::pitch() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.pitch)
  return pitch_;
}
inline void Imu::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.pitch)
}

// float roll = 4;
inline void Imu::clear_roll() {
  roll_ = 0;
}
inline float Imu::roll() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.roll)
  return roll_;
}
inline void Imu::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.roll)
}

// float raw_acceleration_x = 5;
inline void Imu::clear_raw_acceleration_x() {
  raw_acceleration_x_ = 0;
}
inline float Imu::raw_acceleration_x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.raw_acceleration_x)
  return raw_acceleration_x_;
}
inline void Imu::set_raw_acceleration_x(float value) {
  
  raw_acceleration_x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.raw_acceleration_x)
}

// float raw_acceleration_y = 6;
inline void Imu::clear_raw_acceleration_y() {
  raw_acceleration_y_ = 0;
}
inline float Imu::raw_acceleration_y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.raw_acceleration_y)
  return raw_acceleration_y_;
}
inline void Imu::set_raw_acceleration_y(float value) {
  
  raw_acceleration_y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.raw_acceleration_y)
}

// float raw_acceleration_z = 7;
inline void Imu::clear_raw_acceleration_z() {
  raw_acceleration_z_ = 0;
}
inline float Imu::raw_acceleration_z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.raw_acceleration_z)
  return raw_acceleration_z_;
}
inline void Imu::set_raw_acceleration_z(float value) {
  
  raw_acceleration_z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.raw_acceleration_z)
}

// float raw_angular_rate_x = 8;
inline void Imu::clear_raw_angular_rate_x() {
  raw_angular_rate_x_ = 0;
}
inline float Imu::raw_angular_rate_x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.raw_angular_rate_x)
  return raw_angular_rate_x_;
}
inline void Imu::set_raw_angular_rate_x(float value) {
  
  raw_angular_rate_x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.raw_angular_rate_x)
}

// float raw_angular_rate_y = 9;
inline void Imu::clear_raw_angular_rate_y() {
  raw_angular_rate_y_ = 0;
}
inline float Imu::raw_angular_rate_y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.raw_angular_rate_y)
  return raw_angular_rate_y_;
}
inline void Imu::set_raw_angular_rate_y(float value) {
  
  raw_angular_rate_y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.raw_angular_rate_y)
}

// float raw_angular_rate_z = 10;
inline void Imu::clear_raw_angular_rate_z() {
  raw_angular_rate_z_ = 0;
}
inline float Imu::raw_angular_rate_z() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Imu.raw_angular_rate_z)
  return raw_angular_rate_z_;
}
inline void Imu::set_raw_angular_rate_z(float value) {
  
  raw_angular_rate_z_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Imu.raw_angular_rate_z)
}

// -------------------------------------------------------------------

// ImuMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool ImuMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& ImuMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImuMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* ImuMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ImuMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* ImuMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ImuMsg.header)
  return header_;
}
inline void ImuMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ImuMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool ImuMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& ImuMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImuMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* ImuMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ImuMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* ImuMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ImuMsg.error)
  return error_;
}
inline void ImuMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ImuMsg.error)
}

// .autodrive.workflow.proto.Imu imu = 3;
inline bool ImuMsg::has_imu() const {
  return this != internal_default_instance() && imu_ != NULL;
}
inline void ImuMsg::clear_imu() {
  if (GetArenaNoVirtual() == NULL && imu_ != NULL) {
    delete imu_;
  }
  imu_ = NULL;
}
inline const ::autodrive::workflow::proto::Imu& ImuMsg::imu() const {
  const ::autodrive::workflow::proto::Imu* p = imu_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImuMsg.imu)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Imu*>(
      &::autodrive::workflow::proto::_Imu_default_instance_);
}
inline ::autodrive::workflow::proto::Imu* ImuMsg::release_imu() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ImuMsg.imu)
  
  ::autodrive::workflow::proto::Imu* temp = imu_;
  imu_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Imu* ImuMsg::mutable_imu() {
  
  if (imu_ == NULL) {
    imu_ = new ::autodrive::workflow::proto::Imu;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ImuMsg.imu)
  return imu_;
}
inline void ImuMsg::set_allocated_imu(::autodrive::workflow::proto::Imu* imu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete imu_;
  }
  if (imu) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ImuMsg.imu)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_imu_2eproto__INCLUDED
