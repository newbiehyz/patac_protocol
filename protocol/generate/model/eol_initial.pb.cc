// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eol_initial.proto

#include "eol_initial.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class ChessboardDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChessboardData>
      _instance;
} _ChessboardData_default_instance_;
class CircleGridDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CircleGridData>
      _instance;
} _CircleGridData_default_instance_;
class VehicleExtrinsicDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleExtrinsicData>
      _instance;
} _VehicleExtrinsicData_default_instance_;
class EolInitialMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EolInitialMsg>
      _instance;
} _EolInitialMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_eol_5finitial_2eproto {
void InitDefaultsChessboardDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_ChessboardData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ChessboardData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ChessboardData::InitAsDefaultInstance();
}

void InitDefaultsChessboardData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChessboardDataImpl);
}

void InitDefaultsCircleGridDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_CircleGridData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::CircleGridData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::CircleGridData::InitAsDefaultInstance();
}

void InitDefaultsCircleGridData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCircleGridDataImpl);
}

void InitDefaultsVehicleExtrinsicDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_camera_5fextrinsics_2eproto::InitDefaultsExtrinsic();
  {
    void* ptr = &::autodrive::workflow::proto::_VehicleExtrinsicData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::VehicleExtrinsicData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::VehicleExtrinsicData::InitAsDefaultInstance();
}

void InitDefaultsVehicleExtrinsicData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleExtrinsicDataImpl);
}

void InitDefaultsEolInitialMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_eol_5finitial_2eproto::InitDefaultsVehicleExtrinsicData();
  protobuf_eol_5finitial_2eproto::InitDefaultsChessboardData();
  protobuf_eol_5finitial_2eproto::InitDefaultsCircleGridData();
  {
    void* ptr = &::autodrive::workflow::proto::_EolInitialMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::EolInitialMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::EolInitialMsg::InitAsDefaultInstance();
}

void InitDefaultsEolInitialMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEolInitialMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ChessboardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ChessboardData, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ChessboardData, top_left_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ChessboardData, top_left_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ChessboardData, height_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ChessboardData, width_interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CircleGridData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CircleGridData, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CircleGridData, basic_pt_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CircleGridData, height_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CircleGridData, width_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CircleGridData, basic_pt_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CircleGridData, basic_pt_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VehicleExtrinsicData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VehicleExtrinsicData, wheelbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VehicleExtrinsicData, ori_extrinsic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EolInitialMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EolInitialMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EolInitialMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EolInitialMsg, vehicle_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EolInitialMsg, cb_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EolInitialMsg, cg_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::ChessboardData)},
  { 10, -1, sizeof(::autodrive::workflow::proto::CircleGridData)},
  { 21, -1, sizeof(::autodrive::workflow::proto::VehicleExtrinsicData)},
  { 28, -1, sizeof(::autodrive::workflow::proto::EolInitialMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ChessboardData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_CircleGridData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_VehicleExtrinsicData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_EolInitialMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "eol_initial.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021eol_initial.proto\022\030autodrive.workflow."
      "proto\032\014common.proto\032\027camera_extrinsics.p"
      "roto\"\240\001\n\016ChessboardData\0225\n\tcamera_id\030\001 \001"
      "(\0162\".autodrive.workflow.proto.CameraID\022\022"
      "\n\ntop_left_x\030\002 \001(\002\022\022\n\ntop_left_y\030\003 \001(\002\022\027"
      "\n\017height_interval\030\004 \001(\002\022\026\n\016width_interva"
      "l\030\005 \001(\002\"\264\001\n\016CircleGridData\0225\n\tcamera_id\030"
      "\001 \001(\0162\".autodrive.workflow.proto.CameraI"
      "D\022\022\n\nbasic_pt_z\030\002 \001(\002\022\027\n\017height_interval"
      "\030\003 \001(\002\022\026\n\016width_interval\030\004 \001(\002\022\022\n\nbasic_"
      "pt_x\030\005 \001(\002\022\022\n\nbasic_pt_y\030\006 \001(\002\"e\n\024Vehicl"
      "eExtrinsicData\022\021\n\twheelbase\030\001 \001(\002\022:\n\rori"
      "_extrinsic\030\002 \003(\0132#.autodrive.workflow.pr"
      "oto.Extrinsic\"\260\002\n\rEolInitialMsg\0223\n\006heade"
      "r\030\001 \001(\0132#.autodrive.workflow.proto.MsgHe"
      "ader\022.\n\005error\030\002 \001(\0132\037.autodrive.workflow"
      ".proto.Error\022D\n\014vehicle_data\030\003 \001(\0132..aut"
      "odrive.workflow.proto.VehicleExtrinsicDa"
      "ta\0229\n\007cb_data\030\004 \003(\0132(.autodrive.workflow"
      ".proto.ChessboardData\0229\n\007cg_data\030\005 \003(\0132("
      ".autodrive.workflow.proto.CircleGridData"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 848);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eol_initial.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_camera_5fextrinsics_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_eol_5finitial_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void ChessboardData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessboardData::kCameraIdFieldNumber;
const int ChessboardData::kTopLeftXFieldNumber;
const int ChessboardData::kTopLeftYFieldNumber;
const int ChessboardData::kHeightIntervalFieldNumber;
const int ChessboardData::kWidthIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessboardData::ChessboardData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_eol_5finitial_2eproto::InitDefaultsChessboardData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ChessboardData)
}
ChessboardData::ChessboardData(const ChessboardData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_interval_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(width_interval_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ChessboardData)
}

void ChessboardData::SharedCtor() {
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_interval_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(width_interval_));
  _cached_size_ = 0;
}

ChessboardData::~ChessboardData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ChessboardData)
  SharedDtor();
}

void ChessboardData::SharedDtor() {
}

void ChessboardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessboardData::descriptor() {
  ::protobuf_eol_5finitial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_eol_5finitial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChessboardData& ChessboardData::default_instance() {
  ::protobuf_eol_5finitial_2eproto::InitDefaultsChessboardData();
  return *internal_default_instance();
}

ChessboardData* ChessboardData::New(::google::protobuf::Arena* arena) const {
  ChessboardData* n = new ChessboardData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChessboardData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ChessboardData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_interval_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(width_interval_));
  _internal_metadata_.Clear();
}

bool ChessboardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ChessboardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.CameraID camera_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_id(static_cast< ::autodrive::workflow::proto::CameraID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float top_left_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_left_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float top_left_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_left_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width_interval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ChessboardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ChessboardData)
  return false;
#undef DO_
}

void ChessboardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ChessboardData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.CameraID camera_id = 1;
  if (this->camera_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_id(), output);
  }

  // float top_left_x = 2;
  if (this->top_left_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->top_left_x(), output);
  }

  // float top_left_y = 3;
  if (this->top_left_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->top_left_y(), output);
  }

  // float height_interval = 4;
  if (this->height_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height_interval(), output);
  }

  // float width_interval = 5;
  if (this->width_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->width_interval(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ChessboardData)
}

::google::protobuf::uint8* ChessboardData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ChessboardData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.CameraID camera_id = 1;
  if (this->camera_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_id(), target);
  }

  // float top_left_x = 2;
  if (this->top_left_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->top_left_x(), target);
  }

  // float top_left_y = 3;
  if (this->top_left_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->top_left_y(), target);
  }

  // float height_interval = 4;
  if (this->height_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height_interval(), target);
  }

  // float width_interval = 5;
  if (this->width_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->width_interval(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ChessboardData)
  return target;
}

size_t ChessboardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ChessboardData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.CameraID camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_id());
  }

  // float top_left_x = 2;
  if (this->top_left_x() != 0) {
    total_size += 1 + 4;
  }

  // float top_left_y = 3;
  if (this->top_left_y() != 0) {
    total_size += 1 + 4;
  }

  // float height_interval = 4;
  if (this->height_interval() != 0) {
    total_size += 1 + 4;
  }

  // float width_interval = 5;
  if (this->width_interval() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessboardData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ChessboardData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessboardData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChessboardData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ChessboardData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ChessboardData)
    MergeFrom(*source);
  }
}

void ChessboardData::MergeFrom(const ChessboardData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ChessboardData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_id() != 0) {
    set_camera_id(from.camera_id());
  }
  if (from.top_left_x() != 0) {
    set_top_left_x(from.top_left_x());
  }
  if (from.top_left_y() != 0) {
    set_top_left_y(from.top_left_y());
  }
  if (from.height_interval() != 0) {
    set_height_interval(from.height_interval());
  }
  if (from.width_interval() != 0) {
    set_width_interval(from.width_interval());
  }
}

void ChessboardData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ChessboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessboardData::CopyFrom(const ChessboardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ChessboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessboardData::IsInitialized() const {
  return true;
}

void ChessboardData::Swap(ChessboardData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessboardData::InternalSwap(ChessboardData* other) {
  using std::swap;
  swap(camera_id_, other->camera_id_);
  swap(top_left_x_, other->top_left_x_);
  swap(top_left_y_, other->top_left_y_);
  swap(height_interval_, other->height_interval_);
  swap(width_interval_, other->width_interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChessboardData::GetMetadata() const {
  protobuf_eol_5finitial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_eol_5finitial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CircleGridData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CircleGridData::kCameraIdFieldNumber;
const int CircleGridData::kBasicPtZFieldNumber;
const int CircleGridData::kHeightIntervalFieldNumber;
const int CircleGridData::kWidthIntervalFieldNumber;
const int CircleGridData::kBasicPtXFieldNumber;
const int CircleGridData::kBasicPtYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CircleGridData::CircleGridData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_eol_5finitial_2eproto::InitDefaultsCircleGridData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.CircleGridData)
}
CircleGridData::CircleGridData(const CircleGridData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&basic_pt_y_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(basic_pt_y_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.CircleGridData)
}

void CircleGridData::SharedCtor() {
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basic_pt_y_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(basic_pt_y_));
  _cached_size_ = 0;
}

CircleGridData::~CircleGridData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.CircleGridData)
  SharedDtor();
}

void CircleGridData::SharedDtor() {
}

void CircleGridData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircleGridData::descriptor() {
  ::protobuf_eol_5finitial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_eol_5finitial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CircleGridData& CircleGridData::default_instance() {
  ::protobuf_eol_5finitial_2eproto::InitDefaultsCircleGridData();
  return *internal_default_instance();
}

CircleGridData* CircleGridData::New(::google::protobuf::Arena* arena) const {
  CircleGridData* n = new CircleGridData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CircleGridData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.CircleGridData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basic_pt_y_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(basic_pt_y_));
  _internal_metadata_.Clear();
}

bool CircleGridData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.CircleGridData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.CameraID camera_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_id(static_cast< ::autodrive::workflow::proto::CameraID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float basic_pt_z = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &basic_pt_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width_interval = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float basic_pt_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &basic_pt_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float basic_pt_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &basic_pt_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.CircleGridData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.CircleGridData)
  return false;
#undef DO_
}

void CircleGridData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.CircleGridData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.CameraID camera_id = 1;
  if (this->camera_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_id(), output);
  }

  // float basic_pt_z = 2;
  if (this->basic_pt_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->basic_pt_z(), output);
  }

  // float height_interval = 3;
  if (this->height_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height_interval(), output);
  }

  // float width_interval = 4;
  if (this->width_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->width_interval(), output);
  }

  // float basic_pt_x = 5;
  if (this->basic_pt_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->basic_pt_x(), output);
  }

  // float basic_pt_y = 6;
  if (this->basic_pt_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->basic_pt_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.CircleGridData)
}

::google::protobuf::uint8* CircleGridData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.CircleGridData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.CameraID camera_id = 1;
  if (this->camera_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_id(), target);
  }

  // float basic_pt_z = 2;
  if (this->basic_pt_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->basic_pt_z(), target);
  }

  // float height_interval = 3;
  if (this->height_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height_interval(), target);
  }

  // float width_interval = 4;
  if (this->width_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->width_interval(), target);
  }

  // float basic_pt_x = 5;
  if (this->basic_pt_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->basic_pt_x(), target);
  }

  // float basic_pt_y = 6;
  if (this->basic_pt_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->basic_pt_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.CircleGridData)
  return target;
}

size_t CircleGridData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.CircleGridData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.CameraID camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_id());
  }

  // float basic_pt_z = 2;
  if (this->basic_pt_z() != 0) {
    total_size += 1 + 4;
  }

  // float height_interval = 3;
  if (this->height_interval() != 0) {
    total_size += 1 + 4;
  }

  // float width_interval = 4;
  if (this->width_interval() != 0) {
    total_size += 1 + 4;
  }

  // float basic_pt_x = 5;
  if (this->basic_pt_x() != 0) {
    total_size += 1 + 4;
  }

  // float basic_pt_y = 6;
  if (this->basic_pt_y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircleGridData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.CircleGridData)
  GOOGLE_DCHECK_NE(&from, this);
  const CircleGridData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CircleGridData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.CircleGridData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.CircleGridData)
    MergeFrom(*source);
  }
}

void CircleGridData::MergeFrom(const CircleGridData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.CircleGridData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_id() != 0) {
    set_camera_id(from.camera_id());
  }
  if (from.basic_pt_z() != 0) {
    set_basic_pt_z(from.basic_pt_z());
  }
  if (from.height_interval() != 0) {
    set_height_interval(from.height_interval());
  }
  if (from.width_interval() != 0) {
    set_width_interval(from.width_interval());
  }
  if (from.basic_pt_x() != 0) {
    set_basic_pt_x(from.basic_pt_x());
  }
  if (from.basic_pt_y() != 0) {
    set_basic_pt_y(from.basic_pt_y());
  }
}

void CircleGridData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.CircleGridData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircleGridData::CopyFrom(const CircleGridData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.CircleGridData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleGridData::IsInitialized() const {
  return true;
}

void CircleGridData::Swap(CircleGridData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CircleGridData::InternalSwap(CircleGridData* other) {
  using std::swap;
  swap(camera_id_, other->camera_id_);
  swap(basic_pt_z_, other->basic_pt_z_);
  swap(height_interval_, other->height_interval_);
  swap(width_interval_, other->width_interval_);
  swap(basic_pt_x_, other->basic_pt_x_);
  swap(basic_pt_y_, other->basic_pt_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CircleGridData::GetMetadata() const {
  protobuf_eol_5finitial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_eol_5finitial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleExtrinsicData::InitAsDefaultInstance() {
}
void VehicleExtrinsicData::clear_ori_extrinsic() {
  ori_extrinsic_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleExtrinsicData::kWheelbaseFieldNumber;
const int VehicleExtrinsicData::kOriExtrinsicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleExtrinsicData::VehicleExtrinsicData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_eol_5finitial_2eproto::InitDefaultsVehicleExtrinsicData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.VehicleExtrinsicData)
}
VehicleExtrinsicData::VehicleExtrinsicData(const VehicleExtrinsicData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ori_extrinsic_(from.ori_extrinsic_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wheelbase_ = from.wheelbase_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.VehicleExtrinsicData)
}

void VehicleExtrinsicData::SharedCtor() {
  wheelbase_ = 0;
  _cached_size_ = 0;
}

VehicleExtrinsicData::~VehicleExtrinsicData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.VehicleExtrinsicData)
  SharedDtor();
}

void VehicleExtrinsicData::SharedDtor() {
}

void VehicleExtrinsicData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleExtrinsicData::descriptor() {
  ::protobuf_eol_5finitial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_eol_5finitial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleExtrinsicData& VehicleExtrinsicData::default_instance() {
  ::protobuf_eol_5finitial_2eproto::InitDefaultsVehicleExtrinsicData();
  return *internal_default_instance();
}

VehicleExtrinsicData* VehicleExtrinsicData::New(::google::protobuf::Arena* arena) const {
  VehicleExtrinsicData* n = new VehicleExtrinsicData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleExtrinsicData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.VehicleExtrinsicData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ori_extrinsic_.Clear();
  wheelbase_ = 0;
  _internal_metadata_.Clear();
}

bool VehicleExtrinsicData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.VehicleExtrinsicData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float wheelbase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheelbase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.Extrinsic ori_extrinsic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ori_extrinsic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.VehicleExtrinsicData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.VehicleExtrinsicData)
  return false;
#undef DO_
}

void VehicleExtrinsicData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.VehicleExtrinsicData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float wheelbase = 1;
  if (this->wheelbase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->wheelbase(), output);
  }

  // repeated .autodrive.workflow.proto.Extrinsic ori_extrinsic = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ori_extrinsic_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ori_extrinsic(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.VehicleExtrinsicData)
}

::google::protobuf::uint8* VehicleExtrinsicData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.VehicleExtrinsicData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float wheelbase = 1;
  if (this->wheelbase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->wheelbase(), target);
  }

  // repeated .autodrive.workflow.proto.Extrinsic ori_extrinsic = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ori_extrinsic_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ori_extrinsic(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.VehicleExtrinsicData)
  return target;
}

size_t VehicleExtrinsicData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.VehicleExtrinsicData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.Extrinsic ori_extrinsic = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ori_extrinsic_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ori_extrinsic(static_cast<int>(i)));
    }
  }

  // float wheelbase = 1;
  if (this->wheelbase() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleExtrinsicData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.VehicleExtrinsicData)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleExtrinsicData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleExtrinsicData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.VehicleExtrinsicData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.VehicleExtrinsicData)
    MergeFrom(*source);
  }
}

void VehicleExtrinsicData::MergeFrom(const VehicleExtrinsicData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.VehicleExtrinsicData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ori_extrinsic_.MergeFrom(from.ori_extrinsic_);
  if (from.wheelbase() != 0) {
    set_wheelbase(from.wheelbase());
  }
}

void VehicleExtrinsicData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.VehicleExtrinsicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleExtrinsicData::CopyFrom(const VehicleExtrinsicData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.VehicleExtrinsicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleExtrinsicData::IsInitialized() const {
  return true;
}

void VehicleExtrinsicData::Swap(VehicleExtrinsicData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleExtrinsicData::InternalSwap(VehicleExtrinsicData* other) {
  using std::swap;
  ori_extrinsic_.InternalSwap(&other->ori_extrinsic_);
  swap(wheelbase_, other->wheelbase_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleExtrinsicData::GetMetadata() const {
  protobuf_eol_5finitial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_eol_5finitial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EolInitialMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_EolInitialMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_EolInitialMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_EolInitialMsg_default_instance_._instance.get_mutable()->vehicle_data_ = const_cast< ::autodrive::workflow::proto::VehicleExtrinsicData*>(
      ::autodrive::workflow::proto::VehicleExtrinsicData::internal_default_instance());
}
void EolInitialMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void EolInitialMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EolInitialMsg::kHeaderFieldNumber;
const int EolInitialMsg::kErrorFieldNumber;
const int EolInitialMsg::kVehicleDataFieldNumber;
const int EolInitialMsg::kCbDataFieldNumber;
const int EolInitialMsg::kCgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EolInitialMsg::EolInitialMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_eol_5finitial_2eproto::InitDefaultsEolInitialMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.EolInitialMsg)
}
EolInitialMsg::EolInitialMsg(const EolInitialMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cb_data_(from.cb_data_),
      cg_data_(from.cg_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_vehicle_data()) {
    vehicle_data_ = new ::autodrive::workflow::proto::VehicleExtrinsicData(*from.vehicle_data_);
  } else {
    vehicle_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.EolInitialMsg)
}

void EolInitialMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_data_) -
      reinterpret_cast<char*>(&header_)) + sizeof(vehicle_data_));
  _cached_size_ = 0;
}

EolInitialMsg::~EolInitialMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.EolInitialMsg)
  SharedDtor();
}

void EolInitialMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete vehicle_data_;
}

void EolInitialMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EolInitialMsg::descriptor() {
  ::protobuf_eol_5finitial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_eol_5finitial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EolInitialMsg& EolInitialMsg::default_instance() {
  ::protobuf_eol_5finitial_2eproto::InitDefaultsEolInitialMsg();
  return *internal_default_instance();
}

EolInitialMsg* EolInitialMsg::New(::google::protobuf::Arena* arena) const {
  EolInitialMsg* n = new EolInitialMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EolInitialMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.EolInitialMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cb_data_.Clear();
  cg_data_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_data_ != NULL) {
    delete vehicle_data_;
  }
  vehicle_data_ = NULL;
  _internal_metadata_.Clear();
}

bool EolInitialMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.EolInitialMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VehicleExtrinsicData vehicle_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ChessboardData cb_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cb_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.CircleGridData cg_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.EolInitialMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.EolInitialMsg)
  return false;
#undef DO_
}

void EolInitialMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.EolInitialMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.VehicleExtrinsicData vehicle_data = 3;
  if (this->has_vehicle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->vehicle_data_, output);
  }

  // repeated .autodrive.workflow.proto.ChessboardData cb_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cb_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cb_data(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.CircleGridData cg_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cg_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cg_data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.EolInitialMsg)
}

::google::protobuf::uint8* EolInitialMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.EolInitialMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.VehicleExtrinsicData vehicle_data = 3;
  if (this->has_vehicle_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->vehicle_data_, deterministic, target);
  }

  // repeated .autodrive.workflow.proto.ChessboardData cb_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cb_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->cb_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.CircleGridData cg_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cg_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->cg_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.EolInitialMsg)
  return target;
}

size_t EolInitialMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.EolInitialMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.ChessboardData cb_data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->cb_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cb_data(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.CircleGridData cg_data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->cg_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cg_data(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.VehicleExtrinsicData vehicle_data = 3;
  if (this->has_vehicle_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EolInitialMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.EolInitialMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const EolInitialMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EolInitialMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.EolInitialMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.EolInitialMsg)
    MergeFrom(*source);
  }
}

void EolInitialMsg::MergeFrom(const EolInitialMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.EolInitialMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cb_data_.MergeFrom(from.cb_data_);
  cg_data_.MergeFrom(from.cg_data_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_vehicle_data()) {
    mutable_vehicle_data()->::autodrive::workflow::proto::VehicleExtrinsicData::MergeFrom(from.vehicle_data());
  }
}

void EolInitialMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.EolInitialMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EolInitialMsg::CopyFrom(const EolInitialMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.EolInitialMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EolInitialMsg::IsInitialized() const {
  return true;
}

void EolInitialMsg::Swap(EolInitialMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EolInitialMsg::InternalSwap(EolInitialMsg* other) {
  using std::swap;
  cb_data_.InternalSwap(&other->cb_data_);
  cg_data_.InternalSwap(&other->cg_data_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(vehicle_data_, other->vehicle_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EolInitialMsg::GetMetadata() const {
  protobuf_eol_5finitial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_eol_5finitial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
