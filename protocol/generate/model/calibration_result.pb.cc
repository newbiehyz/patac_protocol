// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration_result.proto

#include "calibration_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class CalibrationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalibrationResult>
      _instance;
} _CalibrationResult_default_instance_;
class CalibrationResultMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalibrationResultMsg>
      _instance;
} _CalibrationResultMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_calibration_5fresult_2eproto {
void InitDefaultsCalibrationResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_camera_5fextrinsics_2eproto::InitDefaultsExtrinsic();
  {
    void* ptr = &::autodrive::workflow::proto::_CalibrationResult_default_instance_;
    new (ptr) ::autodrive::workflow::proto::CalibrationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::CalibrationResult::InitAsDefaultInstance();
}

void InitDefaultsCalibrationResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCalibrationResultImpl);
}

void InitDefaultsCalibrationResultMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_calibration_5fresult_2eproto::InitDefaultsCalibrationResult();
  {
    void* ptr = &::autodrive::workflow::proto::_CalibrationResultMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::CalibrationResultMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::CalibrationResultMsg::InitAsDefaultInstance();
}

void InitDefaultsCalibrationResultMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCalibrationResultMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResult, cam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResult, calib_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResult, extrinsic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResult, progress_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResultMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResultMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResultMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResultMsg, real_camera_amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CalibrationResultMsg, results_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::CalibrationResult)},
  { 9, -1, sizeof(::autodrive::workflow::proto::CalibrationResultMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_CalibrationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_CalibrationResultMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "calibration_result.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030calibration_result.proto\022\030autodrive.wo"
      "rkflow.proto\032\014common.proto\032\027camera_extri"
      "nsics.proto\"\323\001\n\021CalibrationResult\0222\n\006cam"
      "_id\030\001 \001(\0162\".autodrive.workflow.proto.Cam"
      "eraID\022;\n\014calib_status\030\002 \001(\0162%.autodrive."
      "workflow.proto.CalibStatus\0226\n\textrinsic\030"
      "\003 \001(\0132#.autodrive.workflow.proto.Extrins"
      "ic\022\025\n\rprogress_rate\030\004 \001(\002\"\325\001\n\024Calibratio"
      "nResultMsg\0223\n\006header\030\001 \001(\0132#.autodrive.w"
      "orkflow.proto.MsgHeader\022.\n\005error\030\002 \001(\0132\037"
      ".autodrive.workflow.proto.Error\022\032\n\022real_"
      "camera_amount\030\003 \001(\r\022<\n\007results\030\004 \003(\0132+.a"
      "utodrive.workflow.proto.CalibrationResul"
      "t*\341\003\n\013CalibStatus\022\024\n\020CALIB_STATE_NONE\020\000\022"
      "\023\n\017CALIB_STATE_RUN\020\001\022\027\n\023CALIB_STATE_SUCC"
      "ESS\020\002\022\033\n\027CALIB_STATE_MODE_ERRROR\020\003\022\035\n\031CA"
      "LIB_STATE_PATTERN_ERROR\020\004\022$\n CALIB_STATE"
      "_INTERNAL_PARAM_ERROR\020\005\022\032\n\026CALIB_STATE_I"
      "MG_ERRROR\020\006\022\"\n\036CALIB_STATE_FIND_CORNERS_"
      "ERROR\020\007\022\"\n\036CALIB_STATE_REPROJECTION_ERRO"
      "R\020\010\022!\n\035CALIB_STATE_PITCH_OUTOF_RANGE\020\t\022 "
      "\n\034CALIB_STATE_ROLL_OUTOF_RANGE\020\n\022\037\n\033CALI"
      "B_STATE_YAW_OUTOF_RANGE\020\013\022\035\n\031CALIB_STATE"
      "_TIMEOUT_ERROR\020\014\022!\n\035CALIB_STATE_RESULT_S"
      "AVE_ERROR\020\r\022 \n\034CALIB_STATE_ALGORITHM_CAN"
      "CEL\020\016b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1013);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "calibration_result.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_camera_5fextrinsics_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_calibration_5fresult_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* CalibStatus_descriptor() {
  protobuf_calibration_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_calibration_5fresult_2eproto::file_level_enum_descriptors[0];
}
bool CalibStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CalibrationResult::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_CalibrationResult_default_instance_._instance.get_mutable()->extrinsic_ = const_cast< ::autodrive::workflow::proto::Extrinsic*>(
      ::autodrive::workflow::proto::Extrinsic::internal_default_instance());
}
void CalibrationResult::clear_extrinsic() {
  if (GetArenaNoVirtual() == NULL && extrinsic_ != NULL) {
    delete extrinsic_;
  }
  extrinsic_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationResult::kCamIdFieldNumber;
const int CalibrationResult::kCalibStatusFieldNumber;
const int CalibrationResult::kExtrinsicFieldNumber;
const int CalibrationResult::kProgressRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationResult::CalibrationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_calibration_5fresult_2eproto::InitDefaultsCalibrationResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.CalibrationResult)
}
CalibrationResult::CalibrationResult(const CalibrationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_extrinsic()) {
    extrinsic_ = new ::autodrive::workflow::proto::Extrinsic(*from.extrinsic_);
  } else {
    extrinsic_ = NULL;
  }
  ::memcpy(&cam_id_, &from.cam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_rate_) -
    reinterpret_cast<char*>(&cam_id_)) + sizeof(progress_rate_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.CalibrationResult)
}

void CalibrationResult::SharedCtor() {
  ::memset(&extrinsic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_rate_) -
      reinterpret_cast<char*>(&extrinsic_)) + sizeof(progress_rate_));
  _cached_size_ = 0;
}

CalibrationResult::~CalibrationResult() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.CalibrationResult)
  SharedDtor();
}

void CalibrationResult::SharedDtor() {
  if (this != internal_default_instance()) delete extrinsic_;
}

void CalibrationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationResult::descriptor() {
  ::protobuf_calibration_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalibrationResult& CalibrationResult::default_instance() {
  ::protobuf_calibration_5fresult_2eproto::InitDefaultsCalibrationResult();
  return *internal_default_instance();
}

CalibrationResult* CalibrationResult::New(::google::protobuf::Arena* arena) const {
  CalibrationResult* n = new CalibrationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalibrationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.CalibrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && extrinsic_ != NULL) {
    delete extrinsic_;
  }
  extrinsic_ = NULL;
  ::memset(&cam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_rate_) -
      reinterpret_cast<char*>(&cam_id_)) + sizeof(progress_rate_));
  _internal_metadata_.Clear();
}

bool CalibrationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.CalibrationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.CameraID cam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cam_id(static_cast< ::autodrive::workflow::proto::CameraID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.CalibStatus calib_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_calib_status(static_cast< ::autodrive::workflow::proto::CalibStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Extrinsic extrinsic = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_extrinsic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float progress_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.CalibrationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.CalibrationResult)
  return false;
#undef DO_
}

void CalibrationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.CalibrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.CameraID cam_id = 1;
  if (this->cam_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cam_id(), output);
  }

  // .autodrive.workflow.proto.CalibStatus calib_status = 2;
  if (this->calib_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->calib_status(), output);
  }

  // .autodrive.workflow.proto.Extrinsic extrinsic = 3;
  if (this->has_extrinsic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->extrinsic_, output);
  }

  // float progress_rate = 4;
  if (this->progress_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->progress_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.CalibrationResult)
}

::google::protobuf::uint8* CalibrationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.CalibrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.CameraID cam_id = 1;
  if (this->cam_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cam_id(), target);
  }

  // .autodrive.workflow.proto.CalibStatus calib_status = 2;
  if (this->calib_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->calib_status(), target);
  }

  // .autodrive.workflow.proto.Extrinsic extrinsic = 3;
  if (this->has_extrinsic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->extrinsic_, deterministic, target);
  }

  // float progress_rate = 4;
  if (this->progress_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->progress_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.CalibrationResult)
  return target;
}

size_t CalibrationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.CalibrationResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Extrinsic extrinsic = 3;
  if (this->has_extrinsic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->extrinsic_);
  }

  // .autodrive.workflow.proto.CameraID cam_id = 1;
  if (this->cam_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cam_id());
  }

  // .autodrive.workflow.proto.CalibStatus calib_status = 2;
  if (this->calib_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->calib_status());
  }

  // float progress_rate = 4;
  if (this->progress_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.CalibrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CalibrationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.CalibrationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.CalibrationResult)
    MergeFrom(*source);
  }
}

void CalibrationResult::MergeFrom(const CalibrationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.CalibrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_extrinsic()) {
    mutable_extrinsic()->::autodrive::workflow::proto::Extrinsic::MergeFrom(from.extrinsic());
  }
  if (from.cam_id() != 0) {
    set_cam_id(from.cam_id());
  }
  if (from.calib_status() != 0) {
    set_calib_status(from.calib_status());
  }
  if (from.progress_rate() != 0) {
    set_progress_rate(from.progress_rate());
  }
}

void CalibrationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.CalibrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationResult::CopyFrom(const CalibrationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.CalibrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationResult::IsInitialized() const {
  return true;
}

void CalibrationResult::Swap(CalibrationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationResult::InternalSwap(CalibrationResult* other) {
  using std::swap;
  swap(extrinsic_, other->extrinsic_);
  swap(cam_id_, other->cam_id_);
  swap(calib_status_, other->calib_status_);
  swap(progress_rate_, other->progress_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalibrationResult::GetMetadata() const {
  protobuf_calibration_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CalibrationResultMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_CalibrationResultMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_CalibrationResultMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void CalibrationResultMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void CalibrationResultMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationResultMsg::kHeaderFieldNumber;
const int CalibrationResultMsg::kErrorFieldNumber;
const int CalibrationResultMsg::kRealCameraAmountFieldNumber;
const int CalibrationResultMsg::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationResultMsg::CalibrationResultMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_calibration_5fresult_2eproto::InitDefaultsCalibrationResultMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.CalibrationResultMsg)
}
CalibrationResultMsg::CalibrationResultMsg(const CalibrationResultMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  real_camera_amount_ = from.real_camera_amount_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.CalibrationResultMsg)
}

void CalibrationResultMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_camera_amount_) -
      reinterpret_cast<char*>(&header_)) + sizeof(real_camera_amount_));
  _cached_size_ = 0;
}

CalibrationResultMsg::~CalibrationResultMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.CalibrationResultMsg)
  SharedDtor();
}

void CalibrationResultMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void CalibrationResultMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationResultMsg::descriptor() {
  ::protobuf_calibration_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalibrationResultMsg& CalibrationResultMsg::default_instance() {
  ::protobuf_calibration_5fresult_2eproto::InitDefaultsCalibrationResultMsg();
  return *internal_default_instance();
}

CalibrationResultMsg* CalibrationResultMsg::New(::google::protobuf::Arena* arena) const {
  CalibrationResultMsg* n = new CalibrationResultMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalibrationResultMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.CalibrationResultMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  real_camera_amount_ = 0u;
  _internal_metadata_.Clear();
}

bool CalibrationResultMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.CalibrationResultMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 real_camera_amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &real_camera_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.CalibrationResult results = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.CalibrationResultMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.CalibrationResultMsg)
  return false;
#undef DO_
}

void CalibrationResultMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.CalibrationResultMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // uint32 real_camera_amount = 3;
  if (this->real_camera_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->real_camera_amount(), output);
  }

  // repeated .autodrive.workflow.proto.CalibrationResult results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->results(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.CalibrationResultMsg)
}

::google::protobuf::uint8* CalibrationResultMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.CalibrationResultMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // uint32 real_camera_amount = 3;
  if (this->real_camera_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->real_camera_amount(), target);
  }

  // repeated .autodrive.workflow.proto.CalibrationResult results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.CalibrationResultMsg)
  return target;
}

size_t CalibrationResultMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.CalibrationResultMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.CalibrationResult results = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // uint32 real_camera_amount = 3;
  if (this->real_camera_amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->real_camera_amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationResultMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.CalibrationResultMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationResultMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CalibrationResultMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.CalibrationResultMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.CalibrationResultMsg)
    MergeFrom(*source);
  }
}

void CalibrationResultMsg::MergeFrom(const CalibrationResultMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.CalibrationResultMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.real_camera_amount() != 0) {
    set_real_camera_amount(from.real_camera_amount());
  }
}

void CalibrationResultMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.CalibrationResultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationResultMsg::CopyFrom(const CalibrationResultMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.CalibrationResultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationResultMsg::IsInitialized() const {
  return true;
}

void CalibrationResultMsg::Swap(CalibrationResultMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationResultMsg::InternalSwap(CalibrationResultMsg* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(real_camera_amount_, other->real_camera_amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalibrationResultMsg::GetMetadata() const {
  protobuf_calibration_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_calibration_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
