// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipm_parsing.proto

#ifndef PROTOBUF_ipm_5fparsing_2eproto__INCLUDED
#define PROTOBUF_ipm_5fparsing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "parsing_base.pb.h"
#include "perception_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_ipm_5fparsing_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsIpmParsingMsgImpl();
void InitDefaultsIpmParsingMsg();
inline void InitDefaults() {
  InitDefaultsIpmParsingMsg();
}
}  // namespace protobuf_ipm_5fparsing_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class IpmParsingMsg;
class IpmParsingMsgDefaultTypeInternal;
extern IpmParsingMsgDefaultTypeInternal _IpmParsingMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum IpmParsingLabel {
  kIpmParsingLabelRoad = 0,
  kIpmParsingLabelTrafficLine = 1,
  kIpmParsingLabelParkingLine = 2,
  kIpmParsingLabelParkingSpace = 3,
  kIpmParsingLabelTrafficArrow = 4,
  kIpmParsingLabelGuideLine = 5,
  kIpmParsingLabelCrosswalkLine = 6,
  kIpmParsingLabelNoParkingSignLine = 7,
  kIpmParsingLabelStopLine = 8,
  kIpmParsingLabelSpeedBump = 9,
  kIpmParsingLabelSignLine = 10,
  kIpmParsingLabelParkingLockOpen = 11,
  kIpmParsingLabelParkingLockClosed = 12,
  kIpmParsingLabelTrafficCone = 13,
  kIpmParsingLabelParkingRod = 14,
  kIpmParsingLabelCurb = 15,
  kIpmParsingLabelColumn = 16,
  kIpmParsingLabelImmovableObstacle = 17,
  kIpmParsingLabelMovableObstacle = 18,
  kIpmParsingLabelOther = 19,
  kIpmParsingLabelSidewalk = 20,
  kIpmParsingLabelPaintedWallRoot = 21,
  IpmParsingLabel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IpmParsingLabel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IpmParsingLabel_IsValid(int value);
const IpmParsingLabel IpmParsingLabel_MIN = kIpmParsingLabelRoad;
const IpmParsingLabel IpmParsingLabel_MAX = kIpmParsingLabelPaintedWallRoot;
const int IpmParsingLabel_ARRAYSIZE = IpmParsingLabel_MAX + 1;

const ::google::protobuf::EnumDescriptor* IpmParsingLabel_descriptor();
inline const ::std::string& IpmParsingLabel_Name(IpmParsingLabel value) {
  return ::google::protobuf::internal::NameOfEnum(
    IpmParsingLabel_descriptor(), value);
}
inline bool IpmParsingLabel_Parse(
    const ::std::string& name, IpmParsingLabel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IpmParsingLabel>(
    IpmParsingLabel_descriptor(), name, value);
}
enum FreeSpaceLabel {
  kFreeSpaceLabelBackGround = 0,
  kFreeSpaceLabelImmovableObstacle = 1,
  kFreeSpaceLabelMovableObstacle = 2,
  kFreeSpaceLabelParkingRod = 3,
  FreeSpaceLabel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FreeSpaceLabel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FreeSpaceLabel_IsValid(int value);
const FreeSpaceLabel FreeSpaceLabel_MIN = kFreeSpaceLabelBackGround;
const FreeSpaceLabel FreeSpaceLabel_MAX = kFreeSpaceLabelParkingRod;
const int FreeSpaceLabel_ARRAYSIZE = FreeSpaceLabel_MAX + 1;

const ::google::protobuf::EnumDescriptor* FreeSpaceLabel_descriptor();
inline const ::std::string& FreeSpaceLabel_Name(FreeSpaceLabel value) {
  return ::google::protobuf::internal::NameOfEnum(
    FreeSpaceLabel_descriptor(), value);
}
inline bool FreeSpaceLabel_Parse(
    const ::std::string& name, FreeSpaceLabel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FreeSpaceLabel>(
    FreeSpaceLabel_descriptor(), name, value);
}
// ===================================================================

class IpmParsingMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.IpmParsingMsg) */ {
 public:
  IpmParsingMsg();
  virtual ~IpmParsingMsg();

  IpmParsingMsg(const IpmParsingMsg& from);

  inline IpmParsingMsg& operator=(const IpmParsingMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IpmParsingMsg(IpmParsingMsg&& from) noexcept
    : IpmParsingMsg() {
    *this = ::std::move(from);
  }

  inline IpmParsingMsg& operator=(IpmParsingMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpmParsingMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpmParsingMsg* internal_default_instance() {
    return reinterpret_cast<const IpmParsingMsg*>(
               &_IpmParsingMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(IpmParsingMsg* other);
  friend void swap(IpmParsingMsg& a, IpmParsingMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IpmParsingMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  IpmParsingMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IpmParsingMsg& from);
  void MergeFrom(const IpmParsingMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IpmParsingMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.IpmParsingImageData free_space = 3;
  bool has_free_space() const;
  void clear_free_space();
  static const int kFreeSpaceFieldNumber = 3;
  const ::autodrive::workflow::proto::IpmParsingImageData& free_space() const;
  ::autodrive::workflow::proto::IpmParsingImageData* release_free_space();
  ::autodrive::workflow::proto::IpmParsingImageData* mutable_free_space();
  void set_allocated_free_space(::autodrive::workflow::proto::IpmParsingImageData* free_space);

  // .autodrive.workflow.proto.IpmParsingImageData feature_map = 4;
  bool has_feature_map() const;
  void clear_feature_map();
  static const int kFeatureMapFieldNumber = 4;
  const ::autodrive::workflow::proto::IpmParsingImageData& feature_map() const;
  ::autodrive::workflow::proto::IpmParsingImageData* release_feature_map();
  ::autodrive::workflow::proto::IpmParsingImageData* mutable_feature_map();
  void set_allocated_feature_map(::autodrive::workflow::proto::IpmParsingImageData* feature_map);

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  bool has_rle_parsing_compressed() const;
  void clear_rle_parsing_compressed();
  static const int kRleParsingCompressedFieldNumber = 5;
  const ::autodrive::workflow::proto::RleCompressedData& rle_parsing_compressed() const;
  ::autodrive::workflow::proto::RleCompressedData* release_rle_parsing_compressed();
  ::autodrive::workflow::proto::RleCompressedData* mutable_rle_parsing_compressed();
  void set_allocated_rle_parsing_compressed(::autodrive::workflow::proto::RleCompressedData* rle_parsing_compressed);

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
  bool has_roi_output() const;
  void clear_roi_output();
  static const int kRoiOutputFieldNumber = 7;
  const ::autodrive::workflow::proto::perception_base::Rect& roi_output() const;
  ::autodrive::workflow::proto::perception_base::Rect* release_roi_output();
  ::autodrive::workflow::proto::perception_base::Rect* mutable_roi_output();
  void set_allocated_roi_output(::autodrive::workflow::proto::perception_base::Rect* roi_output);

  // float scale = 6;
  void clear_scale();
  static const int kScaleFieldNumber = 6;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.IpmParsingMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::IpmParsingImageData* free_space_;
  ::autodrive::workflow::proto::IpmParsingImageData* feature_map_;
  ::autodrive::workflow::proto::RleCompressedData* rle_parsing_compressed_;
  ::autodrive::workflow::proto::perception_base::Rect* roi_output_;
  float scale_;
  mutable int _cached_size_;
  friend struct ::protobuf_ipm_5fparsing_2eproto::TableStruct;
  friend void ::protobuf_ipm_5fparsing_2eproto::InitDefaultsIpmParsingMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IpmParsingMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool IpmParsingMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& IpmParsingMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* IpmParsingMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmParsingMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* IpmParsingMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmParsingMsg.header)
  return header_;
}
inline void IpmParsingMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmParsingMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool IpmParsingMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& IpmParsingMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* IpmParsingMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmParsingMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* IpmParsingMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmParsingMsg.error)
  return error_;
}
inline void IpmParsingMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmParsingMsg.error)
}

// .autodrive.workflow.proto.IpmParsingImageData free_space = 3;
inline bool IpmParsingMsg::has_free_space() const {
  return this != internal_default_instance() && free_space_ != NULL;
}
inline const ::autodrive::workflow::proto::IpmParsingImageData& IpmParsingMsg::free_space() const {
  const ::autodrive::workflow::proto::IpmParsingImageData* p = free_space_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingMsg.free_space)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::IpmParsingImageData*>(
      &::autodrive::workflow::proto::_IpmParsingImageData_default_instance_);
}
inline ::autodrive::workflow::proto::IpmParsingImageData* IpmParsingMsg::release_free_space() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmParsingMsg.free_space)
  
  ::autodrive::workflow::proto::IpmParsingImageData* temp = free_space_;
  free_space_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::IpmParsingImageData* IpmParsingMsg::mutable_free_space() {
  
  if (free_space_ == NULL) {
    free_space_ = new ::autodrive::workflow::proto::IpmParsingImageData;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmParsingMsg.free_space)
  return free_space_;
}
inline void IpmParsingMsg::set_allocated_free_space(::autodrive::workflow::proto::IpmParsingImageData* free_space) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(free_space_);
  }
  if (free_space) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      free_space = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, free_space, submessage_arena);
    }
    
  } else {
    
  }
  free_space_ = free_space;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmParsingMsg.free_space)
}

// .autodrive.workflow.proto.IpmParsingImageData feature_map = 4;
inline bool IpmParsingMsg::has_feature_map() const {
  return this != internal_default_instance() && feature_map_ != NULL;
}
inline const ::autodrive::workflow::proto::IpmParsingImageData& IpmParsingMsg::feature_map() const {
  const ::autodrive::workflow::proto::IpmParsingImageData* p = feature_map_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingMsg.feature_map)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::IpmParsingImageData*>(
      &::autodrive::workflow::proto::_IpmParsingImageData_default_instance_);
}
inline ::autodrive::workflow::proto::IpmParsingImageData* IpmParsingMsg::release_feature_map() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmParsingMsg.feature_map)
  
  ::autodrive::workflow::proto::IpmParsingImageData* temp = feature_map_;
  feature_map_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::IpmParsingImageData* IpmParsingMsg::mutable_feature_map() {
  
  if (feature_map_ == NULL) {
    feature_map_ = new ::autodrive::workflow::proto::IpmParsingImageData;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmParsingMsg.feature_map)
  return feature_map_;
}
inline void IpmParsingMsg::set_allocated_feature_map(::autodrive::workflow::proto::IpmParsingImageData* feature_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(feature_map_);
  }
  if (feature_map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      feature_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feature_map, submessage_arena);
    }
    
  } else {
    
  }
  feature_map_ = feature_map;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmParsingMsg.feature_map)
}

// .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
inline bool IpmParsingMsg::has_rle_parsing_compressed() const {
  return this != internal_default_instance() && rle_parsing_compressed_ != NULL;
}
inline const ::autodrive::workflow::proto::RleCompressedData& IpmParsingMsg::rle_parsing_compressed() const {
  const ::autodrive::workflow::proto::RleCompressedData* p = rle_parsing_compressed_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingMsg.rle_parsing_compressed)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::RleCompressedData*>(
      &::autodrive::workflow::proto::_RleCompressedData_default_instance_);
}
inline ::autodrive::workflow::proto::RleCompressedData* IpmParsingMsg::release_rle_parsing_compressed() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmParsingMsg.rle_parsing_compressed)
  
  ::autodrive::workflow::proto::RleCompressedData* temp = rle_parsing_compressed_;
  rle_parsing_compressed_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::RleCompressedData* IpmParsingMsg::mutable_rle_parsing_compressed() {
  
  if (rle_parsing_compressed_ == NULL) {
    rle_parsing_compressed_ = new ::autodrive::workflow::proto::RleCompressedData;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmParsingMsg.rle_parsing_compressed)
  return rle_parsing_compressed_;
}
inline void IpmParsingMsg::set_allocated_rle_parsing_compressed(::autodrive::workflow::proto::RleCompressedData* rle_parsing_compressed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rle_parsing_compressed_);
  }
  if (rle_parsing_compressed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rle_parsing_compressed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rle_parsing_compressed, submessage_arena);
    }
    
  } else {
    
  }
  rle_parsing_compressed_ = rle_parsing_compressed;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmParsingMsg.rle_parsing_compressed)
}

// float scale = 6;
inline void IpmParsingMsg::clear_scale() {
  scale_ = 0;
}
inline float IpmParsingMsg::scale() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingMsg.scale)
  return scale_;
}
inline void IpmParsingMsg::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.IpmParsingMsg.scale)
}

// .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
inline bool IpmParsingMsg::has_roi_output() const {
  return this != internal_default_instance() && roi_output_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::Rect& IpmParsingMsg::roi_output() const {
  const ::autodrive::workflow::proto::perception_base::Rect* p = roi_output_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingMsg.roi_output)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::Rect*>(
      &::autodrive::workflow::proto::perception_base::_Rect_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::Rect* IpmParsingMsg::release_roi_output() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmParsingMsg.roi_output)
  
  ::autodrive::workflow::proto::perception_base::Rect* temp = roi_output_;
  roi_output_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::Rect* IpmParsingMsg::mutable_roi_output() {
  
  if (roi_output_ == NULL) {
    roi_output_ = new ::autodrive::workflow::proto::perception_base::Rect;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmParsingMsg.roi_output)
  return roi_output_;
}
inline void IpmParsingMsg::set_allocated_roi_output(::autodrive::workflow::proto::perception_base::Rect* roi_output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(roi_output_);
  }
  if (roi_output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roi_output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roi_output, submessage_arena);
    }
    
  } else {
    
  }
  roi_output_ = roi_output;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmParsingMsg.roi_output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::IpmParsingLabel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::IpmParsingLabel>() {
  return ::autodrive::workflow::proto::IpmParsingLabel_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::FreeSpaceLabel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::FreeSpaceLabel>() {
  return ::autodrive::workflow::proto::FreeSpaceLabel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ipm_5fparsing_2eproto__INCLUDED
