// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_freespace.proto

#ifndef PROTOBUF_fusion_5ffreespace_2eproto__INCLUDED
#define PROTOBUF_fusion_5ffreespace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_fusion_5ffreespace_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFusionFreespacePointImpl();
void InitDefaultsFusionFreespacePoint();
void InitDefaultsFreespaceFusionImpl();
void InitDefaultsFreespaceFusion();
void InitDefaultsFreespaceFusionMsgImpl();
void InitDefaultsFreespaceFusionMsg();
inline void InitDefaults() {
  InitDefaultsFusionFreespacePoint();
  InitDefaultsFreespaceFusion();
  InitDefaultsFreespaceFusionMsg();
}
}  // namespace protobuf_fusion_5ffreespace_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class FreespaceFusion;
class FreespaceFusionDefaultTypeInternal;
extern FreespaceFusionDefaultTypeInternal _FreespaceFusion_default_instance_;
class FreespaceFusionMsg;
class FreespaceFusionMsgDefaultTypeInternal;
extern FreespaceFusionMsgDefaultTypeInternal _FreespaceFusionMsg_default_instance_;
class FusionFreespacePoint;
class FusionFreespacePointDefaultTypeInternal;
extern FusionFreespacePointDefaultTypeInternal _FusionFreespacePoint_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum FreespacePointLabel {
  kFreespacePointLabelRoad = 0,
  kFreespacePointLabelParkingLockOpen = 11,
  kFreespacePointLabelParkingLockClosed = 12,
  kFreespacePointLabelTrafficCone = 13,
  kFreespacePointLabelParkingRod = 14,
  kFreespacePointLabelCurb = 15,
  kFreespacePointLabelCementColumn = 16,
  kFreespacePointLabelImmovableObstacle = 17,
  kFreespacePointLabelMovableObstacle = 18,
  kFreespacePointLabelBackground = 19,
  kFreespacePointLabelSidewalk = 20,
  kFreespacePointLabelPedestrian = 21,
  kFreespacePointLabelDynamicObstacle = 22,
  kFreespacePointLabelUssObj = 27,
  kFreespacePointLabelUssCrossPoint = 28,
  kFreespacePointLabelUnknwn = 100,
  kFreespacePointLabelInvalid = 255,
  FreespacePointLabel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FreespacePointLabel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FreespacePointLabel_IsValid(int value);
const FreespacePointLabel FreespacePointLabel_MIN = kFreespacePointLabelRoad;
const FreespacePointLabel FreespacePointLabel_MAX = kFreespacePointLabelInvalid;
const int FreespacePointLabel_ARRAYSIZE = FreespacePointLabel_MAX + 1;

const ::google::protobuf::EnumDescriptor* FreespacePointLabel_descriptor();
inline const ::std::string& FreespacePointLabel_Name(FreespacePointLabel value) {
  return ::google::protobuf::internal::NameOfEnum(
    FreespacePointLabel_descriptor(), value);
}
inline bool FreespacePointLabel_Parse(
    const ::std::string& name, FreespacePointLabel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FreespacePointLabel>(
    FreespacePointLabel_descriptor(), name, value);
}
// ===================================================================

class FusionFreespacePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.FusionFreespacePoint) */ {
 public:
  FusionFreespacePoint();
  virtual ~FusionFreespacePoint();

  FusionFreespacePoint(const FusionFreespacePoint& from);

  inline FusionFreespacePoint& operator=(const FusionFreespacePoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FusionFreespacePoint(FusionFreespacePoint&& from) noexcept
    : FusionFreespacePoint() {
    *this = ::std::move(from);
  }

  inline FusionFreespacePoint& operator=(FusionFreespacePoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FusionFreespacePoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FusionFreespacePoint* internal_default_instance() {
    return reinterpret_cast<const FusionFreespacePoint*>(
               &_FusionFreespacePoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FusionFreespacePoint* other);
  friend void swap(FusionFreespacePoint& a, FusionFreespacePoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FusionFreespacePoint* New() const PROTOBUF_FINAL { return New(NULL); }

  FusionFreespacePoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FusionFreespacePoint& from);
  void MergeFrom(const FusionFreespacePoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FusionFreespacePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector2f pt_vcs = 6;
  bool has_pt_vcs() const;
  void clear_pt_vcs();
  static const int kPtVcsFieldNumber = 6;
  const ::autodrive::workflow::proto::Vector2f& pt_vcs() const;
  ::autodrive::workflow::proto::Vector2f* release_pt_vcs();
  ::autodrive::workflow::proto::Vector2f* mutable_pt_vcs();
  void set_allocated_pt_vcs(::autodrive::workflow::proto::Vector2f* pt_vcs);

  // .autodrive.workflow.proto.Vector2f vel_vcs = 7;
  bool has_vel_vcs() const;
  void clear_vel_vcs();
  static const int kVelVcsFieldNumber = 7;
  const ::autodrive::workflow::proto::Vector2f& vel_vcs() const;
  ::autodrive::workflow::proto::Vector2f* release_vel_vcs();
  ::autodrive::workflow::proto::Vector2f* mutable_vel_vcs();
  void set_allocated_vel_vcs(::autodrive::workflow::proto::Vector2f* vel_vcs);

  // .autodrive.workflow.proto.Vector2f pt_world = 8;
  bool has_pt_world() const;
  void clear_pt_world();
  static const int kPtWorldFieldNumber = 8;
  const ::autodrive::workflow::proto::Vector2f& pt_world() const;
  ::autodrive::workflow::proto::Vector2f* release_pt_world();
  ::autodrive::workflow::proto::Vector2f* mutable_pt_world();
  void set_allocated_pt_world(::autodrive::workflow::proto::Vector2f* pt_world);

  // .autodrive.workflow.proto.Vector2f vel_world = 9;
  bool has_vel_world() const;
  void clear_vel_world();
  static const int kVelWorldFieldNumber = 9;
  const ::autodrive::workflow::proto::Vector2f& vel_world() const;
  ::autodrive::workflow::proto::Vector2f* release_vel_world();
  ::autodrive::workflow::proto::Vector2f* mutable_vel_world();
  void set_allocated_vel_world(::autodrive::workflow::proto::Vector2f* vel_world);

  // float conf = 1;
  void clear_conf();
  static const int kConfFieldNumber = 1;
  float conf() const;
  void set_conf(float value);

  // float angle = 2;
  void clear_angle();
  static const int kAngleFieldNumber = 2;
  float angle() const;
  void set_angle(float value);

  // float ray_length = 3;
  void clear_ray_length();
  static const int kRayLengthFieldNumber = 3;
  float ray_length() const;
  void set_ray_length(float value);

  // uint32 origin_label = 4;
  void clear_origin_label();
  static const int kOriginLabelFieldNumber = 4;
  ::google::protobuf::uint32 origin_label() const;
  void set_origin_label(::google::protobuf::uint32 value);

  // .autodrive.workflow.proto.FreespacePointLabel label = 5;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::autodrive::workflow::proto::FreespacePointLabel label() const;
  void set_label(::autodrive::workflow::proto::FreespacePointLabel value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.FusionFreespacePoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector2f* pt_vcs_;
  ::autodrive::workflow::proto::Vector2f* vel_vcs_;
  ::autodrive::workflow::proto::Vector2f* pt_world_;
  ::autodrive::workflow::proto::Vector2f* vel_world_;
  float conf_;
  float angle_;
  float ray_length_;
  ::google::protobuf::uint32 origin_label_;
  int label_;
  mutable int _cached_size_;
  friend struct ::protobuf_fusion_5ffreespace_2eproto::TableStruct;
  friend void ::protobuf_fusion_5ffreespace_2eproto::InitDefaultsFusionFreespacePointImpl();
};
// -------------------------------------------------------------------

class FreespaceFusion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.FreespaceFusion) */ {
 public:
  FreespaceFusion();
  virtual ~FreespaceFusion();

  FreespaceFusion(const FreespaceFusion& from);

  inline FreespaceFusion& operator=(const FreespaceFusion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FreespaceFusion(FreespaceFusion&& from) noexcept
    : FreespaceFusion() {
    *this = ::std::move(from);
  }

  inline FreespaceFusion& operator=(FreespaceFusion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FreespaceFusion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreespaceFusion* internal_default_instance() {
    return reinterpret_cast<const FreespaceFusion*>(
               &_FreespaceFusion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FreespaceFusion* other);
  friend void swap(FreespaceFusion& a, FreespaceFusion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FreespaceFusion* New() const PROTOBUF_FINAL { return New(NULL); }

  FreespaceFusion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FreespaceFusion& from);
  void MergeFrom(const FreespaceFusion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FreespaceFusion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.FusionFreespacePoint freespace_points = 2;
  int freespace_points_size() const;
  void clear_freespace_points();
  static const int kFreespacePointsFieldNumber = 2;
  const ::autodrive::workflow::proto::FusionFreespacePoint& freespace_points(int index) const;
  ::autodrive::workflow::proto::FusionFreespacePoint* mutable_freespace_points(int index);
  ::autodrive::workflow::proto::FusionFreespacePoint* add_freespace_points();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FusionFreespacePoint >*
      mutable_freespace_points();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FusionFreespacePoint >&
      freespace_points() const;

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.FreespaceFusion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FusionFreespacePoint > freespace_points_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_fusion_5ffreespace_2eproto::TableStruct;
  friend void ::protobuf_fusion_5ffreespace_2eproto::InitDefaultsFreespaceFusionImpl();
};
// -------------------------------------------------------------------

class FreespaceFusionMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.FreespaceFusionMsg) */ {
 public:
  FreespaceFusionMsg();
  virtual ~FreespaceFusionMsg();

  FreespaceFusionMsg(const FreespaceFusionMsg& from);

  inline FreespaceFusionMsg& operator=(const FreespaceFusionMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FreespaceFusionMsg(FreespaceFusionMsg&& from) noexcept
    : FreespaceFusionMsg() {
    *this = ::std::move(from);
  }

  inline FreespaceFusionMsg& operator=(FreespaceFusionMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FreespaceFusionMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreespaceFusionMsg* internal_default_instance() {
    return reinterpret_cast<const FreespaceFusionMsg*>(
               &_FreespaceFusionMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FreespaceFusionMsg* other);
  friend void swap(FreespaceFusionMsg& a, FreespaceFusionMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FreespaceFusionMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  FreespaceFusionMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FreespaceFusionMsg& from);
  void MergeFrom(const FreespaceFusionMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FreespaceFusionMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.FreespaceFusion fusion_freespace = 3;
  bool has_fusion_freespace() const;
  void clear_fusion_freespace();
  static const int kFusionFreespaceFieldNumber = 3;
  const ::autodrive::workflow::proto::FreespaceFusion& fusion_freespace() const;
  ::autodrive::workflow::proto::FreespaceFusion* release_fusion_freespace();
  ::autodrive::workflow::proto::FreespaceFusion* mutable_fusion_freespace();
  void set_allocated_fusion_freespace(::autodrive::workflow::proto::FreespaceFusion* fusion_freespace);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.FreespaceFusionMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::FreespaceFusion* fusion_freespace_;
  mutable int _cached_size_;
  friend struct ::protobuf_fusion_5ffreespace_2eproto::TableStruct;
  friend void ::protobuf_fusion_5ffreespace_2eproto::InitDefaultsFreespaceFusionMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FusionFreespacePoint

// float conf = 1;
inline void FusionFreespacePoint::clear_conf() {
  conf_ = 0;
}
inline float FusionFreespacePoint::conf() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionFreespacePoint.conf)
  return conf_;
}
inline void FusionFreespacePoint::set_conf(float value) {
  
  conf_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionFreespacePoint.conf)
}

// float angle = 2;
inline void FusionFreespacePoint::clear_angle() {
  angle_ = 0;
}
inline float FusionFreespacePoint::angle() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionFreespacePoint.angle)
  return angle_;
}
inline void FusionFreespacePoint::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionFreespacePoint.angle)
}

// float ray_length = 3;
inline void FusionFreespacePoint::clear_ray_length() {
  ray_length_ = 0;
}
inline float FusionFreespacePoint::ray_length() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionFreespacePoint.ray_length)
  return ray_length_;
}
inline void FusionFreespacePoint::set_ray_length(float value) {
  
  ray_length_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionFreespacePoint.ray_length)
}

// uint32 origin_label = 4;
inline void FusionFreespacePoint::clear_origin_label() {
  origin_label_ = 0u;
}
inline ::google::protobuf::uint32 FusionFreespacePoint::origin_label() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionFreespacePoint.origin_label)
  return origin_label_;
}
inline void FusionFreespacePoint::set_origin_label(::google::protobuf::uint32 value) {
  
  origin_label_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionFreespacePoint.origin_label)
}

// .autodrive.workflow.proto.FreespacePointLabel label = 5;
inline void FusionFreespacePoint::clear_label() {
  label_ = 0;
}
inline ::autodrive::workflow::proto::FreespacePointLabel FusionFreespacePoint::label() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionFreespacePoint.label)
  return static_cast< ::autodrive::workflow::proto::FreespacePointLabel >(label_);
}
inline void FusionFreespacePoint::set_label(::autodrive::workflow::proto::FreespacePointLabel value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionFreespacePoint.label)
}

// .autodrive.workflow.proto.Vector2f pt_vcs = 6;
inline bool FusionFreespacePoint::has_pt_vcs() const {
  return this != internal_default_instance() && pt_vcs_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& FusionFreespacePoint::pt_vcs() const {
  const ::autodrive::workflow::proto::Vector2f* p = pt_vcs_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionFreespacePoint.pt_vcs)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* FusionFreespacePoint::release_pt_vcs() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FusionFreespacePoint.pt_vcs)
  
  ::autodrive::workflow::proto::Vector2f* temp = pt_vcs_;
  pt_vcs_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* FusionFreespacePoint::mutable_pt_vcs() {
  
  if (pt_vcs_ == NULL) {
    pt_vcs_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FusionFreespacePoint.pt_vcs)
  return pt_vcs_;
}
inline void FusionFreespacePoint::set_allocated_pt_vcs(::autodrive::workflow::proto::Vector2f* pt_vcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pt_vcs_);
  }
  if (pt_vcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pt_vcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt_vcs, submessage_arena);
    }
    
  } else {
    
  }
  pt_vcs_ = pt_vcs;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FusionFreespacePoint.pt_vcs)
}

// .autodrive.workflow.proto.Vector2f vel_vcs = 7;
inline bool FusionFreespacePoint::has_vel_vcs() const {
  return this != internal_default_instance() && vel_vcs_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& FusionFreespacePoint::vel_vcs() const {
  const ::autodrive::workflow::proto::Vector2f* p = vel_vcs_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionFreespacePoint.vel_vcs)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* FusionFreespacePoint::release_vel_vcs() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FusionFreespacePoint.vel_vcs)
  
  ::autodrive::workflow::proto::Vector2f* temp = vel_vcs_;
  vel_vcs_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* FusionFreespacePoint::mutable_vel_vcs() {
  
  if (vel_vcs_ == NULL) {
    vel_vcs_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FusionFreespacePoint.vel_vcs)
  return vel_vcs_;
}
inline void FusionFreespacePoint::set_allocated_vel_vcs(::autodrive::workflow::proto::Vector2f* vel_vcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vel_vcs_);
  }
  if (vel_vcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vel_vcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vel_vcs, submessage_arena);
    }
    
  } else {
    
  }
  vel_vcs_ = vel_vcs;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FusionFreespacePoint.vel_vcs)
}

// .autodrive.workflow.proto.Vector2f pt_world = 8;
inline bool FusionFreespacePoint::has_pt_world() const {
  return this != internal_default_instance() && pt_world_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& FusionFreespacePoint::pt_world() const {
  const ::autodrive::workflow::proto::Vector2f* p = pt_world_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionFreespacePoint.pt_world)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* FusionFreespacePoint::release_pt_world() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FusionFreespacePoint.pt_world)
  
  ::autodrive::workflow::proto::Vector2f* temp = pt_world_;
  pt_world_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* FusionFreespacePoint::mutable_pt_world() {
  
  if (pt_world_ == NULL) {
    pt_world_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FusionFreespacePoint.pt_world)
  return pt_world_;
}
inline void FusionFreespacePoint::set_allocated_pt_world(::autodrive::workflow::proto::Vector2f* pt_world) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pt_world_);
  }
  if (pt_world) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pt_world = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt_world, submessage_arena);
    }
    
  } else {
    
  }
  pt_world_ = pt_world;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FusionFreespacePoint.pt_world)
}

// .autodrive.workflow.proto.Vector2f vel_world = 9;
inline bool FusionFreespacePoint::has_vel_world() const {
  return this != internal_default_instance() && vel_world_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& FusionFreespacePoint::vel_world() const {
  const ::autodrive::workflow::proto::Vector2f* p = vel_world_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionFreespacePoint.vel_world)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* FusionFreespacePoint::release_vel_world() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FusionFreespacePoint.vel_world)
  
  ::autodrive::workflow::proto::Vector2f* temp = vel_world_;
  vel_world_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* FusionFreespacePoint::mutable_vel_world() {
  
  if (vel_world_ == NULL) {
    vel_world_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FusionFreespacePoint.vel_world)
  return vel_world_;
}
inline void FusionFreespacePoint::set_allocated_vel_world(::autodrive::workflow::proto::Vector2f* vel_world) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vel_world_);
  }
  if (vel_world) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vel_world = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vel_world, submessage_arena);
    }
    
  } else {
    
  }
  vel_world_ = vel_world;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FusionFreespacePoint.vel_world)
}

// -------------------------------------------------------------------

// FreespaceFusion

// int64 timestamp = 1;
inline void FreespaceFusion::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FreespaceFusion::timestamp() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FreespaceFusion.timestamp)
  return timestamp_;
}
inline void FreespaceFusion::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FreespaceFusion.timestamp)
}

// repeated .autodrive.workflow.proto.FusionFreespacePoint freespace_points = 2;
inline int FreespaceFusion::freespace_points_size() const {
  return freespace_points_.size();
}
inline void FreespaceFusion::clear_freespace_points() {
  freespace_points_.Clear();
}
inline const ::autodrive::workflow::proto::FusionFreespacePoint& FreespaceFusion::freespace_points(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FreespaceFusion.freespace_points)
  return freespace_points_.Get(index);
}
inline ::autodrive::workflow::proto::FusionFreespacePoint* FreespaceFusion::mutable_freespace_points(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FreespaceFusion.freespace_points)
  return freespace_points_.Mutable(index);
}
inline ::autodrive::workflow::proto::FusionFreespacePoint* FreespaceFusion::add_freespace_points() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.FreespaceFusion.freespace_points)
  return freespace_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FusionFreespacePoint >*
FreespaceFusion::mutable_freespace_points() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.FreespaceFusion.freespace_points)
  return &freespace_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FusionFreespacePoint >&
FreespaceFusion::freespace_points() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.FreespaceFusion.freespace_points)
  return freespace_points_;
}

// -------------------------------------------------------------------

// FreespaceFusionMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool FreespaceFusionMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& FreespaceFusionMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FreespaceFusionMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* FreespaceFusionMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FreespaceFusionMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* FreespaceFusionMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FreespaceFusionMsg.header)
  return header_;
}
inline void FreespaceFusionMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FreespaceFusionMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool FreespaceFusionMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& FreespaceFusionMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FreespaceFusionMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* FreespaceFusionMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FreespaceFusionMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* FreespaceFusionMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FreespaceFusionMsg.error)
  return error_;
}
inline void FreespaceFusionMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FreespaceFusionMsg.error)
}

// .autodrive.workflow.proto.FreespaceFusion fusion_freespace = 3;
inline bool FreespaceFusionMsg::has_fusion_freespace() const {
  return this != internal_default_instance() && fusion_freespace_ != NULL;
}
inline void FreespaceFusionMsg::clear_fusion_freespace() {
  if (GetArenaNoVirtual() == NULL && fusion_freespace_ != NULL) {
    delete fusion_freespace_;
  }
  fusion_freespace_ = NULL;
}
inline const ::autodrive::workflow::proto::FreespaceFusion& FreespaceFusionMsg::fusion_freespace() const {
  const ::autodrive::workflow::proto::FreespaceFusion* p = fusion_freespace_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FreespaceFusionMsg.fusion_freespace)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::FreespaceFusion*>(
      &::autodrive::workflow::proto::_FreespaceFusion_default_instance_);
}
inline ::autodrive::workflow::proto::FreespaceFusion* FreespaceFusionMsg::release_fusion_freespace() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FreespaceFusionMsg.fusion_freespace)
  
  ::autodrive::workflow::proto::FreespaceFusion* temp = fusion_freespace_;
  fusion_freespace_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::FreespaceFusion* FreespaceFusionMsg::mutable_fusion_freespace() {
  
  if (fusion_freespace_ == NULL) {
    fusion_freespace_ = new ::autodrive::workflow::proto::FreespaceFusion;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FreespaceFusionMsg.fusion_freespace)
  return fusion_freespace_;
}
inline void FreespaceFusionMsg::set_allocated_fusion_freespace(::autodrive::workflow::proto::FreespaceFusion* fusion_freespace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fusion_freespace_;
  }
  if (fusion_freespace) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fusion_freespace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fusion_freespace, submessage_arena);
    }
    
  } else {
    
  }
  fusion_freespace_ = fusion_freespace;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FreespaceFusionMsg.fusion_freespace)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::FreespacePointLabel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::FreespacePointLabel>() {
  return ::autodrive::workflow::proto::FreespacePointLabel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fusion_5ffreespace_2eproto__INCLUDED
