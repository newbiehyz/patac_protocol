// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speed_bump.proto

#include "speed_bump.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class SpeedBumpsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedBumps>
      _instance;
} _SpeedBumps_default_instance_;
class SpeedBumpsMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedBumpsMsg>
      _instance;
} _SpeedBumpsMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_speed_5fbump_2eproto {
void InitDefaultsSpeedBumpsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector2f();
  {
    void* ptr = &::autodrive::workflow::proto::_SpeedBumps_default_instance_;
    new (ptr) ::autodrive::workflow::proto::SpeedBumps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::SpeedBumps::InitAsDefaultInstance();
}

void InitDefaultsSpeedBumps() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeedBumpsImpl);
}

void InitDefaultsSpeedBumpsMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_speed_5fbump_2eproto::InitDefaultsSpeedBumps();
  {
    void* ptr = &::autodrive::workflow::proto::_SpeedBumpsMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::SpeedBumpsMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::SpeedBumpsMsg::InitAsDefaultInstance();
}

void InitDefaultsSpeedBumpsMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeedBumpsMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumps, speed_bump_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumps, p_0_vcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumps, p_1_vcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumps, p_2_vcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumps, p_3_vcs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumpsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumpsMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumpsMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumpsMsg, speed_bump_nums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpeedBumpsMsg, speed_bump_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::SpeedBumps)},
  { 10, -1, sizeof(::autodrive::workflow::proto::SpeedBumpsMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_SpeedBumps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_SpeedBumpsMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "speed_bump.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020speed_bump.proto\022\030autodrive.workflow.p"
      "roto\032\013basic.proto\032\014common.proto\"\367\001\n\nSpee"
      "dBumps\022\025\n\rspeed_bump_id\030\001 \001(\r\0223\n\007p_0_vcs"
      "\030\002 \001(\0132\".autodrive.workflow.proto.Vector"
      "2f\0223\n\007p_1_vcs\030\003 \001(\0132\".autodrive.workflow"
      ".proto.Vector2f\0223\n\007p_2_vcs\030\004 \001(\0132\".autod"
      "rive.workflow.proto.Vector2f\0223\n\007p_3_vcs\030"
      "\005 \001(\0132\".autodrive.workflow.proto.Vector2"
      "f\"\314\001\n\rSpeedBumpsMsg\0223\n\006header\030\001 \001(\0132#.au"
      "todrive.workflow.proto.MsgHeader\022.\n\005erro"
      "r\030\002 \001(\0132\037.autodrive.workflow.proto.Error"
      "\022\027\n\017speed_bump_nums\030\003 \001(\r\022=\n\017speed_bump_"
      "list\030\004 \003(\0132$.autodrive.workflow.proto.Sp"
      "eedBumpsb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 536);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "speed_bump.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_speed_5fbump_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void SpeedBumps::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_SpeedBumps_default_instance_._instance.get_mutable()->p_0_vcs_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedBumps_default_instance_._instance.get_mutable()->p_1_vcs_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedBumps_default_instance_._instance.get_mutable()->p_2_vcs_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedBumps_default_instance_._instance.get_mutable()->p_3_vcs_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
}
void SpeedBumps::clear_p_0_vcs() {
  if (GetArenaNoVirtual() == NULL && p_0_vcs_ != NULL) {
    delete p_0_vcs_;
  }
  p_0_vcs_ = NULL;
}
void SpeedBumps::clear_p_1_vcs() {
  if (GetArenaNoVirtual() == NULL && p_1_vcs_ != NULL) {
    delete p_1_vcs_;
  }
  p_1_vcs_ = NULL;
}
void SpeedBumps::clear_p_2_vcs() {
  if (GetArenaNoVirtual() == NULL && p_2_vcs_ != NULL) {
    delete p_2_vcs_;
  }
  p_2_vcs_ = NULL;
}
void SpeedBumps::clear_p_3_vcs() {
  if (GetArenaNoVirtual() == NULL && p_3_vcs_ != NULL) {
    delete p_3_vcs_;
  }
  p_3_vcs_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedBumps::kSpeedBumpIdFieldNumber;
const int SpeedBumps::kP0VcsFieldNumber;
const int SpeedBumps::kP1VcsFieldNumber;
const int SpeedBumps::kP2VcsFieldNumber;
const int SpeedBumps::kP3VcsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedBumps::SpeedBumps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_speed_5fbump_2eproto::InitDefaultsSpeedBumps();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.SpeedBumps)
}
SpeedBumps::SpeedBumps(const SpeedBumps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_p_0_vcs()) {
    p_0_vcs_ = new ::autodrive::workflow::proto::Vector2f(*from.p_0_vcs_);
  } else {
    p_0_vcs_ = NULL;
  }
  if (from.has_p_1_vcs()) {
    p_1_vcs_ = new ::autodrive::workflow::proto::Vector2f(*from.p_1_vcs_);
  } else {
    p_1_vcs_ = NULL;
  }
  if (from.has_p_2_vcs()) {
    p_2_vcs_ = new ::autodrive::workflow::proto::Vector2f(*from.p_2_vcs_);
  } else {
    p_2_vcs_ = NULL;
  }
  if (from.has_p_3_vcs()) {
    p_3_vcs_ = new ::autodrive::workflow::proto::Vector2f(*from.p_3_vcs_);
  } else {
    p_3_vcs_ = NULL;
  }
  speed_bump_id_ = from.speed_bump_id_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.SpeedBumps)
}

void SpeedBumps::SharedCtor() {
  ::memset(&p_0_vcs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_bump_id_) -
      reinterpret_cast<char*>(&p_0_vcs_)) + sizeof(speed_bump_id_));
  _cached_size_ = 0;
}

SpeedBumps::~SpeedBumps() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.SpeedBumps)
  SharedDtor();
}

void SpeedBumps::SharedDtor() {
  if (this != internal_default_instance()) delete p_0_vcs_;
  if (this != internal_default_instance()) delete p_1_vcs_;
  if (this != internal_default_instance()) delete p_2_vcs_;
  if (this != internal_default_instance()) delete p_3_vcs_;
}

void SpeedBumps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedBumps::descriptor() {
  ::protobuf_speed_5fbump_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_speed_5fbump_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedBumps& SpeedBumps::default_instance() {
  ::protobuf_speed_5fbump_2eproto::InitDefaultsSpeedBumps();
  return *internal_default_instance();
}

SpeedBumps* SpeedBumps::New(::google::protobuf::Arena* arena) const {
  SpeedBumps* n = new SpeedBumps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedBumps::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.SpeedBumps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && p_0_vcs_ != NULL) {
    delete p_0_vcs_;
  }
  p_0_vcs_ = NULL;
  if (GetArenaNoVirtual() == NULL && p_1_vcs_ != NULL) {
    delete p_1_vcs_;
  }
  p_1_vcs_ = NULL;
  if (GetArenaNoVirtual() == NULL && p_2_vcs_ != NULL) {
    delete p_2_vcs_;
  }
  p_2_vcs_ = NULL;
  if (GetArenaNoVirtual() == NULL && p_3_vcs_ != NULL) {
    delete p_3_vcs_;
  }
  p_3_vcs_ = NULL;
  speed_bump_id_ = 0u;
  _internal_metadata_.Clear();
}

bool SpeedBumps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.SpeedBumps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 speed_bump_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_bump_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f p_0_vcs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p_0_vcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f p_1_vcs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p_1_vcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f p_2_vcs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p_2_vcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f p_3_vcs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p_3_vcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.SpeedBumps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.SpeedBumps)
  return false;
#undef DO_
}

void SpeedBumps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.SpeedBumps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed_bump_id = 1;
  if (this->speed_bump_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->speed_bump_id(), output);
  }

  // .autodrive.workflow.proto.Vector2f p_0_vcs = 2;
  if (this->has_p_0_vcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->p_0_vcs_, output);
  }

  // .autodrive.workflow.proto.Vector2f p_1_vcs = 3;
  if (this->has_p_1_vcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->p_1_vcs_, output);
  }

  // .autodrive.workflow.proto.Vector2f p_2_vcs = 4;
  if (this->has_p_2_vcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->p_2_vcs_, output);
  }

  // .autodrive.workflow.proto.Vector2f p_3_vcs = 5;
  if (this->has_p_3_vcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->p_3_vcs_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.SpeedBumps)
}

::google::protobuf::uint8* SpeedBumps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.SpeedBumps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 speed_bump_id = 1;
  if (this->speed_bump_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->speed_bump_id(), target);
  }

  // .autodrive.workflow.proto.Vector2f p_0_vcs = 2;
  if (this->has_p_0_vcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->p_0_vcs_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f p_1_vcs = 3;
  if (this->has_p_1_vcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->p_1_vcs_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f p_2_vcs = 4;
  if (this->has_p_2_vcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->p_2_vcs_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f p_3_vcs = 5;
  if (this->has_p_3_vcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->p_3_vcs_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.SpeedBumps)
  return target;
}

size_t SpeedBumps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.SpeedBumps)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector2f p_0_vcs = 2;
  if (this->has_p_0_vcs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->p_0_vcs_);
  }

  // .autodrive.workflow.proto.Vector2f p_1_vcs = 3;
  if (this->has_p_1_vcs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->p_1_vcs_);
  }

  // .autodrive.workflow.proto.Vector2f p_2_vcs = 4;
  if (this->has_p_2_vcs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->p_2_vcs_);
  }

  // .autodrive.workflow.proto.Vector2f p_3_vcs = 5;
  if (this->has_p_3_vcs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->p_3_vcs_);
  }

  // uint32 speed_bump_id = 1;
  if (this->speed_bump_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed_bump_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedBumps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.SpeedBumps)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBumps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedBumps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.SpeedBumps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.SpeedBumps)
    MergeFrom(*source);
  }
}

void SpeedBumps::MergeFrom(const SpeedBumps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.SpeedBumps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_p_0_vcs()) {
    mutable_p_0_vcs()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.p_0_vcs());
  }
  if (from.has_p_1_vcs()) {
    mutable_p_1_vcs()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.p_1_vcs());
  }
  if (from.has_p_2_vcs()) {
    mutable_p_2_vcs()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.p_2_vcs());
  }
  if (from.has_p_3_vcs()) {
    mutable_p_3_vcs()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.p_3_vcs());
  }
  if (from.speed_bump_id() != 0) {
    set_speed_bump_id(from.speed_bump_id());
  }
}

void SpeedBumps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.SpeedBumps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBumps::CopyFrom(const SpeedBumps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.SpeedBumps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBumps::IsInitialized() const {
  return true;
}

void SpeedBumps::Swap(SpeedBumps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedBumps::InternalSwap(SpeedBumps* other) {
  using std::swap;
  swap(p_0_vcs_, other->p_0_vcs_);
  swap(p_1_vcs_, other->p_1_vcs_);
  swap(p_2_vcs_, other->p_2_vcs_);
  swap(p_3_vcs_, other->p_3_vcs_);
  swap(speed_bump_id_, other->speed_bump_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedBumps::GetMetadata() const {
  protobuf_speed_5fbump_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_speed_5fbump_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedBumpsMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_SpeedBumpsMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_SpeedBumpsMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void SpeedBumpsMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void SpeedBumpsMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedBumpsMsg::kHeaderFieldNumber;
const int SpeedBumpsMsg::kErrorFieldNumber;
const int SpeedBumpsMsg::kSpeedBumpNumsFieldNumber;
const int SpeedBumpsMsg::kSpeedBumpListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedBumpsMsg::SpeedBumpsMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_speed_5fbump_2eproto::InitDefaultsSpeedBumpsMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.SpeedBumpsMsg)
}
SpeedBumpsMsg::SpeedBumpsMsg(const SpeedBumpsMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      speed_bump_list_(from.speed_bump_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  speed_bump_nums_ = from.speed_bump_nums_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.SpeedBumpsMsg)
}

void SpeedBumpsMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_bump_nums_) -
      reinterpret_cast<char*>(&header_)) + sizeof(speed_bump_nums_));
  _cached_size_ = 0;
}

SpeedBumpsMsg::~SpeedBumpsMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.SpeedBumpsMsg)
  SharedDtor();
}

void SpeedBumpsMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void SpeedBumpsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedBumpsMsg::descriptor() {
  ::protobuf_speed_5fbump_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_speed_5fbump_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedBumpsMsg& SpeedBumpsMsg::default_instance() {
  ::protobuf_speed_5fbump_2eproto::InitDefaultsSpeedBumpsMsg();
  return *internal_default_instance();
}

SpeedBumpsMsg* SpeedBumpsMsg::New(::google::protobuf::Arena* arena) const {
  SpeedBumpsMsg* n = new SpeedBumpsMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedBumpsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.SpeedBumpsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_bump_list_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  speed_bump_nums_ = 0u;
  _internal_metadata_.Clear();
}

bool SpeedBumpsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.SpeedBumpsMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed_bump_nums = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_bump_nums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.SpeedBumps speed_bump_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_speed_bump_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.SpeedBumpsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.SpeedBumpsMsg)
  return false;
#undef DO_
}

void SpeedBumpsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.SpeedBumpsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // uint32 speed_bump_nums = 3;
  if (this->speed_bump_nums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->speed_bump_nums(), output);
  }

  // repeated .autodrive.workflow.proto.SpeedBumps speed_bump_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_bump_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->speed_bump_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.SpeedBumpsMsg)
}

::google::protobuf::uint8* SpeedBumpsMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.SpeedBumpsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // uint32 speed_bump_nums = 3;
  if (this->speed_bump_nums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->speed_bump_nums(), target);
  }

  // repeated .autodrive.workflow.proto.SpeedBumps speed_bump_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_bump_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->speed_bump_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.SpeedBumpsMsg)
  return target;
}

size_t SpeedBumpsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.SpeedBumpsMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.SpeedBumps speed_bump_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->speed_bump_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->speed_bump_list(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // uint32 speed_bump_nums = 3;
  if (this->speed_bump_nums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed_bump_nums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedBumpsMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.SpeedBumpsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBumpsMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedBumpsMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.SpeedBumpsMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.SpeedBumpsMsg)
    MergeFrom(*source);
  }
}

void SpeedBumpsMsg::MergeFrom(const SpeedBumpsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.SpeedBumpsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_bump_list_.MergeFrom(from.speed_bump_list_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.speed_bump_nums() != 0) {
    set_speed_bump_nums(from.speed_bump_nums());
  }
}

void SpeedBumpsMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.SpeedBumpsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBumpsMsg::CopyFrom(const SpeedBumpsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.SpeedBumpsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBumpsMsg::IsInitialized() const {
  return true;
}

void SpeedBumpsMsg::Swap(SpeedBumpsMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedBumpsMsg::InternalSwap(SpeedBumpsMsg* other) {
  using std::swap;
  speed_bump_list_.InternalSwap(&other->speed_bump_list_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(speed_bump_nums_, other->speed_bump_nums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedBumpsMsg::GetMetadata() const {
  protobuf_speed_5fbump_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_speed_5fbump_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
