// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: static_obstacles.proto

#include "static_obstacles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class StaticObstacleAttrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticObstacleAttr>
      _instance;
} _StaticObstacleAttr_default_instance_;
class StaticObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticObstacle>
      _instance;
} _StaticObstacle_default_instance_;
class StaticObstaclesMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticObstaclesMsg>
      _instance;
} _StaticObstaclesMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_static_5fobstacles_2eproto {
void InitDefaultsStaticObstacleAttrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsImageSpace();
  {
    void* ptr = &::autodrive::workflow::proto::_StaticObstacleAttr_default_instance_;
    new (ptr) ::autodrive::workflow::proto::StaticObstacleAttr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::StaticObstacleAttr::InitAsDefaultInstance();
}

void InitDefaultsStaticObstacleAttr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStaticObstacleAttrImpl);
}

void InitDefaultsStaticObstacleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsPolygon();
  protobuf_static_5fobstacles_2eproto::InitDefaultsStaticObstacleAttr();
  protobuf_basic_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::autodrive::workflow::proto::_StaticObstacle_default_instance_;
    new (ptr) ::autodrive::workflow::proto::StaticObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::StaticObstacle::InitAsDefaultInstance();
}

void InitDefaultsStaticObstacle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStaticObstacleImpl);
}

void InitDefaultsStaticObstaclesMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_static_5fobstacles_2eproto::InitDefaultsStaticObstacle();
  {
    void* ptr = &::autodrive::workflow::proto::_StaticObstaclesMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::StaticObstaclesMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::StaticObstaclesMsg::InitAsDefaultInstance();
}

void InitDefaultsStaticObstaclesMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStaticObstaclesMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, cycle_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, traversable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, dynamic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacleAttr, img_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, cam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, sub_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, border_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, life_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, str_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, attr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstacle, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstaclesMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstaclesMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstaclesMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstaclesMsg, conf_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StaticObstaclesMsg, static_obstacles_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::StaticObstacleAttr)},
  { 14, -1, sizeof(::autodrive::workflow::proto::StaticObstacle)},
  { 31, -1, sizeof(::autodrive::workflow::proto::StaticObstaclesMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_StaticObstacleAttr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_StaticObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_StaticObstaclesMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "static_obstacles.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026static_obstacles.proto\022\030autodrive.work"
      "flow.proto\032\013basic.proto\032\014common.proto\032\025p"
      "erception_base.proto\"\344\001\n\022StaticObstacleA"
      "ttr\022\r\n\005shape\030\001 \001(\005\022\022\n\ncycle_time\030\002 \001(\002\022\023"
      "\n\013traversable\030\003 \001(\005\022\016\n\006height\030\004 \001(\002\022\016\n\006r"
      "adius\030\005 \001(\002\022\016\n\006status\030\006 \001(\005\022\r\n\005value\030\007 \001"
      "(\t\022\017\n\007dynamic\030\010 \001(\010\022F\n\010img_info\030\t \001(\01324."
      "autodrive.workflow.proto.perception_base"
      ".ImageSpace\"\262\003\n\016StaticObstacle\022\n\n\002id\030\001 \001"
      "(\005\022\016\n\006cam_id\030\002 \001(\005\022\022\n\ntime_stamp\030\003 \001(\003\022\014"
      "\n\004conf\030\004 \001(\005\022:\n\004type\030\005 \001(\0162,.autodrive.w"
      "orkflow.proto.StaticObstacleType\022A\n\010sub_"
      "type\030\006 \001(\0162/.autodrive.workflow.proto.St"
      "aticObstacleSubType\022A\n\006border\030\007 \001(\01321.au"
      "todrive.workflow.proto.perception_base.P"
      "olygon\022\021\n\tlife_time\030\010 \001(\005\022\013\n\003age\030\t \001(\005\022\016"
      "\n\006str_id\030\n \001(\t\022:\n\004attr\030\013 \001(\0132,.autodrive"
      ".workflow.proto.StaticObstacleAttr\0224\n\010po"
      "sition\030\014 \001(\0132\".autodrive.workflow.proto."
      "Vector3f\"\321\001\n\022StaticObstaclesMsg\0223\n\006heade"
      "r\030\001 \001(\0132#.autodrive.workflow.proto.MsgHe"
      "ader\022.\n\005error\030\002 \001(\0132\037.autodrive.workflow"
      ".proto.Error\022\022\n\nconf_scale\030\003 \001(\002\022B\n\020stat"
      "ic_obstacles\030\004 \003(\0132(.autodrive.workflow."
      "proto.StaticObstacle*\266\005\n\022StaticObstacleT"
      "ype\022\036\n\032kStaticObstacleTypeUnknown\020\000\022\"\n\036k"
      "StaticObstacleTypeTrafficCone\020\001\022\037\n\033kStat"
      "icObstacleTypeParkLock\020\002\022\"\n\036kStaticObsta"
      "cleTypeTrafficSign\020\003\022#\n\037kStaticObstacleT"
      "ypeTrafficLight\020\004\022#\n\037kStaticObstacleType"
      "VerticalPole\020\005\022!\n\035kStaticObstacleTypePar"
      "kColumn\020\006\022%\n!kStaticObstacleTypeParkAFra"
      "meSign\020\007\022\036\n\032kStaticObstacleTypeParkBox\020\010"
      "\022!\n\035kStaticObstacleTypeParkBarrel\020\t\022#\n\037k"
      "StaticObstacleTypeWaterBarrier\020\n\022%\n!kSta"
      "ticObstacleTypeTrafficBollard\020\013\022\036\n\032kStat"
      "icObstacleTypeTrolley\020\014\022\"\n\036kStaticObstac"
      "leTypeFireHydrant\020\r\022#\n\037kStaticObstacleTy"
      "peCementSphere\020\016\022#\n\037kStaticObstacleTypeC"
      "hargingPile\020\017\022 \n\034kStaticObstacleTypeRefl"
      "ector\020\020\022&\n\"kStaticObstacleTypeDistributi"
      "onBox\020\021\022\034\n\030kStaticObstacleTypeFence\020\022*\373\001"
      "\n\025StaticObstacleSubType\022-\n)kStaticObstac"
      "leSubTypeParkLockTypeUnknown\020\000\022*\n&kStati"
      "cObstacleSubTypeParkLockTypeOpen\020\001\022+\n\'kS"
      "taticObstacleSubTypeParkLockTypeClose\020\002\022"
      ",\n(kStaticObstacleSubTypeFireHydrantType"
      "Air\020\003\022,\n(kStaticObstacleSubTypeFireHydra"
      "ntTypeGnd\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1939);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "static_obstacles.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_static_5fobstacles_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* StaticObstacleType_descriptor() {
  protobuf_static_5fobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_static_5fobstacles_2eproto::file_level_enum_descriptors[0];
}
bool StaticObstacleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StaticObstacleSubType_descriptor() {
  protobuf_static_5fobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_static_5fobstacles_2eproto::file_level_enum_descriptors[1];
}
bool StaticObstacleSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StaticObstacleAttr::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_StaticObstacleAttr_default_instance_._instance.get_mutable()->img_info_ = const_cast< ::autodrive::workflow::proto::perception_base::ImageSpace*>(
      ::autodrive::workflow::proto::perception_base::ImageSpace::internal_default_instance());
}
void StaticObstacleAttr::clear_img_info() {
  if (GetArenaNoVirtual() == NULL && img_info_ != NULL) {
    delete img_info_;
  }
  img_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObstacleAttr::kShapeFieldNumber;
const int StaticObstacleAttr::kCycleTimeFieldNumber;
const int StaticObstacleAttr::kTraversableFieldNumber;
const int StaticObstacleAttr::kHeightFieldNumber;
const int StaticObstacleAttr::kRadiusFieldNumber;
const int StaticObstacleAttr::kStatusFieldNumber;
const int StaticObstacleAttr::kValueFieldNumber;
const int StaticObstacleAttr::kDynamicFieldNumber;
const int StaticObstacleAttr::kImgInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObstacleAttr::StaticObstacleAttr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_static_5fobstacles_2eproto::InitDefaultsStaticObstacleAttr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.StaticObstacleAttr)
}
StaticObstacleAttr::StaticObstacleAttr(const StaticObstacleAttr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_img_info()) {
    img_info_ = new ::autodrive::workflow::proto::perception_base::ImageSpace(*from.img_info_);
  } else {
    img_info_ = NULL;
  }
  ::memcpy(&shape_, &from.shape_,
    static_cast<size_t>(reinterpret_cast<char*>(&dynamic_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(dynamic_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.StaticObstacleAttr)
}

void StaticObstacleAttr::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&img_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dynamic_) -
      reinterpret_cast<char*>(&img_info_)) + sizeof(dynamic_));
  _cached_size_ = 0;
}

StaticObstacleAttr::~StaticObstacleAttr() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.StaticObstacleAttr)
  SharedDtor();
}

void StaticObstacleAttr::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete img_info_;
}

void StaticObstacleAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticObstacleAttr::descriptor() {
  ::protobuf_static_5fobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_static_5fobstacles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticObstacleAttr& StaticObstacleAttr::default_instance() {
  ::protobuf_static_5fobstacles_2eproto::InitDefaultsStaticObstacleAttr();
  return *internal_default_instance();
}

StaticObstacleAttr* StaticObstacleAttr::New(::google::protobuf::Arena* arena) const {
  StaticObstacleAttr* n = new StaticObstacleAttr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaticObstacleAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.StaticObstacleAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && img_info_ != NULL) {
    delete img_info_;
  }
  img_info_ = NULL;
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dynamic_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(dynamic_));
  _internal_metadata_.Clear();
}

bool StaticObstacleAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.StaticObstacleAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shape_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cycle_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cycle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 traversable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traversable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float radius = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.StaticObstacleAttr.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dynamic = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dynamic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_img_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.StaticObstacleAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.StaticObstacleAttr)
  return false;
#undef DO_
}

void StaticObstacleAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.StaticObstacleAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shape = 1;
  if (this->shape() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shape(), output);
  }

  // float cycle_time = 2;
  if (this->cycle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cycle_time(), output);
  }

  // int32 traversable = 3;
  if (this->traversable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->traversable(), output);
  }

  // float height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // float radius = 5;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->radius(), output);
  }

  // int32 status = 6;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // string value = 7;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.StaticObstacleAttr.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->value(), output);
  }

  // bool dynamic = 8;
  if (this->dynamic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->dynamic(), output);
  }

  // .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
  if (this->has_img_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->img_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.StaticObstacleAttr)
}

::google::protobuf::uint8* StaticObstacleAttr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.StaticObstacleAttr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shape = 1;
  if (this->shape() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shape(), target);
  }

  // float cycle_time = 2;
  if (this->cycle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cycle_time(), target);
  }

  // int32 traversable = 3;
  if (this->traversable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->traversable(), target);
  }

  // float height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // float radius = 5;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->radius(), target);
  }

  // int32 status = 6;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // string value = 7;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.StaticObstacleAttr.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->value(), target);
  }

  // bool dynamic = 8;
  if (this->dynamic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->dynamic(), target);
  }

  // .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
  if (this->has_img_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->img_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.StaticObstacleAttr)
  return target;
}

size_t StaticObstacleAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.StaticObstacleAttr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string value = 7;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
  if (this->has_img_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->img_info_);
  }

  // int32 shape = 1;
  if (this->shape() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shape());
  }

  // float cycle_time = 2;
  if (this->cycle_time() != 0) {
    total_size += 1 + 4;
  }

  // int32 traversable = 3;
  if (this->traversable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->traversable());
  }

  // float height = 4;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float radius = 5;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // int32 status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // bool dynamic = 8;
  if (this->dynamic() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticObstacleAttr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.StaticObstacleAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObstacleAttr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObstacleAttr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.StaticObstacleAttr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.StaticObstacleAttr)
    MergeFrom(*source);
  }
}

void StaticObstacleAttr::MergeFrom(const StaticObstacleAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.StaticObstacleAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_img_info()) {
    mutable_img_info()->::autodrive::workflow::proto::perception_base::ImageSpace::MergeFrom(from.img_info());
  }
  if (from.shape() != 0) {
    set_shape(from.shape());
  }
  if (from.cycle_time() != 0) {
    set_cycle_time(from.cycle_time());
  }
  if (from.traversable() != 0) {
    set_traversable(from.traversable());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.dynamic() != 0) {
    set_dynamic(from.dynamic());
  }
}

void StaticObstacleAttr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.StaticObstacleAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObstacleAttr::CopyFrom(const StaticObstacleAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.StaticObstacleAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObstacleAttr::IsInitialized() const {
  return true;
}

void StaticObstacleAttr::Swap(StaticObstacleAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticObstacleAttr::InternalSwap(StaticObstacleAttr* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(img_info_, other->img_info_);
  swap(shape_, other->shape_);
  swap(cycle_time_, other->cycle_time_);
  swap(traversable_, other->traversable_);
  swap(height_, other->height_);
  swap(radius_, other->radius_);
  swap(status_, other->status_);
  swap(dynamic_, other->dynamic_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticObstacleAttr::GetMetadata() const {
  protobuf_static_5fobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_static_5fobstacles_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticObstacle::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_StaticObstacle_default_instance_._instance.get_mutable()->border_ = const_cast< ::autodrive::workflow::proto::perception_base::Polygon*>(
      ::autodrive::workflow::proto::perception_base::Polygon::internal_default_instance());
  ::autodrive::workflow::proto::_StaticObstacle_default_instance_._instance.get_mutable()->attr_ = const_cast< ::autodrive::workflow::proto::StaticObstacleAttr*>(
      ::autodrive::workflow::proto::StaticObstacleAttr::internal_default_instance());
  ::autodrive::workflow::proto::_StaticObstacle_default_instance_._instance.get_mutable()->position_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
}
void StaticObstacle::clear_border() {
  if (GetArenaNoVirtual() == NULL && border_ != NULL) {
    delete border_;
  }
  border_ = NULL;
}
void StaticObstacle::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObstacle::kIdFieldNumber;
const int StaticObstacle::kCamIdFieldNumber;
const int StaticObstacle::kTimeStampFieldNumber;
const int StaticObstacle::kConfFieldNumber;
const int StaticObstacle::kTypeFieldNumber;
const int StaticObstacle::kSubTypeFieldNumber;
const int StaticObstacle::kBorderFieldNumber;
const int StaticObstacle::kLifeTimeFieldNumber;
const int StaticObstacle::kAgeFieldNumber;
const int StaticObstacle::kStrIdFieldNumber;
const int StaticObstacle::kAttrFieldNumber;
const int StaticObstacle::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObstacle::StaticObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_static_5fobstacles_2eproto::InitDefaultsStaticObstacle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.StaticObstacle)
}
StaticObstacle::StaticObstacle(const StaticObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str_id().size() > 0) {
    str_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_id_);
  }
  if (from.has_border()) {
    border_ = new ::autodrive::workflow::proto::perception_base::Polygon(*from.border_);
  } else {
    border_ = NULL;
  }
  if (from.has_attr()) {
    attr_ = new ::autodrive::workflow::proto::StaticObstacleAttr(*from.attr_);
  } else {
    attr_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::autodrive::workflow::proto::Vector3f(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&id_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.StaticObstacle)
}

void StaticObstacle::SharedCtor() {
  str_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&border_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&border_)) + sizeof(age_));
  _cached_size_ = 0;
}

StaticObstacle::~StaticObstacle() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.StaticObstacle)
  SharedDtor();
}

void StaticObstacle::SharedDtor() {
  str_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete border_;
  if (this != internal_default_instance()) delete attr_;
  if (this != internal_default_instance()) delete position_;
}

void StaticObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticObstacle::descriptor() {
  ::protobuf_static_5fobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_static_5fobstacles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticObstacle& StaticObstacle::default_instance() {
  ::protobuf_static_5fobstacles_2eproto::InitDefaultsStaticObstacle();
  return *internal_default_instance();
}

StaticObstacle* StaticObstacle::New(::google::protobuf::Arena* arena) const {
  StaticObstacle* n = new StaticObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaticObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.StaticObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && border_ != NULL) {
    delete border_;
  }
  border_ = NULL;
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) {
    delete attr_;
  }
  attr_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&id_)) + sizeof(age_));
  _internal_metadata_.Clear();
}

bool StaticObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.StaticObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.StaticObstacleType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::autodrive::workflow::proto::StaticObstacleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.StaticObstacleSubType sub_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sub_type(static_cast< ::autodrive::workflow::proto::StaticObstacleSubType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Polygon border = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_border()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 life_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string str_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str_id().data(), static_cast<int>(this->str_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.StaticObstacle.str_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.StaticObstacleAttr attr = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f position = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.StaticObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.StaticObstacle)
  return false;
#undef DO_
}

void StaticObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.StaticObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 cam_id = 2;
  if (this->cam_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cam_id(), output);
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_stamp(), output);
  }

  // int32 conf = 4;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->conf(), output);
  }

  // .autodrive.workflow.proto.StaticObstacleType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // .autodrive.workflow.proto.StaticObstacleSubType sub_type = 6;
  if (this->sub_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sub_type(), output);
  }

  // .autodrive.workflow.proto.perception_base.Polygon border = 7;
  if (this->has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->border_, output);
  }

  // int32 life_time = 8;
  if (this->life_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->life_time(), output);
  }

  // int32 age = 9;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->age(), output);
  }

  // string str_id = 10;
  if (this->str_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_id().data(), static_cast<int>(this->str_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.StaticObstacle.str_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->str_id(), output);
  }

  // .autodrive.workflow.proto.StaticObstacleAttr attr = 11;
  if (this->has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->attr_, output);
  }

  // .autodrive.workflow.proto.Vector3f position = 12;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->position_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.StaticObstacle)
}

::google::protobuf::uint8* StaticObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.StaticObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 cam_id = 2;
  if (this->cam_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cam_id(), target);
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_stamp(), target);
  }

  // int32 conf = 4;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->conf(), target);
  }

  // .autodrive.workflow.proto.StaticObstacleType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // .autodrive.workflow.proto.StaticObstacleSubType sub_type = 6;
  if (this->sub_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sub_type(), target);
  }

  // .autodrive.workflow.proto.perception_base.Polygon border = 7;
  if (this->has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->border_, deterministic, target);
  }

  // int32 life_time = 8;
  if (this->life_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->life_time(), target);
  }

  // int32 age = 9;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->age(), target);
  }

  // string str_id = 10;
  if (this->str_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_id().data(), static_cast<int>(this->str_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.StaticObstacle.str_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->str_id(), target);
  }

  // .autodrive.workflow.proto.StaticObstacleAttr attr = 11;
  if (this->has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->attr_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f position = 12;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->position_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.StaticObstacle)
  return target;
}

size_t StaticObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.StaticObstacle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string str_id = 10;
  if (this->str_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_id());
  }

  // .autodrive.workflow.proto.perception_base.Polygon border = 7;
  if (this->has_border()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->border_);
  }

  // .autodrive.workflow.proto.StaticObstacleAttr attr = 11;
  if (this->has_attr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->attr_);
  }

  // .autodrive.workflow.proto.Vector3f position = 12;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 cam_id = 2;
  if (this->cam_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cam_id());
  }

  // int64 time_stamp = 3;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_stamp());
  }

  // int32 conf = 4;
  if (this->conf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->conf());
  }

  // .autodrive.workflow.proto.StaticObstacleType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .autodrive.workflow.proto.StaticObstacleSubType sub_type = 6;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_type());
  }

  // int32 life_time = 8;
  if (this->life_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->life_time());
  }

  // int32 age = 9;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.StaticObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.StaticObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.StaticObstacle)
    MergeFrom(*source);
  }
}

void StaticObstacle::MergeFrom(const StaticObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.StaticObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str_id().size() > 0) {

    str_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_id_);
  }
  if (from.has_border()) {
    mutable_border()->::autodrive::workflow::proto::perception_base::Polygon::MergeFrom(from.border());
  }
  if (from.has_attr()) {
    mutable_attr()->::autodrive::workflow::proto::StaticObstacleAttr::MergeFrom(from.attr());
  }
  if (from.has_position()) {
    mutable_position()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.position());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cam_id() != 0) {
    set_cam_id(from.cam_id());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.sub_type() != 0) {
    set_sub_type(from.sub_type());
  }
  if (from.life_time() != 0) {
    set_life_time(from.life_time());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void StaticObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.StaticObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObstacle::CopyFrom(const StaticObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.StaticObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObstacle::IsInitialized() const {
  return true;
}

void StaticObstacle::Swap(StaticObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticObstacle::InternalSwap(StaticObstacle* other) {
  using std::swap;
  str_id_.Swap(&other->str_id_);
  swap(border_, other->border_);
  swap(attr_, other->attr_);
  swap(position_, other->position_);
  swap(id_, other->id_);
  swap(cam_id_, other->cam_id_);
  swap(time_stamp_, other->time_stamp_);
  swap(conf_, other->conf_);
  swap(type_, other->type_);
  swap(sub_type_, other->sub_type_);
  swap(life_time_, other->life_time_);
  swap(age_, other->age_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticObstacle::GetMetadata() const {
  protobuf_static_5fobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_static_5fobstacles_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticObstaclesMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_StaticObstaclesMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_StaticObstaclesMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void StaticObstaclesMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void StaticObstaclesMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObstaclesMsg::kHeaderFieldNumber;
const int StaticObstaclesMsg::kErrorFieldNumber;
const int StaticObstaclesMsg::kConfScaleFieldNumber;
const int StaticObstaclesMsg::kStaticObstaclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObstaclesMsg::StaticObstaclesMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_static_5fobstacles_2eproto::InitDefaultsStaticObstaclesMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.StaticObstaclesMsg)
}
StaticObstaclesMsg::StaticObstaclesMsg(const StaticObstaclesMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      static_obstacles_(from.static_obstacles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  conf_scale_ = from.conf_scale_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.StaticObstaclesMsg)
}

void StaticObstaclesMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_scale_) -
      reinterpret_cast<char*>(&header_)) + sizeof(conf_scale_));
  _cached_size_ = 0;
}

StaticObstaclesMsg::~StaticObstaclesMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.StaticObstaclesMsg)
  SharedDtor();
}

void StaticObstaclesMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void StaticObstaclesMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticObstaclesMsg::descriptor() {
  ::protobuf_static_5fobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_static_5fobstacles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticObstaclesMsg& StaticObstaclesMsg::default_instance() {
  ::protobuf_static_5fobstacles_2eproto::InitDefaultsStaticObstaclesMsg();
  return *internal_default_instance();
}

StaticObstaclesMsg* StaticObstaclesMsg::New(::google::protobuf::Arena* arena) const {
  StaticObstaclesMsg* n = new StaticObstaclesMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaticObstaclesMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.StaticObstaclesMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  static_obstacles_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  conf_scale_ = 0;
  _internal_metadata_.Clear();
}

bool StaticObstaclesMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.StaticObstaclesMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf_scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.StaticObstacle static_obstacles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_static_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.StaticObstaclesMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.StaticObstaclesMsg)
  return false;
#undef DO_
}

void StaticObstaclesMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.StaticObstaclesMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // float conf_scale = 3;
  if (this->conf_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->conf_scale(), output);
  }

  // repeated .autodrive.workflow.proto.StaticObstacle static_obstacles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->static_obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->static_obstacles(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.StaticObstaclesMsg)
}

::google::protobuf::uint8* StaticObstaclesMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.StaticObstaclesMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // float conf_scale = 3;
  if (this->conf_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->conf_scale(), target);
  }

  // repeated .autodrive.workflow.proto.StaticObstacle static_obstacles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->static_obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->static_obstacles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.StaticObstaclesMsg)
  return target;
}

size_t StaticObstaclesMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.StaticObstaclesMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.StaticObstacle static_obstacles = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->static_obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->static_obstacles(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // float conf_scale = 3;
  if (this->conf_scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticObstaclesMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.StaticObstaclesMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObstaclesMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObstaclesMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.StaticObstaclesMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.StaticObstaclesMsg)
    MergeFrom(*source);
  }
}

void StaticObstaclesMsg::MergeFrom(const StaticObstaclesMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.StaticObstaclesMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  static_obstacles_.MergeFrom(from.static_obstacles_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.conf_scale() != 0) {
    set_conf_scale(from.conf_scale());
  }
}

void StaticObstaclesMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.StaticObstaclesMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObstaclesMsg::CopyFrom(const StaticObstaclesMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.StaticObstaclesMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObstaclesMsg::IsInitialized() const {
  return true;
}

void StaticObstaclesMsg::Swap(StaticObstaclesMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticObstaclesMsg::InternalSwap(StaticObstaclesMsg* other) {
  using std::swap;
  static_obstacles_.InternalSwap(&other->static_obstacles_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(conf_scale_, other->conf_scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticObstaclesMsg::GetMetadata() const {
  protobuf_static_5fobstacles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_static_5fobstacles_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
