// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parsing.proto

#include "parsing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class ParsingImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParsingImage>
      _instance;
} _ParsingImage_default_instance_;
class CameraValidHeightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraValidHeight>
      _instance;
} _CameraValidHeight_default_instance_;
class VCSParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VCSParam>
      _instance;
} _VCSParam_default_instance_;
class DistortParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistortParam>
      _instance;
} _DistortParam_default_instance_;
class CameraParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraParam>
      _instance;
} _CameraParam_default_instance_;
class ParsingColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParsingColor>
      _instance;
} _ParsingColor_default_instance_;
class RuntimeModelInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RuntimeModelInfo>
      _instance;
} _RuntimeModelInfo_default_instance_;
class ParsingSettingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParsingSetting>
      _instance;
} _ParsingSetting_default_instance_;
class DepthSettingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DepthSetting>
      _instance;
} _DepthSetting_default_instance_;
class ParsingImageDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParsingImageData>
      _instance;
} _ParsingImageData_default_instance_;
class ParsingMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParsingMsg>
      _instance;
} _ParsingMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_parsing_2eproto {
void InitDefaultsParsingImageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsRoiMap();
  {
    void* ptr = &::autodrive::workflow::proto::_ParsingImage_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ParsingImage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ParsingImage::InitAsDefaultInstance();
}

void InitDefaultsParsingImage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParsingImageImpl);
}

void InitDefaultsCameraValidHeightImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_CameraValidHeight_default_instance_;
    new (ptr) ::autodrive::workflow::proto::CameraValidHeight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::CameraValidHeight::InitAsDefaultInstance();
}

void InitDefaultsCameraValidHeight() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraValidHeightImpl);
}

void InitDefaultsVCSParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_VCSParam_default_instance_;
    new (ptr) ::autodrive::workflow::proto::VCSParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::VCSParam::InitAsDefaultInstance();
}

void InitDefaultsVCSParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVCSParamImpl);
}

void InitDefaultsDistortParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_DistortParam_default_instance_;
    new (ptr) ::autodrive::workflow::proto::DistortParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::DistortParam::InitAsDefaultInstance();
}

void InitDefaultsDistortParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDistortParamImpl);
}

void InitDefaultsCameraParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_parsing_2eproto::InitDefaultsCameraValidHeight();
  protobuf_parsing_2eproto::InitDefaultsDistortParam();
  protobuf_parsing_2eproto::InitDefaultsVCSParam();
  protobuf_perception_5fbase_2eproto::InitDefaultsCameraMatrix();
  {
    void* ptr = &::autodrive::workflow::proto::_CameraParam_default_instance_;
    new (ptr) ::autodrive::workflow::proto::CameraParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::CameraParam::InitAsDefaultInstance();
}

void InitDefaultsCameraParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraParamImpl);
}

void InitDefaultsParsingColorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_ParsingColor_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ParsingColor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ParsingColor::InitAsDefaultInstance();
}

void InitDefaultsParsingColor() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParsingColorImpl);
}

void InitDefaultsRuntimeModelInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_RuntimeModelInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::RuntimeModelInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::RuntimeModelInfo::InitAsDefaultInstance();
}

void InitDefaultsRuntimeModelInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRuntimeModelInfoImpl);
}

void InitDefaultsParsingSettingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsHeader();
  protobuf_parsing_2eproto::InitDefaultsParsingColor();
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  protobuf_parsing_2eproto::InitDefaultsRuntimeModelInfo();
  protobuf_perception_5fbase_2eproto::InitDefaultsCategory();
  {
    void* ptr = &::autodrive::workflow::proto::_ParsingSetting_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ParsingSetting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ParsingSetting::InitAsDefaultInstance();
}

void InitDefaultsParsingSetting() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParsingSettingImpl);
}

void InitDefaultsDepthSettingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_parsing_2eproto::InitDefaultsCameraParam();
  {
    void* ptr = &::autodrive::workflow::proto::_DepthSetting_default_instance_;
    new (ptr) ::autodrive::workflow::proto::DepthSetting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::DepthSetting::InitAsDefaultInstance();
}

void InitDefaultsDepthSetting() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDepthSettingImpl);
}

void InitDefaultsParsingImageDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_ParsingImageData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ParsingImageData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ParsingImageData::InitAsDefaultInstance();
}

void InitDefaultsParsingImageData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParsingImageDataImpl);
}

void InitDefaultsParsingMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_parsing_2eproto::InitDefaultsParsingImageData();
  protobuf_parsing_5fbase_2eproto::InitDefaultsRleCompressedData();
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  protobuf_parsing_2eproto::InitDefaultsParsingImage();
  protobuf_parsing_2eproto::InitDefaultsParsingSetting();
  protobuf_parsing_2eproto::InitDefaultsDepthSetting();
  {
    void* ptr = &::autodrive::workflow::proto::_ParsingMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ParsingMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ParsingMsg::InitAsDefaultInstance();
}

void InitDefaultsParsingMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParsingMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, send_mod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, align_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, image_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, perception_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, bypass_time_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, compression_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, roi_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, perception_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, postprocessor_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, time_stamp_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, hw_time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, mcu_time_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImage, mcu_board_timediff_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraValidHeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraValidHeight, left_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraValidHeight, right_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VCSParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VCSParam, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VCSParam, translation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DistortParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DistortParam, param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, focal_u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, focal_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, center_u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, center_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, camera_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, camera_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, camera_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, fov_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, cali_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, valid_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, distort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, vcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, mat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, cam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, image_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, image_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, base_calib_done_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, calib_src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraParam, calib_done_ts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingColor, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingColor, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingColor, r_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RuntimeModelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RuntimeModelInfo, model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RuntimeModelInfo, model_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, parsing_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, parsing_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, channel_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, channel_colors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, freespace_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, boundspace_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, parsing_roi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, parsing_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, model_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingSetting, categories_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, scale_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, shift_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, mapping_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, mapping_shift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, confidence_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, max_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, min_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, max_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, min_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::DepthSetting, camera_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImageData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImageData, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImageData, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingImageData, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, free_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, feature_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, rle_parsing_compressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, roi_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, parsing_setting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParsingMsg, depth_setting_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::ParsingImage)},
  { 29, -1, sizeof(::autodrive::workflow::proto::CameraValidHeight)},
  { 36, -1, sizeof(::autodrive::workflow::proto::VCSParam)},
  { 43, -1, sizeof(::autodrive::workflow::proto::DistortParam)},
  { 49, -1, sizeof(::autodrive::workflow::proto::CameraParam)},
  { 80, -1, sizeof(::autodrive::workflow::proto::ParsingColor)},
  { 88, -1, sizeof(::autodrive::workflow::proto::RuntimeModelInfo)},
  { 95, -1, sizeof(::autodrive::workflow::proto::ParsingSetting)},
  { 111, -1, sizeof(::autodrive::workflow::proto::DepthSetting)},
  { 126, -1, sizeof(::autodrive::workflow::proto::ParsingImageData)},
  { 135, -1, sizeof(::autodrive::workflow::proto::ParsingMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ParsingImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_CameraValidHeight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_VCSParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_DistortParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_CameraParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ParsingColor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_RuntimeModelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ParsingSetting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_DepthSetting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ParsingImageData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ParsingMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "parsing.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rparsing.proto\022\030autodrive.workflow.prot"
      "o\032\014common.proto\032\025perception_base.proto\032\022"
      "parsing_base.proto\"\243\004\n\014ParsingImage\022\r\n\005w"
      "idth\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\017\n\007channel\030\003 "
      "\001(\005\022\020\n\010send_mod\030\004 \001(\005\022\022\n\ntime_stamp\030\005 \001("
      "\003\022\016\n\006format\030\006 \001(\005\022\r\n\005index\030\007 \001(\005\022\r\n\005coun"
      "t\030\010 \001(\005\022\r\n\005depth\030\t \001(\005\022\r\n\005align\030\n \001(\005\022\025\n"
      "\rimage_counter\030\013 \001(\r\022\031\n\021perception_statu"
      "s\030\014 \001(\005\022\030\n\020bypass_time_diff\030\r \001(\003\022\032\n\022com"
      "pression_format\030\016 \001(\005\022\016\n\006status\030\017 \001(\005\022A\n"
      "\007roi_map\030\020 \003(\01320.autodrive.workflow.prot"
      "o.perception_base.RoiMap\022\027\n\017perception_m"
      "ode\030\021 \001(\005\022\034\n\024postprocessor_status\030\022 \001(\005\022"
      "\020\n\010frame_id\030\023 \001(\005\022\014\n\004step\030\024 \001(\005\022\025\n\rtime_"
      "stamp_us\030\025 \001(\003\022\025\n\rhw_time_stamp\030\026 \001(\004\022\025\n"
      "\rmcu_time_diff\030\027 \001(\003\022\032\n\022mcu_board_timedi"
      "ff\030\030 \001(\003\"4\n\021CameraValidHeight\022\016\n\006left_y\030"
      "\001 \001(\005\022\017\n\007right_y\030\002 \001(\005\"1\n\010VCSParam\022\020\n\010ro"
      "tation\030\001 \003(\002\022\023\n\013translation\030\002 \003(\002\"\035\n\014Dis"
      "tortParam\022\r\n\005param\030\001 \003(\002\"\351\005\n\013CameraParam"
      "\022\017\n\007focal_u\030\001 \001(\002\022\017\n\007focal_v\030\002 \001(\002\022\020\n\010ce"
      "nter_u\030\003 \001(\002\022\020\n\010center_v\030\004 \001(\002\022\020\n\010camera"
      "_x\030\005 \001(\002\022\020\n\010camera_y\030\006 \001(\002\022\020\n\010camera_z\030\007"
      " \001(\002\022\r\n\005pitch\030\010 \001(\002\022\013\n\003yaw\030\t \001(\002\022\014\n\004roll"
      "\030\n \001(\002\022\014\n\004type\030\013 \001(\005\022\013\n\003fov\030\014 \001(\002\022\017\n\007ver"
      "sion\030\r \001(\005\022G\n\013cali_status\030\016 \001(\01622.autodr"
      "ive.workflow.proto.ParsingCalibrationSta"
      "tus\022A\n\014valid_height\030\017 \001(\0132+.autodrive.wo"
      "rkflow.proto.CameraValidHeight\0227\n\007distor"
      "t\030\020 \001(\0132&.autodrive.workflow.proto.Disto"
      "rtParam\022/\n\003vcs\030\021 \001(\0132\".autodrive.workflo"
      "w.proto.VCSParam\022C\n\003mat\030\022 \001(\01326.autodriv"
      "e.workflow.proto.perception_base.CameraM"
      "atrix\022\022\n\ntime_stamp\030\023 \001(\003\022\016\n\006cam_id\030\024 \001("
      "\005\022\020\n\010frame_id\030\025 \001(\005\022\024\n\014image_height\030\026 \001("
      "\005\022\023\n\013image_width\030\027 \001(\005\022\027\n\017base_calib_don"
      "e\030\030 \001(\005\022<\n\tcalib_src\030\031 \001(\0162).autodrive.w"
      "orkflow.proto.CalibrationType\022\025\n\rcalib_d"
      "one_ts\030\032 \001(\003\"/\n\014ParsingColor\022\t\n\001b\030\001 \001(\r\022"
      "\t\n\001g\030\002 \001(\r\022\t\n\001r\030\003 \001(\r\"8\n\020RuntimeModelInf"
      "o\022\020\n\010model_id\030\001 \001(\005\022\022\n\nmodel_name\030\002 \001(\t\""
      "\367\003\n\016ParsingSetting\022@\n\006header\030\001 \001(\01320.aut"
      "odrive.workflow.proto.perception_base.He"
      "ader\022\024\n\014parsing_type\030\002 \001(\005\022\030\n\020parsing_ch"
      "annels\030\003 \001(\005\022\026\n\016channel_labels\030\004 \003(\004\022>\n\016"
      "channel_colors\030\005 \003(\0132&.autodrive.workflo"
      "w.proto.ParsingColor\022\032\n\022freespace_channe"
      "ls\030\006 \003(\005\022\033\n\023boundspace_channels\030\007 \003(\005\022C\n"
      "\013parsing_roi\030\010 \001(\0132..autodrive.workflow."
      "proto.perception_base.Rect\022\025\n\rparsing_sc"
      "ale\030\t \001(\002\022>\n\nmodel_info\030\n \003(\0132*.autodriv"
      "e.workflow.proto.RuntimeModelInfo\022F\n\ncat"
      "egories\030\013 \003(\01322.autodrive.workflow.proto"
      ".perception_base.Category\"\223\002\n\014DepthSetti"
      "ng\022\024\n\014scale_number\030\001 \001(\002\022\023\n\013shift_scale\030"
      "\002 \001(\002\022\024\n\014mapping_type\030\003 \001(\r\022\025\n\rmapping_s"
      "hift\030\004 \001(\r\022\030\n\020confidence_scale\030\005 \001(\002\022\021\n\t"
      "max_depth\030\006 \001(\002\022\021\n\tmin_depth\030\007 \001(\002\022\026\n\016ma"
      "x_confidence\030\010 \001(\002\022\026\n\016min_confidence\030\t \001"
      "(\002\022;\n\014camera_param\030\n \001(\0132%.autodrive.wor"
      "kflow.proto.CameraParam\"P\n\020ParsingImageD"
      "ata\022\014\n\004data\030\001 \001(\014\022\r\n\005width\030\002 \001(\r\022\016\n\006heig"
      "ht\030\003 \001(\r\022\017\n\007channel\030\004 \001(\r\"\313\004\n\nParsingMsg"
      "\0223\n\006header\030\001 \001(\0132#.autodrive.workflow.pr"
      "oto.MsgHeader\022.\n\005error\030\002 \001(\0132\037.autodrive"
      ".workflow.proto.Error\022>\n\nfree_space\030\003 \001("
      "\0132*.autodrive.workflow.proto.ParsingImag"
      "eData\022\?\n\013feature_map\030\004 \001(\0132*.autodrive.w"
      "orkflow.proto.ParsingImageData\022K\n\026rle_pa"
      "rsing_compressed\030\005 \001(\0132+.autodrive.workf"
      "low.proto.RleCompressedData\022\r\n\005scale\030\006 \001"
      "(\002\022B\n\nroi_output\030\007 \001(\0132..autodrive.workf"
      "low.proto.perception_base.Rect\0225\n\005image\030"
      "\010 \001(\0132&.autodrive.workflow.proto.Parsing"
      "Image\022A\n\017parsing_setting\030\t \001(\0132(.autodri"
      "ve.workflow.proto.ParsingSetting\022=\n\rdept"
      "h_setting\030\n \001(\0132&.autodrive.workflow.pro"
      "to.DepthSetting*\236\001\n\021CompressionFormat\022\022\n"
      "\016kOriginalImage\020\000\022\026\n\022kOriginalImageHalf\020"
      "\001\022\031\n\025kOriginalImageQuarter\020\002\022\024\n\020kCompres"
      "sionJPEG\020\003\022\025\n\021kCompressionH265I\020\004\022\025\n\021kCo"
      "mpressionH265P\020\005*\330\007\n\013ImageFormat\022\024\n\020kIma"
      "geFormatGray\020\000\022\024\n\020kImageFormatYV12\020\001\022\024\n\020"
      "kImageFormatJPEG\020\002\022\023\n\017kImageFormatPNG\020\003\022"
      "\024\n\020kImageFormatCR12\020\004\022\023\n\017kImageFormatBad"
      "\020\005\022\024\n\020kImageFormatNV12\020\006\022\024\n\020kImageFormat"
      "NV21\020\007\022\027\n\023kImageFormatTimeout\020\010\022\032\n\026kImag"
      "eFormatBypassOnly\020\t\022\024\n\020kImageFormatYUYV\020"
      "\n\022\024\n\020kImageFormatUYVY\020\013\022\033\n\027kImageFormatR"
      "aw12Planar\020\014\022\037\n\033kImageFormatRaw12PlanarJ"
      "PEG\020\r\022\'\n#kImageFormatRaw12PlanarJPEGLoss"
      "less\020\016\022\025\n\021kImageFormatRaw12\020\017\022\031\n\025kImageF"
      "ormatRaw12JPEG\020\020\022!\n\035kImageFormatRaw12JPE"
      "GLossless\020\021\022\025\n\021kImageFormatRaw16\020\022\022\031\n\025kI"
      "mageFormatRaw16JPEG\020\023\022!\n\035kImageFormatRaw"
      "16JPEGLossless\020\024\022\025\n\021kImageFormatRaw20\020\025\022"
      "\031\n\025kImageFormatRaw20JPEG\020\026\022!\n\035kImageForm"
      "atRaw20JPEGLossless\020\027\022\033\n\027kImageFormatRaw"
      "20Planar\020\030\022\037\n\033kImageFormatRaw20PlanarJPE"
      "G\020\031\022\'\n#kImageFormatRaw20PlanarJPEGLossle"
      "ss\020\032\022\036\n\032kImageFormatRaw16WithFront\020\033\022\035\n\031"
      "kImageFormatRaw16WithRear\020\034\022\"\n\036kImageFor"
      "matRaw16WithFrontRear\020\035\022\'\n#kImageFormatR"
      "aw16PlanarJPEGLossless\020\036\022\'\n#kImageFormat"
      "Raw14PlanarJPEGLossless\020\037\022\031\n\025kImageForma"
      "tBitstream\020 \022\035\n\031kImageFormatBitstreamH26"
      "4\020!*[\n\rParsingFormat\022\025\n\021kParsingFormatRa"
      "w\020\000\022\027\n\023kParsingFormatLabel\020\001\022\032\n\026kParsing"
      "FormatLabelRLE\020\002*\177\n\tIPMSelect\022\033\n\027kIPMSel"
      "ectNinetyDistant\020\000\022\032\n\026kIPMSelectFortyDis"
      "tant\020\001\022\034\n\030kIPMSelectFortyHalfWidth\020\002\022\033\n\027"
      "kIPMSelectTwentyDistant\020\003*Z\n\020PerceptionS"
      "tatus\022!\n\035kPerceptionStatusNoPerception\020\000"
      "\022#\n\037kPerceptionStatusWithPerception\020\001*B\n"
      "\013ImageStatus\022\026\n\022kImageStatusNormal\020\000\022\033\n\027"
      "kImageStatusNoInterrupt\020\001*<\n\nCameraType\022"
      "\026\n\022kCameraTypePinHole\020\000\022\026\n\022kCameraTypeFi"
      "shEye\020\001*<\n\rCameraVersion\022\024\n\020kCameraVersi"
      "onCV\020\000\022\025\n\021kCameraVersionVCS\020\001*\203\001\n\030Parsin"
      "gCalibrationStatus\022\035\n\031kCalibrationStatus"
      "Default\020\000\022#\n\037kCalibrationStatusIntrinsic"
      "Done\020\001\022#\n\037kCalibrationStatusExtrinsicDon"
      "e\020\002*\206\001\n\017CalibrationType\022\033\n\027kCalibrationT"
      "ypeUnknown\020\000\022\027\n\023kCalibrationTypeEOL\020\001\022\035\n"
      "\031kCalibrationTypeAfterSale\020\002\022\036\n\032kCalibra"
      "tionTypeBackground\020\003*\222\001\n\013ParsingType\022\027\n\023"
      "kParsingTypeDefault\020\000\022\024\n\020kParsingTypeLan"
      "e\020\001\022\025\n\021kParsingTypeDepth\020\002\022\023\n\017kParsingTy"
      "peIPM\020\003\022\023\n\017kParsingTypeBEV\020\004\022\023\n\017kParsing"
      "TypeIQA\020\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "parsing.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
  ::protobuf_parsing_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_parsing_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* CompressionFormat_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[0];
}
bool CompressionFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[1];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParsingFormat_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[2];
}
bool ParsingFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IPMSelect_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[3];
}
bool IPMSelect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PerceptionStatus_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[4];
}
bool PerceptionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageStatus_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[5];
}
bool ImageStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CameraType_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[6];
}
bool CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CameraVersion_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[7];
}
bool CameraVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParsingCalibrationStatus_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[8];
}
bool ParsingCalibrationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CalibrationType_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[9];
}
bool CalibrationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParsingType_descriptor() {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_parsing_2eproto::file_level_enum_descriptors[10];
}
bool ParsingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ParsingImage::InitAsDefaultInstance() {
}
void ParsingImage::clear_roi_map() {
  roi_map_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParsingImage::kWidthFieldNumber;
const int ParsingImage::kHeightFieldNumber;
const int ParsingImage::kChannelFieldNumber;
const int ParsingImage::kSendModFieldNumber;
const int ParsingImage::kTimeStampFieldNumber;
const int ParsingImage::kFormatFieldNumber;
const int ParsingImage::kIndexFieldNumber;
const int ParsingImage::kCountFieldNumber;
const int ParsingImage::kDepthFieldNumber;
const int ParsingImage::kAlignFieldNumber;
const int ParsingImage::kImageCounterFieldNumber;
const int ParsingImage::kPerceptionStatusFieldNumber;
const int ParsingImage::kBypassTimeDiffFieldNumber;
const int ParsingImage::kCompressionFormatFieldNumber;
const int ParsingImage::kStatusFieldNumber;
const int ParsingImage::kRoiMapFieldNumber;
const int ParsingImage::kPerceptionModeFieldNumber;
const int ParsingImage::kPostprocessorStatusFieldNumber;
const int ParsingImage::kFrameIdFieldNumber;
const int ParsingImage::kStepFieldNumber;
const int ParsingImage::kTimeStampUsFieldNumber;
const int ParsingImage::kHwTimeStampFieldNumber;
const int ParsingImage::kMcuTimeDiffFieldNumber;
const int ParsingImage::kMcuBoardTimediffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParsingImage::ParsingImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsParsingImage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ParsingImage)
}
ParsingImage::ParsingImage(const ParsingImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roi_map_(from.roi_map_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&width_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ParsingImage)
}

void ParsingImage::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&width_)) + sizeof(step_));
  _cached_size_ = 0;
}

ParsingImage::~ParsingImage() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ParsingImage)
  SharedDtor();
}

void ParsingImage::SharedDtor() {
}

void ParsingImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsingImage::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParsingImage& ParsingImage::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsParsingImage();
  return *internal_default_instance();
}

ParsingImage* ParsingImage::New(::google::protobuf::Arena* arena) const {
  ParsingImage* n = new ParsingImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParsingImage::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ParsingImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roi_map_.Clear();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&width_)) + sizeof(step_));
  _internal_metadata_.Clear();
}

bool ParsingImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ParsingImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 send_mod = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_mod_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_stamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 format = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 depth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 align = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &align_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 image_counter = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 perception_status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perception_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bypass_time_diff = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bypass_time_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 compression_format = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.perception_base.RoiMap roi_map = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_roi_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 perception_mode = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perception_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 postprocessor_status = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &postprocessor_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frame_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 step = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_stamp_us = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 hw_time_stamp = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hw_time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mcu_time_diff = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mcu_time_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mcu_board_timediff = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mcu_board_timediff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ParsingImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ParsingImage)
  return false;
#undef DO_
}

void ParsingImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ParsingImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // int32 channel = 3;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  // int32 send_mod = 4;
  if (this->send_mod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->send_mod(), output);
  }

  // int64 time_stamp = 5;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time_stamp(), output);
  }

  // int32 format = 6;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->format(), output);
  }

  // int32 index = 7;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->index(), output);
  }

  // int32 count = 8;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->count(), output);
  }

  // int32 depth = 9;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->depth(), output);
  }

  // int32 align = 10;
  if (this->align() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->align(), output);
  }

  // uint32 image_counter = 11;
  if (this->image_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->image_counter(), output);
  }

  // int32 perception_status = 12;
  if (this->perception_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->perception_status(), output);
  }

  // int64 bypass_time_diff = 13;
  if (this->bypass_time_diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->bypass_time_diff(), output);
  }

  // int32 compression_format = 14;
  if (this->compression_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->compression_format(), output);
  }

  // int32 status = 15;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->status(), output);
  }

  // repeated .autodrive.workflow.proto.perception_base.RoiMap roi_map = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roi_map_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->roi_map(static_cast<int>(i)), output);
  }

  // int32 perception_mode = 17;
  if (this->perception_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->perception_mode(), output);
  }

  // int32 postprocessor_status = 18;
  if (this->postprocessor_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->postprocessor_status(), output);
  }

  // int32 frame_id = 19;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->frame_id(), output);
  }

  // int32 step = 20;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->step(), output);
  }

  // int64 time_stamp_us = 21;
  if (this->time_stamp_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->time_stamp_us(), output);
  }

  // uint64 hw_time_stamp = 22;
  if (this->hw_time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->hw_time_stamp(), output);
  }

  // int64 mcu_time_diff = 23;
  if (this->mcu_time_diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->mcu_time_diff(), output);
  }

  // int64 mcu_board_timediff = 24;
  if (this->mcu_board_timediff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->mcu_board_timediff(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ParsingImage)
}

::google::protobuf::uint8* ParsingImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ParsingImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // int32 channel = 3;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  // int32 send_mod = 4;
  if (this->send_mod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->send_mod(), target);
  }

  // int64 time_stamp = 5;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->time_stamp(), target);
  }

  // int32 format = 6;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->format(), target);
  }

  // int32 index = 7;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->index(), target);
  }

  // int32 count = 8;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->count(), target);
  }

  // int32 depth = 9;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->depth(), target);
  }

  // int32 align = 10;
  if (this->align() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->align(), target);
  }

  // uint32 image_counter = 11;
  if (this->image_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->image_counter(), target);
  }

  // int32 perception_status = 12;
  if (this->perception_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->perception_status(), target);
  }

  // int64 bypass_time_diff = 13;
  if (this->bypass_time_diff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->bypass_time_diff(), target);
  }

  // int32 compression_format = 14;
  if (this->compression_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->compression_format(), target);
  }

  // int32 status = 15;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->status(), target);
  }

  // repeated .autodrive.workflow.proto.perception_base.RoiMap roi_map = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roi_map_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->roi_map(static_cast<int>(i)), deterministic, target);
  }

  // int32 perception_mode = 17;
  if (this->perception_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->perception_mode(), target);
  }

  // int32 postprocessor_status = 18;
  if (this->postprocessor_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->postprocessor_status(), target);
  }

  // int32 frame_id = 19;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->frame_id(), target);
  }

  // int32 step = 20;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->step(), target);
  }

  // int64 time_stamp_us = 21;
  if (this->time_stamp_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->time_stamp_us(), target);
  }

  // uint64 hw_time_stamp = 22;
  if (this->hw_time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->hw_time_stamp(), target);
  }

  // int64 mcu_time_diff = 23;
  if (this->mcu_time_diff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->mcu_time_diff(), target);
  }

  // int64 mcu_board_timediff = 24;
  if (this->mcu_board_timediff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->mcu_board_timediff(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ParsingImage)
  return target;
}

size_t ParsingImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ParsingImage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.perception_base.RoiMap roi_map = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->roi_map_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roi_map(static_cast<int>(i)));
    }
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  // int32 send_mod = 4;
  if (this->send_mod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->send_mod());
  }

  // int64 time_stamp = 5;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_stamp());
  }

  // int32 format = 6;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->format());
  }

  // int32 index = 7;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // int32 count = 8;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 depth = 9;
  if (this->depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  // int32 align = 10;
  if (this->align() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->align());
  }

  // uint32 image_counter = 11;
  if (this->image_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_counter());
  }

  // int64 bypass_time_diff = 13;
  if (this->bypass_time_diff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bypass_time_diff());
  }

  // int32 perception_status = 12;
  if (this->perception_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->perception_status());
  }

  // int32 compression_format = 14;
  if (this->compression_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compression_format());
  }

  // int32 status = 15;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 perception_mode = 17;
  if (this->perception_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->perception_mode());
  }

  // int32 postprocessor_status = 18;
  if (this->postprocessor_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->postprocessor_status());
  }

  // int32 frame_id = 19;
  if (this->frame_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_id());
  }

  // int64 time_stamp_us = 21;
  if (this->time_stamp_us() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_stamp_us());
  }

  // uint64 hw_time_stamp = 22;
  if (this->hw_time_stamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hw_time_stamp());
  }

  // int64 mcu_time_diff = 23;
  if (this->mcu_time_diff() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mcu_time_diff());
  }

  // int64 mcu_board_timediff = 24;
  if (this->mcu_board_timediff() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mcu_board_timediff());
  }

  // int32 step = 20;
  if (this->step() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsingImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ParsingImage)
  GOOGLE_DCHECK_NE(&from, this);
  const ParsingImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParsingImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ParsingImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ParsingImage)
    MergeFrom(*source);
  }
}

void ParsingImage::MergeFrom(const ParsingImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ParsingImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roi_map_.MergeFrom(from.roi_map_);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.send_mod() != 0) {
    set_send_mod(from.send_mod());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
  if (from.align() != 0) {
    set_align(from.align());
  }
  if (from.image_counter() != 0) {
    set_image_counter(from.image_counter());
  }
  if (from.bypass_time_diff() != 0) {
    set_bypass_time_diff(from.bypass_time_diff());
  }
  if (from.perception_status() != 0) {
    set_perception_status(from.perception_status());
  }
  if (from.compression_format() != 0) {
    set_compression_format(from.compression_format());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.perception_mode() != 0) {
    set_perception_mode(from.perception_mode());
  }
  if (from.postprocessor_status() != 0) {
    set_postprocessor_status(from.postprocessor_status());
  }
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
  if (from.time_stamp_us() != 0) {
    set_time_stamp_us(from.time_stamp_us());
  }
  if (from.hw_time_stamp() != 0) {
    set_hw_time_stamp(from.hw_time_stamp());
  }
  if (from.mcu_time_diff() != 0) {
    set_mcu_time_diff(from.mcu_time_diff());
  }
  if (from.mcu_board_timediff() != 0) {
    set_mcu_board_timediff(from.mcu_board_timediff());
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
}

void ParsingImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ParsingImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingImage::CopyFrom(const ParsingImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ParsingImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsingImage::IsInitialized() const {
  return true;
}

void ParsingImage::Swap(ParsingImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParsingImage::InternalSwap(ParsingImage* other) {
  using std::swap;
  roi_map_.InternalSwap(&other->roi_map_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(channel_, other->channel_);
  swap(send_mod_, other->send_mod_);
  swap(time_stamp_, other->time_stamp_);
  swap(format_, other->format_);
  swap(index_, other->index_);
  swap(count_, other->count_);
  swap(depth_, other->depth_);
  swap(align_, other->align_);
  swap(image_counter_, other->image_counter_);
  swap(bypass_time_diff_, other->bypass_time_diff_);
  swap(perception_status_, other->perception_status_);
  swap(compression_format_, other->compression_format_);
  swap(status_, other->status_);
  swap(perception_mode_, other->perception_mode_);
  swap(postprocessor_status_, other->postprocessor_status_);
  swap(frame_id_, other->frame_id_);
  swap(time_stamp_us_, other->time_stamp_us_);
  swap(hw_time_stamp_, other->hw_time_stamp_);
  swap(mcu_time_diff_, other->mcu_time_diff_);
  swap(mcu_board_timediff_, other->mcu_board_timediff_);
  swap(step_, other->step_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParsingImage::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraValidHeight::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraValidHeight::kLeftYFieldNumber;
const int CameraValidHeight::kRightYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraValidHeight::CameraValidHeight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsCameraValidHeight();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.CameraValidHeight)
}
CameraValidHeight::CameraValidHeight(const CameraValidHeight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_y_, &from.left_y_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_y_) -
    reinterpret_cast<char*>(&left_y_)) + sizeof(right_y_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.CameraValidHeight)
}

void CameraValidHeight::SharedCtor() {
  ::memset(&left_y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_y_) -
      reinterpret_cast<char*>(&left_y_)) + sizeof(right_y_));
  _cached_size_ = 0;
}

CameraValidHeight::~CameraValidHeight() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.CameraValidHeight)
  SharedDtor();
}

void CameraValidHeight::SharedDtor() {
}

void CameraValidHeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraValidHeight::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraValidHeight& CameraValidHeight::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsCameraValidHeight();
  return *internal_default_instance();
}

CameraValidHeight* CameraValidHeight::New(::google::protobuf::Arena* arena) const {
  CameraValidHeight* n = new CameraValidHeight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraValidHeight::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.CameraValidHeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_y_) -
      reinterpret_cast<char*>(&left_y_)) + sizeof(right_y_));
  _internal_metadata_.Clear();
}

bool CameraValidHeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.CameraValidHeight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 left_y = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.CameraValidHeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.CameraValidHeight)
  return false;
#undef DO_
}

void CameraValidHeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.CameraValidHeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left_y = 1;
  if (this->left_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left_y(), output);
  }

  // int32 right_y = 2;
  if (this->right_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->right_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.CameraValidHeight)
}

::google::protobuf::uint8* CameraValidHeight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.CameraValidHeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left_y = 1;
  if (this->left_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left_y(), target);
  }

  // int32 right_y = 2;
  if (this->right_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->right_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.CameraValidHeight)
  return target;
}

size_t CameraValidHeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.CameraValidHeight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 left_y = 1;
  if (this->left_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_y());
  }

  // int32 right_y = 2;
  if (this->right_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraValidHeight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.CameraValidHeight)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraValidHeight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraValidHeight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.CameraValidHeight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.CameraValidHeight)
    MergeFrom(*source);
  }
}

void CameraValidHeight::MergeFrom(const CameraValidHeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.CameraValidHeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left_y() != 0) {
    set_left_y(from.left_y());
  }
  if (from.right_y() != 0) {
    set_right_y(from.right_y());
  }
}

void CameraValidHeight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.CameraValidHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraValidHeight::CopyFrom(const CameraValidHeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.CameraValidHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraValidHeight::IsInitialized() const {
  return true;
}

void CameraValidHeight::Swap(CameraValidHeight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraValidHeight::InternalSwap(CameraValidHeight* other) {
  using std::swap;
  swap(left_y_, other->left_y_);
  swap(right_y_, other->right_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraValidHeight::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VCSParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VCSParam::kRotationFieldNumber;
const int VCSParam::kTranslationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VCSParam::VCSParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsVCSParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.VCSParam)
}
VCSParam::VCSParam(const VCSParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rotation_(from.rotation_),
      translation_(from.translation_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.VCSParam)
}

void VCSParam::SharedCtor() {
  _cached_size_ = 0;
}

VCSParam::~VCSParam() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.VCSParam)
  SharedDtor();
}

void VCSParam::SharedDtor() {
}

void VCSParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VCSParam::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VCSParam& VCSParam::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsVCSParam();
  return *internal_default_instance();
}

VCSParam* VCSParam::New(::google::protobuf::Arena* arena) const {
  VCSParam* n = new VCSParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VCSParam::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.VCSParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rotation_.Clear();
  translation_.Clear();
  _internal_metadata_.Clear();
}

bool VCSParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.VCSParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float rotation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_rotation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float translation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_translation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_translation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.VCSParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.VCSParam)
  return false;
#undef DO_
}

void VCSParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.VCSParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float rotation = 1;
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rotation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->rotation().data(), this->rotation_size(), output);
  }

  // repeated float translation = 2;
  if (this->translation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _translation_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->translation().data(), this->translation_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.VCSParam)
}

::google::protobuf::uint8* VCSParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.VCSParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float rotation = 1;
  if (this->rotation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rotation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rotation_, target);
  }

  // repeated float translation = 2;
  if (this->translation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _translation_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->translation_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.VCSParam)
  return target;
}

size_t VCSParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.VCSParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float rotation = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->rotation_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float translation = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->translation_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _translation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VCSParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.VCSParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VCSParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VCSParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.VCSParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.VCSParam)
    MergeFrom(*source);
  }
}

void VCSParam::MergeFrom(const VCSParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.VCSParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rotation_.MergeFrom(from.rotation_);
  translation_.MergeFrom(from.translation_);
}

void VCSParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.VCSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VCSParam::CopyFrom(const VCSParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.VCSParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VCSParam::IsInitialized() const {
  return true;
}

void VCSParam::Swap(VCSParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VCSParam::InternalSwap(VCSParam* other) {
  using std::swap;
  rotation_.InternalSwap(&other->rotation_);
  translation_.InternalSwap(&other->translation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VCSParam::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DistortParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistortParam::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistortParam::DistortParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsDistortParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.DistortParam)
}
DistortParam::DistortParam(const DistortParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      param_(from.param_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.DistortParam)
}

void DistortParam::SharedCtor() {
  _cached_size_ = 0;
}

DistortParam::~DistortParam() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.DistortParam)
  SharedDtor();
}

void DistortParam::SharedDtor() {
}

void DistortParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistortParam::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistortParam& DistortParam::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsDistortParam();
  return *internal_default_instance();
}

DistortParam* DistortParam::New(::google::protobuf::Arena* arena) const {
  DistortParam* n = new DistortParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistortParam::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.DistortParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  _internal_metadata_.Clear();
}

bool DistortParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.DistortParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_param())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_param())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.DistortParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.DistortParam)
  return false;
#undef DO_
}

void DistortParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.DistortParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float param = 1;
  if (this->param_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->param().data(), this->param_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.DistortParam)
}

::google::protobuf::uint8* DistortParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.DistortParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float param = 1;
  if (this->param_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _param_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->param_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.DistortParam)
  return target;
}

size_t DistortParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.DistortParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float param = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->param_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistortParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.DistortParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DistortParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistortParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.DistortParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.DistortParam)
    MergeFrom(*source);
  }
}

void DistortParam::MergeFrom(const DistortParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.DistortParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
}

void DistortParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.DistortParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistortParam::CopyFrom(const DistortParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.DistortParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistortParam::IsInitialized() const {
  return true;
}

void DistortParam::Swap(DistortParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistortParam::InternalSwap(DistortParam* other) {
  using std::swap;
  param_.InternalSwap(&other->param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DistortParam::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraParam::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_CameraParam_default_instance_._instance.get_mutable()->valid_height_ = const_cast< ::autodrive::workflow::proto::CameraValidHeight*>(
      ::autodrive::workflow::proto::CameraValidHeight::internal_default_instance());
  ::autodrive::workflow::proto::_CameraParam_default_instance_._instance.get_mutable()->distort_ = const_cast< ::autodrive::workflow::proto::DistortParam*>(
      ::autodrive::workflow::proto::DistortParam::internal_default_instance());
  ::autodrive::workflow::proto::_CameraParam_default_instance_._instance.get_mutable()->vcs_ = const_cast< ::autodrive::workflow::proto::VCSParam*>(
      ::autodrive::workflow::proto::VCSParam::internal_default_instance());
  ::autodrive::workflow::proto::_CameraParam_default_instance_._instance.get_mutable()->mat_ = const_cast< ::autodrive::workflow::proto::perception_base::CameraMatrix*>(
      ::autodrive::workflow::proto::perception_base::CameraMatrix::internal_default_instance());
}
void CameraParam::clear_mat() {
  if (GetArenaNoVirtual() == NULL && mat_ != NULL) {
    delete mat_;
  }
  mat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraParam::kFocalUFieldNumber;
const int CameraParam::kFocalVFieldNumber;
const int CameraParam::kCenterUFieldNumber;
const int CameraParam::kCenterVFieldNumber;
const int CameraParam::kCameraXFieldNumber;
const int CameraParam::kCameraYFieldNumber;
const int CameraParam::kCameraZFieldNumber;
const int CameraParam::kPitchFieldNumber;
const int CameraParam::kYawFieldNumber;
const int CameraParam::kRollFieldNumber;
const int CameraParam::kTypeFieldNumber;
const int CameraParam::kFovFieldNumber;
const int CameraParam::kVersionFieldNumber;
const int CameraParam::kCaliStatusFieldNumber;
const int CameraParam::kValidHeightFieldNumber;
const int CameraParam::kDistortFieldNumber;
const int CameraParam::kVcsFieldNumber;
const int CameraParam::kMatFieldNumber;
const int CameraParam::kTimeStampFieldNumber;
const int CameraParam::kCamIdFieldNumber;
const int CameraParam::kFrameIdFieldNumber;
const int CameraParam::kImageHeightFieldNumber;
const int CameraParam::kImageWidthFieldNumber;
const int CameraParam::kBaseCalibDoneFieldNumber;
const int CameraParam::kCalibSrcFieldNumber;
const int CameraParam::kCalibDoneTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraParam::CameraParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsCameraParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.CameraParam)
}
CameraParam::CameraParam(const CameraParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_valid_height()) {
    valid_height_ = new ::autodrive::workflow::proto::CameraValidHeight(*from.valid_height_);
  } else {
    valid_height_ = NULL;
  }
  if (from.has_distort()) {
    distort_ = new ::autodrive::workflow::proto::DistortParam(*from.distort_);
  } else {
    distort_ = NULL;
  }
  if (from.has_vcs()) {
    vcs_ = new ::autodrive::workflow::proto::VCSParam(*from.vcs_);
  } else {
    vcs_ = NULL;
  }
  if (from.has_mat()) {
    mat_ = new ::autodrive::workflow::proto::perception_base::CameraMatrix(*from.mat_);
  } else {
    mat_ = NULL;
  }
  ::memcpy(&focal_u_, &from.focal_u_,
    static_cast<size_t>(reinterpret_cast<char*>(&calib_done_ts_) -
    reinterpret_cast<char*>(&focal_u_)) + sizeof(calib_done_ts_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.CameraParam)
}

void CameraParam::SharedCtor() {
  ::memset(&valid_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calib_done_ts_) -
      reinterpret_cast<char*>(&valid_height_)) + sizeof(calib_done_ts_));
  _cached_size_ = 0;
}

CameraParam::~CameraParam() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.CameraParam)
  SharedDtor();
}

void CameraParam::SharedDtor() {
  if (this != internal_default_instance()) delete valid_height_;
  if (this != internal_default_instance()) delete distort_;
  if (this != internal_default_instance()) delete vcs_;
  if (this != internal_default_instance()) delete mat_;
}

void CameraParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraParam::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraParam& CameraParam::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsCameraParam();
  return *internal_default_instance();
}

CameraParam* CameraParam::New(::google::protobuf::Arena* arena) const {
  CameraParam* n = new CameraParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraParam::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.CameraParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && valid_height_ != NULL) {
    delete valid_height_;
  }
  valid_height_ = NULL;
  if (GetArenaNoVirtual() == NULL && distort_ != NULL) {
    delete distort_;
  }
  distort_ = NULL;
  if (GetArenaNoVirtual() == NULL && vcs_ != NULL) {
    delete vcs_;
  }
  vcs_ = NULL;
  if (GetArenaNoVirtual() == NULL && mat_ != NULL) {
    delete mat_;
  }
  mat_ = NULL;
  ::memset(&focal_u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calib_done_ts_) -
      reinterpret_cast<char*>(&focal_u_)) + sizeof(calib_done_ts_));
  _internal_metadata_.Clear();
}

bool CameraParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.CameraParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float focal_u = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float focal_v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float center_u = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &center_u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float center_v = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &center_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float camera_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float camera_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float camera_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fov = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fov_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ParsingCalibrationStatus cali_status = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cali_status(static_cast< ::autodrive::workflow::proto::ParsingCalibrationStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.CameraValidHeight valid_height = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_height()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.DistortParam distort = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distort()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VCSParam vcs = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.CameraMatrix mat = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_stamp = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cam_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frame_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 image_height = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 image_width = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 base_calib_done = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_calib_done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.CalibrationType calib_src = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_calib_src(static_cast< ::autodrive::workflow::proto::CalibrationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 calib_done_ts = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &calib_done_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.CameraParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.CameraParam)
  return false;
#undef DO_
}

void CameraParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.CameraParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float focal_u = 1;
  if (this->focal_u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->focal_u(), output);
  }

  // float focal_v = 2;
  if (this->focal_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->focal_v(), output);
  }

  // float center_u = 3;
  if (this->center_u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->center_u(), output);
  }

  // float center_v = 4;
  if (this->center_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->center_v(), output);
  }

  // float camera_x = 5;
  if (this->camera_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->camera_x(), output);
  }

  // float camera_y = 6;
  if (this->camera_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->camera_y(), output);
  }

  // float camera_z = 7;
  if (this->camera_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->camera_z(), output);
  }

  // float pitch = 8;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pitch(), output);
  }

  // float yaw = 9;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->yaw(), output);
  }

  // float roll = 10;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->roll(), output);
  }

  // int32 type = 11;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->type(), output);
  }

  // float fov = 12;
  if (this->fov() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fov(), output);
  }

  // int32 version = 13;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->version(), output);
  }

  // .autodrive.workflow.proto.ParsingCalibrationStatus cali_status = 14;
  if (this->cali_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->cali_status(), output);
  }

  // .autodrive.workflow.proto.CameraValidHeight valid_height = 15;
  if (this->has_valid_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->valid_height_, output);
  }

  // .autodrive.workflow.proto.DistortParam distort = 16;
  if (this->has_distort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->distort_, output);
  }

  // .autodrive.workflow.proto.VCSParam vcs = 17;
  if (this->has_vcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->vcs_, output);
  }

  // .autodrive.workflow.proto.perception_base.CameraMatrix mat = 18;
  if (this->has_mat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->mat_, output);
  }

  // int64 time_stamp = 19;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->time_stamp(), output);
  }

  // int32 cam_id = 20;
  if (this->cam_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->cam_id(), output);
  }

  // int32 frame_id = 21;
  if (this->frame_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->frame_id(), output);
  }

  // int32 image_height = 22;
  if (this->image_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->image_height(), output);
  }

  // int32 image_width = 23;
  if (this->image_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->image_width(), output);
  }

  // int32 base_calib_done = 24;
  if (this->base_calib_done() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->base_calib_done(), output);
  }

  // .autodrive.workflow.proto.CalibrationType calib_src = 25;
  if (this->calib_src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->calib_src(), output);
  }

  // int64 calib_done_ts = 26;
  if (this->calib_done_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->calib_done_ts(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.CameraParam)
}

::google::protobuf::uint8* CameraParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.CameraParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float focal_u = 1;
  if (this->focal_u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->focal_u(), target);
  }

  // float focal_v = 2;
  if (this->focal_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->focal_v(), target);
  }

  // float center_u = 3;
  if (this->center_u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->center_u(), target);
  }

  // float center_v = 4;
  if (this->center_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->center_v(), target);
  }

  // float camera_x = 5;
  if (this->camera_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->camera_x(), target);
  }

  // float camera_y = 6;
  if (this->camera_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->camera_y(), target);
  }

  // float camera_z = 7;
  if (this->camera_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->camera_z(), target);
  }

  // float pitch = 8;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pitch(), target);
  }

  // float yaw = 9;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->yaw(), target);
  }

  // float roll = 10;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->roll(), target);
  }

  // int32 type = 11;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->type(), target);
  }

  // float fov = 12;
  if (this->fov() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->fov(), target);
  }

  // int32 version = 13;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->version(), target);
  }

  // .autodrive.workflow.proto.ParsingCalibrationStatus cali_status = 14;
  if (this->cali_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->cali_status(), target);
  }

  // .autodrive.workflow.proto.CameraValidHeight valid_height = 15;
  if (this->has_valid_height()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *this->valid_height_, deterministic, target);
  }

  // .autodrive.workflow.proto.DistortParam distort = 16;
  if (this->has_distort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->distort_, deterministic, target);
  }

  // .autodrive.workflow.proto.VCSParam vcs = 17;
  if (this->has_vcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, *this->vcs_, deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.CameraMatrix mat = 18;
  if (this->has_mat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, *this->mat_, deterministic, target);
  }

  // int64 time_stamp = 19;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->time_stamp(), target);
  }

  // int32 cam_id = 20;
  if (this->cam_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->cam_id(), target);
  }

  // int32 frame_id = 21;
  if (this->frame_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->frame_id(), target);
  }

  // int32 image_height = 22;
  if (this->image_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->image_height(), target);
  }

  // int32 image_width = 23;
  if (this->image_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->image_width(), target);
  }

  // int32 base_calib_done = 24;
  if (this->base_calib_done() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->base_calib_done(), target);
  }

  // .autodrive.workflow.proto.CalibrationType calib_src = 25;
  if (this->calib_src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->calib_src(), target);
  }

  // int64 calib_done_ts = 26;
  if (this->calib_done_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->calib_done_ts(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.CameraParam)
  return target;
}

size_t CameraParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.CameraParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.CameraValidHeight valid_height = 15;
  if (this->has_valid_height()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->valid_height_);
  }

  // .autodrive.workflow.proto.DistortParam distort = 16;
  if (this->has_distort()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->distort_);
  }

  // .autodrive.workflow.proto.VCSParam vcs = 17;
  if (this->has_vcs()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vcs_);
  }

  // .autodrive.workflow.proto.perception_base.CameraMatrix mat = 18;
  if (this->has_mat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mat_);
  }

  // float focal_u = 1;
  if (this->focal_u() != 0) {
    total_size += 1 + 4;
  }

  // float focal_v = 2;
  if (this->focal_v() != 0) {
    total_size += 1 + 4;
  }

  // float center_u = 3;
  if (this->center_u() != 0) {
    total_size += 1 + 4;
  }

  // float center_v = 4;
  if (this->center_v() != 0) {
    total_size += 1 + 4;
  }

  // float camera_x = 5;
  if (this->camera_x() != 0) {
    total_size += 1 + 4;
  }

  // float camera_y = 6;
  if (this->camera_y() != 0) {
    total_size += 1 + 4;
  }

  // float camera_z = 7;
  if (this->camera_z() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 8;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 9;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 10;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // int32 type = 11;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // float fov = 12;
  if (this->fov() != 0) {
    total_size += 1 + 4;
  }

  // int32 version = 13;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // .autodrive.workflow.proto.ParsingCalibrationStatus cali_status = 14;
  if (this->cali_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cali_status());
  }

  // int64 time_stamp = 19;
  if (this->time_stamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_stamp());
  }

  // int32 cam_id = 20;
  if (this->cam_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cam_id());
  }

  // int32 frame_id = 21;
  if (this->frame_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_id());
  }

  // int32 image_height = 22;
  if (this->image_height() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_height());
  }

  // int32 image_width = 23;
  if (this->image_width() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image_width());
  }

  // int32 base_calib_done = 24;
  if (this->base_calib_done() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_calib_done());
  }

  // .autodrive.workflow.proto.CalibrationType calib_src = 25;
  if (this->calib_src() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->calib_src());
  }

  // int64 calib_done_ts = 26;
  if (this->calib_done_ts() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->calib_done_ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.CameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.CameraParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.CameraParam)
    MergeFrom(*source);
  }
}

void CameraParam::MergeFrom(const CameraParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.CameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_valid_height()) {
    mutable_valid_height()->::autodrive::workflow::proto::CameraValidHeight::MergeFrom(from.valid_height());
  }
  if (from.has_distort()) {
    mutable_distort()->::autodrive::workflow::proto::DistortParam::MergeFrom(from.distort());
  }
  if (from.has_vcs()) {
    mutable_vcs()->::autodrive::workflow::proto::VCSParam::MergeFrom(from.vcs());
  }
  if (from.has_mat()) {
    mutable_mat()->::autodrive::workflow::proto::perception_base::CameraMatrix::MergeFrom(from.mat());
  }
  if (from.focal_u() != 0) {
    set_focal_u(from.focal_u());
  }
  if (from.focal_v() != 0) {
    set_focal_v(from.focal_v());
  }
  if (from.center_u() != 0) {
    set_center_u(from.center_u());
  }
  if (from.center_v() != 0) {
    set_center_v(from.center_v());
  }
  if (from.camera_x() != 0) {
    set_camera_x(from.camera_x());
  }
  if (from.camera_y() != 0) {
    set_camera_y(from.camera_y());
  }
  if (from.camera_z() != 0) {
    set_camera_z(from.camera_z());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.fov() != 0) {
    set_fov(from.fov());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.cali_status() != 0) {
    set_cali_status(from.cali_status());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.cam_id() != 0) {
    set_cam_id(from.cam_id());
  }
  if (from.frame_id() != 0) {
    set_frame_id(from.frame_id());
  }
  if (from.image_height() != 0) {
    set_image_height(from.image_height());
  }
  if (from.image_width() != 0) {
    set_image_width(from.image_width());
  }
  if (from.base_calib_done() != 0) {
    set_base_calib_done(from.base_calib_done());
  }
  if (from.calib_src() != 0) {
    set_calib_src(from.calib_src());
  }
  if (from.calib_done_ts() != 0) {
    set_calib_done_ts(from.calib_done_ts());
  }
}

void CameraParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.CameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParam::CopyFrom(const CameraParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.CameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParam::IsInitialized() const {
  return true;
}

void CameraParam::Swap(CameraParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraParam::InternalSwap(CameraParam* other) {
  using std::swap;
  swap(valid_height_, other->valid_height_);
  swap(distort_, other->distort_);
  swap(vcs_, other->vcs_);
  swap(mat_, other->mat_);
  swap(focal_u_, other->focal_u_);
  swap(focal_v_, other->focal_v_);
  swap(center_u_, other->center_u_);
  swap(center_v_, other->center_v_);
  swap(camera_x_, other->camera_x_);
  swap(camera_y_, other->camera_y_);
  swap(camera_z_, other->camera_z_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(roll_, other->roll_);
  swap(type_, other->type_);
  swap(fov_, other->fov_);
  swap(version_, other->version_);
  swap(cali_status_, other->cali_status_);
  swap(time_stamp_, other->time_stamp_);
  swap(cam_id_, other->cam_id_);
  swap(frame_id_, other->frame_id_);
  swap(image_height_, other->image_height_);
  swap(image_width_, other->image_width_);
  swap(base_calib_done_, other->base_calib_done_);
  swap(calib_src_, other->calib_src_);
  swap(calib_done_ts_, other->calib_done_ts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraParam::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParsingColor::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParsingColor::kBFieldNumber;
const int ParsingColor::kGFieldNumber;
const int ParsingColor::kRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParsingColor::ParsingColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsParsingColor();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ParsingColor)
}
ParsingColor::ParsingColor(const ParsingColor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&b_, &from.b_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&b_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ParsingColor)
}

void ParsingColor::SharedCtor() {
  ::memset(&b_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&b_)) + sizeof(r_));
  _cached_size_ = 0;
}

ParsingColor::~ParsingColor() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ParsingColor)
  SharedDtor();
}

void ParsingColor::SharedDtor() {
}

void ParsingColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsingColor::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParsingColor& ParsingColor::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsParsingColor();
  return *internal_default_instance();
}

ParsingColor* ParsingColor::New(::google::protobuf::Arena* arena) const {
  ParsingColor* n = new ParsingColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParsingColor::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ParsingColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&b_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&b_)) + sizeof(r_));
  _internal_metadata_.Clear();
}

bool ParsingColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ParsingColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 b = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 g = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 r = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ParsingColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ParsingColor)
  return false;
#undef DO_
}

void ParsingColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ParsingColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 b = 1;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->b(), output);
  }

  // uint32 g = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // uint32 r = 3;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ParsingColor)
}

::google::protobuf::uint8* ParsingColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ParsingColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 b = 1;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->b(), target);
  }

  // uint32 g = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // uint32 r = 3;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ParsingColor)
  return target;
}

size_t ParsingColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ParsingColor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 b = 1;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());
  }

  // uint32 g = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->g());
  }

  // uint32 r = 3;
  if (this->r() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->r());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsingColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ParsingColor)
  GOOGLE_DCHECK_NE(&from, this);
  const ParsingColor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParsingColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ParsingColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ParsingColor)
    MergeFrom(*source);
  }
}

void ParsingColor::MergeFrom(const ParsingColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ParsingColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.r() != 0) {
    set_r(from.r());
  }
}

void ParsingColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ParsingColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingColor::CopyFrom(const ParsingColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ParsingColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsingColor::IsInitialized() const {
  return true;
}

void ParsingColor::Swap(ParsingColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParsingColor::InternalSwap(ParsingColor* other) {
  using std::swap;
  swap(b_, other->b_);
  swap(g_, other->g_);
  swap(r_, other->r_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParsingColor::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RuntimeModelInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuntimeModelInfo::kModelIdFieldNumber;
const int RuntimeModelInfo::kModelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuntimeModelInfo::RuntimeModelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsRuntimeModelInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.RuntimeModelInfo)
}
RuntimeModelInfo::RuntimeModelInfo(const RuntimeModelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_name().size() > 0) {
    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  model_id_ = from.model_id_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.RuntimeModelInfo)
}

void RuntimeModelInfo::SharedCtor() {
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_id_ = 0;
  _cached_size_ = 0;
}

RuntimeModelInfo::~RuntimeModelInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.RuntimeModelInfo)
  SharedDtor();
}

void RuntimeModelInfo::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RuntimeModelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuntimeModelInfo::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RuntimeModelInfo& RuntimeModelInfo::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsRuntimeModelInfo();
  return *internal_default_instance();
}

RuntimeModelInfo* RuntimeModelInfo::New(::google::protobuf::Arena* arena) const {
  RuntimeModelInfo* n = new RuntimeModelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RuntimeModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.RuntimeModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_id_ = 0;
  _internal_metadata_.Clear();
}

bool RuntimeModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.RuntimeModelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 model_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.RuntimeModelInfo.model_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.RuntimeModelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.RuntimeModelInfo)
  return false;
#undef DO_
}

void RuntimeModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.RuntimeModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model_id = 1;
  if (this->model_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->model_id(), output);
  }

  // string model_name = 2;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.RuntimeModelInfo.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.RuntimeModelInfo)
}

::google::protobuf::uint8* RuntimeModelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.RuntimeModelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model_id = 1;
  if (this->model_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->model_id(), target);
  }

  // string model_name = 2;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.RuntimeModelInfo.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.RuntimeModelInfo)
  return target;
}

size_t RuntimeModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.RuntimeModelInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string model_name = 2;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  // int32 model_id = 1;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuntimeModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.RuntimeModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeModelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuntimeModelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.RuntimeModelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.RuntimeModelInfo)
    MergeFrom(*source);
  }
}

void RuntimeModelInfo::MergeFrom(const RuntimeModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.RuntimeModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.model_id() != 0) {
    set_model_id(from.model_id());
  }
}

void RuntimeModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.RuntimeModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeModelInfo::CopyFrom(const RuntimeModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.RuntimeModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeModelInfo::IsInitialized() const {
  return true;
}

void RuntimeModelInfo::Swap(RuntimeModelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuntimeModelInfo::InternalSwap(RuntimeModelInfo* other) {
  using std::swap;
  model_name_.Swap(&other->model_name_);
  swap(model_id_, other->model_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuntimeModelInfo::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParsingSetting::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ParsingSetting_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::perception_base::Header*>(
      ::autodrive::workflow::proto::perception_base::Header::internal_default_instance());
  ::autodrive::workflow::proto::_ParsingSetting_default_instance_._instance.get_mutable()->parsing_roi_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
void ParsingSetting::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ParsingSetting::clear_parsing_roi() {
  if (GetArenaNoVirtual() == NULL && parsing_roi_ != NULL) {
    delete parsing_roi_;
  }
  parsing_roi_ = NULL;
}
void ParsingSetting::clear_categories() {
  categories_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParsingSetting::kHeaderFieldNumber;
const int ParsingSetting::kParsingTypeFieldNumber;
const int ParsingSetting::kParsingChannelsFieldNumber;
const int ParsingSetting::kChannelLabelsFieldNumber;
const int ParsingSetting::kChannelColorsFieldNumber;
const int ParsingSetting::kFreespaceChannelsFieldNumber;
const int ParsingSetting::kBoundspaceChannelsFieldNumber;
const int ParsingSetting::kParsingRoiFieldNumber;
const int ParsingSetting::kParsingScaleFieldNumber;
const int ParsingSetting::kModelInfoFieldNumber;
const int ParsingSetting::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParsingSetting::ParsingSetting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsParsingSetting();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ParsingSetting)
}
ParsingSetting::ParsingSetting(const ParsingSetting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      channel_labels_(from.channel_labels_),
      channel_colors_(from.channel_colors_),
      freespace_channels_(from.freespace_channels_),
      boundspace_channels_(from.boundspace_channels_),
      model_info_(from.model_info_),
      categories_(from.categories_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::perception_base::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_parsing_roi()) {
    parsing_roi_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.parsing_roi_);
  } else {
    parsing_roi_ = NULL;
  }
  ::memcpy(&parsing_type_, &from.parsing_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&parsing_scale_) -
    reinterpret_cast<char*>(&parsing_type_)) + sizeof(parsing_scale_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ParsingSetting)
}

void ParsingSetting::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parsing_scale_) -
      reinterpret_cast<char*>(&header_)) + sizeof(parsing_scale_));
  _cached_size_ = 0;
}

ParsingSetting::~ParsingSetting() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ParsingSetting)
  SharedDtor();
}

void ParsingSetting::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete parsing_roi_;
}

void ParsingSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsingSetting::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParsingSetting& ParsingSetting::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsParsingSetting();
  return *internal_default_instance();
}

ParsingSetting* ParsingSetting::New(::google::protobuf::Arena* arena) const {
  ParsingSetting* n = new ParsingSetting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParsingSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ParsingSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_labels_.Clear();
  channel_colors_.Clear();
  freespace_channels_.Clear();
  boundspace_channels_.Clear();
  model_info_.Clear();
  categories_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && parsing_roi_ != NULL) {
    delete parsing_roi_;
  }
  parsing_roi_ = NULL;
  ::memset(&parsing_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parsing_scale_) -
      reinterpret_cast<char*>(&parsing_type_)) + sizeof(parsing_scale_));
  _internal_metadata_.Clear();
}

bool ParsingSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ParsingSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parsing_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parsing_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parsing_channels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parsing_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 channel_labels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_channel_labels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34u, input, this->mutable_channel_labels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ParsingColor channel_colors = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_channel_colors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 freespace_channels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_freespace_channels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_freespace_channels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 boundspace_channels = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boundspace_channels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_boundspace_channels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Rect parsing_roi = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parsing_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float parsing_scale = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parsing_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.RuntimeModelInfo model_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_model_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.perception_base.Category categories = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ParsingSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ParsingSetting)
  return false;
#undef DO_
}

void ParsingSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ParsingSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 parsing_type = 2;
  if (this->parsing_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parsing_type(), output);
  }

  // int32 parsing_channels = 3;
  if (this->parsing_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parsing_channels(), output);
  }

  // repeated uint64 channel_labels = 4;
  if (this->channel_labels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _channel_labels_cached_byte_size_));
  }
  for (int i = 0, n = this->channel_labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->channel_labels(i), output);
  }

  // repeated .autodrive.workflow.proto.ParsingColor channel_colors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_colors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->channel_colors(static_cast<int>(i)), output);
  }

  // repeated int32 freespace_channels = 6;
  if (this->freespace_channels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _freespace_channels_cached_byte_size_));
  }
  for (int i = 0, n = this->freespace_channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->freespace_channels(i), output);
  }

  // repeated int32 boundspace_channels = 7;
  if (this->boundspace_channels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _boundspace_channels_cached_byte_size_));
  }
  for (int i = 0, n = this->boundspace_channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->boundspace_channels(i), output);
  }

  // .autodrive.workflow.proto.perception_base.Rect parsing_roi = 8;
  if (this->has_parsing_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->parsing_roi_, output);
  }

  // float parsing_scale = 9;
  if (this->parsing_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->parsing_scale(), output);
  }

  // repeated .autodrive.workflow.proto.RuntimeModelInfo model_info = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->model_info(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.perception_base.Category categories = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->categories(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ParsingSetting)
}

::google::protobuf::uint8* ParsingSetting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ParsingSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 parsing_type = 2;
  if (this->parsing_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parsing_type(), target);
  }

  // int32 parsing_channels = 3;
  if (this->parsing_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parsing_channels(), target);
  }

  // repeated uint64 channel_labels = 4;
  if (this->channel_labels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _channel_labels_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->channel_labels_, target);
  }

  // repeated .autodrive.workflow.proto.ParsingColor channel_colors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channel_colors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->channel_colors(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 freespace_channels = 6;
  if (this->freespace_channels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _freespace_channels_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->freespace_channels_, target);
  }

  // repeated int32 boundspace_channels = 7;
  if (this->boundspace_channels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _boundspace_channels_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->boundspace_channels_, target);
  }

  // .autodrive.workflow.proto.perception_base.Rect parsing_roi = 8;
  if (this->has_parsing_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->parsing_roi_, deterministic, target);
  }

  // float parsing_scale = 9;
  if (this->parsing_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->parsing_scale(), target);
  }

  // repeated .autodrive.workflow.proto.RuntimeModelInfo model_info = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->model_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->model_info(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.perception_base.Category categories = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->categories_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->categories(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ParsingSetting)
  return target;
}

size_t ParsingSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ParsingSetting)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 channel_labels = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->channel_labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _channel_labels_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .autodrive.workflow.proto.ParsingColor channel_colors = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->channel_colors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channel_colors(static_cast<int>(i)));
    }
  }

  // repeated int32 freespace_channels = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->freespace_channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _freespace_channels_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 boundspace_channels = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->boundspace_channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _boundspace_channels_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .autodrive.workflow.proto.RuntimeModelInfo model_info = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->model_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->model_info(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.perception_base.Category categories = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->categories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->categories(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.perception_base.Rect parsing_roi = 8;
  if (this->has_parsing_roi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->parsing_roi_);
  }

  // int32 parsing_type = 2;
  if (this->parsing_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parsing_type());
  }

  // int32 parsing_channels = 3;
  if (this->parsing_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parsing_channels());
  }

  // float parsing_scale = 9;
  if (this->parsing_scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsingSetting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ParsingSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const ParsingSetting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParsingSetting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ParsingSetting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ParsingSetting)
    MergeFrom(*source);
  }
}

void ParsingSetting::MergeFrom(const ParsingSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ParsingSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_labels_.MergeFrom(from.channel_labels_);
  channel_colors_.MergeFrom(from.channel_colors_);
  freespace_channels_.MergeFrom(from.freespace_channels_);
  boundspace_channels_.MergeFrom(from.boundspace_channels_);
  model_info_.MergeFrom(from.model_info_);
  categories_.MergeFrom(from.categories_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::perception_base::Header::MergeFrom(from.header());
  }
  if (from.has_parsing_roi()) {
    mutable_parsing_roi()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.parsing_roi());
  }
  if (from.parsing_type() != 0) {
    set_parsing_type(from.parsing_type());
  }
  if (from.parsing_channels() != 0) {
    set_parsing_channels(from.parsing_channels());
  }
  if (from.parsing_scale() != 0) {
    set_parsing_scale(from.parsing_scale());
  }
}

void ParsingSetting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ParsingSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingSetting::CopyFrom(const ParsingSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ParsingSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsingSetting::IsInitialized() const {
  return true;
}

void ParsingSetting::Swap(ParsingSetting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParsingSetting::InternalSwap(ParsingSetting* other) {
  using std::swap;
  channel_labels_.InternalSwap(&other->channel_labels_);
  channel_colors_.InternalSwap(&other->channel_colors_);
  freespace_channels_.InternalSwap(&other->freespace_channels_);
  boundspace_channels_.InternalSwap(&other->boundspace_channels_);
  model_info_.InternalSwap(&other->model_info_);
  categories_.InternalSwap(&other->categories_);
  swap(header_, other->header_);
  swap(parsing_roi_, other->parsing_roi_);
  swap(parsing_type_, other->parsing_type_);
  swap(parsing_channels_, other->parsing_channels_);
  swap(parsing_scale_, other->parsing_scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParsingSetting::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DepthSetting::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_DepthSetting_default_instance_._instance.get_mutable()->camera_param_ = const_cast< ::autodrive::workflow::proto::CameraParam*>(
      ::autodrive::workflow::proto::CameraParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthSetting::kScaleNumberFieldNumber;
const int DepthSetting::kShiftScaleFieldNumber;
const int DepthSetting::kMappingTypeFieldNumber;
const int DepthSetting::kMappingShiftFieldNumber;
const int DepthSetting::kConfidenceScaleFieldNumber;
const int DepthSetting::kMaxDepthFieldNumber;
const int DepthSetting::kMinDepthFieldNumber;
const int DepthSetting::kMaxConfidenceFieldNumber;
const int DepthSetting::kMinConfidenceFieldNumber;
const int DepthSetting::kCameraParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthSetting::DepthSetting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsDepthSetting();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.DepthSetting)
}
DepthSetting::DepthSetting(const DepthSetting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_param()) {
    camera_param_ = new ::autodrive::workflow::proto::CameraParam(*from.camera_param_);
  } else {
    camera_param_ = NULL;
  }
  ::memcpy(&scale_number_, &from.scale_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_confidence_) -
    reinterpret_cast<char*>(&scale_number_)) + sizeof(min_confidence_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.DepthSetting)
}

void DepthSetting::SharedCtor() {
  ::memset(&camera_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_confidence_) -
      reinterpret_cast<char*>(&camera_param_)) + sizeof(min_confidence_));
  _cached_size_ = 0;
}

DepthSetting::~DepthSetting() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.DepthSetting)
  SharedDtor();
}

void DepthSetting::SharedDtor() {
  if (this != internal_default_instance()) delete camera_param_;
}

void DepthSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepthSetting::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DepthSetting& DepthSetting::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsDepthSetting();
  return *internal_default_instance();
}

DepthSetting* DepthSetting::New(::google::protobuf::Arena* arena) const {
  DepthSetting* n = new DepthSetting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DepthSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.DepthSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && camera_param_ != NULL) {
    delete camera_param_;
  }
  camera_param_ = NULL;
  ::memset(&scale_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_confidence_) -
      reinterpret_cast<char*>(&scale_number_)) + sizeof(min_confidence_));
  _internal_metadata_.Clear();
}

bool DepthSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.DepthSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float scale_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float shift_scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shift_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mapping_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapping_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mapping_shift = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapping_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence_scale = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_depth = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_depth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_confidence = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_confidence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.CameraParam camera_param = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.DepthSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.DepthSetting)
  return false;
#undef DO_
}

void DepthSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.DepthSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float scale_number = 1;
  if (this->scale_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale_number(), output);
  }

  // float shift_scale = 2;
  if (this->shift_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->shift_scale(), output);
  }

  // uint32 mapping_type = 3;
  if (this->mapping_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapping_type(), output);
  }

  // uint32 mapping_shift = 4;
  if (this->mapping_shift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapping_shift(), output);
  }

  // float confidence_scale = 5;
  if (this->confidence_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->confidence_scale(), output);
  }

  // float max_depth = 6;
  if (this->max_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->max_depth(), output);
  }

  // float min_depth = 7;
  if (this->min_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->min_depth(), output);
  }

  // float max_confidence = 8;
  if (this->max_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->max_confidence(), output);
  }

  // float min_confidence = 9;
  if (this->min_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->min_confidence(), output);
  }

  // .autodrive.workflow.proto.CameraParam camera_param = 10;
  if (this->has_camera_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->camera_param_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.DepthSetting)
}

::google::protobuf::uint8* DepthSetting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.DepthSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float scale_number = 1;
  if (this->scale_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale_number(), target);
  }

  // float shift_scale = 2;
  if (this->shift_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->shift_scale(), target);
  }

  // uint32 mapping_type = 3;
  if (this->mapping_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapping_type(), target);
  }

  // uint32 mapping_shift = 4;
  if (this->mapping_shift() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapping_shift(), target);
  }

  // float confidence_scale = 5;
  if (this->confidence_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->confidence_scale(), target);
  }

  // float max_depth = 6;
  if (this->max_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->max_depth(), target);
  }

  // float min_depth = 7;
  if (this->min_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->min_depth(), target);
  }

  // float max_confidence = 8;
  if (this->max_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->max_confidence(), target);
  }

  // float min_confidence = 9;
  if (this->min_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->min_confidence(), target);
  }

  // .autodrive.workflow.proto.CameraParam camera_param = 10;
  if (this->has_camera_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->camera_param_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.DepthSetting)
  return target;
}

size_t DepthSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.DepthSetting)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.CameraParam camera_param = 10;
  if (this->has_camera_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->camera_param_);
  }

  // float scale_number = 1;
  if (this->scale_number() != 0) {
    total_size += 1 + 4;
  }

  // float shift_scale = 2;
  if (this->shift_scale() != 0) {
    total_size += 1 + 4;
  }

  // uint32 mapping_type = 3;
  if (this->mapping_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mapping_type());
  }

  // uint32 mapping_shift = 4;
  if (this->mapping_shift() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mapping_shift());
  }

  // float confidence_scale = 5;
  if (this->confidence_scale() != 0) {
    total_size += 1 + 4;
  }

  // float max_depth = 6;
  if (this->max_depth() != 0) {
    total_size += 1 + 4;
  }

  // float min_depth = 7;
  if (this->min_depth() != 0) {
    total_size += 1 + 4;
  }

  // float max_confidence = 8;
  if (this->max_confidence() != 0) {
    total_size += 1 + 4;
  }

  // float min_confidence = 9;
  if (this->min_confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepthSetting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.DepthSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthSetting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DepthSetting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.DepthSetting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.DepthSetting)
    MergeFrom(*source);
  }
}

void DepthSetting::MergeFrom(const DepthSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.DepthSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_param()) {
    mutable_camera_param()->::autodrive::workflow::proto::CameraParam::MergeFrom(from.camera_param());
  }
  if (from.scale_number() != 0) {
    set_scale_number(from.scale_number());
  }
  if (from.shift_scale() != 0) {
    set_shift_scale(from.shift_scale());
  }
  if (from.mapping_type() != 0) {
    set_mapping_type(from.mapping_type());
  }
  if (from.mapping_shift() != 0) {
    set_mapping_shift(from.mapping_shift());
  }
  if (from.confidence_scale() != 0) {
    set_confidence_scale(from.confidence_scale());
  }
  if (from.max_depth() != 0) {
    set_max_depth(from.max_depth());
  }
  if (from.min_depth() != 0) {
    set_min_depth(from.min_depth());
  }
  if (from.max_confidence() != 0) {
    set_max_confidence(from.max_confidence());
  }
  if (from.min_confidence() != 0) {
    set_min_confidence(from.min_confidence());
  }
}

void DepthSetting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.DepthSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthSetting::CopyFrom(const DepthSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.DepthSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthSetting::IsInitialized() const {
  return true;
}

void DepthSetting::Swap(DepthSetting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthSetting::InternalSwap(DepthSetting* other) {
  using std::swap;
  swap(camera_param_, other->camera_param_);
  swap(scale_number_, other->scale_number_);
  swap(shift_scale_, other->shift_scale_);
  swap(mapping_type_, other->mapping_type_);
  swap(mapping_shift_, other->mapping_shift_);
  swap(confidence_scale_, other->confidence_scale_);
  swap(max_depth_, other->max_depth_);
  swap(min_depth_, other->min_depth_);
  swap(max_confidence_, other->max_confidence_);
  swap(min_confidence_, other->min_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DepthSetting::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParsingImageData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParsingImageData::kDataFieldNumber;
const int ParsingImageData::kWidthFieldNumber;
const int ParsingImageData::kHeightFieldNumber;
const int ParsingImageData::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParsingImageData::ParsingImageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsParsingImageData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ParsingImageData)
}
ParsingImageData::ParsingImageData(const ParsingImageData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ParsingImageData)
}

void ParsingImageData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  _cached_size_ = 0;
}

ParsingImageData::~ParsingImageData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ParsingImageData)
  SharedDtor();
}

void ParsingImageData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ParsingImageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsingImageData::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParsingImageData& ParsingImageData::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsParsingImageData();
  return *internal_default_instance();
}

ParsingImageData* ParsingImageData::New(::google::protobuf::Arena* arena) const {
  ParsingImageData* n = new ParsingImageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParsingImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

bool ParsingImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ParsingImageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ParsingImageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ParsingImageData)
  return false;
#undef DO_
}

void ParsingImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ParsingImageData)
}

::google::protobuf::uint8* ParsingImageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ParsingImageData)
  return target;
}

size_t ParsingImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ParsingImageData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsingImageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ParsingImageData)
  GOOGLE_DCHECK_NE(&from, this);
  const ParsingImageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParsingImageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ParsingImageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ParsingImageData)
    MergeFrom(*source);
  }
}

void ParsingImageData::MergeFrom(const ParsingImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ParsingImageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void ParsingImageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ParsingImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingImageData::CopyFrom(const ParsingImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ParsingImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsingImageData::IsInitialized() const {
  return true;
}

void ParsingImageData::Swap(ParsingImageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParsingImageData::InternalSwap(ParsingImageData* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParsingImageData::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParsingMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ParsingMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_ParsingMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_ParsingMsg_default_instance_._instance.get_mutable()->free_space_ = const_cast< ::autodrive::workflow::proto::ParsingImageData*>(
      ::autodrive::workflow::proto::ParsingImageData::internal_default_instance());
  ::autodrive::workflow::proto::_ParsingMsg_default_instance_._instance.get_mutable()->feature_map_ = const_cast< ::autodrive::workflow::proto::ParsingImageData*>(
      ::autodrive::workflow::proto::ParsingImageData::internal_default_instance());
  ::autodrive::workflow::proto::_ParsingMsg_default_instance_._instance.get_mutable()->rle_parsing_compressed_ = const_cast< ::autodrive::workflow::proto::RleCompressedData*>(
      ::autodrive::workflow::proto::RleCompressedData::internal_default_instance());
  ::autodrive::workflow::proto::_ParsingMsg_default_instance_._instance.get_mutable()->roi_output_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
  ::autodrive::workflow::proto::_ParsingMsg_default_instance_._instance.get_mutable()->image_ = const_cast< ::autodrive::workflow::proto::ParsingImage*>(
      ::autodrive::workflow::proto::ParsingImage::internal_default_instance());
  ::autodrive::workflow::proto::_ParsingMsg_default_instance_._instance.get_mutable()->parsing_setting_ = const_cast< ::autodrive::workflow::proto::ParsingSetting*>(
      ::autodrive::workflow::proto::ParsingSetting::internal_default_instance());
  ::autodrive::workflow::proto::_ParsingMsg_default_instance_._instance.get_mutable()->depth_setting_ = const_cast< ::autodrive::workflow::proto::DepthSetting*>(
      ::autodrive::workflow::proto::DepthSetting::internal_default_instance());
}
void ParsingMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ParsingMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void ParsingMsg::clear_rle_parsing_compressed() {
  if (GetArenaNoVirtual() == NULL && rle_parsing_compressed_ != NULL) {
    delete rle_parsing_compressed_;
  }
  rle_parsing_compressed_ = NULL;
}
void ParsingMsg::clear_roi_output() {
  if (GetArenaNoVirtual() == NULL && roi_output_ != NULL) {
    delete roi_output_;
  }
  roi_output_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParsingMsg::kHeaderFieldNumber;
const int ParsingMsg::kErrorFieldNumber;
const int ParsingMsg::kFreeSpaceFieldNumber;
const int ParsingMsg::kFeatureMapFieldNumber;
const int ParsingMsg::kRleParsingCompressedFieldNumber;
const int ParsingMsg::kScaleFieldNumber;
const int ParsingMsg::kRoiOutputFieldNumber;
const int ParsingMsg::kImageFieldNumber;
const int ParsingMsg::kParsingSettingFieldNumber;
const int ParsingMsg::kDepthSettingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParsingMsg::ParsingMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_parsing_2eproto::InitDefaultsParsingMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ParsingMsg)
}
ParsingMsg::ParsingMsg(const ParsingMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_free_space()) {
    free_space_ = new ::autodrive::workflow::proto::ParsingImageData(*from.free_space_);
  } else {
    free_space_ = NULL;
  }
  if (from.has_feature_map()) {
    feature_map_ = new ::autodrive::workflow::proto::ParsingImageData(*from.feature_map_);
  } else {
    feature_map_ = NULL;
  }
  if (from.has_rle_parsing_compressed()) {
    rle_parsing_compressed_ = new ::autodrive::workflow::proto::RleCompressedData(*from.rle_parsing_compressed_);
  } else {
    rle_parsing_compressed_ = NULL;
  }
  if (from.has_roi_output()) {
    roi_output_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.roi_output_);
  } else {
    roi_output_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::autodrive::workflow::proto::ParsingImage(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_parsing_setting()) {
    parsing_setting_ = new ::autodrive::workflow::proto::ParsingSetting(*from.parsing_setting_);
  } else {
    parsing_setting_ = NULL;
  }
  if (from.has_depth_setting()) {
    depth_setting_ = new ::autodrive::workflow::proto::DepthSetting(*from.depth_setting_);
  } else {
    depth_setting_ = NULL;
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ParsingMsg)
}

void ParsingMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&header_)) + sizeof(scale_));
  _cached_size_ = 0;
}

ParsingMsg::~ParsingMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ParsingMsg)
  SharedDtor();
}

void ParsingMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete free_space_;
  if (this != internal_default_instance()) delete feature_map_;
  if (this != internal_default_instance()) delete rle_parsing_compressed_;
  if (this != internal_default_instance()) delete roi_output_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete parsing_setting_;
  if (this != internal_default_instance()) delete depth_setting_;
}

void ParsingMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParsingMsg::descriptor() {
  ::protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParsingMsg& ParsingMsg::default_instance() {
  ::protobuf_parsing_2eproto::InitDefaultsParsingMsg();
  return *internal_default_instance();
}

ParsingMsg* ParsingMsg::New(::google::protobuf::Arena* arena) const {
  ParsingMsg* n = new ParsingMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParsingMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ParsingMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && free_space_ != NULL) {
    delete free_space_;
  }
  free_space_ = NULL;
  if (GetArenaNoVirtual() == NULL && feature_map_ != NULL) {
    delete feature_map_;
  }
  feature_map_ = NULL;
  if (GetArenaNoVirtual() == NULL && rle_parsing_compressed_ != NULL) {
    delete rle_parsing_compressed_;
  }
  rle_parsing_compressed_ = NULL;
  if (GetArenaNoVirtual() == NULL && roi_output_ != NULL) {
    delete roi_output_;
  }
  roi_output_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  if (GetArenaNoVirtual() == NULL && parsing_setting_ != NULL) {
    delete parsing_setting_;
  }
  parsing_setting_ = NULL;
  if (GetArenaNoVirtual() == NULL && depth_setting_ != NULL) {
    delete depth_setting_;
  }
  depth_setting_ = NULL;
  scale_ = 0;
  _internal_metadata_.Clear();
}

bool ParsingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ParsingMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ParsingImageData free_space = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_free_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ParsingImageData feature_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rle_parsing_compressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float scale = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roi_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ParsingImage image = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ParsingSetting parsing_setting = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parsing_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.DepthSetting depth_setting = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_depth_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ParsingMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ParsingMsg)
  return false;
#undef DO_
}

void ParsingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ParsingMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.ParsingImageData free_space = 3;
  if (this->has_free_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->free_space_, output);
  }

  // .autodrive.workflow.proto.ParsingImageData feature_map = 4;
  if (this->has_feature_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->feature_map_, output);
  }

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  if (this->has_rle_parsing_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rle_parsing_compressed_, output);
  }

  // float scale = 6;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scale(), output);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
  if (this->has_roi_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->roi_output_, output);
  }

  // .autodrive.workflow.proto.ParsingImage image = 8;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->image_, output);
  }

  // .autodrive.workflow.proto.ParsingSetting parsing_setting = 9;
  if (this->has_parsing_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->parsing_setting_, output);
  }

  // .autodrive.workflow.proto.DepthSetting depth_setting = 10;
  if (this->has_depth_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->depth_setting_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ParsingMsg)
}

::google::protobuf::uint8* ParsingMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ParsingMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.ParsingImageData free_space = 3;
  if (this->has_free_space()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->free_space_, deterministic, target);
  }

  // .autodrive.workflow.proto.ParsingImageData feature_map = 4;
  if (this->has_feature_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->feature_map_, deterministic, target);
  }

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  if (this->has_rle_parsing_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->rle_parsing_compressed_, deterministic, target);
  }

  // float scale = 6;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->scale(), target);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
  if (this->has_roi_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->roi_output_, deterministic, target);
  }

  // .autodrive.workflow.proto.ParsingImage image = 8;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->image_, deterministic, target);
  }

  // .autodrive.workflow.proto.ParsingSetting parsing_setting = 9;
  if (this->has_parsing_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->parsing_setting_, deterministic, target);
  }

  // .autodrive.workflow.proto.DepthSetting depth_setting = 10;
  if (this->has_depth_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->depth_setting_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ParsingMsg)
  return target;
}

size_t ParsingMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ParsingMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.ParsingImageData free_space = 3;
  if (this->has_free_space()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->free_space_);
  }

  // .autodrive.workflow.proto.ParsingImageData feature_map = 4;
  if (this->has_feature_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->feature_map_);
  }

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  if (this->has_rle_parsing_compressed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rle_parsing_compressed_);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
  if (this->has_roi_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->roi_output_);
  }

  // .autodrive.workflow.proto.ParsingImage image = 8;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->image_);
  }

  // .autodrive.workflow.proto.ParsingSetting parsing_setting = 9;
  if (this->has_parsing_setting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->parsing_setting_);
  }

  // .autodrive.workflow.proto.DepthSetting depth_setting = 10;
  if (this->has_depth_setting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->depth_setting_);
  }

  // float scale = 6;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParsingMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ParsingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ParsingMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParsingMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ParsingMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ParsingMsg)
    MergeFrom(*source);
  }
}

void ParsingMsg::MergeFrom(const ParsingMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ParsingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_free_space()) {
    mutable_free_space()->::autodrive::workflow::proto::ParsingImageData::MergeFrom(from.free_space());
  }
  if (from.has_feature_map()) {
    mutable_feature_map()->::autodrive::workflow::proto::ParsingImageData::MergeFrom(from.feature_map());
  }
  if (from.has_rle_parsing_compressed()) {
    mutable_rle_parsing_compressed()->::autodrive::workflow::proto::RleCompressedData::MergeFrom(from.rle_parsing_compressed());
  }
  if (from.has_roi_output()) {
    mutable_roi_output()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.roi_output());
  }
  if (from.has_image()) {
    mutable_image()->::autodrive::workflow::proto::ParsingImage::MergeFrom(from.image());
  }
  if (from.has_parsing_setting()) {
    mutable_parsing_setting()->::autodrive::workflow::proto::ParsingSetting::MergeFrom(from.parsing_setting());
  }
  if (from.has_depth_setting()) {
    mutable_depth_setting()->::autodrive::workflow::proto::DepthSetting::MergeFrom(from.depth_setting());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void ParsingMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ParsingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParsingMsg::CopyFrom(const ParsingMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ParsingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParsingMsg::IsInitialized() const {
  return true;
}

void ParsingMsg::Swap(ParsingMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParsingMsg::InternalSwap(ParsingMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(free_space_, other->free_space_);
  swap(feature_map_, other->feature_map_);
  swap(rle_parsing_compressed_, other->rle_parsing_compressed_);
  swap(roi_output_, other->roi_output_);
  swap(image_, other->image_);
  swap(parsing_setting_, other->parsing_setting_);
  swap(depth_setting_, other->depth_setting_);
  swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParsingMsg::GetMetadata() const {
  protobuf_parsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_parsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
