// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_data.proto

#include "image_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class ImageInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageInfo>
      _instance;
} _ImageInfo_default_instance_;
class MemInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemInfo>
      _instance;
} _MemInfo_default_instance_;
class ImageMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageMsg>
      _instance;
} _ImageMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_image_5fdata_2eproto {
void InitDefaultsImageInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_ImageInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ImageInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ImageInfo::InitAsDefaultInstance();
}

void InitDefaultsImageInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageInfoImpl);
}

void InitDefaultsMemInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_MemInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::MemInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::MemInfo::InitAsDefaultInstance();
}

void InitDefaultsMemInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMemInfoImpl);
}

void InitDefaultsImageMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_image_5fdata_2eproto::InitDefaultsImageInfo();
  protobuf_image_5fdata_2eproto::InitDefaultsMemInfo();
  {
    void* ptr = &::autodrive::workflow::proto::_ImageMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ImageMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ImageMsg::InitAsDefaultInstance();
}

void InitDefaultsImageMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImageInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImageInfo, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MemInfo, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MemInfo, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MemInfo, pitch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImageMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImageMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImageMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImageMsg, image_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImageMsg, mem_info_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImageMsg, mem_info_uv_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::ImageInfo)},
  { 7, -1, sizeof(::autodrive::workflow::proto::MemInfo)},
  { 15, -1, sizeof(::autodrive::workflow::proto::ImageMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_MemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ImageMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "image_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020image_data.proto\022\030autodrive.workflow.p"
      "roto\032\014common.proto\"*\n\tImageInfo\022\r\n\005width"
      "\030\001 \001(\r\022\016\n\006height\030\002 \001(\r\"4\n\007MemInfo\022\014\n\004add"
      "r\030\001 \001(\004\022\014\n\004size\030\002 \001(\r\022\r\n\005pitch\030\003 \001(\r\"\227\002\n"
      "\010ImageMsg\0223\n\006header\030\001 \001(\0132#.autodrive.wo"
      "rkflow.proto.MsgHeader\022.\n\005error\030\002 \001(\0132\037."
      "autodrive.workflow.proto.Error\0227\n\nimage_"
      "info\030\003 \001(\0132#.autodrive.workflow.proto.Im"
      "ageInfo\0225\n\nmem_info_y\030\004 \001(\0132!.autodrive."
      "workflow.proto.MemInfo\0226\n\013mem_info_uv\030\005 "
      "\001(\0132!.autodrive.workflow.proto.MemInfob\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 446);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image_data.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_image_5fdata_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void ImageInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageInfo::kWidthFieldNumber;
const int ImageInfo::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageInfo::ImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_image_5fdata_2eproto::InitDefaultsImageInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ImageInfo)
}

void ImageInfo::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _cached_size_ = 0;
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageInfo::descriptor() {
  ::protobuf_image_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_image_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageInfo& ImageInfo::default_instance() {
  ::protobuf_image_5fdata_2eproto::InitDefaultsImageInfo();
  return *internal_default_instance();
}

ImageInfo* ImageInfo::New(::google::protobuf::Arena* arena) const {
  ImageInfo* n = new ImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ImageInfo)
  return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ImageInfo)
}

::google::protobuf::uint8* ImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ImageInfo)
  return target;
}

size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ImageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ImageInfo)
    MergeFrom(*source);
  }
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void ImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageInfo::GetMetadata() const {
  protobuf_image_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_image_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MemInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemInfo::kAddrFieldNumber;
const int MemInfo::kSizeFieldNumber;
const int MemInfo::kPitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemInfo::MemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_image_5fdata_2eproto::InitDefaultsMemInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.MemInfo)
}
MemInfo::MemInfo(const MemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.MemInfo)
}

void MemInfo::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(pitch_));
  _cached_size_ = 0;
}

MemInfo::~MemInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.MemInfo)
  SharedDtor();
}

void MemInfo::SharedDtor() {
}

void MemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemInfo::descriptor() {
  ::protobuf_image_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_image_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemInfo& MemInfo::default_instance() {
  ::protobuf_image_5fdata_2eproto::InitDefaultsMemInfo();
  return *internal_default_instance();
}

MemInfo* MemInfo::New(::google::protobuf::Arena* arena) const {
  MemInfo* n = new MemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.MemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(pitch_));
  _internal_metadata_.Clear();
}

bool MemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.MemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.MemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.MemInfo)
  return false;
#undef DO_
}

void MemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.MemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 addr = 1;
  if (this->addr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // uint32 pitch = 3;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pitch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.MemInfo)
}

::google::protobuf::uint8* MemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.MemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 addr = 1;
  if (this->addr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // uint32 pitch = 3;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pitch(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.MemInfo)
  return target;
}

size_t MemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.MemInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  // uint32 pitch = 3;
  if (this->pitch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pitch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.MemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.MemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.MemInfo)
    MergeFrom(*source);
  }
}

void MemInfo::MergeFrom(const MemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.MemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
}

void MemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.MemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfo::CopyFrom(const MemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.MemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfo::IsInitialized() const {
  return true;
}

void MemInfo::Swap(MemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemInfo::InternalSwap(MemInfo* other) {
  using std::swap;
  swap(addr_, other->addr_);
  swap(size_, other->size_);
  swap(pitch_, other->pitch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemInfo::GetMetadata() const {
  protobuf_image_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_image_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ImageMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_ImageMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_ImageMsg_default_instance_._instance.get_mutable()->image_info_ = const_cast< ::autodrive::workflow::proto::ImageInfo*>(
      ::autodrive::workflow::proto::ImageInfo::internal_default_instance());
  ::autodrive::workflow::proto::_ImageMsg_default_instance_._instance.get_mutable()->mem_info_y_ = const_cast< ::autodrive::workflow::proto::MemInfo*>(
      ::autodrive::workflow::proto::MemInfo::internal_default_instance());
  ::autodrive::workflow::proto::_ImageMsg_default_instance_._instance.get_mutable()->mem_info_uv_ = const_cast< ::autodrive::workflow::proto::MemInfo*>(
      ::autodrive::workflow::proto::MemInfo::internal_default_instance());
}
void ImageMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ImageMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageMsg::kHeaderFieldNumber;
const int ImageMsg::kErrorFieldNumber;
const int ImageMsg::kImageInfoFieldNumber;
const int ImageMsg::kMemInfoYFieldNumber;
const int ImageMsg::kMemInfoUvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageMsg::ImageMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_image_5fdata_2eproto::InitDefaultsImageMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ImageMsg)
}
ImageMsg::ImageMsg(const ImageMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_image_info()) {
    image_info_ = new ::autodrive::workflow::proto::ImageInfo(*from.image_info_);
  } else {
    image_info_ = NULL;
  }
  if (from.has_mem_info_y()) {
    mem_info_y_ = new ::autodrive::workflow::proto::MemInfo(*from.mem_info_y_);
  } else {
    mem_info_y_ = NULL;
  }
  if (from.has_mem_info_uv()) {
    mem_info_uv_ = new ::autodrive::workflow::proto::MemInfo(*from.mem_info_uv_);
  } else {
    mem_info_uv_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ImageMsg)
}

void ImageMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_info_uv_) -
      reinterpret_cast<char*>(&header_)) + sizeof(mem_info_uv_));
  _cached_size_ = 0;
}

ImageMsg::~ImageMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ImageMsg)
  SharedDtor();
}

void ImageMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete image_info_;
  if (this != internal_default_instance()) delete mem_info_y_;
  if (this != internal_default_instance()) delete mem_info_uv_;
}

void ImageMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageMsg::descriptor() {
  ::protobuf_image_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_image_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageMsg& ImageMsg::default_instance() {
  ::protobuf_image_5fdata_2eproto::InitDefaultsImageMsg();
  return *internal_default_instance();
}

ImageMsg* ImageMsg::New(::google::protobuf::Arena* arena) const {
  ImageMsg* n = new ImageMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ImageMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_info_ != NULL) {
    delete image_info_;
  }
  image_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && mem_info_y_ != NULL) {
    delete mem_info_y_;
  }
  mem_info_y_ = NULL;
  if (GetArenaNoVirtual() == NULL && mem_info_uv_ != NULL) {
    delete mem_info_uv_;
  }
  mem_info_uv_ = NULL;
  _internal_metadata_.Clear();
}

bool ImageMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ImageMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ImageInfo image_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MemInfo mem_info_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mem_info_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MemInfo mem_info_uv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mem_info_uv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ImageMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ImageMsg)
  return false;
#undef DO_
}

void ImageMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ImageMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.ImageInfo image_info = 3;
  if (this->has_image_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->image_info_, output);
  }

  // .autodrive.workflow.proto.MemInfo mem_info_y = 4;
  if (this->has_mem_info_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mem_info_y_, output);
  }

  // .autodrive.workflow.proto.MemInfo mem_info_uv = 5;
  if (this->has_mem_info_uv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->mem_info_uv_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ImageMsg)
}

::google::protobuf::uint8* ImageMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ImageMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.ImageInfo image_info = 3;
  if (this->has_image_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->image_info_, deterministic, target);
  }

  // .autodrive.workflow.proto.MemInfo mem_info_y = 4;
  if (this->has_mem_info_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->mem_info_y_, deterministic, target);
  }

  // .autodrive.workflow.proto.MemInfo mem_info_uv = 5;
  if (this->has_mem_info_uv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->mem_info_uv_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ImageMsg)
  return target;
}

size_t ImageMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ImageMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.ImageInfo image_info = 3;
  if (this->has_image_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->image_info_);
  }

  // .autodrive.workflow.proto.MemInfo mem_info_y = 4;
  if (this->has_mem_info_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mem_info_y_);
  }

  // .autodrive.workflow.proto.MemInfo mem_info_uv = 5;
  if (this->has_mem_info_uv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mem_info_uv_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ImageMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ImageMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ImageMsg)
    MergeFrom(*source);
  }
}

void ImageMsg::MergeFrom(const ImageMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ImageMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_image_info()) {
    mutable_image_info()->::autodrive::workflow::proto::ImageInfo::MergeFrom(from.image_info());
  }
  if (from.has_mem_info_y()) {
    mutable_mem_info_y()->::autodrive::workflow::proto::MemInfo::MergeFrom(from.mem_info_y());
  }
  if (from.has_mem_info_uv()) {
    mutable_mem_info_uv()->::autodrive::workflow::proto::MemInfo::MergeFrom(from.mem_info_uv());
  }
}

void ImageMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMsg::CopyFrom(const ImageMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMsg::IsInitialized() const {
  return true;
}

void ImageMsg::Swap(ImageMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageMsg::InternalSwap(ImageMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(image_info_, other->image_info_);
  swap(mem_info_y_, other->mem_info_y_);
  swap(mem_info_uv_, other->mem_info_uv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageMsg::GetMetadata() const {
  protobuf_image_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_image_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
