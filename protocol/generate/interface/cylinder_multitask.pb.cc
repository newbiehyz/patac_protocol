// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cylinder_multitask.proto

#include "cylinder_multitask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class CameraValidFlagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraValidFlag>
      _instance;
} _CameraValidFlag_default_instance_;
class CylinderMultiTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CylinderMultiTask>
      _instance;
} _CylinderMultiTask_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_cylinder_5fmultitask_2eproto {
void InitDefaultsCameraValidFlagImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_CameraValidFlag_default_instance_;
    new (ptr) ::autodrive::workflow::proto::CameraValidFlag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::CameraValidFlag::InitAsDefaultInstance();
}

void InitDefaultsCameraValidFlag() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraValidFlagImpl);
}

void InitDefaultsCylinderMultiTaskImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_cylinder_5fmultitask_2eproto::InitDefaultsCameraValidFlag();
  protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRawsData();
  protobuf_real3d_2eproto::InitDefaultsReal3DData();
  protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsCylinderParsingImageData();
  {
    void* ptr = &::autodrive::workflow::proto::_CylinderMultiTask_default_instance_;
    new (ptr) ::autodrive::workflow::proto::CylinderMultiTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::CylinderMultiTask::InitAsDefaultInstance();
}

void InitDefaultsCylinderMultiTask() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCylinderMultiTaskImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraValidFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraValidFlag, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraValidFlag, obstacle_raw_data_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraValidFlag, real3d_data_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CameraValidFlag, parsing_data_valid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderMultiTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderMultiTask, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderMultiTask, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderMultiTask, camera_flag_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderMultiTask, obstacle_raw_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderMultiTask, real3d_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderMultiTask, parsing_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::CameraValidFlag)},
  { 9, -1, sizeof(::autodrive::workflow::proto::CylinderMultiTask)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_CameraValidFlag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_CylinderMultiTask_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cylinder_multitask.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030cylinder_multitask.proto\022\030autodrive.wo"
      "rkflow.proto\032\014common.proto\032\022obstacle_raw"
      ".proto\032\014real3d.proto\032\033sync_cylinder_pars"
      "ing.proto\032\025perception_base.proto\"\257\001\n\017Cam"
      "eraValidFlag\022D\n\tsensor_id\030\001 \001(\01621.autodr"
      "ive.workflow.proto.perception_base.Image"
      "Id\022\037\n\027obstacle_raw_data_valid\030\002 \001(\010\022\031\n\021r"
      "eal3d_data_valid\030\003 \001(\010\022\032\n\022parsing_data_v"
      "alid\030\004 \001(\010\"\211\003\n\021CylinderMultiTask\0223\n\006head"
      "er\030\001 \001(\0132#.autodrive.workflow.proto.MsgH"
      "eader\022.\n\005error\030\002 \001(\0132\037.autodrive.workflo"
      "w.proto.Error\022C\n\020camera_flag_data\030\003 \003(\0132"
      ").autodrive.workflow.proto.CameraValidFl"
      "ag\022E\n\021obstacle_raw_data\030\004 \003(\0132*.autodriv"
      "e.workflow.proto.ObstacleRawsData\0229\n\013rea"
      "l3d_data\030\005 \003(\0132$.autodrive.workflow.prot"
      "o.Real3DData\022H\n\014parsing_data\030\006 \003(\01322.aut"
      "odrive.workflow.proto.CylinderParsingIma"
      "geDatab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 734);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cylinder_multitask.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_obstacle_5fraw_2eproto::AddDescriptors();
  ::protobuf_real3d_2eproto::AddDescriptors();
  ::protobuf_sync_5fcylinder_5fparsing_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cylinder_5fmultitask_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void CameraValidFlag::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraValidFlag::kSensorIdFieldNumber;
const int CameraValidFlag::kObstacleRawDataValidFieldNumber;
const int CameraValidFlag::kReal3DDataValidFieldNumber;
const int CameraValidFlag::kParsingDataValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraValidFlag::CameraValidFlag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cylinder_5fmultitask_2eproto::InitDefaultsCameraValidFlag();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.CameraValidFlag)
}
CameraValidFlag::CameraValidFlag(const CameraValidFlag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_id_, &from.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parsing_data_valid_) -
    reinterpret_cast<char*>(&sensor_id_)) + sizeof(parsing_data_valid_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.CameraValidFlag)
}

void CameraValidFlag::SharedCtor() {
  ::memset(&sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parsing_data_valid_) -
      reinterpret_cast<char*>(&sensor_id_)) + sizeof(parsing_data_valid_));
  _cached_size_ = 0;
}

CameraValidFlag::~CameraValidFlag() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.CameraValidFlag)
  SharedDtor();
}

void CameraValidFlag::SharedDtor() {
}

void CameraValidFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraValidFlag::descriptor() {
  ::protobuf_cylinder_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cylinder_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraValidFlag& CameraValidFlag::default_instance() {
  ::protobuf_cylinder_5fmultitask_2eproto::InitDefaultsCameraValidFlag();
  return *internal_default_instance();
}

CameraValidFlag* CameraValidFlag::New(::google::protobuf::Arena* arena) const {
  CameraValidFlag* n = new CameraValidFlag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraValidFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.CameraValidFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parsing_data_valid_) -
      reinterpret_cast<char*>(&sensor_id_)) + sizeof(parsing_data_valid_));
  _internal_metadata_.Clear();
}

bool CameraValidFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.CameraValidFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.ImageId sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sensor_id(static_cast< ::autodrive::workflow::proto::perception_base::ImageId >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool obstacle_raw_data_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obstacle_raw_data_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool real3d_data_valid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &real3d_data_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool parsing_data_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parsing_data_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.CameraValidFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.CameraValidFlag)
  return false;
#undef DO_
}

void CameraValidFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.CameraValidFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.ImageId sensor_id = 1;
  if (this->sensor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sensor_id(), output);
  }

  // bool obstacle_raw_data_valid = 2;
  if (this->obstacle_raw_data_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->obstacle_raw_data_valid(), output);
  }

  // bool real3d_data_valid = 3;
  if (this->real3d_data_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->real3d_data_valid(), output);
  }

  // bool parsing_data_valid = 4;
  if (this->parsing_data_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->parsing_data_valid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.CameraValidFlag)
}

::google::protobuf::uint8* CameraValidFlag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.CameraValidFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.ImageId sensor_id = 1;
  if (this->sensor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sensor_id(), target);
  }

  // bool obstacle_raw_data_valid = 2;
  if (this->obstacle_raw_data_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->obstacle_raw_data_valid(), target);
  }

  // bool real3d_data_valid = 3;
  if (this->real3d_data_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->real3d_data_valid(), target);
  }

  // bool parsing_data_valid = 4;
  if (this->parsing_data_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->parsing_data_valid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.CameraValidFlag)
  return target;
}

size_t CameraValidFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.CameraValidFlag)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.perception_base.ImageId sensor_id = 1;
  if (this->sensor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sensor_id());
  }

  // bool obstacle_raw_data_valid = 2;
  if (this->obstacle_raw_data_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool real3d_data_valid = 3;
  if (this->real3d_data_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool parsing_data_valid = 4;
  if (this->parsing_data_valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraValidFlag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.CameraValidFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraValidFlag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraValidFlag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.CameraValidFlag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.CameraValidFlag)
    MergeFrom(*source);
  }
}

void CameraValidFlag::MergeFrom(const CameraValidFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.CameraValidFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_id() != 0) {
    set_sensor_id(from.sensor_id());
  }
  if (from.obstacle_raw_data_valid() != 0) {
    set_obstacle_raw_data_valid(from.obstacle_raw_data_valid());
  }
  if (from.real3d_data_valid() != 0) {
    set_real3d_data_valid(from.real3d_data_valid());
  }
  if (from.parsing_data_valid() != 0) {
    set_parsing_data_valid(from.parsing_data_valid());
  }
}

void CameraValidFlag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.CameraValidFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraValidFlag::CopyFrom(const CameraValidFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.CameraValidFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraValidFlag::IsInitialized() const {
  return true;
}

void CameraValidFlag::Swap(CameraValidFlag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraValidFlag::InternalSwap(CameraValidFlag* other) {
  using std::swap;
  swap(sensor_id_, other->sensor_id_);
  swap(obstacle_raw_data_valid_, other->obstacle_raw_data_valid_);
  swap(real3d_data_valid_, other->real3d_data_valid_);
  swap(parsing_data_valid_, other->parsing_data_valid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraValidFlag::GetMetadata() const {
  protobuf_cylinder_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cylinder_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CylinderMultiTask::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_CylinderMultiTask_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_CylinderMultiTask_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void CylinderMultiTask::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void CylinderMultiTask::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void CylinderMultiTask::clear_obstacle_raw_data() {
  obstacle_raw_data_.Clear();
}
void CylinderMultiTask::clear_real3d_data() {
  real3d_data_.Clear();
}
void CylinderMultiTask::clear_parsing_data() {
  parsing_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CylinderMultiTask::kHeaderFieldNumber;
const int CylinderMultiTask::kErrorFieldNumber;
const int CylinderMultiTask::kCameraFlagDataFieldNumber;
const int CylinderMultiTask::kObstacleRawDataFieldNumber;
const int CylinderMultiTask::kReal3DDataFieldNumber;
const int CylinderMultiTask::kParsingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CylinderMultiTask::CylinderMultiTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cylinder_5fmultitask_2eproto::InitDefaultsCylinderMultiTask();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.CylinderMultiTask)
}
CylinderMultiTask::CylinderMultiTask(const CylinderMultiTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      camera_flag_data_(from.camera_flag_data_),
      obstacle_raw_data_(from.obstacle_raw_data_),
      real3d_data_(from.real3d_data_),
      parsing_data_(from.parsing_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.CylinderMultiTask)
}

void CylinderMultiTask::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&header_)) + sizeof(error_));
  _cached_size_ = 0;
}

CylinderMultiTask::~CylinderMultiTask() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.CylinderMultiTask)
  SharedDtor();
}

void CylinderMultiTask::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void CylinderMultiTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CylinderMultiTask::descriptor() {
  ::protobuf_cylinder_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cylinder_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CylinderMultiTask& CylinderMultiTask::default_instance() {
  ::protobuf_cylinder_5fmultitask_2eproto::InitDefaultsCylinderMultiTask();
  return *internal_default_instance();
}

CylinderMultiTask* CylinderMultiTask::New(::google::protobuf::Arena* arena) const {
  CylinderMultiTask* n = new CylinderMultiTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CylinderMultiTask::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.CylinderMultiTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_flag_data_.Clear();
  obstacle_raw_data_.Clear();
  real3d_data_.Clear();
  parsing_data_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool CylinderMultiTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.CylinderMultiTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.CameraValidFlag camera_flag_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_camera_flag_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ObstacleRawsData obstacle_raw_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_obstacle_raw_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.Real3DData real3d_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_real3d_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.CylinderParsingImageData parsing_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_parsing_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.CylinderMultiTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.CylinderMultiTask)
  return false;
#undef DO_
}

void CylinderMultiTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.CylinderMultiTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // repeated .autodrive.workflow.proto.CameraValidFlag camera_flag_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_flag_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camera_flag_data(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.ObstacleRawsData obstacle_raw_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_raw_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->obstacle_raw_data(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.Real3DData real3d_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->real3d_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->real3d_data(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.CylinderParsingImageData parsing_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parsing_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->parsing_data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.CylinderMultiTask)
}

::google::protobuf::uint8* CylinderMultiTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.CylinderMultiTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // repeated .autodrive.workflow.proto.CameraValidFlag camera_flag_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_flag_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->camera_flag_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.ObstacleRawsData obstacle_raw_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_raw_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->obstacle_raw_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.Real3DData real3d_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->real3d_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->real3d_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.CylinderParsingImageData parsing_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parsing_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->parsing_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.CylinderMultiTask)
  return target;
}

size_t CylinderMultiTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.CylinderMultiTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.CameraValidFlag camera_flag_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->camera_flag_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->camera_flag_data(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.ObstacleRawsData obstacle_raw_data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_raw_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle_raw_data(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.Real3DData real3d_data = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->real3d_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->real3d_data(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.CylinderParsingImageData parsing_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->parsing_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->parsing_data(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CylinderMultiTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.CylinderMultiTask)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderMultiTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CylinderMultiTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.CylinderMultiTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.CylinderMultiTask)
    MergeFrom(*source);
  }
}

void CylinderMultiTask::MergeFrom(const CylinderMultiTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.CylinderMultiTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_flag_data_.MergeFrom(from.camera_flag_data_);
  obstacle_raw_data_.MergeFrom(from.obstacle_raw_data_);
  real3d_data_.MergeFrom(from.real3d_data_);
  parsing_data_.MergeFrom(from.parsing_data_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
}

void CylinderMultiTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.CylinderMultiTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderMultiTask::CopyFrom(const CylinderMultiTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.CylinderMultiTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderMultiTask::IsInitialized() const {
  return true;
}

void CylinderMultiTask::Swap(CylinderMultiTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CylinderMultiTask::InternalSwap(CylinderMultiTask* other) {
  using std::swap;
  camera_flag_data_.InternalSwap(&other->camera_flag_data_);
  obstacle_raw_data_.InternalSwap(&other->obstacle_raw_data_);
  real3d_data_.InternalSwap(&other->real3d_data_);
  parsing_data_.InternalSwap(&other->parsing_data_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CylinderMultiTask::GetMetadata() const {
  protobuf_cylinder_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cylinder_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
