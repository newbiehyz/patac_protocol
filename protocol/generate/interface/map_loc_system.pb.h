// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_loc_system.proto

#ifndef PROTOBUF_map_5floc_5fsystem_2eproto__INCLUDED
#define PROTOBUF_map_5floc_5fsystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "system_type_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_map_5floc_5fsystem_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMapLocSystemMsgImpl();
void InitDefaultsMapLocSystemMsg();
inline void InitDefaults() {
  InitDefaultsMapLocSystemMsg();
}
}  // namespace protobuf_map_5floc_5fsystem_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class MapLocSystemMsg;
class MapLocSystemMsgDefaultTypeInternal;
extern MapLocSystemMsgDefaultTypeInternal _MapLocSystemMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum AVP_LPState {
  AVPOff = 0,
  kAbort = 1,
  kStandby = 2,
  kMapLearning = 3,
  kParkinPreActive = 4,
  kCruising = 5,
  kParkInProcess = 6,
  kSuspend = 7,
  kFunctionComplete = 8,
  kMapManageMent = 9,
  AVP_LPState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AVP_LPState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AVP_LPState_IsValid(int value);
const AVP_LPState AVP_LPState_MIN = AVPOff;
const AVP_LPState AVP_LPState_MAX = kMapManageMent;
const int AVP_LPState_ARRAYSIZE = AVP_LPState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AVP_LPState_descriptor();
inline const ::std::string& AVP_LPState_Name(AVP_LPState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AVP_LPState_descriptor(), value);
}
inline bool AVP_LPState_Parse(
    const ::std::string& name, AVP_LPState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AVP_LPState>(
    AVP_LPState_descriptor(), name, value);
}
enum ControlCmd {
  kDefault = 0,
  kGetAllMapHeader = 1,
  kGetOneMapInfo = 2,
  kDeleteOneMap = 3,
  kDeleteAllMap = 4,
  kSendTargetParkingSlot = 5,
  kFinishMapLearning = 6,
  kCruisingEnd = 7,
  kReset = 8,
  ControlCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlCmd_IsValid(int value);
const ControlCmd ControlCmd_MIN = kDefault;
const ControlCmd ControlCmd_MAX = kReset;
const int ControlCmd_ARRAYSIZE = ControlCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlCmd_descriptor();
inline const ::std::string& ControlCmd_Name(ControlCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlCmd_descriptor(), value);
}
inline bool ControlCmd_Parse(
    const ::std::string& name, ControlCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlCmd>(
    ControlCmd_descriptor(), name, value);
}
// ===================================================================

class MapLocSystemMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapLocSystemMsg) */ {
 public:
  MapLocSystemMsg();
  virtual ~MapLocSystemMsg();

  MapLocSystemMsg(const MapLocSystemMsg& from);

  inline MapLocSystemMsg& operator=(const MapLocSystemMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapLocSystemMsg(MapLocSystemMsg&& from) noexcept
    : MapLocSystemMsg() {
    *this = ::std::move(from);
  }

  inline MapLocSystemMsg& operator=(MapLocSystemMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapLocSystemMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapLocSystemMsg* internal_default_instance() {
    return reinterpret_cast<const MapLocSystemMsg*>(
               &_MapLocSystemMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MapLocSystemMsg* other);
  friend void swap(MapLocSystemMsg& a, MapLocSystemMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapLocSystemMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  MapLocSystemMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapLocSystemMsg& from);
  void MergeFrom(const MapLocSystemMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapLocSystemMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 8;
  bool has_apa_states() const;
  void clear_apa_states();
  static const int kApaStatesFieldNumber = 8;
  const ::autodrive::workflow::proto::ApaStateInfo& apa_states() const;
  ::autodrive::workflow::proto::ApaStateInfo* release_apa_states();
  ::autodrive::workflow::proto::ApaStateInfo* mutable_apa_states();
  void set_allocated_apa_states(::autodrive::workflow::proto::ApaStateInfo* apa_states);

  // .autodrive.workflow.proto.AVP_LPState avp_lp_state = 3;
  void clear_avp_lp_state();
  static const int kAvpLpStateFieldNumber = 3;
  ::autodrive::workflow::proto::AVP_LPState avp_lp_state() const;
  void set_avp_lp_state(::autodrive::workflow::proto::AVP_LPState value);

  // .autodrive.workflow.proto.ControlCmd control_cmd = 4;
  void clear_control_cmd();
  static const int kControlCmdFieldNumber = 4;
  ::autodrive::workflow::proto::ControlCmd control_cmd() const;
  void set_control_cmd(::autodrive::workflow::proto::ControlCmd value);

  // uint32 target_parking_slot_id = 5;
  void clear_target_parking_slot_id();
  static const int kTargetParkingSlotIdFieldNumber = 5;
  ::google::protobuf::uint32 target_parking_slot_id() const;
  void set_target_parking_slot_id(::google::protobuf::uint32 value);

  // uint32 delete_map_id = 6;
  void clear_delete_map_id();
  static const int kDeleteMapIdFieldNumber = 6;
  ::google::protobuf::uint32 delete_map_id() const;
  void set_delete_map_id(::google::protobuf::uint32 value);

  // uint32 select_map_id = 7;
  void clear_select_map_id();
  static const int kSelectMapIdFieldNumber = 7;
  ::google::protobuf::uint32 select_map_id() const;
  void set_select_map_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapLocSystemMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::ApaStateInfo* apa_states_;
  int avp_lp_state_;
  int control_cmd_;
  ::google::protobuf::uint32 target_parking_slot_id_;
  ::google::protobuf::uint32 delete_map_id_;
  ::google::protobuf::uint32 select_map_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5floc_5fsystem_2eproto::TableStruct;
  friend void ::protobuf_map_5floc_5fsystem_2eproto::InitDefaultsMapLocSystemMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapLocSystemMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool MapLocSystemMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& MapLocSystemMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapLocSystemMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* MapLocSystemMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapLocSystemMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* MapLocSystemMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapLocSystemMsg.header)
  return header_;
}
inline void MapLocSystemMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapLocSystemMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool MapLocSystemMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& MapLocSystemMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapLocSystemMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* MapLocSystemMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapLocSystemMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* MapLocSystemMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapLocSystemMsg.error)
  return error_;
}
inline void MapLocSystemMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapLocSystemMsg.error)
}

// .autodrive.workflow.proto.AVP_LPState avp_lp_state = 3;
inline void MapLocSystemMsg::clear_avp_lp_state() {
  avp_lp_state_ = 0;
}
inline ::autodrive::workflow::proto::AVP_LPState MapLocSystemMsg::avp_lp_state() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapLocSystemMsg.avp_lp_state)
  return static_cast< ::autodrive::workflow::proto::AVP_LPState >(avp_lp_state_);
}
inline void MapLocSystemMsg::set_avp_lp_state(::autodrive::workflow::proto::AVP_LPState value) {
  
  avp_lp_state_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapLocSystemMsg.avp_lp_state)
}

// .autodrive.workflow.proto.ControlCmd control_cmd = 4;
inline void MapLocSystemMsg::clear_control_cmd() {
  control_cmd_ = 0;
}
inline ::autodrive::workflow::proto::ControlCmd MapLocSystemMsg::control_cmd() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapLocSystemMsg.control_cmd)
  return static_cast< ::autodrive::workflow::proto::ControlCmd >(control_cmd_);
}
inline void MapLocSystemMsg::set_control_cmd(::autodrive::workflow::proto::ControlCmd value) {
  
  control_cmd_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapLocSystemMsg.control_cmd)
}

// uint32 target_parking_slot_id = 5;
inline void MapLocSystemMsg::clear_target_parking_slot_id() {
  target_parking_slot_id_ = 0u;
}
inline ::google::protobuf::uint32 MapLocSystemMsg::target_parking_slot_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapLocSystemMsg.target_parking_slot_id)
  return target_parking_slot_id_;
}
inline void MapLocSystemMsg::set_target_parking_slot_id(::google::protobuf::uint32 value) {
  
  target_parking_slot_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapLocSystemMsg.target_parking_slot_id)
}

// uint32 delete_map_id = 6;
inline void MapLocSystemMsg::clear_delete_map_id() {
  delete_map_id_ = 0u;
}
inline ::google::protobuf::uint32 MapLocSystemMsg::delete_map_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapLocSystemMsg.delete_map_id)
  return delete_map_id_;
}
inline void MapLocSystemMsg::set_delete_map_id(::google::protobuf::uint32 value) {
  
  delete_map_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapLocSystemMsg.delete_map_id)
}

// uint32 select_map_id = 7;
inline void MapLocSystemMsg::clear_select_map_id() {
  select_map_id_ = 0u;
}
inline ::google::protobuf::uint32 MapLocSystemMsg::select_map_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapLocSystemMsg.select_map_id)
  return select_map_id_;
}
inline void MapLocSystemMsg::set_select_map_id(::google::protobuf::uint32 value) {
  
  select_map_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapLocSystemMsg.select_map_id)
}

// .autodrive.workflow.proto.ApaStateInfo apa_states = 8;
inline bool MapLocSystemMsg::has_apa_states() const {
  return this != internal_default_instance() && apa_states_ != NULL;
}
inline const ::autodrive::workflow::proto::ApaStateInfo& MapLocSystemMsg::apa_states() const {
  const ::autodrive::workflow::proto::ApaStateInfo* p = apa_states_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapLocSystemMsg.apa_states)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::ApaStateInfo*>(
      &::autodrive::workflow::proto::_ApaStateInfo_default_instance_);
}
inline ::autodrive::workflow::proto::ApaStateInfo* MapLocSystemMsg::release_apa_states() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapLocSystemMsg.apa_states)
  
  ::autodrive::workflow::proto::ApaStateInfo* temp = apa_states_;
  apa_states_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::ApaStateInfo* MapLocSystemMsg::mutable_apa_states() {
  
  if (apa_states_ == NULL) {
    apa_states_ = new ::autodrive::workflow::proto::ApaStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapLocSystemMsg.apa_states)
  return apa_states_;
}
inline void MapLocSystemMsg::set_allocated_apa_states(::autodrive::workflow::proto::ApaStateInfo* apa_states) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(apa_states_);
  }
  if (apa_states) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apa_states = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apa_states, submessage_arena);
    }
    
  } else {
    
  }
  apa_states_ = apa_states;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapLocSystemMsg.apa_states)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::AVP_LPState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::AVP_LPState>() {
  return ::autodrive::workflow::proto::AVP_LPState_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::ControlCmd> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::ControlCmd>() {
  return ::autodrive::workflow::proto::ControlCmd_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_5floc_5fsystem_2eproto__INCLUDED
