// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_display.proto

#ifndef PROTOBUF_map_5fdisplay_2eproto__INCLUDED
#define PROTOBUF_map_5fdisplay_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "basic.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_map_5fdisplay_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSingleTrajPointImpl();
void InitDefaultsSingleTrajPoint();
void InitDefaultsGlbTrajectoryImpl();
void InitDefaultsGlbTrajectory();
void InitDefaultsGlbPrkgSlotImpl();
void InitDefaultsGlbPrkgSlot();
void InitDefaultsGlbPrcpPrkgSlotsImpl();
void InitDefaultsGlbPrcpPrkgSlots();
void InitDefaultsGlbRoadMarkImpl();
void InitDefaultsGlbRoadMark();
void InitDefaultsGlbRoadMakMapImpl();
void InitDefaultsGlbRoadMakMap();
void InitDefaultsGlbObstacleImpl();
void InitDefaultsGlbObstacle();
void InitDefaultsGlbPrcpObstacleImpl();
void InitDefaultsGlbPrcpObstacle();
void InitDefaultsMapCommonHeaderImpl();
void InitDefaultsMapCommonHeader();
void InitDefaultsMapInfoImpl();
void InitDefaultsMapInfo();
void InitDefaultsMapDisplayMsgImpl();
void InitDefaultsMapDisplayMsg();
inline void InitDefaults() {
  InitDefaultsSingleTrajPoint();
  InitDefaultsGlbTrajectory();
  InitDefaultsGlbPrkgSlot();
  InitDefaultsGlbPrcpPrkgSlots();
  InitDefaultsGlbRoadMark();
  InitDefaultsGlbRoadMakMap();
  InitDefaultsGlbObstacle();
  InitDefaultsGlbPrcpObstacle();
  InitDefaultsMapCommonHeader();
  InitDefaultsMapInfo();
  InitDefaultsMapDisplayMsg();
}
}  // namespace protobuf_map_5fdisplay_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class GlbObstacle;
class GlbObstacleDefaultTypeInternal;
extern GlbObstacleDefaultTypeInternal _GlbObstacle_default_instance_;
class GlbPrcpObstacle;
class GlbPrcpObstacleDefaultTypeInternal;
extern GlbPrcpObstacleDefaultTypeInternal _GlbPrcpObstacle_default_instance_;
class GlbPrcpPrkgSlots;
class GlbPrcpPrkgSlotsDefaultTypeInternal;
extern GlbPrcpPrkgSlotsDefaultTypeInternal _GlbPrcpPrkgSlots_default_instance_;
class GlbPrkgSlot;
class GlbPrkgSlotDefaultTypeInternal;
extern GlbPrkgSlotDefaultTypeInternal _GlbPrkgSlot_default_instance_;
class GlbRoadMakMap;
class GlbRoadMakMapDefaultTypeInternal;
extern GlbRoadMakMapDefaultTypeInternal _GlbRoadMakMap_default_instance_;
class GlbRoadMark;
class GlbRoadMarkDefaultTypeInternal;
extern GlbRoadMarkDefaultTypeInternal _GlbRoadMark_default_instance_;
class GlbTrajectory;
class GlbTrajectoryDefaultTypeInternal;
extern GlbTrajectoryDefaultTypeInternal _GlbTrajectory_default_instance_;
class MapCommonHeader;
class MapCommonHeaderDefaultTypeInternal;
extern MapCommonHeaderDefaultTypeInternal _MapCommonHeader_default_instance_;
class MapDisplayMsg;
class MapDisplayMsgDefaultTypeInternal;
extern MapDisplayMsgDefaultTypeInternal _MapDisplayMsg_default_instance_;
class MapInfo;
class MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
class SingleTrajPoint;
class SingleTrajPointDefaultTypeInternal;
extern SingleTrajPointDefaultTypeInternal _SingleTrajPoint_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum SlotType {
  kReserve = 0,
  kVertical = 1,
  kHorizontal = 2,
  kOblique = 3,
  SlotType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SlotType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SlotType_IsValid(int value);
const SlotType SlotType_MIN = kReserve;
const SlotType SlotType_MAX = kOblique;
const int SlotType_ARRAYSIZE = SlotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SlotType_descriptor();
inline const ::std::string& SlotType_Name(SlotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SlotType_descriptor(), value);
}
inline bool SlotType_Parse(
    const ::std::string& name, SlotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SlotType>(
    SlotType_descriptor(), name, value);
}
enum SlotStatus {
  kSlotStatusEmpy = 0,
  kSlotStatusUnknown = 1,
  kSlotStatusPedestrianOcupy = 2,
  kSlotStatusTwowheelscartOcupy = 3,
  kSlotStatusConebarrelOcupy = 4,
  kSlotStatusFloorlockOcupy = 5,
  kSlotStatusNoparksignOcupy = 6,
  kSlotStatusOtherObstaclesOcupy = 7,
  SlotStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SlotStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SlotStatus_IsValid(int value);
const SlotStatus SlotStatus_MIN = kSlotStatusEmpy;
const SlotStatus SlotStatus_MAX = kSlotStatusOtherObstaclesOcupy;
const int SlotStatus_ARRAYSIZE = SlotStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SlotStatus_descriptor();
inline const ::std::string& SlotStatus_Name(SlotStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SlotStatus_descriptor(), value);
}
inline bool SlotStatus_Parse(
    const ::std::string& name, SlotStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SlotStatus>(
    SlotStatus_descriptor(), name, value);
}
enum RoadMarkType {
  kRoadMarkTypeReserved = 0,
  kStraight = 2,
  kStrOrTurnL = 3,
  kStrOrTurnR = 4,
  kStrOrTurnA = 5,
  kTurinLeft = 6,
  kTurnLOrTurnA = 7,
  kTurnLOrLConf = 8,
  kTurnR = 9,
  kTurnROrRConf = 10,
  kTurnLR = 11,
  kTurnA = 12,
  kTurnLForb = 13,
  kTurnRForb = 14,
  kTurnAForb = 15,
  kStrOrTurnLOrTrunR = 16,
  kStrOrTurnLOrTrunA = 17,
  kTurnROrTurnA = 18,
  kDistConfLine = 22,
  kStopyieldLine = 23,
  kDecelyieldLine = 24,
  kStopline = 25,
  kNoParkArea = 26,
  kCrossWalk = 27,
  kSolidLaneLine = 28,
  kDashedLaneLine = 29,
  kZebraCrossing = 30,
  kGridLine = 31,
  kLeadingLine = 32,
  kOthers = 99,
  RoadMarkType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RoadMarkType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RoadMarkType_IsValid(int value);
const RoadMarkType RoadMarkType_MIN = kRoadMarkTypeReserved;
const RoadMarkType RoadMarkType_MAX = kOthers;
const int RoadMarkType_ARRAYSIZE = RoadMarkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadMarkType_descriptor();
inline const ::std::string& RoadMarkType_Name(RoadMarkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadMarkType_descriptor(), value);
}
inline bool RoadMarkType_Parse(
    const ::std::string& name, RoadMarkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadMarkType>(
    RoadMarkType_descriptor(), name, value);
}
enum DangerLevel {
  kNoDanger = 0,
  kLevel1 = 1,
  kLevel2 = 2,
  kLevel3 = 3,
  DangerLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DangerLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DangerLevel_IsValid(int value);
const DangerLevel DangerLevel_MIN = kNoDanger;
const DangerLevel DangerLevel_MAX = kLevel3;
const int DangerLevel_ARRAYSIZE = DangerLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* DangerLevel_descriptor();
inline const ::std::string& DangerLevel_Name(DangerLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    DangerLevel_descriptor(), value);
}
inline bool DangerLevel_Parse(
    const ::std::string& name, DangerLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DangerLevel>(
    DangerLevel_descriptor(), name, value);
}
enum Map2HmiObstacleType {
  kMap2HmiObstacleTypeReserved = 0,
  kMap2HmiObstacleTypeWheelStopper = 1,
  kMap2HmiObstacleTypeParkingLock = 2,
  kMap2HmiObstacleTypePillars = 3,
  kMap2HmiObstacleTypeSpeedBump = 4,
  kMap2HmiObstacleTypeFireBox = 5,
  kMap2HmiObstacleTypeAnticollisionBall = 6,
  kMap2HmiObstacleTypeReflector = 7,
  kMap2HmiObstacleTypeCurbStone = 8,
  kMap2HmiObstacleTypeTrafficCone = 9,
  kMap2HmiObstacleTypeParkingAFrameSign = 10,
  kMap2HmiObstacleTypeParkingGate = 11,
  Map2HmiObstacleType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Map2HmiObstacleType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Map2HmiObstacleType_IsValid(int value);
const Map2HmiObstacleType Map2HmiObstacleType_MIN = kMap2HmiObstacleTypeReserved;
const Map2HmiObstacleType Map2HmiObstacleType_MAX = kMap2HmiObstacleTypeParkingGate;
const int Map2HmiObstacleType_ARRAYSIZE = Map2HmiObstacleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Map2HmiObstacleType_descriptor();
inline const ::std::string& Map2HmiObstacleType_Name(Map2HmiObstacleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Map2HmiObstacleType_descriptor(), value);
}
inline bool Map2HmiObstacleType_Parse(
    const ::std::string& name, Map2HmiObstacleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Map2HmiObstacleType>(
    Map2HmiObstacleType_descriptor(), name, value);
}
enum ObjStatus {
  kUnknown = 0,
  kGateOpen = 1,
  kGateClose = 2,
  ObjStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjStatus_IsValid(int value);
const ObjStatus ObjStatus_MIN = kUnknown;
const ObjStatus ObjStatus_MAX = kGateClose;
const int ObjStatus_ARRAYSIZE = ObjStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjStatus_descriptor();
inline const ::std::string& ObjStatus_Name(ObjStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjStatus_descriptor(), value);
}
inline bool ObjStatus_Parse(
    const ::std::string& name, ObjStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjStatus>(
    ObjStatus_descriptor(), name, value);
}
enum MapDataType {
  kRealTimeMap = 0,
  kStoredMap = 1,
  MapDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MapDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MapDataType_IsValid(int value);
const MapDataType MapDataType_MIN = kRealTimeMap;
const MapDataType MapDataType_MAX = kStoredMap;
const int MapDataType_ARRAYSIZE = MapDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MapDataType_descriptor();
inline const ::std::string& MapDataType_Name(MapDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapDataType_descriptor(), value);
}
inline bool MapDataType_Parse(
    const ::std::string& name, MapDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapDataType>(
    MapDataType_descriptor(), name, value);
}
// ===================================================================

class SingleTrajPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.SingleTrajPoint) */ {
 public:
  SingleTrajPoint();
  virtual ~SingleTrajPoint();

  SingleTrajPoint(const SingleTrajPoint& from);

  inline SingleTrajPoint& operator=(const SingleTrajPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleTrajPoint(SingleTrajPoint&& from) noexcept
    : SingleTrajPoint() {
    *this = ::std::move(from);
  }

  inline SingleTrajPoint& operator=(SingleTrajPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleTrajPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTrajPoint* internal_default_instance() {
    return reinterpret_cast<const SingleTrajPoint*>(
               &_SingleTrajPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SingleTrajPoint* other);
  friend void swap(SingleTrajPoint& a, SingleTrajPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleTrajPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleTrajPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleTrajPoint& from);
  void MergeFrom(const SingleTrajPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleTrajPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector3f point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::autodrive::workflow::proto::Vector3f& point() const;
  ::autodrive::workflow::proto::Vector3f* release_point();
  ::autodrive::workflow::proto::Vector3f* mutable_point();
  void set_allocated_point(::autodrive::workflow::proto::Vector3f* point);

  // float floor = 2;
  void clear_floor();
  static const int kFloorFieldNumber = 2;
  float floor() const;
  void set_floor(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.SingleTrajPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector3f* point_;
  float floor_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsSingleTrajPointImpl();
};
// -------------------------------------------------------------------

class GlbTrajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.GlbTrajectory) */ {
 public:
  GlbTrajectory();
  virtual ~GlbTrajectory();

  GlbTrajectory(const GlbTrajectory& from);

  inline GlbTrajectory& operator=(const GlbTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlbTrajectory(GlbTrajectory&& from) noexcept
    : GlbTrajectory() {
    *this = ::std::move(from);
  }

  inline GlbTrajectory& operator=(GlbTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlbTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlbTrajectory* internal_default_instance() {
    return reinterpret_cast<const GlbTrajectory*>(
               &_GlbTrajectory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GlbTrajectory* other);
  friend void swap(GlbTrajectory& a, GlbTrajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlbTrajectory* New() const PROTOBUF_FINAL { return New(NULL); }

  GlbTrajectory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlbTrajectory& from);
  void MergeFrom(const GlbTrajectory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlbTrajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.SingleTrajPoint glb_trajectory_point = 1;
  int glb_trajectory_point_size() const;
  void clear_glb_trajectory_point();
  static const int kGlbTrajectoryPointFieldNumber = 1;
  const ::autodrive::workflow::proto::SingleTrajPoint& glb_trajectory_point(int index) const;
  ::autodrive::workflow::proto::SingleTrajPoint* mutable_glb_trajectory_point(int index);
  ::autodrive::workflow::proto::SingleTrajPoint* add_glb_trajectory_point();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SingleTrajPoint >*
      mutable_glb_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SingleTrajPoint >&
      glb_trajectory_point() const;

  // .autodrive.workflow.proto.Vector3f start_point = 2;
  bool has_start_point() const;
  void clear_start_point();
  static const int kStartPointFieldNumber = 2;
  const ::autodrive::workflow::proto::Vector3f& start_point() const;
  ::autodrive::workflow::proto::Vector3f* release_start_point();
  ::autodrive::workflow::proto::Vector3f* mutable_start_point();
  void set_allocated_start_point(::autodrive::workflow::proto::Vector3f* start_point);

  // .autodrive.workflow.proto.Vector3f end_point = 3;
  bool has_end_point() const;
  void clear_end_point();
  static const int kEndPointFieldNumber = 3;
  const ::autodrive::workflow::proto::Vector3f& end_point() const;
  ::autodrive::workflow::proto::Vector3f* release_end_point();
  ::autodrive::workflow::proto::Vector3f* mutable_end_point();
  void set_allocated_end_point(::autodrive::workflow::proto::Vector3f* end_point);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.GlbTrajectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SingleTrajPoint > glb_trajectory_point_;
  ::autodrive::workflow::proto::Vector3f* start_point_;
  ::autodrive::workflow::proto::Vector3f* end_point_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsGlbTrajectoryImpl();
};
// -------------------------------------------------------------------

class GlbPrkgSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.GlbPrkgSlot) */ {
 public:
  GlbPrkgSlot();
  virtual ~GlbPrkgSlot();

  GlbPrkgSlot(const GlbPrkgSlot& from);

  inline GlbPrkgSlot& operator=(const GlbPrkgSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlbPrkgSlot(GlbPrkgSlot&& from) noexcept
    : GlbPrkgSlot() {
    *this = ::std::move(from);
  }

  inline GlbPrkgSlot& operator=(GlbPrkgSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlbPrkgSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlbPrkgSlot* internal_default_instance() {
    return reinterpret_cast<const GlbPrkgSlot*>(
               &_GlbPrkgSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GlbPrkgSlot* other);
  friend void swap(GlbPrkgSlot& a, GlbPrkgSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlbPrkgSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  GlbPrkgSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlbPrkgSlot& from);
  void MergeFrom(const GlbPrkgSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlbPrkgSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.Vector3f slot_points = 4;
  int slot_points_size() const;
  void clear_slot_points();
  static const int kSlotPointsFieldNumber = 4;
  const ::autodrive::workflow::proto::Vector3f& slot_points(int index) const;
  ::autodrive::workflow::proto::Vector3f* mutable_slot_points(int index);
  ::autodrive::workflow::proto::Vector3f* add_slot_points();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f >*
      mutable_slot_points();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f >&
      slot_points() const;

  // .autodrive.workflow.proto.Vector3f lever_start_point = 7;
  bool has_lever_start_point() const;
  void clear_lever_start_point();
  static const int kLeverStartPointFieldNumber = 7;
  const ::autodrive::workflow::proto::Vector3f& lever_start_point() const;
  ::autodrive::workflow::proto::Vector3f* release_lever_start_point();
  ::autodrive::workflow::proto::Vector3f* mutable_lever_start_point();
  void set_allocated_lever_start_point(::autodrive::workflow::proto::Vector3f* lever_start_point);

  // .autodrive.workflow.proto.Vector3f lever_end_point = 8;
  bool has_lever_end_point() const;
  void clear_lever_end_point();
  static const int kLeverEndPointFieldNumber = 8;
  const ::autodrive::workflow::proto::Vector3f& lever_end_point() const;
  ::autodrive::workflow::proto::Vector3f* release_lever_end_point();
  ::autodrive::workflow::proto::Vector3f* mutable_lever_end_point();
  void set_allocated_lever_end_point(::autodrive::workflow::proto::Vector3f* lever_end_point);

  // uint32 slot_id = 1;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 1;
  ::google::protobuf::uint32 slot_id() const;
  void set_slot_id(::google::protobuf::uint32 value);

  // .autodrive.workflow.proto.SlotStatus slot_status = 2;
  void clear_slot_status();
  static const int kSlotStatusFieldNumber = 2;
  ::autodrive::workflow::proto::SlotStatus slot_status() const;
  void set_slot_status(::autodrive::workflow::proto::SlotStatus value);

  // .autodrive.workflow.proto.SlotType slot_type = 3;
  void clear_slot_type();
  static const int kSlotTypeFieldNumber = 3;
  ::autodrive::workflow::proto::SlotType slot_type() const;
  void set_slot_type(::autodrive::workflow::proto::SlotType value);

  // bool is_target_slot = 5;
  void clear_is_target_slot();
  static const int kIsTargetSlotFieldNumber = 5;
  bool is_target_slot() const;
  void set_is_target_slot(bool value);

  // bool has_lever = 6;
  void clear_has_lever();
  static const int kHasLeverFieldNumber = 6;
  bool has_lever() const;
  void set_has_lever(bool value);

  // float floor = 9;
  void clear_floor();
  static const int kFloorFieldNumber = 9;
  float floor() const;
  void set_floor(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.GlbPrkgSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f > slot_points_;
  ::autodrive::workflow::proto::Vector3f* lever_start_point_;
  ::autodrive::workflow::proto::Vector3f* lever_end_point_;
  ::google::protobuf::uint32 slot_id_;
  int slot_status_;
  int slot_type_;
  bool is_target_slot_;
  bool has_lever_;
  float floor_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsGlbPrkgSlotImpl();
};
// -------------------------------------------------------------------

class GlbPrcpPrkgSlots : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.GlbPrcpPrkgSlots) */ {
 public:
  GlbPrcpPrkgSlots();
  virtual ~GlbPrcpPrkgSlots();

  GlbPrcpPrkgSlots(const GlbPrcpPrkgSlots& from);

  inline GlbPrcpPrkgSlots& operator=(const GlbPrcpPrkgSlots& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlbPrcpPrkgSlots(GlbPrcpPrkgSlots&& from) noexcept
    : GlbPrcpPrkgSlots() {
    *this = ::std::move(from);
  }

  inline GlbPrcpPrkgSlots& operator=(GlbPrcpPrkgSlots&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlbPrcpPrkgSlots& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlbPrcpPrkgSlots* internal_default_instance() {
    return reinterpret_cast<const GlbPrcpPrkgSlots*>(
               &_GlbPrcpPrkgSlots_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GlbPrcpPrkgSlots* other);
  friend void swap(GlbPrcpPrkgSlots& a, GlbPrcpPrkgSlots& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlbPrcpPrkgSlots* New() const PROTOBUF_FINAL { return New(NULL); }

  GlbPrcpPrkgSlots* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlbPrcpPrkgSlots& from);
  void MergeFrom(const GlbPrcpPrkgSlots& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlbPrcpPrkgSlots* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
  int glb_prkg_slots_size() const;
  void clear_glb_prkg_slots();
  static const int kGlbPrkgSlotsFieldNumber = 1;
  const ::autodrive::workflow::proto::GlbPrkgSlot& glb_prkg_slots(int index) const;
  ::autodrive::workflow::proto::GlbPrkgSlot* mutable_glb_prkg_slots(int index);
  ::autodrive::workflow::proto::GlbPrkgSlot* add_glb_prkg_slots();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbPrkgSlot >*
      mutable_glb_prkg_slots();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbPrkgSlot >&
      glb_prkg_slots() const;

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.GlbPrcpPrkgSlots)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbPrkgSlot > glb_prkg_slots_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsGlbPrcpPrkgSlotsImpl();
};
// -------------------------------------------------------------------

class GlbRoadMark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.GlbRoadMark) */ {
 public:
  GlbRoadMark();
  virtual ~GlbRoadMark();

  GlbRoadMark(const GlbRoadMark& from);

  inline GlbRoadMark& operator=(const GlbRoadMark& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlbRoadMark(GlbRoadMark&& from) noexcept
    : GlbRoadMark() {
    *this = ::std::move(from);
  }

  inline GlbRoadMark& operator=(GlbRoadMark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlbRoadMark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlbRoadMark* internal_default_instance() {
    return reinterpret_cast<const GlbRoadMark*>(
               &_GlbRoadMark_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GlbRoadMark* other);
  friend void swap(GlbRoadMark& a, GlbRoadMark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlbRoadMark* New() const PROTOBUF_FINAL { return New(NULL); }

  GlbRoadMark* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlbRoadMark& from);
  void MergeFrom(const GlbRoadMark& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlbRoadMark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.Vector2f border = 5;
  int border_size() const;
  void clear_border();
  static const int kBorderFieldNumber = 5;
  const ::autodrive::workflow::proto::Vector2f& border(int index) const;
  ::autodrive::workflow::proto::Vector2f* mutable_border(int index);
  ::autodrive::workflow::proto::Vector2f* add_border();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >*
      mutable_border();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >&
      border() const;

  // .autodrive.workflow.proto.Vector3f position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::autodrive::workflow::proto::Vector3f& position() const;
  ::autodrive::workflow::proto::Vector3f* release_position();
  ::autodrive::workflow::proto::Vector3f* mutable_position();
  void set_allocated_position(::autodrive::workflow::proto::Vector3f* position);

  // float odom_heading = 2;
  void clear_odom_heading();
  static const int kOdomHeadingFieldNumber = 2;
  float odom_heading() const;
  void set_odom_heading(float value);

  // uint32 roadmark_id = 3;
  void clear_roadmark_id();
  static const int kRoadmarkIdFieldNumber = 3;
  ::google::protobuf::uint32 roadmark_id() const;
  void set_roadmark_id(::google::protobuf::uint32 value);

  // .autodrive.workflow.proto.RoadMarkType roadmark_type = 4;
  void clear_roadmark_type();
  static const int kRoadmarkTypeFieldNumber = 4;
  ::autodrive::workflow::proto::RoadMarkType roadmark_type() const;
  void set_roadmark_type(::autodrive::workflow::proto::RoadMarkType value);

  // float floor = 6;
  void clear_floor();
  static const int kFloorFieldNumber = 6;
  float floor() const;
  void set_floor(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.GlbRoadMark)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f > border_;
  ::autodrive::workflow::proto::Vector3f* position_;
  float odom_heading_;
  ::google::protobuf::uint32 roadmark_id_;
  int roadmark_type_;
  float floor_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsGlbRoadMarkImpl();
};
// -------------------------------------------------------------------

class GlbRoadMakMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.GlbRoadMakMap) */ {
 public:
  GlbRoadMakMap();
  virtual ~GlbRoadMakMap();

  GlbRoadMakMap(const GlbRoadMakMap& from);

  inline GlbRoadMakMap& operator=(const GlbRoadMakMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlbRoadMakMap(GlbRoadMakMap&& from) noexcept
    : GlbRoadMakMap() {
    *this = ::std::move(from);
  }

  inline GlbRoadMakMap& operator=(GlbRoadMakMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlbRoadMakMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlbRoadMakMap* internal_default_instance() {
    return reinterpret_cast<const GlbRoadMakMap*>(
               &_GlbRoadMakMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GlbRoadMakMap* other);
  friend void swap(GlbRoadMakMap& a, GlbRoadMakMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlbRoadMakMap* New() const PROTOBUF_FINAL { return New(NULL); }

  GlbRoadMakMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlbRoadMakMap& from);
  void MergeFrom(const GlbRoadMakMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlbRoadMakMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.GlbRoadMark glb_road_mak_map = 1;
  int glb_road_mak_map_size() const;
  void clear_glb_road_mak_map();
  static const int kGlbRoadMakMapFieldNumber = 1;
  const ::autodrive::workflow::proto::GlbRoadMark& glb_road_mak_map(int index) const;
  ::autodrive::workflow::proto::GlbRoadMark* mutable_glb_road_mak_map(int index);
  ::autodrive::workflow::proto::GlbRoadMark* add_glb_road_mak_map();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbRoadMark >*
      mutable_glb_road_mak_map();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbRoadMark >&
      glb_road_mak_map() const;

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.GlbRoadMakMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbRoadMark > glb_road_mak_map_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsGlbRoadMakMapImpl();
};
// -------------------------------------------------------------------

class GlbObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.GlbObstacle) */ {
 public:
  GlbObstacle();
  virtual ~GlbObstacle();

  GlbObstacle(const GlbObstacle& from);

  inline GlbObstacle& operator=(const GlbObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlbObstacle(GlbObstacle&& from) noexcept
    : GlbObstacle() {
    *this = ::std::move(from);
  }

  inline GlbObstacle& operator=(GlbObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlbObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlbObstacle* internal_default_instance() {
    return reinterpret_cast<const GlbObstacle*>(
               &_GlbObstacle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GlbObstacle* other);
  friend void swap(GlbObstacle& a, GlbObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlbObstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  GlbObstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlbObstacle& from);
  void MergeFrom(const GlbObstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlbObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.Vector2f border = 6;
  int border_size() const;
  void clear_border();
  static const int kBorderFieldNumber = 6;
  const ::autodrive::workflow::proto::Vector2f& border(int index) const;
  ::autodrive::workflow::proto::Vector2f* mutable_border(int index);
  ::autodrive::workflow::proto::Vector2f* add_border();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >*
      mutable_border();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >&
      border() const;

  // .autodrive.workflow.proto.Vector3f center_position = 1;
  bool has_center_position() const;
  void clear_center_position();
  static const int kCenterPositionFieldNumber = 1;
  const ::autodrive::workflow::proto::Vector3f& center_position() const;
  ::autodrive::workflow::proto::Vector3f* release_center_position();
  ::autodrive::workflow::proto::Vector3f* mutable_center_position();
  void set_allocated_center_position(::autodrive::workflow::proto::Vector3f* center_position);

  // float odom_heading = 2;
  void clear_odom_heading();
  static const int kOdomHeadingFieldNumber = 2;
  float odom_heading() const;
  void set_odom_heading(float value);

  // .autodrive.workflow.proto.Map2HmiObstacleType obstacle_type = 3;
  void clear_obstacle_type();
  static const int kObstacleTypeFieldNumber = 3;
  ::autodrive::workflow::proto::Map2HmiObstacleType obstacle_type() const;
  void set_obstacle_type(::autodrive::workflow::proto::Map2HmiObstacleType value);

  // .autodrive.workflow.proto.DangerLevel danger_level = 4;
  void clear_danger_level();
  static const int kDangerLevelFieldNumber = 4;
  ::autodrive::workflow::proto::DangerLevel danger_level() const;
  void set_danger_level(::autodrive::workflow::proto::DangerLevel value);

  // uint32 target_id = 5;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 5;
  ::google::protobuf::uint32 target_id() const;
  void set_target_id(::google::protobuf::uint32 value);

  // .autodrive.workflow.proto.ObjStatus obj_status = 7;
  void clear_obj_status();
  static const int kObjStatusFieldNumber = 7;
  ::autodrive::workflow::proto::ObjStatus obj_status() const;
  void set_obj_status(::autodrive::workflow::proto::ObjStatus value);

  // float floor = 8;
  void clear_floor();
  static const int kFloorFieldNumber = 8;
  float floor() const;
  void set_floor(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.GlbObstacle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f > border_;
  ::autodrive::workflow::proto::Vector3f* center_position_;
  float odom_heading_;
  int obstacle_type_;
  int danger_level_;
  ::google::protobuf::uint32 target_id_;
  int obj_status_;
  float floor_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsGlbObstacleImpl();
};
// -------------------------------------------------------------------

class GlbPrcpObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.GlbPrcpObstacle) */ {
 public:
  GlbPrcpObstacle();
  virtual ~GlbPrcpObstacle();

  GlbPrcpObstacle(const GlbPrcpObstacle& from);

  inline GlbPrcpObstacle& operator=(const GlbPrcpObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlbPrcpObstacle(GlbPrcpObstacle&& from) noexcept
    : GlbPrcpObstacle() {
    *this = ::std::move(from);
  }

  inline GlbPrcpObstacle& operator=(GlbPrcpObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlbPrcpObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlbPrcpObstacle* internal_default_instance() {
    return reinterpret_cast<const GlbPrcpObstacle*>(
               &_GlbPrcpObstacle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GlbPrcpObstacle* other);
  friend void swap(GlbPrcpObstacle& a, GlbPrcpObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlbPrcpObstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  GlbPrcpObstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlbPrcpObstacle& from);
  void MergeFrom(const GlbPrcpObstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlbPrcpObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
  int glb_prcp_obstacle_size() const;
  void clear_glb_prcp_obstacle();
  static const int kGlbPrcpObstacleFieldNumber = 1;
  const ::autodrive::workflow::proto::GlbObstacle& glb_prcp_obstacle(int index) const;
  ::autodrive::workflow::proto::GlbObstacle* mutable_glb_prcp_obstacle(int index);
  ::autodrive::workflow::proto::GlbObstacle* add_glb_prcp_obstacle();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbObstacle >*
      mutable_glb_prcp_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbObstacle >&
      glb_prcp_obstacle() const;

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.GlbPrcpObstacle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbObstacle > glb_prcp_obstacle_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsGlbPrcpObstacleImpl();
};
// -------------------------------------------------------------------

class MapCommonHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapCommonHeader) */ {
 public:
  MapCommonHeader();
  virtual ~MapCommonHeader();

  MapCommonHeader(const MapCommonHeader& from);

  inline MapCommonHeader& operator=(const MapCommonHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapCommonHeader(MapCommonHeader&& from) noexcept
    : MapCommonHeader() {
    *this = ::std::move(from);
  }

  inline MapCommonHeader& operator=(MapCommonHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapCommonHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapCommonHeader* internal_default_instance() {
    return reinterpret_cast<const MapCommonHeader*>(
               &_MapCommonHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(MapCommonHeader* other);
  friend void swap(MapCommonHeader& a, MapCommonHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapCommonHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  MapCommonHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapCommonHeader& from);
  void MergeFrom(const MapCommonHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapCommonHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.Vector2f glb_trajectory_point = 6;
  int glb_trajectory_point_size() const;
  void clear_glb_trajectory_point();
  static const int kGlbTrajectoryPointFieldNumber = 6;
  const ::autodrive::workflow::proto::Vector2f& glb_trajectory_point(int index) const;
  ::autodrive::workflow::proto::Vector2f* mutable_glb_trajectory_point(int index);
  ::autodrive::workflow::proto::Vector2f* add_glb_trajectory_point();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >*
      mutable_glb_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >&
      glb_trajectory_point() const;

  // int32 map_id = 1;
  void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  ::google::protobuf::int32 map_id() const;
  void set_map_id(::google::protobuf::int32 value);

  // .autodrive.workflow.proto.MapDataType map_type = 2;
  void clear_map_type();
  static const int kMapTypeFieldNumber = 2;
  ::autodrive::workflow::proto::MapDataType map_type() const;
  void set_map_type(::autodrive::workflow::proto::MapDataType value);

  // uint64 utc_time = 3;
  void clear_utc_time();
  static const int kUtcTimeFieldNumber = 3;
  ::google::protobuf::uint64 utc_time() const;
  void set_utc_time(::google::protobuf::uint64 value);

  // int32 latitude = 4;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  ::google::protobuf::int32 latitude() const;
  void set_latitude(::google::protobuf::int32 value);

  // int32 longitude = 5;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 5;
  ::google::protobuf::int32 longitude() const;
  void set_longitude(::google::protobuf::int32 value);

  // float map_total_height = 7;
  void clear_map_total_height();
  static const int kMapTotalHeightFieldNumber = 7;
  float map_total_height() const;
  void set_map_total_height(float value);

  // float map_total_floor = 8;
  void clear_map_total_floor();
  static const int kMapTotalFloorFieldNumber = 8;
  float map_total_floor() const;
  void set_map_total_floor(float value);

  // int32 slot_parking_times = 9;
  void clear_slot_parking_times();
  static const int kSlotParkingTimesFieldNumber = 9;
  ::google::protobuf::int32 slot_parking_times() const;
  void set_slot_parking_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapCommonHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f > glb_trajectory_point_;
  ::google::protobuf::int32 map_id_;
  int map_type_;
  ::google::protobuf::uint64 utc_time_;
  ::google::protobuf::int32 latitude_;
  ::google::protobuf::int32 longitude_;
  float map_total_height_;
  float map_total_floor_;
  ::google::protobuf::int32 slot_parking_times_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsMapCommonHeaderImpl();
};
// -------------------------------------------------------------------

class MapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapInfo) */ {
 public:
  MapInfo();
  virtual ~MapInfo();

  MapInfo(const MapInfo& from);

  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapInfo(MapInfo&& from) noexcept
    : MapInfo() {
    *this = ::std::move(from);
  }

  inline MapInfo& operator=(MapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapInfo* internal_default_instance() {
    return reinterpret_cast<const MapInfo*>(
               &_MapInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(MapInfo* other);
  friend void swap(MapInfo& a, MapInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MapInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapInfo& from);
  void MergeFrom(const MapInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MapCommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MapCommonHeader& header() const;
  ::autodrive::workflow::proto::MapCommonHeader* release_header();
  ::autodrive::workflow::proto::MapCommonHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MapCommonHeader* header);

  // .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
  bool has_global_trajectory() const;
  void clear_global_trajectory();
  static const int kGlobalTrajectoryFieldNumber = 2;
  const ::autodrive::workflow::proto::GlbTrajectory& global_trajectory() const;
  ::autodrive::workflow::proto::GlbTrajectory* release_global_trajectory();
  ::autodrive::workflow::proto::GlbTrajectory* mutable_global_trajectory();
  void set_allocated_global_trajectory(::autodrive::workflow::proto::GlbTrajectory* global_trajectory);

  // .autodrive.workflow.proto.GlbPrcpPrkgSlots global_percep_parking_slots = 3;
  bool has_global_percep_parking_slots() const;
  void clear_global_percep_parking_slots();
  static const int kGlobalPercepParkingSlotsFieldNumber = 3;
  const ::autodrive::workflow::proto::GlbPrcpPrkgSlots& global_percep_parking_slots() const;
  ::autodrive::workflow::proto::GlbPrcpPrkgSlots* release_global_percep_parking_slots();
  ::autodrive::workflow::proto::GlbPrcpPrkgSlots* mutable_global_percep_parking_slots();
  void set_allocated_global_percep_parking_slots(::autodrive::workflow::proto::GlbPrcpPrkgSlots* global_percep_parking_slots);

  // .autodrive.workflow.proto.GlbRoadMakMap global_road_mark_map = 4;
  bool has_global_road_mark_map() const;
  void clear_global_road_mark_map();
  static const int kGlobalRoadMarkMapFieldNumber = 4;
  const ::autodrive::workflow::proto::GlbRoadMakMap& global_road_mark_map() const;
  ::autodrive::workflow::proto::GlbRoadMakMap* release_global_road_mark_map();
  ::autodrive::workflow::proto::GlbRoadMakMap* mutable_global_road_mark_map();
  void set_allocated_global_road_mark_map(::autodrive::workflow::proto::GlbRoadMakMap* global_road_mark_map);

  // .autodrive.workflow.proto.GlbPrcpObstacle global_perception_obstacle = 5;
  bool has_global_perception_obstacle() const;
  void clear_global_perception_obstacle();
  static const int kGlobalPerceptionObstacleFieldNumber = 5;
  const ::autodrive::workflow::proto::GlbPrcpObstacle& global_perception_obstacle() const;
  ::autodrive::workflow::proto::GlbPrcpObstacle* release_global_perception_obstacle();
  ::autodrive::workflow::proto::GlbPrcpObstacle* mutable_global_perception_obstacle();
  void set_allocated_global_perception_obstacle(::autodrive::workflow::proto::GlbPrcpObstacle* global_perception_obstacle);

  // float map_distance = 6;
  void clear_map_distance();
  static const int kMapDistanceFieldNumber = 6;
  float map_distance() const;
  void set_map_distance(float value);

  // float rest_map_distance = 7;
  void clear_rest_map_distance();
  static const int kRestMapDistanceFieldNumber = 7;
  float rest_map_distance() const;
  void set_rest_map_distance(float value);

  // uint32 num_speed_bumps = 8;
  void clear_num_speed_bumps();
  static const int kNumSpeedBumpsFieldNumber = 8;
  ::google::protobuf::uint32 num_speed_bumps() const;
  void set_num_speed_bumps(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MapCommonHeader* header_;
  ::autodrive::workflow::proto::GlbTrajectory* global_trajectory_;
  ::autodrive::workflow::proto::GlbPrcpPrkgSlots* global_percep_parking_slots_;
  ::autodrive::workflow::proto::GlbRoadMakMap* global_road_mark_map_;
  ::autodrive::workflow::proto::GlbPrcpObstacle* global_perception_obstacle_;
  float map_distance_;
  float rest_map_distance_;
  ::google::protobuf::uint32 num_speed_bumps_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsMapInfoImpl();
};
// -------------------------------------------------------------------

class MapDisplayMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapDisplayMsg) */ {
 public:
  MapDisplayMsg();
  virtual ~MapDisplayMsg();

  MapDisplayMsg(const MapDisplayMsg& from);

  inline MapDisplayMsg& operator=(const MapDisplayMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapDisplayMsg(MapDisplayMsg&& from) noexcept
    : MapDisplayMsg() {
    *this = ::std::move(from);
  }

  inline MapDisplayMsg& operator=(MapDisplayMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapDisplayMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapDisplayMsg* internal_default_instance() {
    return reinterpret_cast<const MapDisplayMsg*>(
               &_MapDisplayMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(MapDisplayMsg* other);
  friend void swap(MapDisplayMsg& a, MapDisplayMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapDisplayMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  MapDisplayMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapDisplayMsg& from);
  void MergeFrom(const MapDisplayMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapDisplayMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.MapCommonHeader all_map_headers = 5;
  int all_map_headers_size() const;
  void clear_all_map_headers();
  static const int kAllMapHeadersFieldNumber = 5;
  const ::autodrive::workflow::proto::MapCommonHeader& all_map_headers(int index) const;
  ::autodrive::workflow::proto::MapCommonHeader* mutable_all_map_headers(int index);
  ::autodrive::workflow::proto::MapCommonHeader* add_all_map_headers();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapCommonHeader >*
      mutable_all_map_headers();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapCommonHeader >&
      all_map_headers() const;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.MapInfo map_info = 3;
  bool has_map_info() const;
  void clear_map_info();
  static const int kMapInfoFieldNumber = 3;
  const ::autodrive::workflow::proto::MapInfo& map_info() const;
  ::autodrive::workflow::proto::MapInfo* release_map_info();
  ::autodrive::workflow::proto::MapInfo* mutable_map_info();
  void set_allocated_map_info(::autodrive::workflow::proto::MapInfo* map_info);

  // bool update_map_info = 4;
  void clear_update_map_info();
  static const int kUpdateMapInfoFieldNumber = 4;
  bool update_map_info() const;
  void set_update_map_info(bool value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapDisplayMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapCommonHeader > all_map_headers_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::MapInfo* map_info_;
  bool update_map_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fdisplay_2eproto::TableStruct;
  friend void ::protobuf_map_5fdisplay_2eproto::InitDefaultsMapDisplayMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleTrajPoint

// .autodrive.workflow.proto.Vector3f point = 1;
inline bool SingleTrajPoint::has_point() const {
  return this != internal_default_instance() && point_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& SingleTrajPoint::point() const {
  const ::autodrive::workflow::proto::Vector3f* p = point_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SingleTrajPoint.point)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* SingleTrajPoint::release_point() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SingleTrajPoint.point)
  
  ::autodrive::workflow::proto::Vector3f* temp = point_;
  point_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* SingleTrajPoint::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SingleTrajPoint.point)
  return point_;
}
inline void SingleTrajPoint::set_allocated_point(::autodrive::workflow::proto::Vector3f* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(point_);
  }
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SingleTrajPoint.point)
}

// float floor = 2;
inline void SingleTrajPoint::clear_floor() {
  floor_ = 0;
}
inline float SingleTrajPoint::floor() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SingleTrajPoint.floor)
  return floor_;
}
inline void SingleTrajPoint::set_floor(float value) {
  
  floor_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SingleTrajPoint.floor)
}

// -------------------------------------------------------------------

// GlbTrajectory

// repeated .autodrive.workflow.proto.SingleTrajPoint glb_trajectory_point = 1;
inline int GlbTrajectory::glb_trajectory_point_size() const {
  return glb_trajectory_point_.size();
}
inline void GlbTrajectory::clear_glb_trajectory_point() {
  glb_trajectory_point_.Clear();
}
inline const ::autodrive::workflow::proto::SingleTrajPoint& GlbTrajectory::glb_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbTrajectory.glb_trajectory_point)
  return glb_trajectory_point_.Get(index);
}
inline ::autodrive::workflow::proto::SingleTrajPoint* GlbTrajectory::mutable_glb_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbTrajectory.glb_trajectory_point)
  return glb_trajectory_point_.Mutable(index);
}
inline ::autodrive::workflow::proto::SingleTrajPoint* GlbTrajectory::add_glb_trajectory_point() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.GlbTrajectory.glb_trajectory_point)
  return glb_trajectory_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SingleTrajPoint >*
GlbTrajectory::mutable_glb_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.GlbTrajectory.glb_trajectory_point)
  return &glb_trajectory_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SingleTrajPoint >&
GlbTrajectory::glb_trajectory_point() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.GlbTrajectory.glb_trajectory_point)
  return glb_trajectory_point_;
}

// .autodrive.workflow.proto.Vector3f start_point = 2;
inline bool GlbTrajectory::has_start_point() const {
  return this != internal_default_instance() && start_point_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& GlbTrajectory::start_point() const {
  const ::autodrive::workflow::proto::Vector3f* p = start_point_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbTrajectory.start_point)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* GlbTrajectory::release_start_point() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.GlbTrajectory.start_point)
  
  ::autodrive::workflow::proto::Vector3f* temp = start_point_;
  start_point_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* GlbTrajectory::mutable_start_point() {
  
  if (start_point_ == NULL) {
    start_point_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbTrajectory.start_point)
  return start_point_;
}
inline void GlbTrajectory::set_allocated_start_point(::autodrive::workflow::proto::Vector3f* start_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_point_);
  }
  if (start_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_point, submessage_arena);
    }
    
  } else {
    
  }
  start_point_ = start_point;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.GlbTrajectory.start_point)
}

// .autodrive.workflow.proto.Vector3f end_point = 3;
inline bool GlbTrajectory::has_end_point() const {
  return this != internal_default_instance() && end_point_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& GlbTrajectory::end_point() const {
  const ::autodrive::workflow::proto::Vector3f* p = end_point_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbTrajectory.end_point)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* GlbTrajectory::release_end_point() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.GlbTrajectory.end_point)
  
  ::autodrive::workflow::proto::Vector3f* temp = end_point_;
  end_point_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* GlbTrajectory::mutable_end_point() {
  
  if (end_point_ == NULL) {
    end_point_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbTrajectory.end_point)
  return end_point_;
}
inline void GlbTrajectory::set_allocated_end_point(::autodrive::workflow::proto::Vector3f* end_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_point_);
  }
  if (end_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_point, submessage_arena);
    }
    
  } else {
    
  }
  end_point_ = end_point;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.GlbTrajectory.end_point)
}

// -------------------------------------------------------------------

// GlbPrkgSlot

// uint32 slot_id = 1;
inline void GlbPrkgSlot::clear_slot_id() {
  slot_id_ = 0u;
}
inline ::google::protobuf::uint32 GlbPrkgSlot::slot_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrkgSlot.slot_id)
  return slot_id_;
}
inline void GlbPrkgSlot::set_slot_id(::google::protobuf::uint32 value) {
  
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbPrkgSlot.slot_id)
}

// .autodrive.workflow.proto.SlotStatus slot_status = 2;
inline void GlbPrkgSlot::clear_slot_status() {
  slot_status_ = 0;
}
inline ::autodrive::workflow::proto::SlotStatus GlbPrkgSlot::slot_status() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrkgSlot.slot_status)
  return static_cast< ::autodrive::workflow::proto::SlotStatus >(slot_status_);
}
inline void GlbPrkgSlot::set_slot_status(::autodrive::workflow::proto::SlotStatus value) {
  
  slot_status_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbPrkgSlot.slot_status)
}

// .autodrive.workflow.proto.SlotType slot_type = 3;
inline void GlbPrkgSlot::clear_slot_type() {
  slot_type_ = 0;
}
inline ::autodrive::workflow::proto::SlotType GlbPrkgSlot::slot_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrkgSlot.slot_type)
  return static_cast< ::autodrive::workflow::proto::SlotType >(slot_type_);
}
inline void GlbPrkgSlot::set_slot_type(::autodrive::workflow::proto::SlotType value) {
  
  slot_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbPrkgSlot.slot_type)
}

// repeated .autodrive.workflow.proto.Vector3f slot_points = 4;
inline int GlbPrkgSlot::slot_points_size() const {
  return slot_points_.size();
}
inline const ::autodrive::workflow::proto::Vector3f& GlbPrkgSlot::slot_points(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrkgSlot.slot_points)
  return slot_points_.Get(index);
}
inline ::autodrive::workflow::proto::Vector3f* GlbPrkgSlot::mutable_slot_points(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbPrkgSlot.slot_points)
  return slot_points_.Mutable(index);
}
inline ::autodrive::workflow::proto::Vector3f* GlbPrkgSlot::add_slot_points() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.GlbPrkgSlot.slot_points)
  return slot_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f >*
GlbPrkgSlot::mutable_slot_points() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.GlbPrkgSlot.slot_points)
  return &slot_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f >&
GlbPrkgSlot::slot_points() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.GlbPrkgSlot.slot_points)
  return slot_points_;
}

// bool is_target_slot = 5;
inline void GlbPrkgSlot::clear_is_target_slot() {
  is_target_slot_ = false;
}
inline bool GlbPrkgSlot::is_target_slot() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrkgSlot.is_target_slot)
  return is_target_slot_;
}
inline void GlbPrkgSlot::set_is_target_slot(bool value) {
  
  is_target_slot_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbPrkgSlot.is_target_slot)
}

// bool has_lever = 6;
inline void GlbPrkgSlot::clear_has_lever() {
  has_lever_ = false;
}
inline bool GlbPrkgSlot::has_lever() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrkgSlot.has_lever)
  return has_lever_;
}
inline void GlbPrkgSlot::set_has_lever(bool value) {
  
  has_lever_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbPrkgSlot.has_lever)
}

// .autodrive.workflow.proto.Vector3f lever_start_point = 7;
inline bool GlbPrkgSlot::has_lever_start_point() const {
  return this != internal_default_instance() && lever_start_point_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& GlbPrkgSlot::lever_start_point() const {
  const ::autodrive::workflow::proto::Vector3f* p = lever_start_point_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrkgSlot.lever_start_point)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* GlbPrkgSlot::release_lever_start_point() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.GlbPrkgSlot.lever_start_point)
  
  ::autodrive::workflow::proto::Vector3f* temp = lever_start_point_;
  lever_start_point_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* GlbPrkgSlot::mutable_lever_start_point() {
  
  if (lever_start_point_ == NULL) {
    lever_start_point_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbPrkgSlot.lever_start_point)
  return lever_start_point_;
}
inline void GlbPrkgSlot::set_allocated_lever_start_point(::autodrive::workflow::proto::Vector3f* lever_start_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lever_start_point_);
  }
  if (lever_start_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lever_start_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lever_start_point, submessage_arena);
    }
    
  } else {
    
  }
  lever_start_point_ = lever_start_point;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.GlbPrkgSlot.lever_start_point)
}

// .autodrive.workflow.proto.Vector3f lever_end_point = 8;
inline bool GlbPrkgSlot::has_lever_end_point() const {
  return this != internal_default_instance() && lever_end_point_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& GlbPrkgSlot::lever_end_point() const {
  const ::autodrive::workflow::proto::Vector3f* p = lever_end_point_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrkgSlot.lever_end_point)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* GlbPrkgSlot::release_lever_end_point() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.GlbPrkgSlot.lever_end_point)
  
  ::autodrive::workflow::proto::Vector3f* temp = lever_end_point_;
  lever_end_point_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* GlbPrkgSlot::mutable_lever_end_point() {
  
  if (lever_end_point_ == NULL) {
    lever_end_point_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbPrkgSlot.lever_end_point)
  return lever_end_point_;
}
inline void GlbPrkgSlot::set_allocated_lever_end_point(::autodrive::workflow::proto::Vector3f* lever_end_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lever_end_point_);
  }
  if (lever_end_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lever_end_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lever_end_point, submessage_arena);
    }
    
  } else {
    
  }
  lever_end_point_ = lever_end_point;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.GlbPrkgSlot.lever_end_point)
}

// float floor = 9;
inline void GlbPrkgSlot::clear_floor() {
  floor_ = 0;
}
inline float GlbPrkgSlot::floor() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrkgSlot.floor)
  return floor_;
}
inline void GlbPrkgSlot::set_floor(float value) {
  
  floor_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbPrkgSlot.floor)
}

// -------------------------------------------------------------------

// GlbPrcpPrkgSlots

// repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
inline int GlbPrcpPrkgSlots::glb_prkg_slots_size() const {
  return glb_prkg_slots_.size();
}
inline void GlbPrcpPrkgSlots::clear_glb_prkg_slots() {
  glb_prkg_slots_.Clear();
}
inline const ::autodrive::workflow::proto::GlbPrkgSlot& GlbPrcpPrkgSlots::glb_prkg_slots(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrcpPrkgSlots.glb_prkg_slots)
  return glb_prkg_slots_.Get(index);
}
inline ::autodrive::workflow::proto::GlbPrkgSlot* GlbPrcpPrkgSlots::mutable_glb_prkg_slots(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbPrcpPrkgSlots.glb_prkg_slots)
  return glb_prkg_slots_.Mutable(index);
}
inline ::autodrive::workflow::proto::GlbPrkgSlot* GlbPrcpPrkgSlots::add_glb_prkg_slots() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.GlbPrcpPrkgSlots.glb_prkg_slots)
  return glb_prkg_slots_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbPrkgSlot >*
GlbPrcpPrkgSlots::mutable_glb_prkg_slots() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.GlbPrcpPrkgSlots.glb_prkg_slots)
  return &glb_prkg_slots_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbPrkgSlot >&
GlbPrcpPrkgSlots::glb_prkg_slots() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.GlbPrcpPrkgSlots.glb_prkg_slots)
  return glb_prkg_slots_;
}

// -------------------------------------------------------------------

// GlbRoadMark

// .autodrive.workflow.proto.Vector3f position = 1;
inline bool GlbRoadMark::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& GlbRoadMark::position() const {
  const ::autodrive::workflow::proto::Vector3f* p = position_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbRoadMark.position)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* GlbRoadMark::release_position() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.GlbRoadMark.position)
  
  ::autodrive::workflow::proto::Vector3f* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* GlbRoadMark::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbRoadMark.position)
  return position_;
}
inline void GlbRoadMark::set_allocated_position(::autodrive::workflow::proto::Vector3f* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.GlbRoadMark.position)
}

// float odom_heading = 2;
inline void GlbRoadMark::clear_odom_heading() {
  odom_heading_ = 0;
}
inline float GlbRoadMark::odom_heading() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbRoadMark.odom_heading)
  return odom_heading_;
}
inline void GlbRoadMark::set_odom_heading(float value) {
  
  odom_heading_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbRoadMark.odom_heading)
}

// uint32 roadmark_id = 3;
inline void GlbRoadMark::clear_roadmark_id() {
  roadmark_id_ = 0u;
}
inline ::google::protobuf::uint32 GlbRoadMark::roadmark_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbRoadMark.roadmark_id)
  return roadmark_id_;
}
inline void GlbRoadMark::set_roadmark_id(::google::protobuf::uint32 value) {
  
  roadmark_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbRoadMark.roadmark_id)
}

// .autodrive.workflow.proto.RoadMarkType roadmark_type = 4;
inline void GlbRoadMark::clear_roadmark_type() {
  roadmark_type_ = 0;
}
inline ::autodrive::workflow::proto::RoadMarkType GlbRoadMark::roadmark_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbRoadMark.roadmark_type)
  return static_cast< ::autodrive::workflow::proto::RoadMarkType >(roadmark_type_);
}
inline void GlbRoadMark::set_roadmark_type(::autodrive::workflow::proto::RoadMarkType value) {
  
  roadmark_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbRoadMark.roadmark_type)
}

// repeated .autodrive.workflow.proto.Vector2f border = 5;
inline int GlbRoadMark::border_size() const {
  return border_.size();
}
inline const ::autodrive::workflow::proto::Vector2f& GlbRoadMark::border(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbRoadMark.border)
  return border_.Get(index);
}
inline ::autodrive::workflow::proto::Vector2f* GlbRoadMark::mutable_border(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbRoadMark.border)
  return border_.Mutable(index);
}
inline ::autodrive::workflow::proto::Vector2f* GlbRoadMark::add_border() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.GlbRoadMark.border)
  return border_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >*
GlbRoadMark::mutable_border() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.GlbRoadMark.border)
  return &border_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >&
GlbRoadMark::border() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.GlbRoadMark.border)
  return border_;
}

// float floor = 6;
inline void GlbRoadMark::clear_floor() {
  floor_ = 0;
}
inline float GlbRoadMark::floor() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbRoadMark.floor)
  return floor_;
}
inline void GlbRoadMark::set_floor(float value) {
  
  floor_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbRoadMark.floor)
}

// -------------------------------------------------------------------

// GlbRoadMakMap

// repeated .autodrive.workflow.proto.GlbRoadMark glb_road_mak_map = 1;
inline int GlbRoadMakMap::glb_road_mak_map_size() const {
  return glb_road_mak_map_.size();
}
inline void GlbRoadMakMap::clear_glb_road_mak_map() {
  glb_road_mak_map_.Clear();
}
inline const ::autodrive::workflow::proto::GlbRoadMark& GlbRoadMakMap::glb_road_mak_map(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbRoadMakMap.glb_road_mak_map)
  return glb_road_mak_map_.Get(index);
}
inline ::autodrive::workflow::proto::GlbRoadMark* GlbRoadMakMap::mutable_glb_road_mak_map(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbRoadMakMap.glb_road_mak_map)
  return glb_road_mak_map_.Mutable(index);
}
inline ::autodrive::workflow::proto::GlbRoadMark* GlbRoadMakMap::add_glb_road_mak_map() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.GlbRoadMakMap.glb_road_mak_map)
  return glb_road_mak_map_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbRoadMark >*
GlbRoadMakMap::mutable_glb_road_mak_map() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.GlbRoadMakMap.glb_road_mak_map)
  return &glb_road_mak_map_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbRoadMark >&
GlbRoadMakMap::glb_road_mak_map() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.GlbRoadMakMap.glb_road_mak_map)
  return glb_road_mak_map_;
}

// -------------------------------------------------------------------

// GlbObstacle

// .autodrive.workflow.proto.Vector3f center_position = 1;
inline bool GlbObstacle::has_center_position() const {
  return this != internal_default_instance() && center_position_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& GlbObstacle::center_position() const {
  const ::autodrive::workflow::proto::Vector3f* p = center_position_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbObstacle.center_position)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* GlbObstacle::release_center_position() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.GlbObstacle.center_position)
  
  ::autodrive::workflow::proto::Vector3f* temp = center_position_;
  center_position_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* GlbObstacle::mutable_center_position() {
  
  if (center_position_ == NULL) {
    center_position_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbObstacle.center_position)
  return center_position_;
}
inline void GlbObstacle::set_allocated_center_position(::autodrive::workflow::proto::Vector3f* center_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(center_position_);
  }
  if (center_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center_position, submessage_arena);
    }
    
  } else {
    
  }
  center_position_ = center_position;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.GlbObstacle.center_position)
}

// float odom_heading = 2;
inline void GlbObstacle::clear_odom_heading() {
  odom_heading_ = 0;
}
inline float GlbObstacle::odom_heading() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbObstacle.odom_heading)
  return odom_heading_;
}
inline void GlbObstacle::set_odom_heading(float value) {
  
  odom_heading_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbObstacle.odom_heading)
}

// .autodrive.workflow.proto.Map2HmiObstacleType obstacle_type = 3;
inline void GlbObstacle::clear_obstacle_type() {
  obstacle_type_ = 0;
}
inline ::autodrive::workflow::proto::Map2HmiObstacleType GlbObstacle::obstacle_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbObstacle.obstacle_type)
  return static_cast< ::autodrive::workflow::proto::Map2HmiObstacleType >(obstacle_type_);
}
inline void GlbObstacle::set_obstacle_type(::autodrive::workflow::proto::Map2HmiObstacleType value) {
  
  obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbObstacle.obstacle_type)
}

// .autodrive.workflow.proto.DangerLevel danger_level = 4;
inline void GlbObstacle::clear_danger_level() {
  danger_level_ = 0;
}
inline ::autodrive::workflow::proto::DangerLevel GlbObstacle::danger_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbObstacle.danger_level)
  return static_cast< ::autodrive::workflow::proto::DangerLevel >(danger_level_);
}
inline void GlbObstacle::set_danger_level(::autodrive::workflow::proto::DangerLevel value) {
  
  danger_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbObstacle.danger_level)
}

// uint32 target_id = 5;
inline void GlbObstacle::clear_target_id() {
  target_id_ = 0u;
}
inline ::google::protobuf::uint32 GlbObstacle::target_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbObstacle.target_id)
  return target_id_;
}
inline void GlbObstacle::set_target_id(::google::protobuf::uint32 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbObstacle.target_id)
}

// repeated .autodrive.workflow.proto.Vector2f border = 6;
inline int GlbObstacle::border_size() const {
  return border_.size();
}
inline const ::autodrive::workflow::proto::Vector2f& GlbObstacle::border(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbObstacle.border)
  return border_.Get(index);
}
inline ::autodrive::workflow::proto::Vector2f* GlbObstacle::mutable_border(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbObstacle.border)
  return border_.Mutable(index);
}
inline ::autodrive::workflow::proto::Vector2f* GlbObstacle::add_border() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.GlbObstacle.border)
  return border_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >*
GlbObstacle::mutable_border() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.GlbObstacle.border)
  return &border_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >&
GlbObstacle::border() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.GlbObstacle.border)
  return border_;
}

// .autodrive.workflow.proto.ObjStatus obj_status = 7;
inline void GlbObstacle::clear_obj_status() {
  obj_status_ = 0;
}
inline ::autodrive::workflow::proto::ObjStatus GlbObstacle::obj_status() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbObstacle.obj_status)
  return static_cast< ::autodrive::workflow::proto::ObjStatus >(obj_status_);
}
inline void GlbObstacle::set_obj_status(::autodrive::workflow::proto::ObjStatus value) {
  
  obj_status_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbObstacle.obj_status)
}

// float floor = 8;
inline void GlbObstacle::clear_floor() {
  floor_ = 0;
}
inline float GlbObstacle::floor() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbObstacle.floor)
  return floor_;
}
inline void GlbObstacle::set_floor(float value) {
  
  floor_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.GlbObstacle.floor)
}

// -------------------------------------------------------------------

// GlbPrcpObstacle

// repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
inline int GlbPrcpObstacle::glb_prcp_obstacle_size() const {
  return glb_prcp_obstacle_.size();
}
inline void GlbPrcpObstacle::clear_glb_prcp_obstacle() {
  glb_prcp_obstacle_.Clear();
}
inline const ::autodrive::workflow::proto::GlbObstacle& GlbPrcpObstacle::glb_prcp_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GlbPrcpObstacle.glb_prcp_obstacle)
  return glb_prcp_obstacle_.Get(index);
}
inline ::autodrive::workflow::proto::GlbObstacle* GlbPrcpObstacle::mutable_glb_prcp_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GlbPrcpObstacle.glb_prcp_obstacle)
  return glb_prcp_obstacle_.Mutable(index);
}
inline ::autodrive::workflow::proto::GlbObstacle* GlbPrcpObstacle::add_glb_prcp_obstacle() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.GlbPrcpObstacle.glb_prcp_obstacle)
  return glb_prcp_obstacle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbObstacle >*
GlbPrcpObstacle::mutable_glb_prcp_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.GlbPrcpObstacle.glb_prcp_obstacle)
  return &glb_prcp_obstacle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::GlbObstacle >&
GlbPrcpObstacle::glb_prcp_obstacle() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.GlbPrcpObstacle.glb_prcp_obstacle)
  return glb_prcp_obstacle_;
}

// -------------------------------------------------------------------

// MapCommonHeader

// int32 map_id = 1;
inline void MapCommonHeader::clear_map_id() {
  map_id_ = 0;
}
inline ::google::protobuf::int32 MapCommonHeader::map_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapCommonHeader.map_id)
  return map_id_;
}
inline void MapCommonHeader::set_map_id(::google::protobuf::int32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapCommonHeader.map_id)
}

// .autodrive.workflow.proto.MapDataType map_type = 2;
inline void MapCommonHeader::clear_map_type() {
  map_type_ = 0;
}
inline ::autodrive::workflow::proto::MapDataType MapCommonHeader::map_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapCommonHeader.map_type)
  return static_cast< ::autodrive::workflow::proto::MapDataType >(map_type_);
}
inline void MapCommonHeader::set_map_type(::autodrive::workflow::proto::MapDataType value) {
  
  map_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapCommonHeader.map_type)
}

// uint64 utc_time = 3;
inline void MapCommonHeader::clear_utc_time() {
  utc_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MapCommonHeader::utc_time() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapCommonHeader.utc_time)
  return utc_time_;
}
inline void MapCommonHeader::set_utc_time(::google::protobuf::uint64 value) {
  
  utc_time_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapCommonHeader.utc_time)
}

// int32 latitude = 4;
inline void MapCommonHeader::clear_latitude() {
  latitude_ = 0;
}
inline ::google::protobuf::int32 MapCommonHeader::latitude() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapCommonHeader.latitude)
  return latitude_;
}
inline void MapCommonHeader::set_latitude(::google::protobuf::int32 value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapCommonHeader.latitude)
}

// int32 longitude = 5;
inline void MapCommonHeader::clear_longitude() {
  longitude_ = 0;
}
inline ::google::protobuf::int32 MapCommonHeader::longitude() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapCommonHeader.longitude)
  return longitude_;
}
inline void MapCommonHeader::set_longitude(::google::protobuf::int32 value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapCommonHeader.longitude)
}

// repeated .autodrive.workflow.proto.Vector2f glb_trajectory_point = 6;
inline int MapCommonHeader::glb_trajectory_point_size() const {
  return glb_trajectory_point_.size();
}
inline const ::autodrive::workflow::proto::Vector2f& MapCommonHeader::glb_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapCommonHeader.glb_trajectory_point)
  return glb_trajectory_point_.Get(index);
}
inline ::autodrive::workflow::proto::Vector2f* MapCommonHeader::mutable_glb_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapCommonHeader.glb_trajectory_point)
  return glb_trajectory_point_.Mutable(index);
}
inline ::autodrive::workflow::proto::Vector2f* MapCommonHeader::add_glb_trajectory_point() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.MapCommonHeader.glb_trajectory_point)
  return glb_trajectory_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >*
MapCommonHeader::mutable_glb_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.MapCommonHeader.glb_trajectory_point)
  return &glb_trajectory_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector2f >&
MapCommonHeader::glb_trajectory_point() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.MapCommonHeader.glb_trajectory_point)
  return glb_trajectory_point_;
}

// float map_total_height = 7;
inline void MapCommonHeader::clear_map_total_height() {
  map_total_height_ = 0;
}
inline float MapCommonHeader::map_total_height() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapCommonHeader.map_total_height)
  return map_total_height_;
}
inline void MapCommonHeader::set_map_total_height(float value) {
  
  map_total_height_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapCommonHeader.map_total_height)
}

// float map_total_floor = 8;
inline void MapCommonHeader::clear_map_total_floor() {
  map_total_floor_ = 0;
}
inline float MapCommonHeader::map_total_floor() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapCommonHeader.map_total_floor)
  return map_total_floor_;
}
inline void MapCommonHeader::set_map_total_floor(float value) {
  
  map_total_floor_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapCommonHeader.map_total_floor)
}

// int32 slot_parking_times = 9;
inline void MapCommonHeader::clear_slot_parking_times() {
  slot_parking_times_ = 0;
}
inline ::google::protobuf::int32 MapCommonHeader::slot_parking_times() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapCommonHeader.slot_parking_times)
  return slot_parking_times_;
}
inline void MapCommonHeader::set_slot_parking_times(::google::protobuf::int32 value) {
  
  slot_parking_times_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapCommonHeader.slot_parking_times)
}

// -------------------------------------------------------------------

// MapInfo

// .autodrive.workflow.proto.MapCommonHeader header = 1;
inline bool MapInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void MapInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::autodrive::workflow::proto::MapCommonHeader& MapInfo::header() const {
  const ::autodrive::workflow::proto::MapCommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MapCommonHeader*>(
      &::autodrive::workflow::proto::_MapCommonHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MapCommonHeader* MapInfo::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapInfo.header)
  
  ::autodrive::workflow::proto::MapCommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MapCommonHeader* MapInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MapCommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapInfo.header)
  return header_;
}
inline void MapInfo::set_allocated_header(::autodrive::workflow::proto::MapCommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapInfo.header)
}

// .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
inline bool MapInfo::has_global_trajectory() const {
  return this != internal_default_instance() && global_trajectory_ != NULL;
}
inline void MapInfo::clear_global_trajectory() {
  if (GetArenaNoVirtual() == NULL && global_trajectory_ != NULL) {
    delete global_trajectory_;
  }
  global_trajectory_ = NULL;
}
inline const ::autodrive::workflow::proto::GlbTrajectory& MapInfo::global_trajectory() const {
  const ::autodrive::workflow::proto::GlbTrajectory* p = global_trajectory_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapInfo.global_trajectory)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::GlbTrajectory*>(
      &::autodrive::workflow::proto::_GlbTrajectory_default_instance_);
}
inline ::autodrive::workflow::proto::GlbTrajectory* MapInfo::release_global_trajectory() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapInfo.global_trajectory)
  
  ::autodrive::workflow::proto::GlbTrajectory* temp = global_trajectory_;
  global_trajectory_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::GlbTrajectory* MapInfo::mutable_global_trajectory() {
  
  if (global_trajectory_ == NULL) {
    global_trajectory_ = new ::autodrive::workflow::proto::GlbTrajectory;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapInfo.global_trajectory)
  return global_trajectory_;
}
inline void MapInfo::set_allocated_global_trajectory(::autodrive::workflow::proto::GlbTrajectory* global_trajectory) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete global_trajectory_;
  }
  if (global_trajectory) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global_trajectory = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_trajectory, submessage_arena);
    }
    
  } else {
    
  }
  global_trajectory_ = global_trajectory;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapInfo.global_trajectory)
}

// .autodrive.workflow.proto.GlbPrcpPrkgSlots global_percep_parking_slots = 3;
inline bool MapInfo::has_global_percep_parking_slots() const {
  return this != internal_default_instance() && global_percep_parking_slots_ != NULL;
}
inline void MapInfo::clear_global_percep_parking_slots() {
  if (GetArenaNoVirtual() == NULL && global_percep_parking_slots_ != NULL) {
    delete global_percep_parking_slots_;
  }
  global_percep_parking_slots_ = NULL;
}
inline const ::autodrive::workflow::proto::GlbPrcpPrkgSlots& MapInfo::global_percep_parking_slots() const {
  const ::autodrive::workflow::proto::GlbPrcpPrkgSlots* p = global_percep_parking_slots_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapInfo.global_percep_parking_slots)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::GlbPrcpPrkgSlots*>(
      &::autodrive::workflow::proto::_GlbPrcpPrkgSlots_default_instance_);
}
inline ::autodrive::workflow::proto::GlbPrcpPrkgSlots* MapInfo::release_global_percep_parking_slots() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapInfo.global_percep_parking_slots)
  
  ::autodrive::workflow::proto::GlbPrcpPrkgSlots* temp = global_percep_parking_slots_;
  global_percep_parking_slots_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::GlbPrcpPrkgSlots* MapInfo::mutable_global_percep_parking_slots() {
  
  if (global_percep_parking_slots_ == NULL) {
    global_percep_parking_slots_ = new ::autodrive::workflow::proto::GlbPrcpPrkgSlots;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapInfo.global_percep_parking_slots)
  return global_percep_parking_slots_;
}
inline void MapInfo::set_allocated_global_percep_parking_slots(::autodrive::workflow::proto::GlbPrcpPrkgSlots* global_percep_parking_slots) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete global_percep_parking_slots_;
  }
  if (global_percep_parking_slots) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global_percep_parking_slots = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_percep_parking_slots, submessage_arena);
    }
    
  } else {
    
  }
  global_percep_parking_slots_ = global_percep_parking_slots;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapInfo.global_percep_parking_slots)
}

// .autodrive.workflow.proto.GlbRoadMakMap global_road_mark_map = 4;
inline bool MapInfo::has_global_road_mark_map() const {
  return this != internal_default_instance() && global_road_mark_map_ != NULL;
}
inline void MapInfo::clear_global_road_mark_map() {
  if (GetArenaNoVirtual() == NULL && global_road_mark_map_ != NULL) {
    delete global_road_mark_map_;
  }
  global_road_mark_map_ = NULL;
}
inline const ::autodrive::workflow::proto::GlbRoadMakMap& MapInfo::global_road_mark_map() const {
  const ::autodrive::workflow::proto::GlbRoadMakMap* p = global_road_mark_map_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapInfo.global_road_mark_map)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::GlbRoadMakMap*>(
      &::autodrive::workflow::proto::_GlbRoadMakMap_default_instance_);
}
inline ::autodrive::workflow::proto::GlbRoadMakMap* MapInfo::release_global_road_mark_map() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapInfo.global_road_mark_map)
  
  ::autodrive::workflow::proto::GlbRoadMakMap* temp = global_road_mark_map_;
  global_road_mark_map_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::GlbRoadMakMap* MapInfo::mutable_global_road_mark_map() {
  
  if (global_road_mark_map_ == NULL) {
    global_road_mark_map_ = new ::autodrive::workflow::proto::GlbRoadMakMap;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapInfo.global_road_mark_map)
  return global_road_mark_map_;
}
inline void MapInfo::set_allocated_global_road_mark_map(::autodrive::workflow::proto::GlbRoadMakMap* global_road_mark_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete global_road_mark_map_;
  }
  if (global_road_mark_map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global_road_mark_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_road_mark_map, submessage_arena);
    }
    
  } else {
    
  }
  global_road_mark_map_ = global_road_mark_map;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapInfo.global_road_mark_map)
}

// .autodrive.workflow.proto.GlbPrcpObstacle global_perception_obstacle = 5;
inline bool MapInfo::has_global_perception_obstacle() const {
  return this != internal_default_instance() && global_perception_obstacle_ != NULL;
}
inline void MapInfo::clear_global_perception_obstacle() {
  if (GetArenaNoVirtual() == NULL && global_perception_obstacle_ != NULL) {
    delete global_perception_obstacle_;
  }
  global_perception_obstacle_ = NULL;
}
inline const ::autodrive::workflow::proto::GlbPrcpObstacle& MapInfo::global_perception_obstacle() const {
  const ::autodrive::workflow::proto::GlbPrcpObstacle* p = global_perception_obstacle_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapInfo.global_perception_obstacle)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::GlbPrcpObstacle*>(
      &::autodrive::workflow::proto::_GlbPrcpObstacle_default_instance_);
}
inline ::autodrive::workflow::proto::GlbPrcpObstacle* MapInfo::release_global_perception_obstacle() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapInfo.global_perception_obstacle)
  
  ::autodrive::workflow::proto::GlbPrcpObstacle* temp = global_perception_obstacle_;
  global_perception_obstacle_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::GlbPrcpObstacle* MapInfo::mutable_global_perception_obstacle() {
  
  if (global_perception_obstacle_ == NULL) {
    global_perception_obstacle_ = new ::autodrive::workflow::proto::GlbPrcpObstacle;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapInfo.global_perception_obstacle)
  return global_perception_obstacle_;
}
inline void MapInfo::set_allocated_global_perception_obstacle(::autodrive::workflow::proto::GlbPrcpObstacle* global_perception_obstacle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete global_perception_obstacle_;
  }
  if (global_perception_obstacle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global_perception_obstacle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_perception_obstacle, submessage_arena);
    }
    
  } else {
    
  }
  global_perception_obstacle_ = global_perception_obstacle;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapInfo.global_perception_obstacle)
}

// float map_distance = 6;
inline void MapInfo::clear_map_distance() {
  map_distance_ = 0;
}
inline float MapInfo::map_distance() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapInfo.map_distance)
  return map_distance_;
}
inline void MapInfo::set_map_distance(float value) {
  
  map_distance_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapInfo.map_distance)
}

// float rest_map_distance = 7;
inline void MapInfo::clear_rest_map_distance() {
  rest_map_distance_ = 0;
}
inline float MapInfo::rest_map_distance() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapInfo.rest_map_distance)
  return rest_map_distance_;
}
inline void MapInfo::set_rest_map_distance(float value) {
  
  rest_map_distance_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapInfo.rest_map_distance)
}

// uint32 num_speed_bumps = 8;
inline void MapInfo::clear_num_speed_bumps() {
  num_speed_bumps_ = 0u;
}
inline ::google::protobuf::uint32 MapInfo::num_speed_bumps() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapInfo.num_speed_bumps)
  return num_speed_bumps_;
}
inline void MapInfo::set_num_speed_bumps(::google::protobuf::uint32 value) {
  
  num_speed_bumps_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapInfo.num_speed_bumps)
}

// -------------------------------------------------------------------

// MapDisplayMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool MapDisplayMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& MapDisplayMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapDisplayMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* MapDisplayMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapDisplayMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* MapDisplayMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapDisplayMsg.header)
  return header_;
}
inline void MapDisplayMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapDisplayMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool MapDisplayMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& MapDisplayMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapDisplayMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* MapDisplayMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapDisplayMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* MapDisplayMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapDisplayMsg.error)
  return error_;
}
inline void MapDisplayMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapDisplayMsg.error)
}

// .autodrive.workflow.proto.MapInfo map_info = 3;
inline bool MapDisplayMsg::has_map_info() const {
  return this != internal_default_instance() && map_info_ != NULL;
}
inline void MapDisplayMsg::clear_map_info() {
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
}
inline const ::autodrive::workflow::proto::MapInfo& MapDisplayMsg::map_info() const {
  const ::autodrive::workflow::proto::MapInfo* p = map_info_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapDisplayMsg.map_info)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MapInfo*>(
      &::autodrive::workflow::proto::_MapInfo_default_instance_);
}
inline ::autodrive::workflow::proto::MapInfo* MapDisplayMsg::release_map_info() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapDisplayMsg.map_info)
  
  ::autodrive::workflow::proto::MapInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MapInfo* MapDisplayMsg::mutable_map_info() {
  
  if (map_info_ == NULL) {
    map_info_ = new ::autodrive::workflow::proto::MapInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapDisplayMsg.map_info)
  return map_info_;
}
inline void MapDisplayMsg::set_allocated_map_info(::autodrive::workflow::proto::MapInfo* map_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete map_info_;
  }
  if (map_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_info, submessage_arena);
    }
    
  } else {
    
  }
  map_info_ = map_info;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapDisplayMsg.map_info)
}

// bool update_map_info = 4;
inline void MapDisplayMsg::clear_update_map_info() {
  update_map_info_ = false;
}
inline bool MapDisplayMsg::update_map_info() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapDisplayMsg.update_map_info)
  return update_map_info_;
}
inline void MapDisplayMsg::set_update_map_info(bool value) {
  
  update_map_info_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapDisplayMsg.update_map_info)
}

// repeated .autodrive.workflow.proto.MapCommonHeader all_map_headers = 5;
inline int MapDisplayMsg::all_map_headers_size() const {
  return all_map_headers_.size();
}
inline void MapDisplayMsg::clear_all_map_headers() {
  all_map_headers_.Clear();
}
inline const ::autodrive::workflow::proto::MapCommonHeader& MapDisplayMsg::all_map_headers(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapDisplayMsg.all_map_headers)
  return all_map_headers_.Get(index);
}
inline ::autodrive::workflow::proto::MapCommonHeader* MapDisplayMsg::mutable_all_map_headers(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapDisplayMsg.all_map_headers)
  return all_map_headers_.Mutable(index);
}
inline ::autodrive::workflow::proto::MapCommonHeader* MapDisplayMsg::add_all_map_headers() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.MapDisplayMsg.all_map_headers)
  return all_map_headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapCommonHeader >*
MapDisplayMsg::mutable_all_map_headers() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.MapDisplayMsg.all_map_headers)
  return &all_map_headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapCommonHeader >&
MapDisplayMsg::all_map_headers() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.MapDisplayMsg.all_map_headers)
  return all_map_headers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::SlotType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::SlotType>() {
  return ::autodrive::workflow::proto::SlotType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::SlotStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::SlotStatus>() {
  return ::autodrive::workflow::proto::SlotStatus_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::RoadMarkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::RoadMarkType>() {
  return ::autodrive::workflow::proto::RoadMarkType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::DangerLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::DangerLevel>() {
  return ::autodrive::workflow::proto::DangerLevel_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::Map2HmiObstacleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::Map2HmiObstacleType>() {
  return ::autodrive::workflow::proto::Map2HmiObstacleType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::ObjStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::ObjStatus>() {
  return ::autodrive::workflow::proto::ObjStatus_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::MapDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::MapDataType>() {
  return ::autodrive::workflow::proto::MapDataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_5fdisplay_2eproto__INCLUDED
