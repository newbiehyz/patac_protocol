// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipm_parsing.proto

#include "ipm_parsing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class IpmParsingMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpmParsingMsg>
      _instance;
} _IpmParsingMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_ipm_5fparsing_2eproto {
void InitDefaultsIpmParsingMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_parsing_5fbase_2eproto::InitDefaultsIpmParsingImageData();
  protobuf_parsing_5fbase_2eproto::InitDefaultsRleCompressedData();
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  {
    void* ptr = &::autodrive::workflow::proto::_IpmParsingMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::IpmParsingMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::IpmParsingMsg::InitAsDefaultInstance();
}

void InitDefaultsIpmParsingMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIpmParsingMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingMsg, free_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingMsg, feature_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingMsg, rle_parsing_compressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingMsg, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmParsingMsg, roi_output_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::IpmParsingMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_IpmParsingMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ipm_parsing.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021ipm_parsing.proto\022\030autodrive.workflow."
      "proto\032\014common.proto\032\022parsing_base.proto\032"
      "\025perception_base.proto\"\233\003\n\rIpmParsingMsg"
      "\0223\n\006header\030\001 \001(\0132#.autodrive.workflow.pr"
      "oto.MsgHeader\022.\n\005error\030\002 \001(\0132\037.autodrive"
      ".workflow.proto.Error\022A\n\nfree_space\030\003 \001("
      "\0132-.autodrive.workflow.proto.IpmParsingI"
      "mageData\022B\n\013feature_map\030\004 \001(\0132-.autodriv"
      "e.workflow.proto.IpmParsingImageData\022K\n\026"
      "rle_parsing_compressed\030\005 \001(\0132+.autodrive"
      ".workflow.proto.RleCompressedData\022\r\n\005sca"
      "le\030\006 \001(\002\022B\n\nroi_output\030\007 \001(\0132..autodrive"
      ".workflow.proto.perception_base.Rect*\342\005\n"
      "\017IpmParsingLabel\022\030\n\024kIpmParsingLabelRoad"
      "\020\000\022\037\n\033kIpmParsingLabelTrafficLine\020\001\022\037\n\033k"
      "IpmParsingLabelParkingLine\020\002\022 \n\034kIpmPars"
      "ingLabelParkingSpace\020\003\022 \n\034kIpmParsingLab"
      "elTrafficArrow\020\004\022\035\n\031kIpmParsingLabelGuid"
      "eLine\020\005\022!\n\035kIpmParsingLabelCrosswalkLine"
      "\020\006\022%\n!kIpmParsingLabelNoParkingSignLine\020"
      "\007\022\034\n\030kIpmParsingLabelStopLine\020\010\022\035\n\031kIpmP"
      "arsingLabelSpeedBump\020\t\022\034\n\030kIpmParsingLab"
      "elSignLine\020\n\022#\n\037kIpmParsingLabelParkingL"
      "ockOpen\020\013\022%\n!kIpmParsingLabelParkingLock"
      "Closed\020\014\022\037\n\033kIpmParsingLabelTrafficCone\020"
      "\r\022\036\n\032kIpmParsingLabelParkingRod\020\016\022\030\n\024kIp"
      "mParsingLabelCurb\020\017\022\032\n\026kIpmParsingLabelC"
      "olumn\020\020\022%\n!kIpmParsingLabelImmovableObst"
      "acle\020\021\022#\n\037kIpmParsingLabelMovableObstacl"
      "e\020\022\022\031\n\025kIpmParsingLabelOther\020\023\022\034\n\030kIpmPa"
      "rsingLabelSidewalk\020\024\022#\n\037kIpmParsingLabel"
      "PaintedWallRoot\020\025*\230\001\n\016FreeSpaceLabel\022\035\n\031"
      "kFreeSpaceLabelBackGround\020\000\022$\n kFreeSpac"
      "eLabelImmovableObstacle\020\001\022\"\n\036kFreeSpaceL"
      "abelMovableObstacle\020\002\022\035\n\031kFreeSpaceLabel"
      "ParkingRod\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipm_parsing.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_parsing_5fbase_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ipm_5fparsing_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* IpmParsingLabel_descriptor() {
  protobuf_ipm_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ipm_5fparsing_2eproto::file_level_enum_descriptors[0];
}
bool IpmParsingLabel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FreeSpaceLabel_descriptor() {
  protobuf_ipm_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ipm_5fparsing_2eproto::file_level_enum_descriptors[1];
}
bool FreeSpaceLabel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void IpmParsingMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_IpmParsingMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_IpmParsingMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_IpmParsingMsg_default_instance_._instance.get_mutable()->free_space_ = const_cast< ::autodrive::workflow::proto::IpmParsingImageData*>(
      ::autodrive::workflow::proto::IpmParsingImageData::internal_default_instance());
  ::autodrive::workflow::proto::_IpmParsingMsg_default_instance_._instance.get_mutable()->feature_map_ = const_cast< ::autodrive::workflow::proto::IpmParsingImageData*>(
      ::autodrive::workflow::proto::IpmParsingImageData::internal_default_instance());
  ::autodrive::workflow::proto::_IpmParsingMsg_default_instance_._instance.get_mutable()->rle_parsing_compressed_ = const_cast< ::autodrive::workflow::proto::RleCompressedData*>(
      ::autodrive::workflow::proto::RleCompressedData::internal_default_instance());
  ::autodrive::workflow::proto::_IpmParsingMsg_default_instance_._instance.get_mutable()->roi_output_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
void IpmParsingMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void IpmParsingMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void IpmParsingMsg::clear_free_space() {
  if (GetArenaNoVirtual() == NULL && free_space_ != NULL) {
    delete free_space_;
  }
  free_space_ = NULL;
}
void IpmParsingMsg::clear_feature_map() {
  if (GetArenaNoVirtual() == NULL && feature_map_ != NULL) {
    delete feature_map_;
  }
  feature_map_ = NULL;
}
void IpmParsingMsg::clear_rle_parsing_compressed() {
  if (GetArenaNoVirtual() == NULL && rle_parsing_compressed_ != NULL) {
    delete rle_parsing_compressed_;
  }
  rle_parsing_compressed_ = NULL;
}
void IpmParsingMsg::clear_roi_output() {
  if (GetArenaNoVirtual() == NULL && roi_output_ != NULL) {
    delete roi_output_;
  }
  roi_output_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpmParsingMsg::kHeaderFieldNumber;
const int IpmParsingMsg::kErrorFieldNumber;
const int IpmParsingMsg::kFreeSpaceFieldNumber;
const int IpmParsingMsg::kFeatureMapFieldNumber;
const int IpmParsingMsg::kRleParsingCompressedFieldNumber;
const int IpmParsingMsg::kScaleFieldNumber;
const int IpmParsingMsg::kRoiOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpmParsingMsg::IpmParsingMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ipm_5fparsing_2eproto::InitDefaultsIpmParsingMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.IpmParsingMsg)
}
IpmParsingMsg::IpmParsingMsg(const IpmParsingMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_free_space()) {
    free_space_ = new ::autodrive::workflow::proto::IpmParsingImageData(*from.free_space_);
  } else {
    free_space_ = NULL;
  }
  if (from.has_feature_map()) {
    feature_map_ = new ::autodrive::workflow::proto::IpmParsingImageData(*from.feature_map_);
  } else {
    feature_map_ = NULL;
  }
  if (from.has_rle_parsing_compressed()) {
    rle_parsing_compressed_ = new ::autodrive::workflow::proto::RleCompressedData(*from.rle_parsing_compressed_);
  } else {
    rle_parsing_compressed_ = NULL;
  }
  if (from.has_roi_output()) {
    roi_output_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.roi_output_);
  } else {
    roi_output_ = NULL;
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.IpmParsingMsg)
}

void IpmParsingMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&header_)) + sizeof(scale_));
  _cached_size_ = 0;
}

IpmParsingMsg::~IpmParsingMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.IpmParsingMsg)
  SharedDtor();
}

void IpmParsingMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete free_space_;
  if (this != internal_default_instance()) delete feature_map_;
  if (this != internal_default_instance()) delete rle_parsing_compressed_;
  if (this != internal_default_instance()) delete roi_output_;
}

void IpmParsingMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpmParsingMsg::descriptor() {
  ::protobuf_ipm_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fparsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpmParsingMsg& IpmParsingMsg::default_instance() {
  ::protobuf_ipm_5fparsing_2eproto::InitDefaultsIpmParsingMsg();
  return *internal_default_instance();
}

IpmParsingMsg* IpmParsingMsg::New(::google::protobuf::Arena* arena) const {
  IpmParsingMsg* n = new IpmParsingMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IpmParsingMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.IpmParsingMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && free_space_ != NULL) {
    delete free_space_;
  }
  free_space_ = NULL;
  if (GetArenaNoVirtual() == NULL && feature_map_ != NULL) {
    delete feature_map_;
  }
  feature_map_ = NULL;
  if (GetArenaNoVirtual() == NULL && rle_parsing_compressed_ != NULL) {
    delete rle_parsing_compressed_;
  }
  rle_parsing_compressed_ = NULL;
  if (GetArenaNoVirtual() == NULL && roi_output_ != NULL) {
    delete roi_output_;
  }
  roi_output_ = NULL;
  scale_ = 0;
  _internal_metadata_.Clear();
}

bool IpmParsingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.IpmParsingMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.IpmParsingImageData free_space = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_free_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.IpmParsingImageData feature_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rle_parsing_compressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float scale = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roi_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.IpmParsingMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.IpmParsingMsg)
  return false;
#undef DO_
}

void IpmParsingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.IpmParsingMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.IpmParsingImageData free_space = 3;
  if (this->has_free_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->free_space_, output);
  }

  // .autodrive.workflow.proto.IpmParsingImageData feature_map = 4;
  if (this->has_feature_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->feature_map_, output);
  }

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  if (this->has_rle_parsing_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rle_parsing_compressed_, output);
  }

  // float scale = 6;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->scale(), output);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
  if (this->has_roi_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->roi_output_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.IpmParsingMsg)
}

::google::protobuf::uint8* IpmParsingMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.IpmParsingMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.IpmParsingImageData free_space = 3;
  if (this->has_free_space()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->free_space_, deterministic, target);
  }

  // .autodrive.workflow.proto.IpmParsingImageData feature_map = 4;
  if (this->has_feature_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->feature_map_, deterministic, target);
  }

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  if (this->has_rle_parsing_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->rle_parsing_compressed_, deterministic, target);
  }

  // float scale = 6;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->scale(), target);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
  if (this->has_roi_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->roi_output_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.IpmParsingMsg)
  return target;
}

size_t IpmParsingMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.IpmParsingMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.IpmParsingImageData free_space = 3;
  if (this->has_free_space()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->free_space_);
  }

  // .autodrive.workflow.proto.IpmParsingImageData feature_map = 4;
  if (this->has_feature_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->feature_map_);
  }

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  if (this->has_rle_parsing_compressed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rle_parsing_compressed_);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 7;
  if (this->has_roi_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->roi_output_);
  }

  // float scale = 6;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpmParsingMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.IpmParsingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const IpmParsingMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpmParsingMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.IpmParsingMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.IpmParsingMsg)
    MergeFrom(*source);
  }
}

void IpmParsingMsg::MergeFrom(const IpmParsingMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.IpmParsingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_free_space()) {
    mutable_free_space()->::autodrive::workflow::proto::IpmParsingImageData::MergeFrom(from.free_space());
  }
  if (from.has_feature_map()) {
    mutable_feature_map()->::autodrive::workflow::proto::IpmParsingImageData::MergeFrom(from.feature_map());
  }
  if (from.has_rle_parsing_compressed()) {
    mutable_rle_parsing_compressed()->::autodrive::workflow::proto::RleCompressedData::MergeFrom(from.rle_parsing_compressed());
  }
  if (from.has_roi_output()) {
    mutable_roi_output()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.roi_output());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void IpmParsingMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.IpmParsingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpmParsingMsg::CopyFrom(const IpmParsingMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.IpmParsingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpmParsingMsg::IsInitialized() const {
  return true;
}

void IpmParsingMsg::Swap(IpmParsingMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpmParsingMsg::InternalSwap(IpmParsingMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(free_space_, other->free_space_);
  swap(feature_map_, other->feature_map_);
  swap(rle_parsing_compressed_, other->rle_parsing_compressed_);
  swap(roi_output_, other->roi_output_);
  swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IpmParsingMsg::GetMetadata() const {
  protobuf_ipm_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fparsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
