// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_objects.proto

#ifndef PROTOBUF_map_5fobjects_2eproto__INCLUDED
#define PROTOBUF_map_5fobjects_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
#include "common.pb.h"
#include "perception_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_map_5fobjects_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMapObjectAttrImpl();
void InitDefaultsMapObjectAttr();
void InitDefaultsMapObjectImpl();
void InitDefaultsMapObject();
void InitDefaultsMapObjectsMsgImpl();
void InitDefaultsMapObjectsMsg();
inline void InitDefaults() {
  InitDefaultsMapObjectAttr();
  InitDefaultsMapObject();
  InitDefaultsMapObjectsMsg();
}
}  // namespace protobuf_map_5fobjects_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class MapObject;
class MapObjectDefaultTypeInternal;
extern MapObjectDefaultTypeInternal _MapObject_default_instance_;
class MapObjectAttr;
class MapObjectAttrDefaultTypeInternal;
extern MapObjectAttrDefaultTypeInternal _MapObjectAttr_default_instance_;
class MapObjectsMsg;
class MapObjectsMsgDefaultTypeInternal;
extern MapObjectsMsgDefaultTypeInternal _MapObjectsMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum MapObjectType {
  kMapObjectTypeUnknown = 0,
  kMapObjectTypeTrafficSign = 1,
  kMapObjectTypeTrafficLight = 2,
  kMapObjectTypeTrafficLightBulb = 3,
  kMapObjectTypeLaneMarking = 4,
  kMapObjectTypeStopLine = 5,
  kMapObjectTypeSpeedBump = 6,
  kMapObjectTypePole = 7,
  kMapObjectTypeCrossWalk = 8,
  kMapObjectTypeZone = 9,
  kMapObjectTypeParkingSlot = 10,
  kMapObjectTypeTrafficCone = 11,
  kMapObjectTypeParkingLockClose = 12,
  kMapObjectTypeParkingLockOpen = 13,
  kMapObjectTypeParkingColumn = 14,
  kMapObjectTypeParkingAFrameSign = 15,
  kMapObjectTypeJunction = 16,
  kMapObjectTypeParkingLock = 17,
  kMapObjectTypeCementColumn_Yes = 18,
  kMapObjectTypeCementColumn_No = 19,
  MapObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MapObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MapObjectType_IsValid(int value);
const MapObjectType MapObjectType_MIN = kMapObjectTypeUnknown;
const MapObjectType MapObjectType_MAX = kMapObjectTypeCementColumn_No;
const int MapObjectType_ARRAYSIZE = MapObjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MapObjectType_descriptor();
inline const ::std::string& MapObjectType_Name(MapObjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapObjectType_descriptor(), value);
}
inline bool MapObjectType_Parse(
    const ::std::string& name, MapObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapObjectType>(
    MapObjectType_descriptor(), name, value);
}
enum MapObjectSubType {
  kParkLockTypeUnknown = 0,
  kParkLockTypeOpen = 1,
  kParkLockTypeClose = 2,
  kFireHydrantTypeAir = 3,
  kFireHydrantTypeGnd = 4,
  MapObjectSubType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MapObjectSubType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MapObjectSubType_IsValid(int value);
const MapObjectSubType MapObjectSubType_MIN = kParkLockTypeUnknown;
const MapObjectSubType MapObjectSubType_MAX = kFireHydrantTypeGnd;
const int MapObjectSubType_ARRAYSIZE = MapObjectSubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MapObjectSubType_descriptor();
inline const ::std::string& MapObjectSubType_Name(MapObjectSubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapObjectSubType_descriptor(), value);
}
inline bool MapObjectSubType_Parse(
    const ::std::string& name, MapObjectSubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapObjectSubType>(
    MapObjectSubType_descriptor(), name, value);
}
// ===================================================================

class MapObjectAttr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapObjectAttr) */ {
 public:
  MapObjectAttr();
  virtual ~MapObjectAttr();

  MapObjectAttr(const MapObjectAttr& from);

  inline MapObjectAttr& operator=(const MapObjectAttr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapObjectAttr(MapObjectAttr&& from) noexcept
    : MapObjectAttr() {
    *this = ::std::move(from);
  }

  inline MapObjectAttr& operator=(MapObjectAttr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapObjectAttr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapObjectAttr* internal_default_instance() {
    return reinterpret_cast<const MapObjectAttr*>(
               &_MapObjectAttr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MapObjectAttr* other);
  friend void swap(MapObjectAttr& a, MapObjectAttr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapObjectAttr* New() const PROTOBUF_FINAL { return New(NULL); }

  MapObjectAttr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapObjectAttr& from);
  void MergeFrom(const MapObjectAttr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapObjectAttr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 7;
  void clear_value();
  static const int kValueFieldNumber = 7;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
  bool has_img_info() const;
  void clear_img_info();
  static const int kImgInfoFieldNumber = 9;
  const ::autodrive::workflow::proto::perception_base::ImageSpace& img_info() const;
  ::autodrive::workflow::proto::perception_base::ImageSpace* release_img_info();
  ::autodrive::workflow::proto::perception_base::ImageSpace* mutable_img_info();
  void set_allocated_img_info(::autodrive::workflow::proto::perception_base::ImageSpace* img_info);

  // int32 shape = 1;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  ::google::protobuf::int32 shape() const;
  void set_shape(::google::protobuf::int32 value);

  // float cycle_time = 2;
  void clear_cycle_time();
  static const int kCycleTimeFieldNumber = 2;
  float cycle_time() const;
  void set_cycle_time(float value);

  // int32 traversable = 3;
  void clear_traversable();
  static const int kTraversableFieldNumber = 3;
  ::google::protobuf::int32 traversable() const;
  void set_traversable(::google::protobuf::int32 value);

  // float height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  float height() const;
  void set_height(float value);

  // float radius = 5;
  void clear_radius();
  static const int kRadiusFieldNumber = 5;
  float radius() const;
  void set_radius(float value);

  // int32 status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // bool dynamic = 8;
  void clear_dynamic();
  static const int kDynamicFieldNumber = 8;
  bool dynamic() const;
  void set_dynamic(bool value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapObjectAttr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::autodrive::workflow::proto::perception_base::ImageSpace* img_info_;
  ::google::protobuf::int32 shape_;
  float cycle_time_;
  ::google::protobuf::int32 traversable_;
  float height_;
  float radius_;
  ::google::protobuf::int32 status_;
  bool dynamic_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fobjects_2eproto::TableStruct;
  friend void ::protobuf_map_5fobjects_2eproto::InitDefaultsMapObjectAttrImpl();
};
// -------------------------------------------------------------------

class MapObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapObject) */ {
 public:
  MapObject();
  virtual ~MapObject();

  MapObject(const MapObject& from);

  inline MapObject& operator=(const MapObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapObject(MapObject&& from) noexcept
    : MapObject() {
    *this = ::std::move(from);
  }

  inline MapObject& operator=(MapObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapObject* internal_default_instance() {
    return reinterpret_cast<const MapObject*>(
               &_MapObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MapObject* other);
  friend void swap(MapObject& a, MapObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapObject* New() const PROTOBUF_FINAL { return New(NULL); }

  MapObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapObject& from);
  void MergeFrom(const MapObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string str_id = 10;
  void clear_str_id();
  static const int kStrIdFieldNumber = 10;
  const ::std::string& str_id() const;
  void set_str_id(const ::std::string& value);
  #if LANG_CXX11
  void set_str_id(::std::string&& value);
  #endif
  void set_str_id(const char* value);
  void set_str_id(const char* value, size_t size);
  ::std::string* mutable_str_id();
  ::std::string* release_str_id();
  void set_allocated_str_id(::std::string* str_id);

  // .autodrive.workflow.proto.perception_base.Polygon border = 7;
  bool has_border() const;
  void clear_border();
  static const int kBorderFieldNumber = 7;
  const ::autodrive::workflow::proto::perception_base::Polygon& border() const;
  ::autodrive::workflow::proto::perception_base::Polygon* release_border();
  ::autodrive::workflow::proto::perception_base::Polygon* mutable_border();
  void set_allocated_border(::autodrive::workflow::proto::perception_base::Polygon* border);

  // .autodrive.workflow.proto.MapObjectAttr attr = 11;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 11;
  const ::autodrive::workflow::proto::MapObjectAttr& attr() const;
  ::autodrive::workflow::proto::MapObjectAttr* release_attr();
  ::autodrive::workflow::proto::MapObjectAttr* mutable_attr();
  void set_allocated_attr(::autodrive::workflow::proto::MapObjectAttr* attr);

  // .autodrive.workflow.proto.Vector3f position = 12;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 12;
  const ::autodrive::workflow::proto::Vector3f& position() const;
  ::autodrive::workflow::proto::Vector3f* release_position();
  ::autodrive::workflow::proto::Vector3f* mutable_position();
  void set_allocated_position(::autodrive::workflow::proto::Vector3f* position);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 cam_id = 2;
  void clear_cam_id();
  static const int kCamIdFieldNumber = 2;
  ::google::protobuf::int32 cam_id() const;
  void set_cam_id(::google::protobuf::int32 value);

  // int64 time_stamp = 3;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  ::google::protobuf::int64 time_stamp() const;
  void set_time_stamp(::google::protobuf::int64 value);

  // int32 conf = 4;
  void clear_conf();
  static const int kConfFieldNumber = 4;
  ::google::protobuf::int32 conf() const;
  void set_conf(::google::protobuf::int32 value);

  // .autodrive.workflow.proto.MapObjectType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::autodrive::workflow::proto::MapObjectType type() const;
  void set_type(::autodrive::workflow::proto::MapObjectType value);

  // .autodrive.workflow.proto.MapObjectSubType sub_type = 6;
  void clear_sub_type();
  static const int kSubTypeFieldNumber = 6;
  ::autodrive::workflow::proto::MapObjectSubType sub_type() const;
  void set_sub_type(::autodrive::workflow::proto::MapObjectSubType value);

  // int32 life_time = 8;
  void clear_life_time();
  static const int kLifeTimeFieldNumber = 8;
  ::google::protobuf::int32 life_time() const;
  void set_life_time(::google::protobuf::int32 value);

  // int32 age = 9;
  void clear_age();
  static const int kAgeFieldNumber = 9;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr str_id_;
  ::autodrive::workflow::proto::perception_base::Polygon* border_;
  ::autodrive::workflow::proto::MapObjectAttr* attr_;
  ::autodrive::workflow::proto::Vector3f* position_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cam_id_;
  ::google::protobuf::int64 time_stamp_;
  ::google::protobuf::int32 conf_;
  int type_;
  int sub_type_;
  ::google::protobuf::int32 life_time_;
  ::google::protobuf::int32 age_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fobjects_2eproto::TableStruct;
  friend void ::protobuf_map_5fobjects_2eproto::InitDefaultsMapObjectImpl();
};
// -------------------------------------------------------------------

class MapObjectsMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapObjectsMsg) */ {
 public:
  MapObjectsMsg();
  virtual ~MapObjectsMsg();

  MapObjectsMsg(const MapObjectsMsg& from);

  inline MapObjectsMsg& operator=(const MapObjectsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapObjectsMsg(MapObjectsMsg&& from) noexcept
    : MapObjectsMsg() {
    *this = ::std::move(from);
  }

  inline MapObjectsMsg& operator=(MapObjectsMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapObjectsMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapObjectsMsg* internal_default_instance() {
    return reinterpret_cast<const MapObjectsMsg*>(
               &_MapObjectsMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MapObjectsMsg* other);
  friend void swap(MapObjectsMsg& a, MapObjectsMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapObjectsMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  MapObjectsMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapObjectsMsg& from);
  void MergeFrom(const MapObjectsMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapObjectsMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.MapObject objects = 4;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 4;
  const ::autodrive::workflow::proto::MapObject& objects(int index) const;
  ::autodrive::workflow::proto::MapObject* mutable_objects(int index);
  ::autodrive::workflow::proto::MapObject* add_objects();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapObject >*
      mutable_objects();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapObject >&
      objects() const;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // float conf_scale = 3;
  void clear_conf_scale();
  static const int kConfScaleFieldNumber = 3;
  float conf_scale() const;
  void set_conf_scale(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapObjectsMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapObject > objects_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  float conf_scale_;
  mutable int _cached_size_;
  friend struct ::protobuf_map_5fobjects_2eproto::TableStruct;
  friend void ::protobuf_map_5fobjects_2eproto::InitDefaultsMapObjectsMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapObjectAttr

// int32 shape = 1;
inline void MapObjectAttr::clear_shape() {
  shape_ = 0;
}
inline ::google::protobuf::int32 MapObjectAttr::shape() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectAttr.shape)
  return shape_;
}
inline void MapObjectAttr::set_shape(::google::protobuf::int32 value) {
  
  shape_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObjectAttr.shape)
}

// float cycle_time = 2;
inline void MapObjectAttr::clear_cycle_time() {
  cycle_time_ = 0;
}
inline float MapObjectAttr::cycle_time() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectAttr.cycle_time)
  return cycle_time_;
}
inline void MapObjectAttr::set_cycle_time(float value) {
  
  cycle_time_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObjectAttr.cycle_time)
}

// int32 traversable = 3;
inline void MapObjectAttr::clear_traversable() {
  traversable_ = 0;
}
inline ::google::protobuf::int32 MapObjectAttr::traversable() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectAttr.traversable)
  return traversable_;
}
inline void MapObjectAttr::set_traversable(::google::protobuf::int32 value) {
  
  traversable_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObjectAttr.traversable)
}

// float height = 4;
inline void MapObjectAttr::clear_height() {
  height_ = 0;
}
inline float MapObjectAttr::height() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectAttr.height)
  return height_;
}
inline void MapObjectAttr::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObjectAttr.height)
}

// float radius = 5;
inline void MapObjectAttr::clear_radius() {
  radius_ = 0;
}
inline float MapObjectAttr::radius() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectAttr.radius)
  return radius_;
}
inline void MapObjectAttr::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObjectAttr.radius)
}

// int32 status = 6;
inline void MapObjectAttr::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 MapObjectAttr::status() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectAttr.status)
  return status_;
}
inline void MapObjectAttr::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObjectAttr.status)
}

// string value = 7;
inline void MapObjectAttr::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MapObjectAttr::value() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectAttr.value)
  return value_.GetNoArena();
}
inline void MapObjectAttr::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObjectAttr.value)
}
#if LANG_CXX11
inline void MapObjectAttr::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.MapObjectAttr.value)
}
#endif
inline void MapObjectAttr::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.MapObjectAttr.value)
}
inline void MapObjectAttr::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.MapObjectAttr.value)
}
inline ::std::string* MapObjectAttr::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapObjectAttr.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapObjectAttr::release_value() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapObjectAttr.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapObjectAttr::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapObjectAttr.value)
}

// bool dynamic = 8;
inline void MapObjectAttr::clear_dynamic() {
  dynamic_ = false;
}
inline bool MapObjectAttr::dynamic() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectAttr.dynamic)
  return dynamic_;
}
inline void MapObjectAttr::set_dynamic(bool value) {
  
  dynamic_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObjectAttr.dynamic)
}

// .autodrive.workflow.proto.perception_base.ImageSpace img_info = 9;
inline bool MapObjectAttr::has_img_info() const {
  return this != internal_default_instance() && img_info_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::ImageSpace& MapObjectAttr::img_info() const {
  const ::autodrive::workflow::proto::perception_base::ImageSpace* p = img_info_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectAttr.img_info)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::ImageSpace*>(
      &::autodrive::workflow::proto::perception_base::_ImageSpace_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::ImageSpace* MapObjectAttr::release_img_info() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapObjectAttr.img_info)
  
  ::autodrive::workflow::proto::perception_base::ImageSpace* temp = img_info_;
  img_info_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::ImageSpace* MapObjectAttr::mutable_img_info() {
  
  if (img_info_ == NULL) {
    img_info_ = new ::autodrive::workflow::proto::perception_base::ImageSpace;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapObjectAttr.img_info)
  return img_info_;
}
inline void MapObjectAttr::set_allocated_img_info(::autodrive::workflow::proto::perception_base::ImageSpace* img_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(img_info_);
  }
  if (img_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      img_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, img_info, submessage_arena);
    }
    
  } else {
    
  }
  img_info_ = img_info;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapObjectAttr.img_info)
}

// -------------------------------------------------------------------

// MapObject

// int32 id = 1;
inline void MapObject::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 MapObject::id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.id)
  return id_;
}
inline void MapObject::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObject.id)
}

// int32 cam_id = 2;
inline void MapObject::clear_cam_id() {
  cam_id_ = 0;
}
inline ::google::protobuf::int32 MapObject::cam_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.cam_id)
  return cam_id_;
}
inline void MapObject::set_cam_id(::google::protobuf::int32 value) {
  
  cam_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObject.cam_id)
}

// int64 time_stamp = 3;
inline void MapObject::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MapObject::time_stamp() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.time_stamp)
  return time_stamp_;
}
inline void MapObject::set_time_stamp(::google::protobuf::int64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObject.time_stamp)
}

// int32 conf = 4;
inline void MapObject::clear_conf() {
  conf_ = 0;
}
inline ::google::protobuf::int32 MapObject::conf() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.conf)
  return conf_;
}
inline void MapObject::set_conf(::google::protobuf::int32 value) {
  
  conf_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObject.conf)
}

// .autodrive.workflow.proto.MapObjectType type = 5;
inline void MapObject::clear_type() {
  type_ = 0;
}
inline ::autodrive::workflow::proto::MapObjectType MapObject::type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.type)
  return static_cast< ::autodrive::workflow::proto::MapObjectType >(type_);
}
inline void MapObject::set_type(::autodrive::workflow::proto::MapObjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObject.type)
}

// .autodrive.workflow.proto.MapObjectSubType sub_type = 6;
inline void MapObject::clear_sub_type() {
  sub_type_ = 0;
}
inline ::autodrive::workflow::proto::MapObjectSubType MapObject::sub_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.sub_type)
  return static_cast< ::autodrive::workflow::proto::MapObjectSubType >(sub_type_);
}
inline void MapObject::set_sub_type(::autodrive::workflow::proto::MapObjectSubType value) {
  
  sub_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObject.sub_type)
}

// .autodrive.workflow.proto.perception_base.Polygon border = 7;
inline bool MapObject::has_border() const {
  return this != internal_default_instance() && border_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::Polygon& MapObject::border() const {
  const ::autodrive::workflow::proto::perception_base::Polygon* p = border_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.border)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::Polygon*>(
      &::autodrive::workflow::proto::perception_base::_Polygon_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::Polygon* MapObject::release_border() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapObject.border)
  
  ::autodrive::workflow::proto::perception_base::Polygon* temp = border_;
  border_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::Polygon* MapObject::mutable_border() {
  
  if (border_ == NULL) {
    border_ = new ::autodrive::workflow::proto::perception_base::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapObject.border)
  return border_;
}
inline void MapObject::set_allocated_border(::autodrive::workflow::proto::perception_base::Polygon* border) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(border_);
  }
  if (border) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      border = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, border, submessage_arena);
    }
    
  } else {
    
  }
  border_ = border;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapObject.border)
}

// int32 life_time = 8;
inline void MapObject::clear_life_time() {
  life_time_ = 0;
}
inline ::google::protobuf::int32 MapObject::life_time() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.life_time)
  return life_time_;
}
inline void MapObject::set_life_time(::google::protobuf::int32 value) {
  
  life_time_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObject.life_time)
}

// int32 age = 9;
inline void MapObject::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 MapObject::age() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.age)
  return age_;
}
inline void MapObject::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObject.age)
}

// string str_id = 10;
inline void MapObject::clear_str_id() {
  str_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MapObject::str_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.str_id)
  return str_id_.GetNoArena();
}
inline void MapObject::set_str_id(const ::std::string& value) {
  
  str_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObject.str_id)
}
#if LANG_CXX11
inline void MapObject::set_str_id(::std::string&& value) {
  
  str_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.MapObject.str_id)
}
#endif
inline void MapObject::set_str_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  str_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.MapObject.str_id)
}
inline void MapObject::set_str_id(const char* value, size_t size) {
  
  str_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.MapObject.str_id)
}
inline ::std::string* MapObject::mutable_str_id() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapObject.str_id)
  return str_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapObject::release_str_id() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapObject.str_id)
  
  return str_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapObject::set_allocated_str_id(::std::string* str_id) {
  if (str_id != NULL) {
    
  } else {
    
  }
  str_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_id);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapObject.str_id)
}

// .autodrive.workflow.proto.MapObjectAttr attr = 11;
inline bool MapObject::has_attr() const {
  return this != internal_default_instance() && attr_ != NULL;
}
inline void MapObject::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) {
    delete attr_;
  }
  attr_ = NULL;
}
inline const ::autodrive::workflow::proto::MapObjectAttr& MapObject::attr() const {
  const ::autodrive::workflow::proto::MapObjectAttr* p = attr_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.attr)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MapObjectAttr*>(
      &::autodrive::workflow::proto::_MapObjectAttr_default_instance_);
}
inline ::autodrive::workflow::proto::MapObjectAttr* MapObject::release_attr() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapObject.attr)
  
  ::autodrive::workflow::proto::MapObjectAttr* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MapObjectAttr* MapObject::mutable_attr() {
  
  if (attr_ == NULL) {
    attr_ = new ::autodrive::workflow::proto::MapObjectAttr;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapObject.attr)
  return attr_;
}
inline void MapObject::set_allocated_attr(::autodrive::workflow::proto::MapObjectAttr* attr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attr_;
  }
  if (attr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    
  } else {
    
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapObject.attr)
}

// .autodrive.workflow.proto.Vector3f position = 12;
inline bool MapObject::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& MapObject::position() const {
  const ::autodrive::workflow::proto::Vector3f* p = position_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObject.position)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* MapObject::release_position() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapObject.position)
  
  ::autodrive::workflow::proto::Vector3f* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* MapObject::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapObject.position)
  return position_;
}
inline void MapObject::set_allocated_position(::autodrive::workflow::proto::Vector3f* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapObject.position)
}

// -------------------------------------------------------------------

// MapObjectsMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool MapObjectsMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& MapObjectsMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectsMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* MapObjectsMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapObjectsMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* MapObjectsMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapObjectsMsg.header)
  return header_;
}
inline void MapObjectsMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapObjectsMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool MapObjectsMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& MapObjectsMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectsMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* MapObjectsMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapObjectsMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* MapObjectsMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapObjectsMsg.error)
  return error_;
}
inline void MapObjectsMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapObjectsMsg.error)
}

// float conf_scale = 3;
inline void MapObjectsMsg::clear_conf_scale() {
  conf_scale_ = 0;
}
inline float MapObjectsMsg::conf_scale() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectsMsg.conf_scale)
  return conf_scale_;
}
inline void MapObjectsMsg::set_conf_scale(float value) {
  
  conf_scale_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapObjectsMsg.conf_scale)
}

// repeated .autodrive.workflow.proto.MapObject objects = 4;
inline int MapObjectsMsg::objects_size() const {
  return objects_.size();
}
inline void MapObjectsMsg::clear_objects() {
  objects_.Clear();
}
inline const ::autodrive::workflow::proto::MapObject& MapObjectsMsg::objects(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapObjectsMsg.objects)
  return objects_.Get(index);
}
inline ::autodrive::workflow::proto::MapObject* MapObjectsMsg::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapObjectsMsg.objects)
  return objects_.Mutable(index);
}
inline ::autodrive::workflow::proto::MapObject* MapObjectsMsg::add_objects() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.MapObjectsMsg.objects)
  return objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapObject >*
MapObjectsMsg::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.MapObjectsMsg.objects)
  return &objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapObject >&
MapObjectsMsg::objects() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.MapObjectsMsg.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::MapObjectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::MapObjectType>() {
  return ::autodrive::workflow::proto::MapObjectType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::MapObjectSubType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::MapObjectSubType>() {
  return ::autodrive::workflow::proto::MapObjectSubType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_5fobjects_2eproto__INCLUDED
