// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipm_multitask.proto

#ifndef PROTOBUF_ipm_5fmultitask_2eproto__INCLUDED
#define PROTOBUF_ipm_5fmultitask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
#include "common.pb.h"
#include "parsing_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_ipm_5fmultitask_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsParkingSlotPointImpl();
void InitDefaultsParkingSlotPoint();
void InitDefaultsParkingSlotRawImpl();
void InitDefaultsParkingSlotRaw();
void InitDefaultsIpmWheelGroundPointImpl();
void InitDefaultsIpmWheelGroundPoint();
void InitDefaultsIpmMultitaskMsgImpl();
void InitDefaultsIpmMultitaskMsg();
inline void InitDefaults() {
  InitDefaultsParkingSlotPoint();
  InitDefaultsParkingSlotRaw();
  InitDefaultsIpmWheelGroundPoint();
  InitDefaultsIpmMultitaskMsg();
}
}  // namespace protobuf_ipm_5fmultitask_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class IpmMultitaskMsg;
class IpmMultitaskMsgDefaultTypeInternal;
extern IpmMultitaskMsgDefaultTypeInternal _IpmMultitaskMsg_default_instance_;
class IpmWheelGroundPoint;
class IpmWheelGroundPointDefaultTypeInternal;
extern IpmWheelGroundPointDefaultTypeInternal _IpmWheelGroundPoint_default_instance_;
class ParkingSlotPoint;
class ParkingSlotPointDefaultTypeInternal;
extern ParkingSlotPointDefaultTypeInternal _ParkingSlotPoint_default_instance_;
class ParkingSlotRaw;
class ParkingSlotRawDefaultTypeInternal;
extern ParkingSlotRawDefaultTypeInternal _ParkingSlotRaw_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum ParkingSlotPointType {
  kParkingSlotPointTypeTruncated = 0,
  kParkingSlotPointTypeCorner = 1,
  ParkingSlotPointType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParkingSlotPointType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParkingSlotPointType_IsValid(int value);
const ParkingSlotPointType ParkingSlotPointType_MIN = kParkingSlotPointTypeTruncated;
const ParkingSlotPointType ParkingSlotPointType_MAX = kParkingSlotPointTypeCorner;
const int ParkingSlotPointType_ARRAYSIZE = ParkingSlotPointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParkingSlotPointType_descriptor();
inline const ::std::string& ParkingSlotPointType_Name(ParkingSlotPointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParkingSlotPointType_descriptor(), value);
}
inline bool ParkingSlotPointType_Parse(
    const ::std::string& name, ParkingSlotPointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParkingSlotPointType>(
    ParkingSlotPointType_descriptor(), name, value);
}
enum ParkingSlotType {
  kParkingSlotTypeUnknown = 0,
  kParkingSlotTypeVertical = 1,
  kParkingSlotTypeParallel = 2,
  kParkingSlotTypeOblique = 3,
  ParkingSlotType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParkingSlotType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParkingSlotType_IsValid(int value);
const ParkingSlotType ParkingSlotType_MIN = kParkingSlotTypeUnknown;
const ParkingSlotType ParkingSlotType_MAX = kParkingSlotTypeOblique;
const int ParkingSlotType_ARRAYSIZE = ParkingSlotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParkingSlotType_descriptor();
inline const ::std::string& ParkingSlotType_Name(ParkingSlotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParkingSlotType_descriptor(), value);
}
inline bool ParkingSlotType_Parse(
    const ::std::string& name, ParkingSlotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParkingSlotType>(
    ParkingSlotType_descriptor(), name, value);
}
// ===================================================================

class ParkingSlotPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.ParkingSlotPoint) */ {
 public:
  ParkingSlotPoint();
  virtual ~ParkingSlotPoint();

  ParkingSlotPoint(const ParkingSlotPoint& from);

  inline ParkingSlotPoint& operator=(const ParkingSlotPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParkingSlotPoint(ParkingSlotPoint&& from) noexcept
    : ParkingSlotPoint() {
    *this = ::std::move(from);
  }

  inline ParkingSlotPoint& operator=(ParkingSlotPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingSlotPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSlotPoint* internal_default_instance() {
    return reinterpret_cast<const ParkingSlotPoint*>(
               &_ParkingSlotPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ParkingSlotPoint* other);
  friend void swap(ParkingSlotPoint& a, ParkingSlotPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParkingSlotPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  ParkingSlotPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParkingSlotPoint& from);
  void MergeFrom(const ParkingSlotPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParkingSlotPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector2f point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::autodrive::workflow::proto::Vector2f& point() const;
  ::autodrive::workflow::proto::Vector2f* release_point();
  ::autodrive::workflow::proto::Vector2f* mutable_point();
  void set_allocated_point(::autodrive::workflow::proto::Vector2f* point);

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // .autodrive.workflow.proto.ParkingSlotPointType point_type = 3;
  void clear_point_type();
  static const int kPointTypeFieldNumber = 3;
  ::autodrive::workflow::proto::ParkingSlotPointType point_type() const;
  void set_point_type(::autodrive::workflow::proto::ParkingSlotPointType value);

  // bool visibility = 4;
  void clear_visibility();
  static const int kVisibilityFieldNumber = 4;
  bool visibility() const;
  void set_visibility(bool value);

  // float point_orientation_x = 5;
  void clear_point_orientation_x();
  static const int kPointOrientationXFieldNumber = 5;
  float point_orientation_x() const;
  void set_point_orientation_x(float value);

  // float point_orientation_y = 6;
  void clear_point_orientation_y();
  static const int kPointOrientationYFieldNumber = 6;
  float point_orientation_y() const;
  void set_point_orientation_y(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.ParkingSlotPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector2f* point_;
  float score_;
  int point_type_;
  bool visibility_;
  float point_orientation_x_;
  float point_orientation_y_;
  mutable int _cached_size_;
  friend struct ::protobuf_ipm_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsParkingSlotPointImpl();
};
// -------------------------------------------------------------------

class ParkingSlotRaw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.ParkingSlotRaw) */ {
 public:
  ParkingSlotRaw();
  virtual ~ParkingSlotRaw();

  ParkingSlotRaw(const ParkingSlotRaw& from);

  inline ParkingSlotRaw& operator=(const ParkingSlotRaw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParkingSlotRaw(ParkingSlotRaw&& from) noexcept
    : ParkingSlotRaw() {
    *this = ::std::move(from);
  }

  inline ParkingSlotRaw& operator=(ParkingSlotRaw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingSlotRaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingSlotRaw* internal_default_instance() {
    return reinterpret_cast<const ParkingSlotRaw*>(
               &_ParkingSlotRaw_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ParkingSlotRaw* other);
  friend void swap(ParkingSlotRaw& a, ParkingSlotRaw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParkingSlotRaw* New() const PROTOBUF_FINAL { return New(NULL); }

  ParkingSlotRaw* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParkingSlotRaw& from);
  void MergeFrom(const ParkingSlotRaw& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParkingSlotRaw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.ParkingSlotPoint slot_points = 1;
  int slot_points_size() const;
  void clear_slot_points();
  static const int kSlotPointsFieldNumber = 1;
  const ::autodrive::workflow::proto::ParkingSlotPoint& slot_points(int index) const;
  ::autodrive::workflow::proto::ParkingSlotPoint* mutable_slot_points(int index);
  ::autodrive::workflow::proto::ParkingSlotPoint* add_slot_points();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotPoint >*
      mutable_slot_points();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotPoint >&
      slot_points() const;

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // bool occupancy = 3;
  void clear_occupancy();
  static const int kOccupancyFieldNumber = 3;
  bool occupancy() const;
  void set_occupancy(bool value);

  // .autodrive.workflow.proto.ParkingSlotType slot_type = 4;
  void clear_slot_type();
  static const int kSlotTypeFieldNumber = 4;
  ::autodrive::workflow::proto::ParkingSlotType slot_type() const;
  void set_slot_type(::autodrive::workflow::proto::ParkingSlotType value);

  // float slot_orientation_x = 5;
  void clear_slot_orientation_x();
  static const int kSlotOrientationXFieldNumber = 5;
  float slot_orientation_x() const;
  void set_slot_orientation_x(float value);

  // float slot_orientation_y = 6;
  void clear_slot_orientation_y();
  static const int kSlotOrientationYFieldNumber = 6;
  float slot_orientation_y() const;
  void set_slot_orientation_y(float value);

  // int32 corner_match_flag = 7;
  void clear_corner_match_flag();
  static const int kCornerMatchFlagFieldNumber = 7;
  ::google::protobuf::int32 corner_match_flag() const;
  void set_corner_match_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.ParkingSlotRaw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotPoint > slot_points_;
  float score_;
  bool occupancy_;
  int slot_type_;
  float slot_orientation_x_;
  float slot_orientation_y_;
  ::google::protobuf::int32 corner_match_flag_;
  mutable int _cached_size_;
  friend struct ::protobuf_ipm_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsParkingSlotRawImpl();
};
// -------------------------------------------------------------------

class IpmWheelGroundPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.IpmWheelGroundPoint) */ {
 public:
  IpmWheelGroundPoint();
  virtual ~IpmWheelGroundPoint();

  IpmWheelGroundPoint(const IpmWheelGroundPoint& from);

  inline IpmWheelGroundPoint& operator=(const IpmWheelGroundPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IpmWheelGroundPoint(IpmWheelGroundPoint&& from) noexcept
    : IpmWheelGroundPoint() {
    *this = ::std::move(from);
  }

  inline IpmWheelGroundPoint& operator=(IpmWheelGroundPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpmWheelGroundPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpmWheelGroundPoint* internal_default_instance() {
    return reinterpret_cast<const IpmWheelGroundPoint*>(
               &_IpmWheelGroundPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(IpmWheelGroundPoint* other);
  friend void swap(IpmWheelGroundPoint& a, IpmWheelGroundPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IpmWheelGroundPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  IpmWheelGroundPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IpmWheelGroundPoint& from);
  void MergeFrom(const IpmWheelGroundPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IpmWheelGroundPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector2f point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::autodrive::workflow::proto::Vector2f& point() const;
  ::autodrive::workflow::proto::Vector2f* release_point();
  ::autodrive::workflow::proto::Vector2f* mutable_point();
  void set_allocated_point(::autodrive::workflow::proto::Vector2f* point);

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.IpmWheelGroundPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector2f* point_;
  float score_;
  mutable int _cached_size_;
  friend struct ::protobuf_ipm_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsIpmWheelGroundPointImpl();
};
// -------------------------------------------------------------------

class IpmMultitaskMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.IpmMultitaskMsg) */ {
 public:
  IpmMultitaskMsg();
  virtual ~IpmMultitaskMsg();

  IpmMultitaskMsg(const IpmMultitaskMsg& from);

  inline IpmMultitaskMsg& operator=(const IpmMultitaskMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IpmMultitaskMsg(IpmMultitaskMsg&& from) noexcept
    : IpmMultitaskMsg() {
    *this = ::std::move(from);
  }

  inline IpmMultitaskMsg& operator=(IpmMultitaskMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpmMultitaskMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpmMultitaskMsg* internal_default_instance() {
    return reinterpret_cast<const IpmMultitaskMsg*>(
               &_IpmMultitaskMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(IpmMultitaskMsg* other);
  friend void swap(IpmMultitaskMsg& a, IpmMultitaskMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IpmMultitaskMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  IpmMultitaskMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IpmMultitaskMsg& from);
  void MergeFrom(const IpmMultitaskMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IpmMultitaskMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.ParkingSlotRaw slots_raw = 3;
  int slots_raw_size() const;
  void clear_slots_raw();
  static const int kSlotsRawFieldNumber = 3;
  const ::autodrive::workflow::proto::ParkingSlotRaw& slots_raw(int index) const;
  ::autodrive::workflow::proto::ParkingSlotRaw* mutable_slots_raw(int index);
  ::autodrive::workflow::proto::ParkingSlotRaw* add_slots_raw();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotRaw >*
      mutable_slots_raw();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotRaw >&
      slots_raw() const;

  // repeated .autodrive.workflow.proto.IpmWheelGroundPoint ipm_wheel_ground_points = 4;
  int ipm_wheel_ground_points_size() const;
  void clear_ipm_wheel_ground_points();
  static const int kIpmWheelGroundPointsFieldNumber = 4;
  const ::autodrive::workflow::proto::IpmWheelGroundPoint& ipm_wheel_ground_points(int index) const;
  ::autodrive::workflow::proto::IpmWheelGroundPoint* mutable_ipm_wheel_ground_points(int index);
  ::autodrive::workflow::proto::IpmWheelGroundPoint* add_ipm_wheel_ground_points();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::IpmWheelGroundPoint >*
      mutable_ipm_wheel_ground_points();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::IpmWheelGroundPoint >&
      ipm_wheel_ground_points() const;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // float test = 5;
  void clear_test();
  static const int kTestFieldNumber = 5;
  float test() const;
  void set_test(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.IpmMultitaskMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotRaw > slots_raw_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::IpmWheelGroundPoint > ipm_wheel_ground_points_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  float test_;
  mutable int _cached_size_;
  friend struct ::protobuf_ipm_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsIpmMultitaskMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParkingSlotPoint

// .autodrive.workflow.proto.Vector2f point = 1;
inline bool ParkingSlotPoint::has_point() const {
  return this != internal_default_instance() && point_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& ParkingSlotPoint::point() const {
  const ::autodrive::workflow::proto::Vector2f* p = point_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotPoint.point)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* ParkingSlotPoint::release_point() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ParkingSlotPoint.point)
  
  ::autodrive::workflow::proto::Vector2f* temp = point_;
  point_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* ParkingSlotPoint::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ParkingSlotPoint.point)
  return point_;
}
inline void ParkingSlotPoint::set_allocated_point(::autodrive::workflow::proto::Vector2f* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(point_);
  }
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ParkingSlotPoint.point)
}

// float score = 2;
inline void ParkingSlotPoint::clear_score() {
  score_ = 0;
}
inline float ParkingSlotPoint::score() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotPoint.score)
  return score_;
}
inline void ParkingSlotPoint::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotPoint.score)
}

// .autodrive.workflow.proto.ParkingSlotPointType point_type = 3;
inline void ParkingSlotPoint::clear_point_type() {
  point_type_ = 0;
}
inline ::autodrive::workflow::proto::ParkingSlotPointType ParkingSlotPoint::point_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotPoint.point_type)
  return static_cast< ::autodrive::workflow::proto::ParkingSlotPointType >(point_type_);
}
inline void ParkingSlotPoint::set_point_type(::autodrive::workflow::proto::ParkingSlotPointType value) {
  
  point_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotPoint.point_type)
}

// bool visibility = 4;
inline void ParkingSlotPoint::clear_visibility() {
  visibility_ = false;
}
inline bool ParkingSlotPoint::visibility() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotPoint.visibility)
  return visibility_;
}
inline void ParkingSlotPoint::set_visibility(bool value) {
  
  visibility_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotPoint.visibility)
}

// float point_orientation_x = 5;
inline void ParkingSlotPoint::clear_point_orientation_x() {
  point_orientation_x_ = 0;
}
inline float ParkingSlotPoint::point_orientation_x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotPoint.point_orientation_x)
  return point_orientation_x_;
}
inline void ParkingSlotPoint::set_point_orientation_x(float value) {
  
  point_orientation_x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotPoint.point_orientation_x)
}

// float point_orientation_y = 6;
inline void ParkingSlotPoint::clear_point_orientation_y() {
  point_orientation_y_ = 0;
}
inline float ParkingSlotPoint::point_orientation_y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotPoint.point_orientation_y)
  return point_orientation_y_;
}
inline void ParkingSlotPoint::set_point_orientation_y(float value) {
  
  point_orientation_y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotPoint.point_orientation_y)
}

// -------------------------------------------------------------------

// ParkingSlotRaw

// repeated .autodrive.workflow.proto.ParkingSlotPoint slot_points = 1;
inline int ParkingSlotRaw::slot_points_size() const {
  return slot_points_.size();
}
inline void ParkingSlotRaw::clear_slot_points() {
  slot_points_.Clear();
}
inline const ::autodrive::workflow::proto::ParkingSlotPoint& ParkingSlotRaw::slot_points(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotRaw.slot_points)
  return slot_points_.Get(index);
}
inline ::autodrive::workflow::proto::ParkingSlotPoint* ParkingSlotRaw::mutable_slot_points(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ParkingSlotRaw.slot_points)
  return slot_points_.Mutable(index);
}
inline ::autodrive::workflow::proto::ParkingSlotPoint* ParkingSlotRaw::add_slot_points() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.ParkingSlotRaw.slot_points)
  return slot_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotPoint >*
ParkingSlotRaw::mutable_slot_points() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.ParkingSlotRaw.slot_points)
  return &slot_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotPoint >&
ParkingSlotRaw::slot_points() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.ParkingSlotRaw.slot_points)
  return slot_points_;
}

// float score = 2;
inline void ParkingSlotRaw::clear_score() {
  score_ = 0;
}
inline float ParkingSlotRaw::score() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotRaw.score)
  return score_;
}
inline void ParkingSlotRaw::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotRaw.score)
}

// bool occupancy = 3;
inline void ParkingSlotRaw::clear_occupancy() {
  occupancy_ = false;
}
inline bool ParkingSlotRaw::occupancy() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotRaw.occupancy)
  return occupancy_;
}
inline void ParkingSlotRaw::set_occupancy(bool value) {
  
  occupancy_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotRaw.occupancy)
}

// .autodrive.workflow.proto.ParkingSlotType slot_type = 4;
inline void ParkingSlotRaw::clear_slot_type() {
  slot_type_ = 0;
}
inline ::autodrive::workflow::proto::ParkingSlotType ParkingSlotRaw::slot_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotRaw.slot_type)
  return static_cast< ::autodrive::workflow::proto::ParkingSlotType >(slot_type_);
}
inline void ParkingSlotRaw::set_slot_type(::autodrive::workflow::proto::ParkingSlotType value) {
  
  slot_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotRaw.slot_type)
}

// float slot_orientation_x = 5;
inline void ParkingSlotRaw::clear_slot_orientation_x() {
  slot_orientation_x_ = 0;
}
inline float ParkingSlotRaw::slot_orientation_x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotRaw.slot_orientation_x)
  return slot_orientation_x_;
}
inline void ParkingSlotRaw::set_slot_orientation_x(float value) {
  
  slot_orientation_x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotRaw.slot_orientation_x)
}

// float slot_orientation_y = 6;
inline void ParkingSlotRaw::clear_slot_orientation_y() {
  slot_orientation_y_ = 0;
}
inline float ParkingSlotRaw::slot_orientation_y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotRaw.slot_orientation_y)
  return slot_orientation_y_;
}
inline void ParkingSlotRaw::set_slot_orientation_y(float value) {
  
  slot_orientation_y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotRaw.slot_orientation_y)
}

// int32 corner_match_flag = 7;
inline void ParkingSlotRaw::clear_corner_match_flag() {
  corner_match_flag_ = 0;
}
inline ::google::protobuf::int32 ParkingSlotRaw::corner_match_flag() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ParkingSlotRaw.corner_match_flag)
  return corner_match_flag_;
}
inline void ParkingSlotRaw::set_corner_match_flag(::google::protobuf::int32 value) {
  
  corner_match_flag_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ParkingSlotRaw.corner_match_flag)
}

// -------------------------------------------------------------------

// IpmWheelGroundPoint

// .autodrive.workflow.proto.Vector2f point = 1;
inline bool IpmWheelGroundPoint::has_point() const {
  return this != internal_default_instance() && point_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& IpmWheelGroundPoint::point() const {
  const ::autodrive::workflow::proto::Vector2f* p = point_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmWheelGroundPoint.point)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* IpmWheelGroundPoint::release_point() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmWheelGroundPoint.point)
  
  ::autodrive::workflow::proto::Vector2f* temp = point_;
  point_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* IpmWheelGroundPoint::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmWheelGroundPoint.point)
  return point_;
}
inline void IpmWheelGroundPoint::set_allocated_point(::autodrive::workflow::proto::Vector2f* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(point_);
  }
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmWheelGroundPoint.point)
}

// float score = 2;
inline void IpmWheelGroundPoint::clear_score() {
  score_ = 0;
}
inline float IpmWheelGroundPoint::score() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmWheelGroundPoint.score)
  return score_;
}
inline void IpmWheelGroundPoint::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.IpmWheelGroundPoint.score)
}

// -------------------------------------------------------------------

// IpmMultitaskMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool IpmMultitaskMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& IpmMultitaskMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmMultitaskMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* IpmMultitaskMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmMultitaskMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* IpmMultitaskMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmMultitaskMsg.header)
  return header_;
}
inline void IpmMultitaskMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmMultitaskMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool IpmMultitaskMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& IpmMultitaskMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmMultitaskMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* IpmMultitaskMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmMultitaskMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* IpmMultitaskMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmMultitaskMsg.error)
  return error_;
}
inline void IpmMultitaskMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmMultitaskMsg.error)
}

// repeated .autodrive.workflow.proto.ParkingSlotRaw slots_raw = 3;
inline int IpmMultitaskMsg::slots_raw_size() const {
  return slots_raw_.size();
}
inline void IpmMultitaskMsg::clear_slots_raw() {
  slots_raw_.Clear();
}
inline const ::autodrive::workflow::proto::ParkingSlotRaw& IpmMultitaskMsg::slots_raw(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmMultitaskMsg.slots_raw)
  return slots_raw_.Get(index);
}
inline ::autodrive::workflow::proto::ParkingSlotRaw* IpmMultitaskMsg::mutable_slots_raw(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmMultitaskMsg.slots_raw)
  return slots_raw_.Mutable(index);
}
inline ::autodrive::workflow::proto::ParkingSlotRaw* IpmMultitaskMsg::add_slots_raw() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.IpmMultitaskMsg.slots_raw)
  return slots_raw_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotRaw >*
IpmMultitaskMsg::mutable_slots_raw() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.IpmMultitaskMsg.slots_raw)
  return &slots_raw_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ParkingSlotRaw >&
IpmMultitaskMsg::slots_raw() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.IpmMultitaskMsg.slots_raw)
  return slots_raw_;
}

// repeated .autodrive.workflow.proto.IpmWheelGroundPoint ipm_wheel_ground_points = 4;
inline int IpmMultitaskMsg::ipm_wheel_ground_points_size() const {
  return ipm_wheel_ground_points_.size();
}
inline void IpmMultitaskMsg::clear_ipm_wheel_ground_points() {
  ipm_wheel_ground_points_.Clear();
}
inline const ::autodrive::workflow::proto::IpmWheelGroundPoint& IpmMultitaskMsg::ipm_wheel_ground_points(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmMultitaskMsg.ipm_wheel_ground_points)
  return ipm_wheel_ground_points_.Get(index);
}
inline ::autodrive::workflow::proto::IpmWheelGroundPoint* IpmMultitaskMsg::mutable_ipm_wheel_ground_points(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmMultitaskMsg.ipm_wheel_ground_points)
  return ipm_wheel_ground_points_.Mutable(index);
}
inline ::autodrive::workflow::proto::IpmWheelGroundPoint* IpmMultitaskMsg::add_ipm_wheel_ground_points() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.IpmMultitaskMsg.ipm_wheel_ground_points)
  return ipm_wheel_ground_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::IpmWheelGroundPoint >*
IpmMultitaskMsg::mutable_ipm_wheel_ground_points() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.IpmMultitaskMsg.ipm_wheel_ground_points)
  return &ipm_wheel_ground_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::IpmWheelGroundPoint >&
IpmMultitaskMsg::ipm_wheel_ground_points() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.IpmMultitaskMsg.ipm_wheel_ground_points)
  return ipm_wheel_ground_points_;
}

// float test = 5;
inline void IpmMultitaskMsg::clear_test() {
  test_ = 0;
}
inline float IpmMultitaskMsg::test() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmMultitaskMsg.test)
  return test_;
}
inline void IpmMultitaskMsg::set_test(float value) {
  
  test_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.IpmMultitaskMsg.test)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::ParkingSlotPointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::ParkingSlotPointType>() {
  return ::autodrive::workflow::proto::ParkingSlotPointType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::ParkingSlotType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::ParkingSlotType>() {
  return ::autodrive::workflow::proto::ParkingSlotType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ipm_5fmultitask_2eproto__INCLUDED
