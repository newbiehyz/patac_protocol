// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_system.proto

#include "vision_system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class VisionSystemMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisionSystemMsg>
      _instance;
} _VisionSystemMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_vision_5fsystem_2eproto {
void InitDefaultsVisionSystemMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_system_5ftype_5fbase_2eproto::InitDefaultsApaStateInfo();
  protobuf_system_5ftype_5fbase_2eproto::InitDefaultsUserSelectedParkingSlot();
  {
    void* ptr = &::autodrive::workflow::proto::_VisionSystemMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::VisionSystemMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::VisionSystemMsg::InitAsDefaultInstance();
}

void InitDefaultsVisionSystemMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVisionSystemMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, parking_in_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, parking_out_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, system_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, calibration_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, calib_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, calib_pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, enable_backstage_searching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, enable_normal_searching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, enable_peb_prkgperception_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, mirr_fold_sts_at_driver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, mirr_fold_sts_at_pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, apa_states_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, usr_sel_ps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, lock_id_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, calib_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, vpa_state_detail_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VisionSystemMsg, work_mode_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::VisionSystemMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_VisionSystemMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vision_system.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023vision_system.proto\022\030autodrive.workflo"
      "w.proto\032\014common.proto\032\026system_type_base."
      "proto\"\307\010\n\017VisionSystemMsg\0223\n\006header\030\001 \001("
      "\0132#.autodrive.workflow.proto.MsgHeader\022."
      "\n\005error\030\002 \001(\0132\037.autodrive.workflow.proto"
      ".Error\022\025\n\rparking_in_id\030\003 \001(\005\022\026\n\016parking"
      "_out_id\030\004 \001(\005\022C\n\rsystem_status\030\005 \001(\0162,.a"
      "utodrive.workflow.proto.VisionSystemStat"
      "us\022M\n\022calibration_status\030\006 \001(\01621.autodri"
      "ve.workflow.proto.VisionCalibrationStatu"
      "s\022=\n\ncalib_mode\030\007 \001(\0162).autodrive.workfl"
      "ow.proto.CalibrationMode\022@\n\rcalib_patter"
      "n\030\010 \001(\0162).autodrive.workflow.proto.EolCa"
      "libPattern\022\"\n\032enable_backstage_searching"
      "\030\t \001(\010\022\037\n\027enable_normal_searching\030\n \001(\010\022"
      "!\n\031enable_PEB_PrkgPerception\030\013 \001(\010\022I\n\027mi"
      "rr_fold_sts_at_driver\030\014 \001(\0162(.autodrive."
      "workflow.proto.MirrFoldStsTyp\022G\n\025mirr_fo"
      "ld_sts_at_pass\030\r \001(\0162(.autodrive.workflo"
      "w.proto.MirrFoldStsTyp\022:\n\napa_states\030\016 \001"
      "(\0132&.autodrive.workflow.proto.ApaStateIn"
      "fo\022E\n\nusr_sel_ps\030\017 \001(\01321.autodrive.workf"
      "low.proto.UserSelectedParkingSlot\022:\n\014loc"
      "k_id_type\030\020 \001(\0162$.autodrive.workflow.pro"
      "to.LockIdType\022C\n\ncalib_type\030\021 \001(\0162/.auto"
      "drive.workflow.proto.VisionCalibrationTy"
      "pe\022K\n\025vpa_state_detail_type\030\022 \001(\0162,.auto"
      "drive.workflow.proto.VpaStateDetailType\022"
      ">\n\016work_mode_type\030\023 \001(\0162&.autodrive.work"
      "flow.proto.WorkModeType*T\n\022VisionSystemS"
      "tatus\022\036\n\032kVisionSystemStatusDriving\020\000\022\036\n"
      "\032kVisionSystemStatusParking\020\001*\366\001\n\027Vision"
      "CalibrationStatus\022\032\n\026kCalibrationStatusN"
      "one\020\000\022\036\n\032kCalibrationStatusStartEol\020\001\022\036\n"
      "\032kCalibrationStatusStartOnl\020\002\022\036\n\032kCalibr"
      "ationStatusPauseOnl\020\003\022\037\n\033kCalibrationSta"
      "tusResumeOnl\020\004\022\035\n\031kCalibrationStatusStop"
      "Onl\020\005\022\014\n\010kStopEol\020\006\022\021\n\rkAcceptParams\020\007*6"
      "\n\025VisionCalibrationType\022\t\n\005kNone\020\000\022\010\n\004kU"
      "DS\020\001\022\010\n\004kDHU\020\002*v\n\017CalibrationMode\022\030\n\024kCa"
      "librationModeNone\020\000\022\027\n\023kCalibrationModeS"
      "VC\020\001\022\027\n\023kCalibrationModeRLC\020\002\022\027\n\023kCalibr"
      "ationModeFLC\020\003*g\n\017EolCalibPattern\022\030\n\024kEO"
      "LCalibPatternNone\020\000\022\034\n\030kEOLCalibPatternP"
      "attern1\020\001\022\034\n\030kEOLCalibPatternPattern2\020\002b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vision_system.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_system_5ftype_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vision_5fsystem_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* VisionSystemStatus_descriptor() {
  protobuf_vision_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fsystem_2eproto::file_level_enum_descriptors[0];
}
bool VisionSystemStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VisionCalibrationStatus_descriptor() {
  protobuf_vision_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fsystem_2eproto::file_level_enum_descriptors[1];
}
bool VisionCalibrationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VisionCalibrationType_descriptor() {
  protobuf_vision_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fsystem_2eproto::file_level_enum_descriptors[2];
}
bool VisionCalibrationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CalibrationMode_descriptor() {
  protobuf_vision_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fsystem_2eproto::file_level_enum_descriptors[3];
}
bool CalibrationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EolCalibPattern_descriptor() {
  protobuf_vision_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vision_5fsystem_2eproto::file_level_enum_descriptors[4];
}
bool EolCalibPattern_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VisionSystemMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_VisionSystemMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_VisionSystemMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_VisionSystemMsg_default_instance_._instance.get_mutable()->apa_states_ = const_cast< ::autodrive::workflow::proto::ApaStateInfo*>(
      ::autodrive::workflow::proto::ApaStateInfo::internal_default_instance());
  ::autodrive::workflow::proto::_VisionSystemMsg_default_instance_._instance.get_mutable()->usr_sel_ps_ = const_cast< ::autodrive::workflow::proto::UserSelectedParkingSlot*>(
      ::autodrive::workflow::proto::UserSelectedParkingSlot::internal_default_instance());
}
void VisionSystemMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void VisionSystemMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void VisionSystemMsg::clear_apa_states() {
  if (GetArenaNoVirtual() == NULL && apa_states_ != NULL) {
    delete apa_states_;
  }
  apa_states_ = NULL;
}
void VisionSystemMsg::clear_usr_sel_ps() {
  if (GetArenaNoVirtual() == NULL && usr_sel_ps_ != NULL) {
    delete usr_sel_ps_;
  }
  usr_sel_ps_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionSystemMsg::kHeaderFieldNumber;
const int VisionSystemMsg::kErrorFieldNumber;
const int VisionSystemMsg::kParkingInIdFieldNumber;
const int VisionSystemMsg::kParkingOutIdFieldNumber;
const int VisionSystemMsg::kSystemStatusFieldNumber;
const int VisionSystemMsg::kCalibrationStatusFieldNumber;
const int VisionSystemMsg::kCalibModeFieldNumber;
const int VisionSystemMsg::kCalibPatternFieldNumber;
const int VisionSystemMsg::kEnableBackstageSearchingFieldNumber;
const int VisionSystemMsg::kEnableNormalSearchingFieldNumber;
const int VisionSystemMsg::kEnablePEBPrkgPerceptionFieldNumber;
const int VisionSystemMsg::kMirrFoldStsAtDriverFieldNumber;
const int VisionSystemMsg::kMirrFoldStsAtPassFieldNumber;
const int VisionSystemMsg::kApaStatesFieldNumber;
const int VisionSystemMsg::kUsrSelPsFieldNumber;
const int VisionSystemMsg::kLockIdTypeFieldNumber;
const int VisionSystemMsg::kCalibTypeFieldNumber;
const int VisionSystemMsg::kVpaStateDetailTypeFieldNumber;
const int VisionSystemMsg::kWorkModeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionSystemMsg::VisionSystemMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vision_5fsystem_2eproto::InitDefaultsVisionSystemMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.VisionSystemMsg)
}
VisionSystemMsg::VisionSystemMsg(const VisionSystemMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_apa_states()) {
    apa_states_ = new ::autodrive::workflow::proto::ApaStateInfo(*from.apa_states_);
  } else {
    apa_states_ = NULL;
  }
  if (from.has_usr_sel_ps()) {
    usr_sel_ps_ = new ::autodrive::workflow::proto::UserSelectedParkingSlot(*from.usr_sel_ps_);
  } else {
    usr_sel_ps_ = NULL;
  }
  ::memcpy(&parking_in_id_, &from.parking_in_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&work_mode_type_) -
    reinterpret_cast<char*>(&parking_in_id_)) + sizeof(work_mode_type_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.VisionSystemMsg)
}

void VisionSystemMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_mode_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(work_mode_type_));
  _cached_size_ = 0;
}

VisionSystemMsg::~VisionSystemMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.VisionSystemMsg)
  SharedDtor();
}

void VisionSystemMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete apa_states_;
  if (this != internal_default_instance()) delete usr_sel_ps_;
}

void VisionSystemMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisionSystemMsg::descriptor() {
  ::protobuf_vision_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fsystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisionSystemMsg& VisionSystemMsg::default_instance() {
  ::protobuf_vision_5fsystem_2eproto::InitDefaultsVisionSystemMsg();
  return *internal_default_instance();
}

VisionSystemMsg* VisionSystemMsg::New(::google::protobuf::Arena* arena) const {
  VisionSystemMsg* n = new VisionSystemMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisionSystemMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.VisionSystemMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && apa_states_ != NULL) {
    delete apa_states_;
  }
  apa_states_ = NULL;
  if (GetArenaNoVirtual() == NULL && usr_sel_ps_ != NULL) {
    delete usr_sel_ps_;
  }
  usr_sel_ps_ = NULL;
  ::memset(&parking_in_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_mode_type_) -
      reinterpret_cast<char*>(&parking_in_id_)) + sizeof(work_mode_type_));
  _internal_metadata_.Clear();
}

bool VisionSystemMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.VisionSystemMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parking_in_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parking_in_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parking_out_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parking_out_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VisionSystemStatus system_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_system_status(static_cast< ::autodrive::workflow::proto::VisionSystemStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VisionCalibrationStatus calibration_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_calibration_status(static_cast< ::autodrive::workflow::proto::VisionCalibrationStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.CalibrationMode calib_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_calib_mode(static_cast< ::autodrive::workflow::proto::CalibrationMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.EolCalibPattern calib_pattern = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_calib_pattern(static_cast< ::autodrive::workflow::proto::EolCalibPattern >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_backstage_searching = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_backstage_searching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_normal_searching = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_normal_searching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_PEB_PrkgPerception = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_peb_prkgperception_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mirr_fold_sts_at_driver(static_cast< ::autodrive::workflow::proto::MirrFoldStsTyp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mirr_fold_sts_at_pass(static_cast< ::autodrive::workflow::proto::MirrFoldStsTyp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ApaStateInfo apa_states = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apa_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_usr_sel_ps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LockIdType lock_id_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lock_id_type(static_cast< ::autodrive::workflow::proto::LockIdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VisionCalibrationType calib_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_calib_type(static_cast< ::autodrive::workflow::proto::VisionCalibrationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vpa_state_detail_type(static_cast< ::autodrive::workflow::proto::VpaStateDetailType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.WorkModeType work_mode_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_work_mode_type(static_cast< ::autodrive::workflow::proto::WorkModeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.VisionSystemMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.VisionSystemMsg)
  return false;
#undef DO_
}

void VisionSystemMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.VisionSystemMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // int32 parking_in_id = 3;
  if (this->parking_in_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parking_in_id(), output);
  }

  // int32 parking_out_id = 4;
  if (this->parking_out_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parking_out_id(), output);
  }

  // .autodrive.workflow.proto.VisionSystemStatus system_status = 5;
  if (this->system_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->system_status(), output);
  }

  // .autodrive.workflow.proto.VisionCalibrationStatus calibration_status = 6;
  if (this->calibration_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->calibration_status(), output);
  }

  // .autodrive.workflow.proto.CalibrationMode calib_mode = 7;
  if (this->calib_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->calib_mode(), output);
  }

  // .autodrive.workflow.proto.EolCalibPattern calib_pattern = 8;
  if (this->calib_pattern() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->calib_pattern(), output);
  }

  // bool enable_backstage_searching = 9;
  if (this->enable_backstage_searching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_backstage_searching(), output);
  }

  // bool enable_normal_searching = 10;
  if (this->enable_normal_searching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_normal_searching(), output);
  }

  // bool enable_PEB_PrkgPerception = 11;
  if (this->enable_peb_prkgperception() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_peb_prkgperception(), output);
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
  if (this->mirr_fold_sts_at_driver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->mirr_fold_sts_at_driver(), output);
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
  if (this->mirr_fold_sts_at_pass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->mirr_fold_sts_at_pass(), output);
  }

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 14;
  if (this->has_apa_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->apa_states_, output);
  }

  // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 15;
  if (this->has_usr_sel_ps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->usr_sel_ps_, output);
  }

  // .autodrive.workflow.proto.LockIdType lock_id_type = 16;
  if (this->lock_id_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->lock_id_type(), output);
  }

  // .autodrive.workflow.proto.VisionCalibrationType calib_type = 17;
  if (this->calib_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->calib_type(), output);
  }

  // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail_type = 18;
  if (this->vpa_state_detail_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->vpa_state_detail_type(), output);
  }

  // .autodrive.workflow.proto.WorkModeType work_mode_type = 19;
  if (this->work_mode_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->work_mode_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.VisionSystemMsg)
}

::google::protobuf::uint8* VisionSystemMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.VisionSystemMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // int32 parking_in_id = 3;
  if (this->parking_in_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parking_in_id(), target);
  }

  // int32 parking_out_id = 4;
  if (this->parking_out_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parking_out_id(), target);
  }

  // .autodrive.workflow.proto.VisionSystemStatus system_status = 5;
  if (this->system_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->system_status(), target);
  }

  // .autodrive.workflow.proto.VisionCalibrationStatus calibration_status = 6;
  if (this->calibration_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->calibration_status(), target);
  }

  // .autodrive.workflow.proto.CalibrationMode calib_mode = 7;
  if (this->calib_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->calib_mode(), target);
  }

  // .autodrive.workflow.proto.EolCalibPattern calib_pattern = 8;
  if (this->calib_pattern() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->calib_pattern(), target);
  }

  // bool enable_backstage_searching = 9;
  if (this->enable_backstage_searching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_backstage_searching(), target);
  }

  // bool enable_normal_searching = 10;
  if (this->enable_normal_searching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_normal_searching(), target);
  }

  // bool enable_PEB_PrkgPerception = 11;
  if (this->enable_peb_prkgperception() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enable_peb_prkgperception(), target);
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
  if (this->mirr_fold_sts_at_driver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->mirr_fold_sts_at_driver(), target);
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
  if (this->mirr_fold_sts_at_pass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->mirr_fold_sts_at_pass(), target);
  }

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 14;
  if (this->has_apa_states()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->apa_states_, deterministic, target);
  }

  // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 15;
  if (this->has_usr_sel_ps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *this->usr_sel_ps_, deterministic, target);
  }

  // .autodrive.workflow.proto.LockIdType lock_id_type = 16;
  if (this->lock_id_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->lock_id_type(), target);
  }

  // .autodrive.workflow.proto.VisionCalibrationType calib_type = 17;
  if (this->calib_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->calib_type(), target);
  }

  // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail_type = 18;
  if (this->vpa_state_detail_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->vpa_state_detail_type(), target);
  }

  // .autodrive.workflow.proto.WorkModeType work_mode_type = 19;
  if (this->work_mode_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->work_mode_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.VisionSystemMsg)
  return target;
}

size_t VisionSystemMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.VisionSystemMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 14;
  if (this->has_apa_states()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->apa_states_);
  }

  // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 15;
  if (this->has_usr_sel_ps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->usr_sel_ps_);
  }

  // int32 parking_in_id = 3;
  if (this->parking_in_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parking_in_id());
  }

  // int32 parking_out_id = 4;
  if (this->parking_out_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parking_out_id());
  }

  // .autodrive.workflow.proto.VisionSystemStatus system_status = 5;
  if (this->system_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->system_status());
  }

  // .autodrive.workflow.proto.VisionCalibrationStatus calibration_status = 6;
  if (this->calibration_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->calibration_status());
  }

  // .autodrive.workflow.proto.CalibrationMode calib_mode = 7;
  if (this->calib_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->calib_mode());
  }

  // .autodrive.workflow.proto.EolCalibPattern calib_pattern = 8;
  if (this->calib_pattern() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->calib_pattern());
  }

  // bool enable_backstage_searching = 9;
  if (this->enable_backstage_searching() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_normal_searching = 10;
  if (this->enable_normal_searching() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_PEB_PrkgPerception = 11;
  if (this->enable_peb_prkgperception() != 0) {
    total_size += 1 + 1;
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
  if (this->mirr_fold_sts_at_driver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mirr_fold_sts_at_driver());
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
  if (this->mirr_fold_sts_at_pass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mirr_fold_sts_at_pass());
  }

  // .autodrive.workflow.proto.LockIdType lock_id_type = 16;
  if (this->lock_id_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lock_id_type());
  }

  // .autodrive.workflow.proto.VisionCalibrationType calib_type = 17;
  if (this->calib_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->calib_type());
  }

  // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail_type = 18;
  if (this->vpa_state_detail_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vpa_state_detail_type());
  }

  // .autodrive.workflow.proto.WorkModeType work_mode_type = 19;
  if (this->work_mode_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->work_mode_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionSystemMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.VisionSystemMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionSystemMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionSystemMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.VisionSystemMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.VisionSystemMsg)
    MergeFrom(*source);
  }
}

void VisionSystemMsg::MergeFrom(const VisionSystemMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.VisionSystemMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_apa_states()) {
    mutable_apa_states()->::autodrive::workflow::proto::ApaStateInfo::MergeFrom(from.apa_states());
  }
  if (from.has_usr_sel_ps()) {
    mutable_usr_sel_ps()->::autodrive::workflow::proto::UserSelectedParkingSlot::MergeFrom(from.usr_sel_ps());
  }
  if (from.parking_in_id() != 0) {
    set_parking_in_id(from.parking_in_id());
  }
  if (from.parking_out_id() != 0) {
    set_parking_out_id(from.parking_out_id());
  }
  if (from.system_status() != 0) {
    set_system_status(from.system_status());
  }
  if (from.calibration_status() != 0) {
    set_calibration_status(from.calibration_status());
  }
  if (from.calib_mode() != 0) {
    set_calib_mode(from.calib_mode());
  }
  if (from.calib_pattern() != 0) {
    set_calib_pattern(from.calib_pattern());
  }
  if (from.enable_backstage_searching() != 0) {
    set_enable_backstage_searching(from.enable_backstage_searching());
  }
  if (from.enable_normal_searching() != 0) {
    set_enable_normal_searching(from.enable_normal_searching());
  }
  if (from.enable_peb_prkgperception() != 0) {
    set_enable_peb_prkgperception(from.enable_peb_prkgperception());
  }
  if (from.mirr_fold_sts_at_driver() != 0) {
    set_mirr_fold_sts_at_driver(from.mirr_fold_sts_at_driver());
  }
  if (from.mirr_fold_sts_at_pass() != 0) {
    set_mirr_fold_sts_at_pass(from.mirr_fold_sts_at_pass());
  }
  if (from.lock_id_type() != 0) {
    set_lock_id_type(from.lock_id_type());
  }
  if (from.calib_type() != 0) {
    set_calib_type(from.calib_type());
  }
  if (from.vpa_state_detail_type() != 0) {
    set_vpa_state_detail_type(from.vpa_state_detail_type());
  }
  if (from.work_mode_type() != 0) {
    set_work_mode_type(from.work_mode_type());
  }
}

void VisionSystemMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.VisionSystemMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionSystemMsg::CopyFrom(const VisionSystemMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.VisionSystemMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionSystemMsg::IsInitialized() const {
  return true;
}

void VisionSystemMsg::Swap(VisionSystemMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionSystemMsg::InternalSwap(VisionSystemMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(apa_states_, other->apa_states_);
  swap(usr_sel_ps_, other->usr_sel_ps_);
  swap(parking_in_id_, other->parking_in_id_);
  swap(parking_out_id_, other->parking_out_id_);
  swap(system_status_, other->system_status_);
  swap(calibration_status_, other->calibration_status_);
  swap(calib_mode_, other->calib_mode_);
  swap(calib_pattern_, other->calib_pattern_);
  swap(enable_backstage_searching_, other->enable_backstage_searching_);
  swap(enable_normal_searching_, other->enable_normal_searching_);
  swap(enable_peb_prkgperception_, other->enable_peb_prkgperception_);
  swap(mirr_fold_sts_at_driver_, other->mirr_fold_sts_at_driver_);
  swap(mirr_fold_sts_at_pass_, other->mirr_fold_sts_at_pass_);
  swap(lock_id_type_, other->lock_id_type_);
  swap(calib_type_, other->calib_type_);
  swap(vpa_state_detail_type_, other->vpa_state_detail_type_);
  swap(work_mode_type_, other->work_mode_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisionSystemMsg::GetMetadata() const {
  protobuf_vision_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vision_5fsystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
