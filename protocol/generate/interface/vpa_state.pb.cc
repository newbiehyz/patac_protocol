// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpa_state.proto

#include "vpa_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class VpaStateMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VpaStateMsg>
      _instance;
} _VpaStateMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_vpa_5fstate_2eproto {
void InitDefaultsVpaStateMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  {
    void* ptr = &::autodrive::workflow::proto::_VpaStateMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::VpaStateMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::VpaStateMsg::InitAsDefaultInstance();
}

void InitDefaultsVpaStateMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVpaStateMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, vpa_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, hpa_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, mapping_odd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, loc_odd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, map_saving_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, local_loc_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, map_deleted_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, map_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, map_optimized_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, target_parking_slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, map_saving_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::VpaStateMsg, avaliable_map_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::VpaStateMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_VpaStateMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vpa_state.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017vpa_state.proto\022\030autodrive.workflow.pr"
      "oto\032\014common.proto\"\305\006\n\013VpaStateMsg\0223\n\006hea"
      "der\030\001 \001(\0132#.autodrive.workflow.proto.Msg"
      "Header\022.\n\005error\030\002 \001(\0132\037.autodrive.workfl"
      "ow.proto.Error\0229\n\tvpa_event\030\003 \001(\0162&.auto"
      "drive.workflow.proto.VPAEventType\0225\n\thpa"
      "_state\030\004 \001(\0162\".autodrive.workflow.proto."
      "HPAState\022B\n\020mapping_odd_type\030\005 \001(\0162(.aut"
      "odrive.workflow.proto.MappingOddType\022:\n\014"
      "loc_odd_type\030\006 \001(\0162$.autodrive.workflow."
      "proto.LocOddType\022B\n\020map_saving_stage\030\007 \001"
      "(\0162(.autodrive.workflow.proto.MapSavingS"
      "tage\022@\n\017local_loc_stage\030\010 \001(\0162\'.autodriv"
      "e.workflow.proto.LocalLocStage\022E\n\021map_de"
      "leted_stage\030\t \001(\0162*.autodrive.workflow.p"
      "roto.MapDeletingStage\0229\n\tmap_stage\030\n \001(\016"
      "2&.autodrive.workflow.proto.MappingStage"
      "\022G\n\023map_optimized_stage\030\013 \001(\0162*.autodriv"
      "e.workflow.proto.MapOptimizeStage\0227\n\nerr"
      "or_code\030\014 \001(\0162#.autodrive.workflow.proto"
      ".ErrorCode\022\036\n\026target_parking_slot_id\030\r \001"
      "(\005\022\033\n\023map_saving_progress\030\016 \001(\r\022\030\n\020avali"
      "able_map_id\030\017 \001(\r*\230\001\n\020MapDeletingStage\022\034"
      "\n\030kMapDeletingStageDefault\020\000\022\035\n\031kMapDele"
      "tingStageDeleting\020\001\022$\n kMapDeletingStage"
      "DeleteSucessful\020\002\022!\n\035kMapDeletingStageDe"
      "leteFailed\020\003*\210\001\n\016MapSavingStage\022\032\n\026kMapS"
      "avingStageDefault\020\000\022\031\n\025kMapSavingStageSa"
      "ving\020\001\022 \n\034kMapSavingStageSaveSucessful\020\002"
      "\022\035\n\031kMapSavingStageSaveFailed\020\003*\217\003\n\016Mapp"
      "ingOddType\022\026\n\022kMappingOddDefault\020\000\022\021\n\rkM"
      "appingOddOk\020\001\022\033\n\027kMappingOddNokNotIndoor"
      "\020\002\022$\n kMappingOddNokNotUndergroundPark\020\003"
      "\022!\n\035kMappingOddNokSpeedOutOfLimit\020\004\022 \n\034k"
      "MappingOddNokNoSemanticInfo\020\005\022\'\n#kMappin"
      "gOddNokNotEnoughSemanticInfo\020\006\022\036\n\032kMappi"
      "ngOddNokLightnessNok\020\007\022\035\n\031kMappingOddNok"
      "RainFallNok\020\010\022!\n\035kMappingOddNokSlopeOutO"
      "fLimit\020\t\022#\n\037kMappingOddNokPreConditionCh"
      "eck\020\n\022\032\n\026kMappingOddNokReserved\020\013*\333\002\n\nLo"
      "cOddType\022\022\n\016kLocOddDefault\020\000\022\r\n\tkLocOddO"
      "k\020\001\022\027\n\023kLocOddNokNotIndoor\020\002\022 \n\034kLocOddN"
      "okNotUndergroundPark\020\003\022\035\n\031kLocOddNokSpee"
      "dOutOfLimit\020\004\022\034\n\030kLocOddNokNoSemanticInf"
      "o\020\005\022#\n\037kLocOddNokNotEnoughSemanticInfo\020\006"
      "\022\032\n\026kLocOddNokLightnessNok\020\007\022\031\n\025kLocOddN"
      "okRainFallNok\020\010\022\035\n\031kLocOddNokSlopeOutOfL"
      "imit\020\t\022\037\n\033kLocOddNokPreConditionCheck\020\n\022"
      "\026\n\022kLocOddNokReserved\020\013*[\n\rLocalLocStage"
      "\022\024\n\020kLocalLocStageNO\020\000\022\031\n\025kLocalLocStage"
      "Ongoing\020\001\022\031\n\025kLocalLocStageSuccess\020\002*\241\007\n"
      "\tErrorCode\022\014\n\010kNoError\020\000\022#\n\037kErrorInsuff"
      "icientDiskFreespace\020\001\022\022\n\rkErrorTsReset\020\350"
      "\007\022\027\n\022kErrorNoPerception\020\351\007\022\030\n\023kError3dOd"
      "oAbnormal\020\352\007\022\024\n\017kErrorOdomError\020\353\007\022\025\n\020kE"
      "rrorNoSyncGnss\020\354\007\022\026\n\021kErrorInvalidGnss\020\355"
      "\007\022\035\n\030kErrorWaitForSlotTooLong\020\320\017\022\033\n\026kErr"
      "orOutdoorInMapping\020\321\017\022\'\n\"kErrorMapUnsuit"
      "ableForLocalization\020\322\017\022!\n\034kErrorMapOptim"
      "izationTimeOut\020\323\017\022\035\n\030kErrorMappingDistTo"
      "oLong\020\324\017\022\036\n\031kErrorMappingDistTooShort\020\325\017"
      "\022\034\n\027kErrorMapPlanningFailed\020\326\017\022\030\n\023kError"
      "MapSaveFailed\020\327\017\022\034\n\027kErrorMappingCrossFl"
      "oor\020\330\017\022\031\n\024kErrorMapLoopClosure\020\331\017\022\034\n\027kEr"
      "rorDeleteNotExistMap\020\332\017\022\024\n\017kErrorOverSpe"
      "ed\020\333\017\022\033\n\026kErrorOverSpeedTimeOut\020\334\017\022\024\n\017kE"
      "rrorOverSlope\020\335\017\022\037\n\032kErrorGearRDistanceT"
      "ooLong\020\336\017\022\036\n\031kErrorNoAvaliableMapFound\020\337"
      "\017\022\033\n\026kErrorNotInParkingSlot\020\340\017\022%\n kError"
      "LocDeviationFromNavigation\020\270\027\022\033\n\026kErrorM"
      "apMatchingError\020\271\027\022\023\n\016kErrorOutOfMap\020\272\027\022"
      "\035\n\030kErrorMissMapKeyElements\020\273\027\022 \n\033kError"
      "PoseOdomInconsistency\020\274\027\022\023\n\016kErrorMapErr"
      "or\020\275\027\022\020\n\013kErrorNoMap\020\276\027\022\027\n\022kErrorMapFile"
      "Error\020\277\027*\233\001\n\010HPAState\022\024\n\020kHPAStateDefaul"
      "t\020\000\022\020\n\014kHPAStateOff\020\001\022\024\n\020kHPAStateStandb"
      "y\020\002\022\031\n\025kHPAStatePathLearning\020\003\022\025\n\021kHPASt"
      "ateCruising\020\004\022\037\n\033kHPAStatekPreConditionC"
      "heck\020\005*\243\005\n\014VPAEventType\022\030\n\024kVPAEventType"
      "Default\020\000\022\033\n\027kVPAEventTypeErrorEvent\020\001\022$"
      "\n kVPAEventTypeRequestMappingEvent\020\002\022)\n%"
      "kVPAEventTypeRequestLocalizationEvent\020\003\022"
      "\034\n\030kVPAEventTypeLocOddEvent\020\004\022 \n\034kVPAEve"
      "ntTypeMappingOddEvent\020\005\022\036\n\032kVPAEventType"
      "HpaStateEvent\020\006\022$\n kVPAEventTypeMapSavin"
      "gStageEvent\020\007\022#\n\037kVPAEventTypeLocalLocSt"
      "ageEvent\020\010\022&\n\"kVPAEventTypeFirstTimeMapp"
      "ingEvent\020\t\0220\n,kVPAEventTypeFirstTimeCurP"
      "arkingMappingEvent\020\n\022&\n\"kVPAEventTypeFin"
      "dAvailableMapEvent\020\013\022$\n kVPAEventTypeMap"
      "DeleteStageEvent\020\014\022-\n)kVPAEventTypeEnter"
      "UndergroundParkingEvent\020\r\022\027\n\023kInParkingS"
      "lotEvent\020\016\022\026\n\022kMappingStageEvent\020\017\022\036\n\032kM"
      "appingOptimizeStageEvent\020\020\022\037\n\033kOutUnderg"
      "roundParkingEvent\020\021\022\027\n\023kFindValidGNSSEve"
      "nt\020\022*_\n\014MappingStage\022\030\n\024kDefaultMappingS"
      "tage\020\000\022\014\n\010kMapping\020\001\022\023\n\017kMappingSuccess\020"
      "\002\022\022\n\016kMappingFailed\020\003*l\n\020MapOptimizeStag"
      "e\022\034\n\030kDefaultMapOptimizeStage\020\000\022\017\n\013kOpti"
      "mizing\020\001\022\024\n\020kOptimizeSuccess\020\002\022\023\n\017kOptim"
      "izeFailed\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4019);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vpa_state.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vpa_5fstate_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* MapDeletingStage_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[0];
}
bool MapDeletingStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapSavingStage_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[1];
}
bool MapSavingStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MappingOddType_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[2];
}
bool MappingOddType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocOddType_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[3];
}
bool LocOddType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalLocStage_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[4];
}
bool LocalLocStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[5];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HPAState_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[6];
}
bool HPAState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VPAEventType_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[7];
}
bool VPAEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MappingStage_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[8];
}
bool MappingStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MapOptimizeStage_descriptor() {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vpa_5fstate_2eproto::file_level_enum_descriptors[9];
}
bool MapOptimizeStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VpaStateMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_VpaStateMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_VpaStateMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void VpaStateMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void VpaStateMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VpaStateMsg::kHeaderFieldNumber;
const int VpaStateMsg::kErrorFieldNumber;
const int VpaStateMsg::kVpaEventFieldNumber;
const int VpaStateMsg::kHpaStateFieldNumber;
const int VpaStateMsg::kMappingOddTypeFieldNumber;
const int VpaStateMsg::kLocOddTypeFieldNumber;
const int VpaStateMsg::kMapSavingStageFieldNumber;
const int VpaStateMsg::kLocalLocStageFieldNumber;
const int VpaStateMsg::kMapDeletedStageFieldNumber;
const int VpaStateMsg::kMapStageFieldNumber;
const int VpaStateMsg::kMapOptimizedStageFieldNumber;
const int VpaStateMsg::kErrorCodeFieldNumber;
const int VpaStateMsg::kTargetParkingSlotIdFieldNumber;
const int VpaStateMsg::kMapSavingProgressFieldNumber;
const int VpaStateMsg::kAvaliableMapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VpaStateMsg::VpaStateMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vpa_5fstate_2eproto::InitDefaultsVpaStateMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.VpaStateMsg)
}
VpaStateMsg::VpaStateMsg(const VpaStateMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&vpa_event_, &from.vpa_event_,
    static_cast<size_t>(reinterpret_cast<char*>(&avaliable_map_id_) -
    reinterpret_cast<char*>(&vpa_event_)) + sizeof(avaliable_map_id_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.VpaStateMsg)
}

void VpaStateMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avaliable_map_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(avaliable_map_id_));
  _cached_size_ = 0;
}

VpaStateMsg::~VpaStateMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.VpaStateMsg)
  SharedDtor();
}

void VpaStateMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void VpaStateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VpaStateMsg::descriptor() {
  ::protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpa_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VpaStateMsg& VpaStateMsg::default_instance() {
  ::protobuf_vpa_5fstate_2eproto::InitDefaultsVpaStateMsg();
  return *internal_default_instance();
}

VpaStateMsg* VpaStateMsg::New(::google::protobuf::Arena* arena) const {
  VpaStateMsg* n = new VpaStateMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VpaStateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.VpaStateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  ::memset(&vpa_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avaliable_map_id_) -
      reinterpret_cast<char*>(&vpa_event_)) + sizeof(avaliable_map_id_));
  _internal_metadata_.Clear();
}

bool VpaStateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.VpaStateMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VPAEventType vpa_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vpa_event(static_cast< ::autodrive::workflow::proto::VPAEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HPAState hpa_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hpa_state(static_cast< ::autodrive::workflow::proto::HPAState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MappingOddType mapping_odd_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mapping_odd_type(static_cast< ::autodrive::workflow::proto::MappingOddType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LocOddType loc_odd_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loc_odd_type(static_cast< ::autodrive::workflow::proto::LocOddType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MapSavingStage map_saving_stage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_map_saving_stage(static_cast< ::autodrive::workflow::proto::MapSavingStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LocalLocStage local_loc_stage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_local_loc_stage(static_cast< ::autodrive::workflow::proto::LocalLocStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MapDeletingStage map_deleted_stage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_map_deleted_stage(static_cast< ::autodrive::workflow::proto::MapDeletingStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MappingStage map_stage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_map_stage(static_cast< ::autodrive::workflow::proto::MappingStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MapOptimizeStage map_optimized_stage = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_map_optimized_stage(static_cast< ::autodrive::workflow::proto::MapOptimizeStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ErrorCode error_code = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::autodrive::workflow::proto::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_parking_slot_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_parking_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 map_saving_progress = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_saving_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avaliable_map_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avaliable_map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.VpaStateMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.VpaStateMsg)
  return false;
#undef DO_
}

void VpaStateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.VpaStateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.VPAEventType vpa_event = 3;
  if (this->vpa_event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->vpa_event(), output);
  }

  // .autodrive.workflow.proto.HPAState hpa_state = 4;
  if (this->hpa_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->hpa_state(), output);
  }

  // .autodrive.workflow.proto.MappingOddType mapping_odd_type = 5;
  if (this->mapping_odd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mapping_odd_type(), output);
  }

  // .autodrive.workflow.proto.LocOddType loc_odd_type = 6;
  if (this->loc_odd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->loc_odd_type(), output);
  }

  // .autodrive.workflow.proto.MapSavingStage map_saving_stage = 7;
  if (this->map_saving_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->map_saving_stage(), output);
  }

  // .autodrive.workflow.proto.LocalLocStage local_loc_stage = 8;
  if (this->local_loc_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->local_loc_stage(), output);
  }

  // .autodrive.workflow.proto.MapDeletingStage map_deleted_stage = 9;
  if (this->map_deleted_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->map_deleted_stage(), output);
  }

  // .autodrive.workflow.proto.MappingStage map_stage = 10;
  if (this->map_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->map_stage(), output);
  }

  // .autodrive.workflow.proto.MapOptimizeStage map_optimized_stage = 11;
  if (this->map_optimized_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->map_optimized_stage(), output);
  }

  // .autodrive.workflow.proto.ErrorCode error_code = 12;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->error_code(), output);
  }

  // int32 target_parking_slot_id = 13;
  if (this->target_parking_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->target_parking_slot_id(), output);
  }

  // uint32 map_saving_progress = 14;
  if (this->map_saving_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->map_saving_progress(), output);
  }

  // uint32 avaliable_map_id = 15;
  if (this->avaliable_map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->avaliable_map_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.VpaStateMsg)
}

::google::protobuf::uint8* VpaStateMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.VpaStateMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.VPAEventType vpa_event = 3;
  if (this->vpa_event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->vpa_event(), target);
  }

  // .autodrive.workflow.proto.HPAState hpa_state = 4;
  if (this->hpa_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->hpa_state(), target);
  }

  // .autodrive.workflow.proto.MappingOddType mapping_odd_type = 5;
  if (this->mapping_odd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mapping_odd_type(), target);
  }

  // .autodrive.workflow.proto.LocOddType loc_odd_type = 6;
  if (this->loc_odd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->loc_odd_type(), target);
  }

  // .autodrive.workflow.proto.MapSavingStage map_saving_stage = 7;
  if (this->map_saving_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->map_saving_stage(), target);
  }

  // .autodrive.workflow.proto.LocalLocStage local_loc_stage = 8;
  if (this->local_loc_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->local_loc_stage(), target);
  }

  // .autodrive.workflow.proto.MapDeletingStage map_deleted_stage = 9;
  if (this->map_deleted_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->map_deleted_stage(), target);
  }

  // .autodrive.workflow.proto.MappingStage map_stage = 10;
  if (this->map_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->map_stage(), target);
  }

  // .autodrive.workflow.proto.MapOptimizeStage map_optimized_stage = 11;
  if (this->map_optimized_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->map_optimized_stage(), target);
  }

  // .autodrive.workflow.proto.ErrorCode error_code = 12;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->error_code(), target);
  }

  // int32 target_parking_slot_id = 13;
  if (this->target_parking_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->target_parking_slot_id(), target);
  }

  // uint32 map_saving_progress = 14;
  if (this->map_saving_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->map_saving_progress(), target);
  }

  // uint32 avaliable_map_id = 15;
  if (this->avaliable_map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->avaliable_map_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.VpaStateMsg)
  return target;
}

size_t VpaStateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.VpaStateMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.VPAEventType vpa_event = 3;
  if (this->vpa_event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vpa_event());
  }

  // .autodrive.workflow.proto.HPAState hpa_state = 4;
  if (this->hpa_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hpa_state());
  }

  // .autodrive.workflow.proto.MappingOddType mapping_odd_type = 5;
  if (this->mapping_odd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mapping_odd_type());
  }

  // .autodrive.workflow.proto.LocOddType loc_odd_type = 6;
  if (this->loc_odd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loc_odd_type());
  }

  // .autodrive.workflow.proto.MapSavingStage map_saving_stage = 7;
  if (this->map_saving_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->map_saving_stage());
  }

  // .autodrive.workflow.proto.LocalLocStage local_loc_stage = 8;
  if (this->local_loc_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_loc_stage());
  }

  // .autodrive.workflow.proto.MapDeletingStage map_deleted_stage = 9;
  if (this->map_deleted_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->map_deleted_stage());
  }

  // .autodrive.workflow.proto.MappingStage map_stage = 10;
  if (this->map_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->map_stage());
  }

  // .autodrive.workflow.proto.MapOptimizeStage map_optimized_stage = 11;
  if (this->map_optimized_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->map_optimized_stage());
  }

  // .autodrive.workflow.proto.ErrorCode error_code = 12;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // int32 target_parking_slot_id = 13;
  if (this->target_parking_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_parking_slot_id());
  }

  // uint32 map_saving_progress = 14;
  if (this->map_saving_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_saving_progress());
  }

  // uint32 avaliable_map_id = 15;
  if (this->avaliable_map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avaliable_map_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VpaStateMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.VpaStateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const VpaStateMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VpaStateMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.VpaStateMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.VpaStateMsg)
    MergeFrom(*source);
  }
}

void VpaStateMsg::MergeFrom(const VpaStateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.VpaStateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.vpa_event() != 0) {
    set_vpa_event(from.vpa_event());
  }
  if (from.hpa_state() != 0) {
    set_hpa_state(from.hpa_state());
  }
  if (from.mapping_odd_type() != 0) {
    set_mapping_odd_type(from.mapping_odd_type());
  }
  if (from.loc_odd_type() != 0) {
    set_loc_odd_type(from.loc_odd_type());
  }
  if (from.map_saving_stage() != 0) {
    set_map_saving_stage(from.map_saving_stage());
  }
  if (from.local_loc_stage() != 0) {
    set_local_loc_stage(from.local_loc_stage());
  }
  if (from.map_deleted_stage() != 0) {
    set_map_deleted_stage(from.map_deleted_stage());
  }
  if (from.map_stage() != 0) {
    set_map_stage(from.map_stage());
  }
  if (from.map_optimized_stage() != 0) {
    set_map_optimized_stage(from.map_optimized_stage());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.target_parking_slot_id() != 0) {
    set_target_parking_slot_id(from.target_parking_slot_id());
  }
  if (from.map_saving_progress() != 0) {
    set_map_saving_progress(from.map_saving_progress());
  }
  if (from.avaliable_map_id() != 0) {
    set_avaliable_map_id(from.avaliable_map_id());
  }
}

void VpaStateMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.VpaStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VpaStateMsg::CopyFrom(const VpaStateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.VpaStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VpaStateMsg::IsInitialized() const {
  return true;
}

void VpaStateMsg::Swap(VpaStateMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VpaStateMsg::InternalSwap(VpaStateMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(vpa_event_, other->vpa_event_);
  swap(hpa_state_, other->hpa_state_);
  swap(mapping_odd_type_, other->mapping_odd_type_);
  swap(loc_odd_type_, other->loc_odd_type_);
  swap(map_saving_stage_, other->map_saving_stage_);
  swap(local_loc_stage_, other->local_loc_stage_);
  swap(map_deleted_stage_, other->map_deleted_stage_);
  swap(map_stage_, other->map_stage_);
  swap(map_optimized_stage_, other->map_optimized_stage_);
  swap(error_code_, other->error_code_);
  swap(target_parking_slot_id_, other->target_parking_slot_id_);
  swap(map_saving_progress_, other->map_saving_progress_);
  swap(avaliable_map_id_, other->avaliable_map_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VpaStateMsg::GetMetadata() const {
  protobuf_vpa_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vpa_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
