// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_onl_calib.proto

#include "lane_onl_calib.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class SingleCamLaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleCamLane>
      _instance;
} _SingleCamLane_default_instance_;
class LaneOnlCalibMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneOnlCalibMsg>
      _instance;
} _LaneOnlCalibMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_lane_5fonl_5fcalib_2eproto {
void InitDefaultsSingleCamLaneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneParsingImageData();
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  {
    void* ptr = &::autodrive::workflow::proto::_SingleCamLane_default_instance_;
    new (ptr) ::autodrive::workflow::proto::SingleCamLane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::SingleCamLane::InitAsDefaultInstance();
}

void InitDefaultsSingleCamLane() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSingleCamLaneImpl);
}

void InitDefaultsLaneOnlCalibMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_lane_5fonl_5fcalib_2eproto::InitDefaultsSingleCamLane();
  {
    void* ptr = &::autodrive::workflow::proto::_LaneOnlCalibMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LaneOnlCalibMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LaneOnlCalibMsg::InitAsDefaultInstance();
}

void InitDefaultsLaneOnlCalibMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneOnlCalibMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SingleCamLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SingleCamLane, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SingleCamLane, lane_parsing_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SingleCamLane, parsing_roi_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneOnlCalibMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneOnlCalibMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneOnlCalibMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneOnlCalibMsg, camera_lane_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::SingleCamLane)},
  { 8, -1, sizeof(::autodrive::workflow::proto::LaneOnlCalibMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_SingleCamLane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LaneOnlCalibMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "lane_onl_calib.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024lane_onl_calib.proto\022\030autodrive.workfl"
      "ow.proto\032\014common.proto\032\024lane_multitask.p"
      "roto\032\025perception_base.proto\"\263\001\n\rSingleCa"
      "mLane\022\021\n\tcamera_id\030\001 \001(\005\022J\n\022lane_parsing"
      "_image\030\002 \003(\0132..autodrive.workflow.proto."
      "LaneParsingImageData\022C\n\013parsing_roi\030\003 \001("
      "\0132..autodrive.workflow.proto.perception_"
      "base.Rect\"\264\001\n\017LaneOnlCalibMsg\0223\n\006header\030"
      "\001 \001(\0132#.autodrive.workflow.proto.MsgHead"
      "er\022.\n\005error\030\002 \001(\0132\037.autodrive.workflow.p"
      "roto.Error\022<\n\013camera_lane\030\003 \003(\0132\'.autodr"
      "ive.workflow.proto.SingleCamLaneb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lane_onl_calib.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_lane_5fmultitask_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_lane_5fonl_5fcalib_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void SingleCamLane::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_SingleCamLane_default_instance_._instance.get_mutable()->parsing_roi_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
void SingleCamLane::clear_lane_parsing_image() {
  lane_parsing_image_.Clear();
}
void SingleCamLane::clear_parsing_roi() {
  if (GetArenaNoVirtual() == NULL && parsing_roi_ != NULL) {
    delete parsing_roi_;
  }
  parsing_roi_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleCamLane::kCameraIdFieldNumber;
const int SingleCamLane::kLaneParsingImageFieldNumber;
const int SingleCamLane::kParsingRoiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleCamLane::SingleCamLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fonl_5fcalib_2eproto::InitDefaultsSingleCamLane();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.SingleCamLane)
}
SingleCamLane::SingleCamLane(const SingleCamLane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_parsing_image_(from.lane_parsing_image_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parsing_roi()) {
    parsing_roi_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.parsing_roi_);
  } else {
    parsing_roi_ = NULL;
  }
  camera_id_ = from.camera_id_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.SingleCamLane)
}

void SingleCamLane::SharedCtor() {
  ::memset(&parsing_roi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&parsing_roi_)) + sizeof(camera_id_));
  _cached_size_ = 0;
}

SingleCamLane::~SingleCamLane() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.SingleCamLane)
  SharedDtor();
}

void SingleCamLane::SharedDtor() {
  if (this != internal_default_instance()) delete parsing_roi_;
}

void SingleCamLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleCamLane::descriptor() {
  ::protobuf_lane_5fonl_5fcalib_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fonl_5fcalib_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleCamLane& SingleCamLane::default_instance() {
  ::protobuf_lane_5fonl_5fcalib_2eproto::InitDefaultsSingleCamLane();
  return *internal_default_instance();
}

SingleCamLane* SingleCamLane::New(::google::protobuf::Arena* arena) const {
  SingleCamLane* n = new SingleCamLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleCamLane::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.SingleCamLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_parsing_image_.Clear();
  if (GetArenaNoVirtual() == NULL && parsing_roi_ != NULL) {
    delete parsing_roi_;
  }
  parsing_roi_ = NULL;
  camera_id_ = 0;
  _internal_metadata_.Clear();
}

bool SingleCamLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.SingleCamLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 camera_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_parsing_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Rect parsing_roi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parsing_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.SingleCamLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.SingleCamLane)
  return false;
#undef DO_
}

void SingleCamLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.SingleCamLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camera_id(), output);
  }

  // repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_parsing_image_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_parsing_image(static_cast<int>(i)), output);
  }

  // .autodrive.workflow.proto.perception_base.Rect parsing_roi = 3;
  if (this->has_parsing_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->parsing_roi_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.SingleCamLane)
}

::google::protobuf::uint8* SingleCamLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.SingleCamLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camera_id(), target);
  }

  // repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_parsing_image_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lane_parsing_image(static_cast<int>(i)), deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.Rect parsing_roi = 3;
  if (this->has_parsing_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->parsing_roi_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.SingleCamLane)
  return target;
}

size_t SingleCamLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.SingleCamLane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_parsing_image_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_parsing_image(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.perception_base.Rect parsing_roi = 3;
  if (this->has_parsing_roi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->parsing_roi_);
  }

  // int32 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camera_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleCamLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.SingleCamLane)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleCamLane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleCamLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.SingleCamLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.SingleCamLane)
    MergeFrom(*source);
  }
}

void SingleCamLane::MergeFrom(const SingleCamLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.SingleCamLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_parsing_image_.MergeFrom(from.lane_parsing_image_);
  if (from.has_parsing_roi()) {
    mutable_parsing_roi()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.parsing_roi());
  }
  if (from.camera_id() != 0) {
    set_camera_id(from.camera_id());
  }
}

void SingleCamLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.SingleCamLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCamLane::CopyFrom(const SingleCamLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.SingleCamLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCamLane::IsInitialized() const {
  return true;
}

void SingleCamLane::Swap(SingleCamLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleCamLane::InternalSwap(SingleCamLane* other) {
  using std::swap;
  lane_parsing_image_.InternalSwap(&other->lane_parsing_image_);
  swap(parsing_roi_, other->parsing_roi_);
  swap(camera_id_, other->camera_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleCamLane::GetMetadata() const {
  protobuf_lane_5fonl_5fcalib_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fonl_5fcalib_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneOnlCalibMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_LaneOnlCalibMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_LaneOnlCalibMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void LaneOnlCalibMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void LaneOnlCalibMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneOnlCalibMsg::kHeaderFieldNumber;
const int LaneOnlCalibMsg::kErrorFieldNumber;
const int LaneOnlCalibMsg::kCameraLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneOnlCalibMsg::LaneOnlCalibMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fonl_5fcalib_2eproto::InitDefaultsLaneOnlCalibMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LaneOnlCalibMsg)
}
LaneOnlCalibMsg::LaneOnlCalibMsg(const LaneOnlCalibMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      camera_lane_(from.camera_lane_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LaneOnlCalibMsg)
}

void LaneOnlCalibMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&header_)) + sizeof(error_));
  _cached_size_ = 0;
}

LaneOnlCalibMsg::~LaneOnlCalibMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LaneOnlCalibMsg)
  SharedDtor();
}

void LaneOnlCalibMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void LaneOnlCalibMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneOnlCalibMsg::descriptor() {
  ::protobuf_lane_5fonl_5fcalib_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fonl_5fcalib_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneOnlCalibMsg& LaneOnlCalibMsg::default_instance() {
  ::protobuf_lane_5fonl_5fcalib_2eproto::InitDefaultsLaneOnlCalibMsg();
  return *internal_default_instance();
}

LaneOnlCalibMsg* LaneOnlCalibMsg::New(::google::protobuf::Arena* arena) const {
  LaneOnlCalibMsg* n = new LaneOnlCalibMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneOnlCalibMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LaneOnlCalibMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_lane_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool LaneOnlCalibMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LaneOnlCalibMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.SingleCamLane camera_lane = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_camera_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LaneOnlCalibMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LaneOnlCalibMsg)
  return false;
#undef DO_
}

void LaneOnlCalibMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LaneOnlCalibMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // repeated .autodrive.workflow.proto.SingleCamLane camera_lane = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camera_lane(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LaneOnlCalibMsg)
}

::google::protobuf::uint8* LaneOnlCalibMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LaneOnlCalibMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // repeated .autodrive.workflow.proto.SingleCamLane camera_lane = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->camera_lane(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LaneOnlCalibMsg)
  return target;
}

size_t LaneOnlCalibMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LaneOnlCalibMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.SingleCamLane camera_lane = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->camera_lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->camera_lane(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneOnlCalibMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LaneOnlCalibMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneOnlCalibMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneOnlCalibMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LaneOnlCalibMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LaneOnlCalibMsg)
    MergeFrom(*source);
  }
}

void LaneOnlCalibMsg::MergeFrom(const LaneOnlCalibMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LaneOnlCalibMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_lane_.MergeFrom(from.camera_lane_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
}

void LaneOnlCalibMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LaneOnlCalibMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneOnlCalibMsg::CopyFrom(const LaneOnlCalibMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LaneOnlCalibMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneOnlCalibMsg::IsInitialized() const {
  return true;
}

void LaneOnlCalibMsg::Swap(LaneOnlCalibMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneOnlCalibMsg::InternalSwap(LaneOnlCalibMsg* other) {
  using std::swap;
  camera_lane_.InternalSwap(&other->camera_lane_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneOnlCalibMsg::GetMetadata() const {
  protobuf_lane_5fonl_5fcalib_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fonl_5fcalib_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
