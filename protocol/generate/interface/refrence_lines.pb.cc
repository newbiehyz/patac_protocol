// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: refrence_lines.proto

#include "refrence_lines.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class RefLineWayPointGlobalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RefLineWayPointGlobal>
      _instance;
} _RefLineWayPointGlobal_default_instance_;
class RefLineWayPointFrameGlobalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RefLineWayPointFrameGlobal>
      _instance;
} _RefLineWayPointFrameGlobal_default_instance_;
class ReferenceLinePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLinePoint>
      _instance;
} _ReferenceLinePoint_default_instance_;
class RefLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RefLine>
      _instance;
} _RefLine_default_instance_;
class ReferenceLinesMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLinesMsg>
      _instance;
} _ReferenceLinesMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_refrence_5flines_2eproto {
void InitDefaultsRefLineWayPointGlobalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::autodrive::workflow::proto::_RefLineWayPointGlobal_default_instance_;
    new (ptr) ::autodrive::workflow::proto::RefLineWayPointGlobal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::RefLineWayPointGlobal::InitAsDefaultInstance();
}

void InitDefaultsRefLineWayPointGlobal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRefLineWayPointGlobalImpl);
}

void InitDefaultsRefLineWayPointFrameGlobalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_refrence_5flines_2eproto::InitDefaultsRefLineWayPointGlobal();
  {
    void* ptr = &::autodrive::workflow::proto::_RefLineWayPointFrameGlobal_default_instance_;
    new (ptr) ::autodrive::workflow::proto::RefLineWayPointFrameGlobal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::RefLineWayPointFrameGlobal::InitAsDefaultInstance();
}

void InitDefaultsRefLineWayPointFrameGlobal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRefLineWayPointFrameGlobalImpl);
}

void InitDefaultsReferenceLinePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_loc_5fodo_2eproto::InitDefaultsOdometry();
  {
    void* ptr = &::autodrive::workflow::proto::_ReferenceLinePoint_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ReferenceLinePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ReferenceLinePoint::InitAsDefaultInstance();
}

void InitDefaultsReferenceLinePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReferenceLinePointImpl);
}

void InitDefaultsRefLineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_refrence_5flines_2eproto::InitDefaultsReferenceLinePoint();
  {
    void* ptr = &::autodrive::workflow::proto::_RefLine_default_instance_;
    new (ptr) ::autodrive::workflow::proto::RefLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::RefLine::InitAsDefaultInstance();
}

void InitDefaultsRefLine() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRefLineImpl);
}

void InitDefaultsReferenceLinesMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_refrence_5flines_2eproto::InitDefaultsRefLineWayPointFrameGlobal();
  protobuf_map_5fdisplay_2eproto::InitDefaultsGlbPrkgSlot();
  protobuf_refrence_5flines_2eproto::InitDefaultsRefLine();
  protobuf_ndm_5fbase_2eproto::InitDefaultsNdmSpec();
  {
    void* ptr = &::autodrive::workflow::proto::_ReferenceLinesMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ReferenceLinesMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ReferenceLinesMsg::InitAsDefaultInstance();
}

void InitDefaultsReferenceLinesMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReferenceLinesMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_curv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_curvrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_locked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, is_map_origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, is_intersection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, left_turning_light_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, right_turning_light_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, is_parking_gate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, is_speed_bump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, left_bound_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, right_bound_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointGlobal, waypoint_roll_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointFrameGlobal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointFrameGlobal, waypoint_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLineWayPointFrameGlobal, way_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinePoint, odo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinePoint, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinePoint, num_sates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinePoint, floor_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinePoint, vertex_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinePoint, has_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinePoint, init_loc_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinePoint, str_obj_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLine, map_floor_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLine, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::RefLine, reference_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinesMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinesMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinesMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinesMsg, waypoint_frame_global_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinesMsg, waypoint_frame_global_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinesMsg, parking_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinesMsg, reference_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ReferenceLinesMsg, ndm_header_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::RefLineWayPointGlobal)},
  { 25, -1, sizeof(::autodrive::workflow::proto::RefLineWayPointFrameGlobal)},
  { 32, -1, sizeof(::autodrive::workflow::proto::ReferenceLinePoint)},
  { 45, -1, sizeof(::autodrive::workflow::proto::RefLine)},
  { 53, -1, sizeof(::autodrive::workflow::proto::ReferenceLinesMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_RefLineWayPointGlobal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_RefLineWayPointFrameGlobal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ReferenceLinePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_RefLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ReferenceLinesMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "refrence_lines.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024refrence_lines.proto\022\030autodrive.workfl"
      "ow.proto\032\013basic.proto\032\014common.proto\032\rloc"
      "_odo.proto\032\016ndm_base.proto\032\023odometry_dat"
      "a.proto\032\021map_display.proto\"\226\006\n\025RefLineWa"
      "yPointGlobal\022=\n\021waypoint_position\030\001 \001(\0132"
      "\".autodrive.workflow.proto.Vector3f\022\024\n\014w"
      "aypoint_yaw\030\002 \001(\002\022\025\n\rwaypoint_curv\030\003 \001(\002"
      "\022\031\n\021waypoint_curvrate\030\004 \001(\002\022\026\n\016waypoint_"
      "speed\030\005 \001(\002\022\024\n\014waypoint_num\030\006 \001(\r\022\025\n\rway"
      "point_dist\030\007 \001(\002\022Q\n\014waypoint_dir\030\010 \001(\0162;"
      ".autodrive.workflow.proto.RefLineWayPoin"
      "tGlobal.WaypointDir\022\027\n\017waypoint_locked\030\t"
      " \001(\010\022\025\n\ris_map_origin\030\n \001(\010\022\027\n\017is_inters"
      "ection\030\013 \001(\010\022O\n\031left_turning_light_statu"
      "s\030\014 \001(\0162,.autodrive.workflow.proto.Turni"
      "ngLightStatus\022P\n\032right_turning_light_sta"
      "tus\030\r \001(\0162,.autodrive.workflow.proto.Tur"
      "ningLightStatus\022\026\n\016waypoint_floor\030\016 \001(\002\022"
      "\027\n\017is_parking_gate\030\017 \001(\010\022\025\n\ris_speed_bum"
      "p\030\020 \001(\010\022\033\n\023left_bound_distance\030\021 \001(\002\022\034\n\024"
      "right_bound_distance\030\022 \001(\002\022\026\n\016waypoint_p"
      "itch\030\023 \001(\002\022\025\n\rwaypoint_roll\030\024 \001(\002\"@\n\013Way"
      "pointDir\022\027\n\023kWaypointDirForward\020\000\022\030\n\024kWa"
      "ypointDirBackward\020\001\"v\n\032RefLineWayPointFr"
      "ameGlobal\022\023\n\013waypoint_id\030\001 \001(\r\022C\n\nway_po"
      "ints\030\002 \003(\0132/.autodrive.workflow.proto.Re"
      "fLineWayPointGlobal\"\373\001\n\022ReferenceLinePoi"
      "nt\0227\n\003odo\030\001 \001(\0132*.autodrive.workflow.pro"
      "to.loc_odo.Odometry\022\r\n\005pitch\030\002 \001(\002\022\021\n\tnu"
      "m_sates\030\003 \001(\005\022\021\n\tfloor_num\030\004 \001(\005\0229\n\013vert"
      "ex_type\030\005 \001(\0162$.autodrive.workflow.proto"
      ".VertexType\022\017\n\007has_map\030\006 \001(\010\022\027\n\017init_loc"
      "_region\030\007 \001(\010\022\022\n\nstr_obj_id\030\010 \001(\t\"x\n\007Ref"
      "Line\022\025\n\rmap_floor_num\030\001 \001(\005\022\016\n\006header\030\002 "
      "\001(\t\022F\n\020reference_points\030\003 \003(\0132,.autodriv"
      "e.workflow.proto.ReferenceLinePoint\"\336\003\n\021"
      "ReferenceLinesMsg\0223\n\006header\030\001 \001(\0132#.auto"
      "drive.workflow.proto.MsgHeader\022.\n\005error\030"
      "\002 \001(\0132\037.autodrive.workflow.proto.Error\022W"
      "\n\031waypoint_frame_global_raw\030\003 \001(\01324.auto"
      "drive.workflow.proto.RefLineWayPointFram"
      "eGlobal\022S\n\025waypoint_frame_global\030\004 \001(\01324"
      ".autodrive.workflow.proto.RefLineWayPoin"
      "tFrameGlobal\022;\n\014parking_slot\030\005 \001(\0132%.aut"
      "odrive.workflow.proto.GlbPrkgSlot\0229\n\016ref"
      "erence_line\030\006 \001(\0132!.autodrive.workflow.p"
      "roto.RefLine\022>\n\nndm_header\030\007 \001(\0132*.autod"
      "rive.workflow.proto.ndm_base.NdmSpec*\216\001\n"
      "\nVertexType\022\026\n\022kVertexTypeUnknown\020\000\022\027\n\023k"
      "VertexTypeNoVertex\020\001\022\031\n\025kVertexTypeVerte"
      "xDist\020\002\022\030\n\024kVertexTypeVertexYaw\020\003\022\032\n\026kVe"
      "rtexTypeVertexPitch\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2069);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "refrence_lines.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_loc_5fodo_2eproto::AddDescriptors();
  ::protobuf_ndm_5fbase_2eproto::AddDescriptors();
  ::protobuf_odometry_5fdata_2eproto::AddDescriptors();
  ::protobuf_map_5fdisplay_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_refrence_5flines_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* RefLineWayPointGlobal_WaypointDir_descriptor() {
  protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_refrence_5flines_2eproto::file_level_enum_descriptors[0];
}
bool RefLineWayPointGlobal_WaypointDir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RefLineWayPointGlobal_WaypointDir RefLineWayPointGlobal::kWaypointDirForward;
const RefLineWayPointGlobal_WaypointDir RefLineWayPointGlobal::kWaypointDirBackward;
const RefLineWayPointGlobal_WaypointDir RefLineWayPointGlobal::WaypointDir_MIN;
const RefLineWayPointGlobal_WaypointDir RefLineWayPointGlobal::WaypointDir_MAX;
const int RefLineWayPointGlobal::WaypointDir_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VertexType_descriptor() {
  protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_refrence_5flines_2eproto::file_level_enum_descriptors[1];
}
bool VertexType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RefLineWayPointGlobal::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_RefLineWayPointGlobal_default_instance_._instance.get_mutable()->waypoint_position_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
}
void RefLineWayPointGlobal::clear_waypoint_position() {
  if (GetArenaNoVirtual() == NULL && waypoint_position_ != NULL) {
    delete waypoint_position_;
  }
  waypoint_position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefLineWayPointGlobal::kWaypointPositionFieldNumber;
const int RefLineWayPointGlobal::kWaypointYawFieldNumber;
const int RefLineWayPointGlobal::kWaypointCurvFieldNumber;
const int RefLineWayPointGlobal::kWaypointCurvrateFieldNumber;
const int RefLineWayPointGlobal::kWaypointSpeedFieldNumber;
const int RefLineWayPointGlobal::kWaypointNumFieldNumber;
const int RefLineWayPointGlobal::kWaypointDistFieldNumber;
const int RefLineWayPointGlobal::kWaypointDirFieldNumber;
const int RefLineWayPointGlobal::kWaypointLockedFieldNumber;
const int RefLineWayPointGlobal::kIsMapOriginFieldNumber;
const int RefLineWayPointGlobal::kIsIntersectionFieldNumber;
const int RefLineWayPointGlobal::kLeftTurningLightStatusFieldNumber;
const int RefLineWayPointGlobal::kRightTurningLightStatusFieldNumber;
const int RefLineWayPointGlobal::kWaypointFloorFieldNumber;
const int RefLineWayPointGlobal::kIsParkingGateFieldNumber;
const int RefLineWayPointGlobal::kIsSpeedBumpFieldNumber;
const int RefLineWayPointGlobal::kLeftBoundDistanceFieldNumber;
const int RefLineWayPointGlobal::kRightBoundDistanceFieldNumber;
const int RefLineWayPointGlobal::kWaypointPitchFieldNumber;
const int RefLineWayPointGlobal::kWaypointRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefLineWayPointGlobal::RefLineWayPointGlobal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_refrence_5flines_2eproto::InitDefaultsRefLineWayPointGlobal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.RefLineWayPointGlobal)
}
RefLineWayPointGlobal::RefLineWayPointGlobal(const RefLineWayPointGlobal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_waypoint_position()) {
    waypoint_position_ = new ::autodrive::workflow::proto::Vector3f(*from.waypoint_position_);
  } else {
    waypoint_position_ = NULL;
  }
  ::memcpy(&waypoint_yaw_, &from.waypoint_yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&waypoint_roll_) -
    reinterpret_cast<char*>(&waypoint_yaw_)) + sizeof(waypoint_roll_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.RefLineWayPointGlobal)
}

void RefLineWayPointGlobal::SharedCtor() {
  ::memset(&waypoint_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waypoint_roll_) -
      reinterpret_cast<char*>(&waypoint_position_)) + sizeof(waypoint_roll_));
  _cached_size_ = 0;
}

RefLineWayPointGlobal::~RefLineWayPointGlobal() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.RefLineWayPointGlobal)
  SharedDtor();
}

void RefLineWayPointGlobal::SharedDtor() {
  if (this != internal_default_instance()) delete waypoint_position_;
}

void RefLineWayPointGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefLineWayPointGlobal::descriptor() {
  ::protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RefLineWayPointGlobal& RefLineWayPointGlobal::default_instance() {
  ::protobuf_refrence_5flines_2eproto::InitDefaultsRefLineWayPointGlobal();
  return *internal_default_instance();
}

RefLineWayPointGlobal* RefLineWayPointGlobal::New(::google::protobuf::Arena* arena) const {
  RefLineWayPointGlobal* n = new RefLineWayPointGlobal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RefLineWayPointGlobal::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.RefLineWayPointGlobal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && waypoint_position_ != NULL) {
    delete waypoint_position_;
  }
  waypoint_position_ = NULL;
  ::memset(&waypoint_yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waypoint_roll_) -
      reinterpret_cast<char*>(&waypoint_yaw_)) + sizeof(waypoint_roll_));
  _internal_metadata_.Clear();
}

bool RefLineWayPointGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.RefLineWayPointGlobal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.Vector3f waypoint_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_waypoint_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float waypoint_yaw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waypoint_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float waypoint_curv = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waypoint_curv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float waypoint_curvrate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waypoint_curvrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float waypoint_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waypoint_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 waypoint_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waypoint_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float waypoint_dist = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waypoint_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RefLineWayPointGlobal.WaypointDir waypoint_dir = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_waypoint_dir(static_cast< ::autodrive::workflow::proto::RefLineWayPointGlobal_WaypointDir >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool waypoint_locked = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &waypoint_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_map_origin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_map_origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_intersection = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_intersection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.TurningLightStatus left_turning_light_status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_left_turning_light_status(static_cast< ::autodrive::workflow::proto::TurningLightStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.TurningLightStatus right_turning_light_status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_right_turning_light_status(static_cast< ::autodrive::workflow::proto::TurningLightStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float waypoint_floor = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waypoint_floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_parking_gate = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_parking_gate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_speed_bump = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_speed_bump_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left_bound_distance = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_bound_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float right_bound_distance = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_bound_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float waypoint_pitch = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waypoint_pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float waypoint_roll = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waypoint_roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.RefLineWayPointGlobal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.RefLineWayPointGlobal)
  return false;
#undef DO_
}

void RefLineWayPointGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.RefLineWayPointGlobal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f waypoint_position = 1;
  if (this->has_waypoint_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->waypoint_position_, output);
  }

  // float waypoint_yaw = 2;
  if (this->waypoint_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->waypoint_yaw(), output);
  }

  // float waypoint_curv = 3;
  if (this->waypoint_curv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->waypoint_curv(), output);
  }

  // float waypoint_curvrate = 4;
  if (this->waypoint_curvrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->waypoint_curvrate(), output);
  }

  // float waypoint_speed = 5;
  if (this->waypoint_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->waypoint_speed(), output);
  }

  // uint32 waypoint_num = 6;
  if (this->waypoint_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->waypoint_num(), output);
  }

  // float waypoint_dist = 7;
  if (this->waypoint_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->waypoint_dist(), output);
  }

  // .autodrive.workflow.proto.RefLineWayPointGlobal.WaypointDir waypoint_dir = 8;
  if (this->waypoint_dir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->waypoint_dir(), output);
  }

  // bool waypoint_locked = 9;
  if (this->waypoint_locked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->waypoint_locked(), output);
  }

  // bool is_map_origin = 10;
  if (this->is_map_origin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_map_origin(), output);
  }

  // bool is_intersection = 11;
  if (this->is_intersection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_intersection(), output);
  }

  // .autodrive.workflow.proto.TurningLightStatus left_turning_light_status = 12;
  if (this->left_turning_light_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->left_turning_light_status(), output);
  }

  // .autodrive.workflow.proto.TurningLightStatus right_turning_light_status = 13;
  if (this->right_turning_light_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->right_turning_light_status(), output);
  }

  // float waypoint_floor = 14;
  if (this->waypoint_floor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->waypoint_floor(), output);
  }

  // bool is_parking_gate = 15;
  if (this->is_parking_gate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_parking_gate(), output);
  }

  // bool is_speed_bump = 16;
  if (this->is_speed_bump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_speed_bump(), output);
  }

  // float left_bound_distance = 17;
  if (this->left_bound_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->left_bound_distance(), output);
  }

  // float right_bound_distance = 18;
  if (this->right_bound_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->right_bound_distance(), output);
  }

  // float waypoint_pitch = 19;
  if (this->waypoint_pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->waypoint_pitch(), output);
  }

  // float waypoint_roll = 20;
  if (this->waypoint_roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->waypoint_roll(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.RefLineWayPointGlobal)
}

::google::protobuf::uint8* RefLineWayPointGlobal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.RefLineWayPointGlobal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f waypoint_position = 1;
  if (this->has_waypoint_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->waypoint_position_, deterministic, target);
  }

  // float waypoint_yaw = 2;
  if (this->waypoint_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->waypoint_yaw(), target);
  }

  // float waypoint_curv = 3;
  if (this->waypoint_curv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->waypoint_curv(), target);
  }

  // float waypoint_curvrate = 4;
  if (this->waypoint_curvrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->waypoint_curvrate(), target);
  }

  // float waypoint_speed = 5;
  if (this->waypoint_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->waypoint_speed(), target);
  }

  // uint32 waypoint_num = 6;
  if (this->waypoint_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->waypoint_num(), target);
  }

  // float waypoint_dist = 7;
  if (this->waypoint_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->waypoint_dist(), target);
  }

  // .autodrive.workflow.proto.RefLineWayPointGlobal.WaypointDir waypoint_dir = 8;
  if (this->waypoint_dir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->waypoint_dir(), target);
  }

  // bool waypoint_locked = 9;
  if (this->waypoint_locked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->waypoint_locked(), target);
  }

  // bool is_map_origin = 10;
  if (this->is_map_origin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_map_origin(), target);
  }

  // bool is_intersection = 11;
  if (this->is_intersection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_intersection(), target);
  }

  // .autodrive.workflow.proto.TurningLightStatus left_turning_light_status = 12;
  if (this->left_turning_light_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->left_turning_light_status(), target);
  }

  // .autodrive.workflow.proto.TurningLightStatus right_turning_light_status = 13;
  if (this->right_turning_light_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->right_turning_light_status(), target);
  }

  // float waypoint_floor = 14;
  if (this->waypoint_floor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->waypoint_floor(), target);
  }

  // bool is_parking_gate = 15;
  if (this->is_parking_gate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_parking_gate(), target);
  }

  // bool is_speed_bump = 16;
  if (this->is_speed_bump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_speed_bump(), target);
  }

  // float left_bound_distance = 17;
  if (this->left_bound_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->left_bound_distance(), target);
  }

  // float right_bound_distance = 18;
  if (this->right_bound_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->right_bound_distance(), target);
  }

  // float waypoint_pitch = 19;
  if (this->waypoint_pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->waypoint_pitch(), target);
  }

  // float waypoint_roll = 20;
  if (this->waypoint_roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->waypoint_roll(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.RefLineWayPointGlobal)
  return target;
}

size_t RefLineWayPointGlobal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.RefLineWayPointGlobal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector3f waypoint_position = 1;
  if (this->has_waypoint_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->waypoint_position_);
  }

  // float waypoint_yaw = 2;
  if (this->waypoint_yaw() != 0) {
    total_size += 1 + 4;
  }

  // float waypoint_curv = 3;
  if (this->waypoint_curv() != 0) {
    total_size += 1 + 4;
  }

  // float waypoint_curvrate = 4;
  if (this->waypoint_curvrate() != 0) {
    total_size += 1 + 4;
  }

  // float waypoint_speed = 5;
  if (this->waypoint_speed() != 0) {
    total_size += 1 + 4;
  }

  // uint32 waypoint_num = 6;
  if (this->waypoint_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->waypoint_num());
  }

  // float waypoint_dist = 7;
  if (this->waypoint_dist() != 0) {
    total_size += 1 + 4;
  }

  // .autodrive.workflow.proto.RefLineWayPointGlobal.WaypointDir waypoint_dir = 8;
  if (this->waypoint_dir() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->waypoint_dir());
  }

  // bool waypoint_locked = 9;
  if (this->waypoint_locked() != 0) {
    total_size += 1 + 1;
  }

  // bool is_map_origin = 10;
  if (this->is_map_origin() != 0) {
    total_size += 1 + 1;
  }

  // bool is_intersection = 11;
  if (this->is_intersection() != 0) {
    total_size += 1 + 1;
  }

  // bool is_parking_gate = 15;
  if (this->is_parking_gate() != 0) {
    total_size += 1 + 1;
  }

  // .autodrive.workflow.proto.TurningLightStatus left_turning_light_status = 12;
  if (this->left_turning_light_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->left_turning_light_status());
  }

  // .autodrive.workflow.proto.TurningLightStatus right_turning_light_status = 13;
  if (this->right_turning_light_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->right_turning_light_status());
  }

  // float waypoint_floor = 14;
  if (this->waypoint_floor() != 0) {
    total_size += 1 + 4;
  }

  // bool is_speed_bump = 16;
  if (this->is_speed_bump() != 0) {
    total_size += 2 + 1;
  }

  // float left_bound_distance = 17;
  if (this->left_bound_distance() != 0) {
    total_size += 2 + 4;
  }

  // float right_bound_distance = 18;
  if (this->right_bound_distance() != 0) {
    total_size += 2 + 4;
  }

  // float waypoint_pitch = 19;
  if (this->waypoint_pitch() != 0) {
    total_size += 2 + 4;
  }

  // float waypoint_roll = 20;
  if (this->waypoint_roll() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefLineWayPointGlobal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.RefLineWayPointGlobal)
  GOOGLE_DCHECK_NE(&from, this);
  const RefLineWayPointGlobal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RefLineWayPointGlobal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.RefLineWayPointGlobal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.RefLineWayPointGlobal)
    MergeFrom(*source);
  }
}

void RefLineWayPointGlobal::MergeFrom(const RefLineWayPointGlobal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.RefLineWayPointGlobal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_waypoint_position()) {
    mutable_waypoint_position()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.waypoint_position());
  }
  if (from.waypoint_yaw() != 0) {
    set_waypoint_yaw(from.waypoint_yaw());
  }
  if (from.waypoint_curv() != 0) {
    set_waypoint_curv(from.waypoint_curv());
  }
  if (from.waypoint_curvrate() != 0) {
    set_waypoint_curvrate(from.waypoint_curvrate());
  }
  if (from.waypoint_speed() != 0) {
    set_waypoint_speed(from.waypoint_speed());
  }
  if (from.waypoint_num() != 0) {
    set_waypoint_num(from.waypoint_num());
  }
  if (from.waypoint_dist() != 0) {
    set_waypoint_dist(from.waypoint_dist());
  }
  if (from.waypoint_dir() != 0) {
    set_waypoint_dir(from.waypoint_dir());
  }
  if (from.waypoint_locked() != 0) {
    set_waypoint_locked(from.waypoint_locked());
  }
  if (from.is_map_origin() != 0) {
    set_is_map_origin(from.is_map_origin());
  }
  if (from.is_intersection() != 0) {
    set_is_intersection(from.is_intersection());
  }
  if (from.is_parking_gate() != 0) {
    set_is_parking_gate(from.is_parking_gate());
  }
  if (from.left_turning_light_status() != 0) {
    set_left_turning_light_status(from.left_turning_light_status());
  }
  if (from.right_turning_light_status() != 0) {
    set_right_turning_light_status(from.right_turning_light_status());
  }
  if (from.waypoint_floor() != 0) {
    set_waypoint_floor(from.waypoint_floor());
  }
  if (from.is_speed_bump() != 0) {
    set_is_speed_bump(from.is_speed_bump());
  }
  if (from.left_bound_distance() != 0) {
    set_left_bound_distance(from.left_bound_distance());
  }
  if (from.right_bound_distance() != 0) {
    set_right_bound_distance(from.right_bound_distance());
  }
  if (from.waypoint_pitch() != 0) {
    set_waypoint_pitch(from.waypoint_pitch());
  }
  if (from.waypoint_roll() != 0) {
    set_waypoint_roll(from.waypoint_roll());
  }
}

void RefLineWayPointGlobal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.RefLineWayPointGlobal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefLineWayPointGlobal::CopyFrom(const RefLineWayPointGlobal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.RefLineWayPointGlobal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefLineWayPointGlobal::IsInitialized() const {
  return true;
}

void RefLineWayPointGlobal::Swap(RefLineWayPointGlobal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefLineWayPointGlobal::InternalSwap(RefLineWayPointGlobal* other) {
  using std::swap;
  swap(waypoint_position_, other->waypoint_position_);
  swap(waypoint_yaw_, other->waypoint_yaw_);
  swap(waypoint_curv_, other->waypoint_curv_);
  swap(waypoint_curvrate_, other->waypoint_curvrate_);
  swap(waypoint_speed_, other->waypoint_speed_);
  swap(waypoint_num_, other->waypoint_num_);
  swap(waypoint_dist_, other->waypoint_dist_);
  swap(waypoint_dir_, other->waypoint_dir_);
  swap(waypoint_locked_, other->waypoint_locked_);
  swap(is_map_origin_, other->is_map_origin_);
  swap(is_intersection_, other->is_intersection_);
  swap(is_parking_gate_, other->is_parking_gate_);
  swap(left_turning_light_status_, other->left_turning_light_status_);
  swap(right_turning_light_status_, other->right_turning_light_status_);
  swap(waypoint_floor_, other->waypoint_floor_);
  swap(is_speed_bump_, other->is_speed_bump_);
  swap(left_bound_distance_, other->left_bound_distance_);
  swap(right_bound_distance_, other->right_bound_distance_);
  swap(waypoint_pitch_, other->waypoint_pitch_);
  swap(waypoint_roll_, other->waypoint_roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RefLineWayPointGlobal::GetMetadata() const {
  protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RefLineWayPointFrameGlobal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefLineWayPointFrameGlobal::kWaypointIdFieldNumber;
const int RefLineWayPointFrameGlobal::kWayPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefLineWayPointFrameGlobal::RefLineWayPointFrameGlobal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_refrence_5flines_2eproto::InitDefaultsRefLineWayPointFrameGlobal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
}
RefLineWayPointFrameGlobal::RefLineWayPointFrameGlobal(const RefLineWayPointFrameGlobal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      way_points_(from.way_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  waypoint_id_ = from.waypoint_id_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
}

void RefLineWayPointFrameGlobal::SharedCtor() {
  waypoint_id_ = 0u;
  _cached_size_ = 0;
}

RefLineWayPointFrameGlobal::~RefLineWayPointFrameGlobal() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  SharedDtor();
}

void RefLineWayPointFrameGlobal::SharedDtor() {
}

void RefLineWayPointFrameGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefLineWayPointFrameGlobal::descriptor() {
  ::protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RefLineWayPointFrameGlobal& RefLineWayPointFrameGlobal::default_instance() {
  ::protobuf_refrence_5flines_2eproto::InitDefaultsRefLineWayPointFrameGlobal();
  return *internal_default_instance();
}

RefLineWayPointFrameGlobal* RefLineWayPointFrameGlobal::New(::google::protobuf::Arena* arena) const {
  RefLineWayPointFrameGlobal* n = new RefLineWayPointFrameGlobal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RefLineWayPointFrameGlobal::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  way_points_.Clear();
  waypoint_id_ = 0u;
  _internal_metadata_.Clear();
}

bool RefLineWayPointFrameGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 waypoint_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waypoint_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.RefLineWayPointGlobal way_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_way_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  return false;
#undef DO_
}

void RefLineWayPointFrameGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 waypoint_id = 1;
  if (this->waypoint_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->waypoint_id(), output);
  }

  // repeated .autodrive.workflow.proto.RefLineWayPointGlobal way_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->way_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->way_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
}

::google::protobuf::uint8* RefLineWayPointFrameGlobal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 waypoint_id = 1;
  if (this->waypoint_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->waypoint_id(), target);
  }

  // repeated .autodrive.workflow.proto.RefLineWayPointGlobal way_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->way_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->way_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  return target;
}

size_t RefLineWayPointFrameGlobal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.RefLineWayPointGlobal way_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->way_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->way_points(static_cast<int>(i)));
    }
  }

  // uint32 waypoint_id = 1;
  if (this->waypoint_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->waypoint_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefLineWayPointFrameGlobal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  GOOGLE_DCHECK_NE(&from, this);
  const RefLineWayPointFrameGlobal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RefLineWayPointFrameGlobal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
    MergeFrom(*source);
  }
}

void RefLineWayPointFrameGlobal::MergeFrom(const RefLineWayPointFrameGlobal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  way_points_.MergeFrom(from.way_points_);
  if (from.waypoint_id() != 0) {
    set_waypoint_id(from.waypoint_id());
  }
}

void RefLineWayPointFrameGlobal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefLineWayPointFrameGlobal::CopyFrom(const RefLineWayPointFrameGlobal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.RefLineWayPointFrameGlobal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefLineWayPointFrameGlobal::IsInitialized() const {
  return true;
}

void RefLineWayPointFrameGlobal::Swap(RefLineWayPointFrameGlobal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefLineWayPointFrameGlobal::InternalSwap(RefLineWayPointFrameGlobal* other) {
  using std::swap;
  way_points_.InternalSwap(&other->way_points_);
  swap(waypoint_id_, other->waypoint_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RefLineWayPointFrameGlobal::GetMetadata() const {
  protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferenceLinePoint::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ReferenceLinePoint_default_instance_._instance.get_mutable()->odo_ = const_cast< ::autodrive::workflow::proto::loc_odo::Odometry*>(
      ::autodrive::workflow::proto::loc_odo::Odometry::internal_default_instance());
}
void ReferenceLinePoint::clear_odo() {
  if (GetArenaNoVirtual() == NULL && odo_ != NULL) {
    delete odo_;
  }
  odo_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLinePoint::kOdoFieldNumber;
const int ReferenceLinePoint::kPitchFieldNumber;
const int ReferenceLinePoint::kNumSatesFieldNumber;
const int ReferenceLinePoint::kFloorNumFieldNumber;
const int ReferenceLinePoint::kVertexTypeFieldNumber;
const int ReferenceLinePoint::kHasMapFieldNumber;
const int ReferenceLinePoint::kInitLocRegionFieldNumber;
const int ReferenceLinePoint::kStrObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLinePoint::ReferenceLinePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_refrence_5flines_2eproto::InitDefaultsReferenceLinePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ReferenceLinePoint)
}
ReferenceLinePoint::ReferenceLinePoint(const ReferenceLinePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str_obj_id().size() > 0) {
    str_obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_obj_id_);
  }
  if (from.has_odo()) {
    odo_ = new ::autodrive::workflow::proto::loc_odo::Odometry(*from.odo_);
  } else {
    odo_ = NULL;
  }
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_loc_region_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(init_loc_region_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ReferenceLinePoint)
}

void ReferenceLinePoint::SharedCtor() {
  str_obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&odo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_loc_region_) -
      reinterpret_cast<char*>(&odo_)) + sizeof(init_loc_region_));
  _cached_size_ = 0;
}

ReferenceLinePoint::~ReferenceLinePoint() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ReferenceLinePoint)
  SharedDtor();
}

void ReferenceLinePoint::SharedDtor() {
  str_obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete odo_;
}

void ReferenceLinePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLinePoint::descriptor() {
  ::protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLinePoint& ReferenceLinePoint::default_instance() {
  ::protobuf_refrence_5flines_2eproto::InitDefaultsReferenceLinePoint();
  return *internal_default_instance();
}

ReferenceLinePoint* ReferenceLinePoint::New(::google::protobuf::Arena* arena) const {
  ReferenceLinePoint* n = new ReferenceLinePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLinePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ReferenceLinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && odo_ != NULL) {
    delete odo_;
  }
  odo_ = NULL;
  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_loc_region_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(init_loc_region_));
  _internal_metadata_.Clear();
}

bool ReferenceLinePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ReferenceLinePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.loc_odo.Odometry odo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_odo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_sates = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 floor_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VertexType vertex_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vertex_type(static_cast< ::autodrive::workflow::proto::VertexType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool init_loc_region = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &init_loc_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string str_obj_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_obj_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str_obj_id().data(), static_cast<int>(this->str_obj_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.ReferenceLinePoint.str_obj_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ReferenceLinePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ReferenceLinePoint)
  return false;
#undef DO_
}

void ReferenceLinePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ReferenceLinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.loc_odo.Odometry odo = 1;
  if (this->has_odo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->odo_, output);
  }

  // float pitch = 2;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }

  // int32 num_sates = 3;
  if (this->num_sates() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_sates(), output);
  }

  // int32 floor_num = 4;
  if (this->floor_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->floor_num(), output);
  }

  // .autodrive.workflow.proto.VertexType vertex_type = 5;
  if (this->vertex_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->vertex_type(), output);
  }

  // bool has_map = 6;
  if (this->has_map() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_map(), output);
  }

  // bool init_loc_region = 7;
  if (this->init_loc_region() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->init_loc_region(), output);
  }

  // string str_obj_id = 8;
  if (this->str_obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_obj_id().data(), static_cast<int>(this->str_obj_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ReferenceLinePoint.str_obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->str_obj_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ReferenceLinePoint)
}

::google::protobuf::uint8* ReferenceLinePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ReferenceLinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.loc_odo.Odometry odo = 1;
  if (this->has_odo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->odo_, deterministic, target);
  }

  // float pitch = 2;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pitch(), target);
  }

  // int32 num_sates = 3;
  if (this->num_sates() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_sates(), target);
  }

  // int32 floor_num = 4;
  if (this->floor_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->floor_num(), target);
  }

  // .autodrive.workflow.proto.VertexType vertex_type = 5;
  if (this->vertex_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->vertex_type(), target);
  }

  // bool has_map = 6;
  if (this->has_map() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_map(), target);
  }

  // bool init_loc_region = 7;
  if (this->init_loc_region() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->init_loc_region(), target);
  }

  // string str_obj_id = 8;
  if (this->str_obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_obj_id().data(), static_cast<int>(this->str_obj_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ReferenceLinePoint.str_obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->str_obj_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ReferenceLinePoint)
  return target;
}

size_t ReferenceLinePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ReferenceLinePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string str_obj_id = 8;
  if (this->str_obj_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_obj_id());
  }

  // .autodrive.workflow.proto.loc_odo.Odometry odo = 1;
  if (this->has_odo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->odo_);
  }

  // float pitch = 2;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // int32 num_sates = 3;
  if (this->num_sates() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_sates());
  }

  // int32 floor_num = 4;
  if (this->floor_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->floor_num());
  }

  // .autodrive.workflow.proto.VertexType vertex_type = 5;
  if (this->vertex_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vertex_type());
  }

  // bool has_map = 6;
  if (this->has_map() != 0) {
    total_size += 1 + 1;
  }

  // bool init_loc_region = 7;
  if (this->init_loc_region() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLinePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ReferenceLinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLinePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLinePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ReferenceLinePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ReferenceLinePoint)
    MergeFrom(*source);
  }
}

void ReferenceLinePoint::MergeFrom(const ReferenceLinePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ReferenceLinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str_obj_id().size() > 0) {

    str_obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_obj_id_);
  }
  if (from.has_odo()) {
    mutable_odo()->::autodrive::workflow::proto::loc_odo::Odometry::MergeFrom(from.odo());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.num_sates() != 0) {
    set_num_sates(from.num_sates());
  }
  if (from.floor_num() != 0) {
    set_floor_num(from.floor_num());
  }
  if (from.vertex_type() != 0) {
    set_vertex_type(from.vertex_type());
  }
  if (from.has_map() != 0) {
    set_has_map(from.has_map());
  }
  if (from.init_loc_region() != 0) {
    set_init_loc_region(from.init_loc_region());
  }
}

void ReferenceLinePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ReferenceLinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLinePoint::CopyFrom(const ReferenceLinePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ReferenceLinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLinePoint::IsInitialized() const {
  return true;
}

void ReferenceLinePoint::Swap(ReferenceLinePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLinePoint::InternalSwap(ReferenceLinePoint* other) {
  using std::swap;
  str_obj_id_.Swap(&other->str_obj_id_);
  swap(odo_, other->odo_);
  swap(pitch_, other->pitch_);
  swap(num_sates_, other->num_sates_);
  swap(floor_num_, other->floor_num_);
  swap(vertex_type_, other->vertex_type_);
  swap(has_map_, other->has_map_);
  swap(init_loc_region_, other->init_loc_region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLinePoint::GetMetadata() const {
  protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RefLine::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RefLine::kMapFloorNumFieldNumber;
const int RefLine::kHeaderFieldNumber;
const int RefLine::kReferencePointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RefLine::RefLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_refrence_5flines_2eproto::InitDefaultsRefLine();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.RefLine)
}
RefLine::RefLine(const RefLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reference_points_(from.reference_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.header().size() > 0) {
    header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  map_floor_num_ = from.map_floor_num_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.RefLine)
}

void RefLine::SharedCtor() {
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_floor_num_ = 0;
  _cached_size_ = 0;
}

RefLine::~RefLine() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.RefLine)
  SharedDtor();
}

void RefLine::SharedDtor() {
  header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RefLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefLine::descriptor() {
  ::protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RefLine& RefLine::default_instance() {
  ::protobuf_refrence_5flines_2eproto::InitDefaultsRefLine();
  return *internal_default_instance();
}

RefLine* RefLine::New(::google::protobuf::Arena* arena) const {
  RefLine* n = new RefLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RefLine::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.RefLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_points_.Clear();
  header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_floor_num_ = 0;
  _internal_metadata_.Clear();
}

bool RefLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.RefLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 map_floor_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_floor_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->header().data(), static_cast<int>(this->header().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.RefLine.header"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ReferenceLinePoint reference_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_reference_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.RefLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.RefLine)
  return false;
#undef DO_
}

void RefLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.RefLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_floor_num = 1;
  if (this->map_floor_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_floor_num(), output);
  }

  // string header = 2;
  if (this->header().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header().data(), static_cast<int>(this->header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.RefLine.header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->header(), output);
  }

  // repeated .autodrive.workflow.proto.ReferenceLinePoint reference_points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reference_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.RefLine)
}

::google::protobuf::uint8* RefLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.RefLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_floor_num = 1;
  if (this->map_floor_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_floor_num(), target);
  }

  // string header = 2;
  if (this->header().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header().data(), static_cast<int>(this->header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.RefLine.header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->header(), target);
  }

  // repeated .autodrive.workflow.proto.ReferenceLinePoint reference_points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->reference_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.RefLine)
  return target;
}

size_t RefLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.RefLine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.ReferenceLinePoint reference_points = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->reference_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reference_points(static_cast<int>(i)));
    }
  }

  // string header = 2;
  if (this->header().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header());
  }

  // int32 map_floor_num = 1;
  if (this->map_floor_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_floor_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.RefLine)
  GOOGLE_DCHECK_NE(&from, this);
  const RefLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RefLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.RefLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.RefLine)
    MergeFrom(*source);
  }
}

void RefLine::MergeFrom(const RefLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.RefLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_points_.MergeFrom(from.reference_points_);
  if (from.header().size() > 0) {

    header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  if (from.map_floor_num() != 0) {
    set_map_floor_num(from.map_floor_num());
  }
}

void RefLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.RefLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefLine::CopyFrom(const RefLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.RefLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefLine::IsInitialized() const {
  return true;
}

void RefLine::Swap(RefLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RefLine::InternalSwap(RefLine* other) {
  using std::swap;
  reference_points_.InternalSwap(&other->reference_points_);
  header_.Swap(&other->header_);
  swap(map_floor_num_, other->map_floor_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RefLine::GetMetadata() const {
  protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferenceLinesMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ReferenceLinesMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_ReferenceLinesMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_ReferenceLinesMsg_default_instance_._instance.get_mutable()->waypoint_frame_global_raw_ = const_cast< ::autodrive::workflow::proto::RefLineWayPointFrameGlobal*>(
      ::autodrive::workflow::proto::RefLineWayPointFrameGlobal::internal_default_instance());
  ::autodrive::workflow::proto::_ReferenceLinesMsg_default_instance_._instance.get_mutable()->waypoint_frame_global_ = const_cast< ::autodrive::workflow::proto::RefLineWayPointFrameGlobal*>(
      ::autodrive::workflow::proto::RefLineWayPointFrameGlobal::internal_default_instance());
  ::autodrive::workflow::proto::_ReferenceLinesMsg_default_instance_._instance.get_mutable()->parking_slot_ = const_cast< ::autodrive::workflow::proto::GlbPrkgSlot*>(
      ::autodrive::workflow::proto::GlbPrkgSlot::internal_default_instance());
  ::autodrive::workflow::proto::_ReferenceLinesMsg_default_instance_._instance.get_mutable()->reference_line_ = const_cast< ::autodrive::workflow::proto::RefLine*>(
      ::autodrive::workflow::proto::RefLine::internal_default_instance());
  ::autodrive::workflow::proto::_ReferenceLinesMsg_default_instance_._instance.get_mutable()->ndm_header_ = const_cast< ::autodrive::workflow::proto::ndm_base::NdmSpec*>(
      ::autodrive::workflow::proto::ndm_base::NdmSpec::internal_default_instance());
}
void ReferenceLinesMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ReferenceLinesMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void ReferenceLinesMsg::clear_parking_slot() {
  if (GetArenaNoVirtual() == NULL && parking_slot_ != NULL) {
    delete parking_slot_;
  }
  parking_slot_ = NULL;
}
void ReferenceLinesMsg::clear_ndm_header() {
  if (GetArenaNoVirtual() == NULL && ndm_header_ != NULL) {
    delete ndm_header_;
  }
  ndm_header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLinesMsg::kHeaderFieldNumber;
const int ReferenceLinesMsg::kErrorFieldNumber;
const int ReferenceLinesMsg::kWaypointFrameGlobalRawFieldNumber;
const int ReferenceLinesMsg::kWaypointFrameGlobalFieldNumber;
const int ReferenceLinesMsg::kParkingSlotFieldNumber;
const int ReferenceLinesMsg::kReferenceLineFieldNumber;
const int ReferenceLinesMsg::kNdmHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLinesMsg::ReferenceLinesMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_refrence_5flines_2eproto::InitDefaultsReferenceLinesMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ReferenceLinesMsg)
}
ReferenceLinesMsg::ReferenceLinesMsg(const ReferenceLinesMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_waypoint_frame_global_raw()) {
    waypoint_frame_global_raw_ = new ::autodrive::workflow::proto::RefLineWayPointFrameGlobal(*from.waypoint_frame_global_raw_);
  } else {
    waypoint_frame_global_raw_ = NULL;
  }
  if (from.has_waypoint_frame_global()) {
    waypoint_frame_global_ = new ::autodrive::workflow::proto::RefLineWayPointFrameGlobal(*from.waypoint_frame_global_);
  } else {
    waypoint_frame_global_ = NULL;
  }
  if (from.has_parking_slot()) {
    parking_slot_ = new ::autodrive::workflow::proto::GlbPrkgSlot(*from.parking_slot_);
  } else {
    parking_slot_ = NULL;
  }
  if (from.has_reference_line()) {
    reference_line_ = new ::autodrive::workflow::proto::RefLine(*from.reference_line_);
  } else {
    reference_line_ = NULL;
  }
  if (from.has_ndm_header()) {
    ndm_header_ = new ::autodrive::workflow::proto::ndm_base::NdmSpec(*from.ndm_header_);
  } else {
    ndm_header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ReferenceLinesMsg)
}

void ReferenceLinesMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ndm_header_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ndm_header_));
  _cached_size_ = 0;
}

ReferenceLinesMsg::~ReferenceLinesMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ReferenceLinesMsg)
  SharedDtor();
}

void ReferenceLinesMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete waypoint_frame_global_raw_;
  if (this != internal_default_instance()) delete waypoint_frame_global_;
  if (this != internal_default_instance()) delete parking_slot_;
  if (this != internal_default_instance()) delete reference_line_;
  if (this != internal_default_instance()) delete ndm_header_;
}

void ReferenceLinesMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLinesMsg::descriptor() {
  ::protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLinesMsg& ReferenceLinesMsg::default_instance() {
  ::protobuf_refrence_5flines_2eproto::InitDefaultsReferenceLinesMsg();
  return *internal_default_instance();
}

ReferenceLinesMsg* ReferenceLinesMsg::New(::google::protobuf::Arena* arena) const {
  ReferenceLinesMsg* n = new ReferenceLinesMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLinesMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ReferenceLinesMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && waypoint_frame_global_raw_ != NULL) {
    delete waypoint_frame_global_raw_;
  }
  waypoint_frame_global_raw_ = NULL;
  if (GetArenaNoVirtual() == NULL && waypoint_frame_global_ != NULL) {
    delete waypoint_frame_global_;
  }
  waypoint_frame_global_ = NULL;
  if (GetArenaNoVirtual() == NULL && parking_slot_ != NULL) {
    delete parking_slot_;
  }
  parking_slot_ = NULL;
  if (GetArenaNoVirtual() == NULL && reference_line_ != NULL) {
    delete reference_line_;
  }
  reference_line_ = NULL;
  if (GetArenaNoVirtual() == NULL && ndm_header_ != NULL) {
    delete ndm_header_;
  }
  ndm_header_ = NULL;
  _internal_metadata_.Clear();
}

bool ReferenceLinesMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ReferenceLinesMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RefLineWayPointFrameGlobal waypoint_frame_global_raw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_waypoint_frame_global_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RefLineWayPointFrameGlobal waypoint_frame_global = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_waypoint_frame_global()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.GlbPrkgSlot parking_slot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parking_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RefLine reference_line = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ndm_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ReferenceLinesMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ReferenceLinesMsg)
  return false;
#undef DO_
}

void ReferenceLinesMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ReferenceLinesMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.RefLineWayPointFrameGlobal waypoint_frame_global_raw = 3;
  if (this->has_waypoint_frame_global_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->waypoint_frame_global_raw_, output);
  }

  // .autodrive.workflow.proto.RefLineWayPointFrameGlobal waypoint_frame_global = 4;
  if (this->has_waypoint_frame_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->waypoint_frame_global_, output);
  }

  // .autodrive.workflow.proto.GlbPrkgSlot parking_slot = 5;
  if (this->has_parking_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->parking_slot_, output);
  }

  // .autodrive.workflow.proto.RefLine reference_line = 6;
  if (this->has_reference_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->reference_line_, output);
  }

  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 7;
  if (this->has_ndm_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ndm_header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ReferenceLinesMsg)
}

::google::protobuf::uint8* ReferenceLinesMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ReferenceLinesMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.RefLineWayPointFrameGlobal waypoint_frame_global_raw = 3;
  if (this->has_waypoint_frame_global_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->waypoint_frame_global_raw_, deterministic, target);
  }

  // .autodrive.workflow.proto.RefLineWayPointFrameGlobal waypoint_frame_global = 4;
  if (this->has_waypoint_frame_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->waypoint_frame_global_, deterministic, target);
  }

  // .autodrive.workflow.proto.GlbPrkgSlot parking_slot = 5;
  if (this->has_parking_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->parking_slot_, deterministic, target);
  }

  // .autodrive.workflow.proto.RefLine reference_line = 6;
  if (this->has_reference_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->reference_line_, deterministic, target);
  }

  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 7;
  if (this->has_ndm_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->ndm_header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ReferenceLinesMsg)
  return target;
}

size_t ReferenceLinesMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ReferenceLinesMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.RefLineWayPointFrameGlobal waypoint_frame_global_raw = 3;
  if (this->has_waypoint_frame_global_raw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->waypoint_frame_global_raw_);
  }

  // .autodrive.workflow.proto.RefLineWayPointFrameGlobal waypoint_frame_global = 4;
  if (this->has_waypoint_frame_global()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->waypoint_frame_global_);
  }

  // .autodrive.workflow.proto.GlbPrkgSlot parking_slot = 5;
  if (this->has_parking_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->parking_slot_);
  }

  // .autodrive.workflow.proto.RefLine reference_line = 6;
  if (this->has_reference_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->reference_line_);
  }

  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 7;
  if (this->has_ndm_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ndm_header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLinesMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ReferenceLinesMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLinesMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLinesMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ReferenceLinesMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ReferenceLinesMsg)
    MergeFrom(*source);
  }
}

void ReferenceLinesMsg::MergeFrom(const ReferenceLinesMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ReferenceLinesMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_waypoint_frame_global_raw()) {
    mutable_waypoint_frame_global_raw()->::autodrive::workflow::proto::RefLineWayPointFrameGlobal::MergeFrom(from.waypoint_frame_global_raw());
  }
  if (from.has_waypoint_frame_global()) {
    mutable_waypoint_frame_global()->::autodrive::workflow::proto::RefLineWayPointFrameGlobal::MergeFrom(from.waypoint_frame_global());
  }
  if (from.has_parking_slot()) {
    mutable_parking_slot()->::autodrive::workflow::proto::GlbPrkgSlot::MergeFrom(from.parking_slot());
  }
  if (from.has_reference_line()) {
    mutable_reference_line()->::autodrive::workflow::proto::RefLine::MergeFrom(from.reference_line());
  }
  if (from.has_ndm_header()) {
    mutable_ndm_header()->::autodrive::workflow::proto::ndm_base::NdmSpec::MergeFrom(from.ndm_header());
  }
}

void ReferenceLinesMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ReferenceLinesMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLinesMsg::CopyFrom(const ReferenceLinesMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ReferenceLinesMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLinesMsg::IsInitialized() const {
  return true;
}

void ReferenceLinesMsg::Swap(ReferenceLinesMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLinesMsg::InternalSwap(ReferenceLinesMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(waypoint_frame_global_raw_, other->waypoint_frame_global_raw_);
  swap(waypoint_frame_global_, other->waypoint_frame_global_);
  swap(parking_slot_, other->parking_slot_);
  swap(reference_line_, other->reference_line_);
  swap(ndm_header_, other->ndm_header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLinesMsg::GetMetadata() const {
  protobuf_refrence_5flines_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_refrence_5flines_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
