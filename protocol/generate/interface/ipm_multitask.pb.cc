// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipm_multitask.proto

#include "ipm_multitask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class ParkingSlotPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingSlotPoint>
      _instance;
} _ParkingSlotPoint_default_instance_;
class ParkingSlotRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingSlotRaw>
      _instance;
} _ParkingSlotRaw_default_instance_;
class IpmWheelGroundPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpmWheelGroundPoint>
      _instance;
} _IpmWheelGroundPoint_default_instance_;
class IpmMultitaskMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpmMultitaskMsg>
      _instance;
} _IpmMultitaskMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_ipm_5fmultitask_2eproto {
void InitDefaultsParkingSlotPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector2f();
  {
    void* ptr = &::autodrive::workflow::proto::_ParkingSlotPoint_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ParkingSlotPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ParkingSlotPoint::InitAsDefaultInstance();
}

void InitDefaultsParkingSlotPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParkingSlotPointImpl);
}

void InitDefaultsParkingSlotRawImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ipm_5fmultitask_2eproto::InitDefaultsParkingSlotPoint();
  {
    void* ptr = &::autodrive::workflow::proto::_ParkingSlotRaw_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ParkingSlotRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ParkingSlotRaw::InitAsDefaultInstance();
}

void InitDefaultsParkingSlotRaw() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParkingSlotRawImpl);
}

void InitDefaultsIpmWheelGroundPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector2f();
  {
    void* ptr = &::autodrive::workflow::proto::_IpmWheelGroundPoint_default_instance_;
    new (ptr) ::autodrive::workflow::proto::IpmWheelGroundPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::IpmWheelGroundPoint::InitAsDefaultInstance();
}

void InitDefaultsIpmWheelGroundPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIpmWheelGroundPointImpl);
}

void InitDefaultsIpmMultitaskMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_ipm_5fmultitask_2eproto::InitDefaultsParkingSlotRaw();
  protobuf_ipm_5fmultitask_2eproto::InitDefaultsIpmWheelGroundPoint();
  {
    void* ptr = &::autodrive::workflow::proto::_IpmMultitaskMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::IpmMultitaskMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::IpmMultitaskMsg::InitAsDefaultInstance();
}

void InitDefaultsIpmMultitaskMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIpmMultitaskMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotPoint, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotPoint, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotPoint, point_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotPoint, visibility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotPoint, point_orientation_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotPoint, point_orientation_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotRaw, slot_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotRaw, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotRaw, occupancy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotRaw, slot_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotRaw, slot_orientation_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotRaw, slot_orientation_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ParkingSlotRaw, corner_match_flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmWheelGroundPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmWheelGroundPoint, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmWheelGroundPoint, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmMultitaskMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmMultitaskMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmMultitaskMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmMultitaskMsg, slots_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmMultitaskMsg, ipm_wheel_ground_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::IpmMultitaskMsg, test_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::ParkingSlotPoint)},
  { 11, -1, sizeof(::autodrive::workflow::proto::ParkingSlotRaw)},
  { 23, -1, sizeof(::autodrive::workflow::proto::IpmWheelGroundPoint)},
  { 30, -1, sizeof(::autodrive::workflow::proto::IpmMultitaskMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ParkingSlotPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ParkingSlotRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_IpmWheelGroundPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_IpmMultitaskMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ipm_multitask.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023ipm_multitask.proto\022\030autodrive.workflo"
      "w.proto\032\013basic.proto\032\014common.proto\032\022pars"
      "ing_base.proto\"\346\001\n\020ParkingSlotPoint\0221\n\005p"
      "oint\030\001 \001(\0132\".autodrive.workflow.proto.Ve"
      "ctor2f\022\r\n\005score\030\002 \001(\002\022B\n\npoint_type\030\003 \001("
      "\0162..autodrive.workflow.proto.ParkingSlot"
      "PointType\022\022\n\nvisibility\030\004 \001(\010\022\033\n\023point_o"
      "rientation_x\030\005 \001(\002\022\033\n\023point_orientation_"
      "y\030\006 \001(\002\"\204\002\n\016ParkingSlotRaw\022\?\n\013slot_point"
      "s\030\001 \003(\0132*.autodrive.workflow.proto.Parki"
      "ngSlotPoint\022\r\n\005score\030\002 \001(\002\022\021\n\toccupancy\030"
      "\003 \001(\010\022<\n\tslot_type\030\004 \001(\0162).autodrive.wor"
      "kflow.proto.ParkingSlotType\022\032\n\022slot_orie"
      "ntation_x\030\005 \001(\002\022\032\n\022slot_orientation_y\030\006 "
      "\001(\002\022\031\n\021corner_match_flag\030\007 \001(\005\"W\n\023IpmWhe"
      "elGroundPoint\0221\n\005point\030\001 \001(\0132\".autodrive"
      ".workflow.proto.Vector2f\022\r\n\005score\030\002 \001(\002\""
      "\221\002\n\017IpmMultitaskMsg\0223\n\006header\030\001 \001(\0132#.au"
      "todrive.workflow.proto.MsgHeader\022.\n\005erro"
      "r\030\002 \001(\0132\037.autodrive.workflow.proto.Error"
      "\022;\n\tslots_raw\030\003 \003(\0132(.autodrive.workflow"
      ".proto.ParkingSlotRaw\022N\n\027ipm_wheel_groun"
      "d_points\030\004 \003(\0132-.autodrive.workflow.prot"
      "o.IpmWheelGroundPoint\022\014\n\004test\030\005 \001(\002*[\n\024P"
      "arkingSlotPointType\022\"\n\036kParkingSlotPoint"
      "TypeTruncated\020\000\022\037\n\033kParkingSlotPointType"
      "Corner\020\001*\207\001\n\017ParkingSlotType\022\033\n\027kParking"
      "SlotTypeUnknown\020\000\022\034\n\030kParkingSlotTypeVer"
      "tical\020\001\022\034\n\030kParkingSlotTypeParallel\020\002\022\033\n"
      "\027kParkingSlotTypeOblique\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipm_multitask.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_parsing_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ipm_5fmultitask_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* ParkingSlotPointType_descriptor() {
  protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ipm_5fmultitask_2eproto::file_level_enum_descriptors[0];
}
bool ParkingSlotPointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParkingSlotType_descriptor() {
  protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ipm_5fmultitask_2eproto::file_level_enum_descriptors[1];
}
bool ParkingSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ParkingSlotPoint::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ParkingSlotPoint_default_instance_._instance.get_mutable()->point_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
}
void ParkingSlotPoint::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingSlotPoint::kPointFieldNumber;
const int ParkingSlotPoint::kScoreFieldNumber;
const int ParkingSlotPoint::kPointTypeFieldNumber;
const int ParkingSlotPoint::kVisibilityFieldNumber;
const int ParkingSlotPoint::kPointOrientationXFieldNumber;
const int ParkingSlotPoint::kPointOrientationYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingSlotPoint::ParkingSlotPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsParkingSlotPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ParkingSlotPoint)
}
ParkingSlotPoint::ParkingSlotPoint(const ParkingSlotPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::autodrive::workflow::proto::Vector2f(*from.point_);
  } else {
    point_ = NULL;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_orientation_y_) -
    reinterpret_cast<char*>(&score_)) + sizeof(point_orientation_y_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ParkingSlotPoint)
}

void ParkingSlotPoint::SharedCtor() {
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_orientation_y_) -
      reinterpret_cast<char*>(&point_)) + sizeof(point_orientation_y_));
  _cached_size_ = 0;
}

ParkingSlotPoint::~ParkingSlotPoint() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ParkingSlotPoint)
  SharedDtor();
}

void ParkingSlotPoint::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
}

void ParkingSlotPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingSlotPoint::descriptor() {
  ::protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingSlotPoint& ParkingSlotPoint::default_instance() {
  ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsParkingSlotPoint();
  return *internal_default_instance();
}

ParkingSlotPoint* ParkingSlotPoint::New(::google::protobuf::Arena* arena) const {
  ParkingSlotPoint* n = new ParkingSlotPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingSlotPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ParkingSlotPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_orientation_y_) -
      reinterpret_cast<char*>(&score_)) + sizeof(point_orientation_y_));
  _internal_metadata_.Clear();
}

bool ParkingSlotPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ParkingSlotPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.Vector2f point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ParkingSlotPointType point_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_point_type(static_cast< ::autodrive::workflow::proto::ParkingSlotPointType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool visibility = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float point_orientation_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &point_orientation_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float point_orientation_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &point_orientation_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ParkingSlotPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ParkingSlotPoint)
  return false;
#undef DO_
}

void ParkingSlotPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ParkingSlotPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector2f point = 1;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // float score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // .autodrive.workflow.proto.ParkingSlotPointType point_type = 3;
  if (this->point_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->point_type(), output);
  }

  // bool visibility = 4;
  if (this->visibility() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->visibility(), output);
  }

  // float point_orientation_x = 5;
  if (this->point_orientation_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->point_orientation_x(), output);
  }

  // float point_orientation_y = 6;
  if (this->point_orientation_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->point_orientation_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ParkingSlotPoint)
}

::google::protobuf::uint8* ParkingSlotPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ParkingSlotPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector2f point = 1;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->point_, deterministic, target);
  }

  // float score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // .autodrive.workflow.proto.ParkingSlotPointType point_type = 3;
  if (this->point_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->point_type(), target);
  }

  // bool visibility = 4;
  if (this->visibility() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->visibility(), target);
  }

  // float point_orientation_x = 5;
  if (this->point_orientation_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->point_orientation_x(), target);
  }

  // float point_orientation_y = 6;
  if (this->point_orientation_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->point_orientation_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ParkingSlotPoint)
  return target;
}

size_t ParkingSlotPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ParkingSlotPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector2f point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->point_);
  }

  // float score = 2;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  // .autodrive.workflow.proto.ParkingSlotPointType point_type = 3;
  if (this->point_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->point_type());
  }

  // bool visibility = 4;
  if (this->visibility() != 0) {
    total_size += 1 + 1;
  }

  // float point_orientation_x = 5;
  if (this->point_orientation_x() != 0) {
    total_size += 1 + 4;
  }

  // float point_orientation_y = 6;
  if (this->point_orientation_y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingSlotPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ParkingSlotPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSlotPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingSlotPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ParkingSlotPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ParkingSlotPoint)
    MergeFrom(*source);
  }
}

void ParkingSlotPoint::MergeFrom(const ParkingSlotPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ParkingSlotPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.point());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.point_type() != 0) {
    set_point_type(from.point_type());
  }
  if (from.visibility() != 0) {
    set_visibility(from.visibility());
  }
  if (from.point_orientation_x() != 0) {
    set_point_orientation_x(from.point_orientation_x());
  }
  if (from.point_orientation_y() != 0) {
    set_point_orientation_y(from.point_orientation_y());
  }
}

void ParkingSlotPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ParkingSlotPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSlotPoint::CopyFrom(const ParkingSlotPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ParkingSlotPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSlotPoint::IsInitialized() const {
  return true;
}

void ParkingSlotPoint::Swap(ParkingSlotPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingSlotPoint::InternalSwap(ParkingSlotPoint* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(score_, other->score_);
  swap(point_type_, other->point_type_);
  swap(visibility_, other->visibility_);
  swap(point_orientation_x_, other->point_orientation_x_);
  swap(point_orientation_y_, other->point_orientation_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingSlotPoint::GetMetadata() const {
  protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkingSlotRaw::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingSlotRaw::kSlotPointsFieldNumber;
const int ParkingSlotRaw::kScoreFieldNumber;
const int ParkingSlotRaw::kOccupancyFieldNumber;
const int ParkingSlotRaw::kSlotTypeFieldNumber;
const int ParkingSlotRaw::kSlotOrientationXFieldNumber;
const int ParkingSlotRaw::kSlotOrientationYFieldNumber;
const int ParkingSlotRaw::kCornerMatchFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingSlotRaw::ParkingSlotRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsParkingSlotRaw();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ParkingSlotRaw)
}
ParkingSlotRaw::ParkingSlotRaw(const ParkingSlotRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slot_points_(from.slot_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&corner_match_flag_) -
    reinterpret_cast<char*>(&score_)) + sizeof(corner_match_flag_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ParkingSlotRaw)
}

void ParkingSlotRaw::SharedCtor() {
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&corner_match_flag_) -
      reinterpret_cast<char*>(&score_)) + sizeof(corner_match_flag_));
  _cached_size_ = 0;
}

ParkingSlotRaw::~ParkingSlotRaw() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ParkingSlotRaw)
  SharedDtor();
}

void ParkingSlotRaw::SharedDtor() {
}

void ParkingSlotRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingSlotRaw::descriptor() {
  ::protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingSlotRaw& ParkingSlotRaw::default_instance() {
  ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsParkingSlotRaw();
  return *internal_default_instance();
}

ParkingSlotRaw* ParkingSlotRaw::New(::google::protobuf::Arena* arena) const {
  ParkingSlotRaw* n = new ParkingSlotRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingSlotRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ParkingSlotRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_points_.Clear();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&corner_match_flag_) -
      reinterpret_cast<char*>(&score_)) + sizeof(corner_match_flag_));
  _internal_metadata_.Clear();
}

bool ParkingSlotRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ParkingSlotRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.ParkingSlotPoint slot_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_slot_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool occupancy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &occupancy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ParkingSlotType slot_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_slot_type(static_cast< ::autodrive::workflow::proto::ParkingSlotType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float slot_orientation_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slot_orientation_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float slot_orientation_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slot_orientation_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 corner_match_flag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &corner_match_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ParkingSlotRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ParkingSlotRaw)
  return false;
#undef DO_
}

void ParkingSlotRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ParkingSlotRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.ParkingSlotPoint slot_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slot_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slot_points(static_cast<int>(i)), output);
  }

  // float score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // bool occupancy = 3;
  if (this->occupancy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->occupancy(), output);
  }

  // .autodrive.workflow.proto.ParkingSlotType slot_type = 4;
  if (this->slot_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->slot_type(), output);
  }

  // float slot_orientation_x = 5;
  if (this->slot_orientation_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->slot_orientation_x(), output);
  }

  // float slot_orientation_y = 6;
  if (this->slot_orientation_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->slot_orientation_y(), output);
  }

  // int32 corner_match_flag = 7;
  if (this->corner_match_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->corner_match_flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ParkingSlotRaw)
}

::google::protobuf::uint8* ParkingSlotRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ParkingSlotRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.ParkingSlotPoint slot_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slot_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->slot_points(static_cast<int>(i)), deterministic, target);
  }

  // float score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // bool occupancy = 3;
  if (this->occupancy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->occupancy(), target);
  }

  // .autodrive.workflow.proto.ParkingSlotType slot_type = 4;
  if (this->slot_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->slot_type(), target);
  }

  // float slot_orientation_x = 5;
  if (this->slot_orientation_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->slot_orientation_x(), target);
  }

  // float slot_orientation_y = 6;
  if (this->slot_orientation_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->slot_orientation_y(), target);
  }

  // int32 corner_match_flag = 7;
  if (this->corner_match_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->corner_match_flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ParkingSlotRaw)
  return target;
}

size_t ParkingSlotRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ParkingSlotRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.ParkingSlotPoint slot_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->slot_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->slot_points(static_cast<int>(i)));
    }
  }

  // float score = 2;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  // bool occupancy = 3;
  if (this->occupancy() != 0) {
    total_size += 1 + 1;
  }

  // .autodrive.workflow.proto.ParkingSlotType slot_type = 4;
  if (this->slot_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot_type());
  }

  // float slot_orientation_x = 5;
  if (this->slot_orientation_x() != 0) {
    total_size += 1 + 4;
  }

  // float slot_orientation_y = 6;
  if (this->slot_orientation_y() != 0) {
    total_size += 1 + 4;
  }

  // int32 corner_match_flag = 7;
  if (this->corner_match_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->corner_match_flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingSlotRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ParkingSlotRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSlotRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingSlotRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ParkingSlotRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ParkingSlotRaw)
    MergeFrom(*source);
  }
}

void ParkingSlotRaw::MergeFrom(const ParkingSlotRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ParkingSlotRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slot_points_.MergeFrom(from.slot_points_);
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.occupancy() != 0) {
    set_occupancy(from.occupancy());
  }
  if (from.slot_type() != 0) {
    set_slot_type(from.slot_type());
  }
  if (from.slot_orientation_x() != 0) {
    set_slot_orientation_x(from.slot_orientation_x());
  }
  if (from.slot_orientation_y() != 0) {
    set_slot_orientation_y(from.slot_orientation_y());
  }
  if (from.corner_match_flag() != 0) {
    set_corner_match_flag(from.corner_match_flag());
  }
}

void ParkingSlotRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ParkingSlotRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSlotRaw::CopyFrom(const ParkingSlotRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ParkingSlotRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSlotRaw::IsInitialized() const {
  return true;
}

void ParkingSlotRaw::Swap(ParkingSlotRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingSlotRaw::InternalSwap(ParkingSlotRaw* other) {
  using std::swap;
  slot_points_.InternalSwap(&other->slot_points_);
  swap(score_, other->score_);
  swap(occupancy_, other->occupancy_);
  swap(slot_type_, other->slot_type_);
  swap(slot_orientation_x_, other->slot_orientation_x_);
  swap(slot_orientation_y_, other->slot_orientation_y_);
  swap(corner_match_flag_, other->corner_match_flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingSlotRaw::GetMetadata() const {
  protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IpmWheelGroundPoint::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_IpmWheelGroundPoint_default_instance_._instance.get_mutable()->point_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
}
void IpmWheelGroundPoint::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpmWheelGroundPoint::kPointFieldNumber;
const int IpmWheelGroundPoint::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpmWheelGroundPoint::IpmWheelGroundPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsIpmWheelGroundPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.IpmWheelGroundPoint)
}
IpmWheelGroundPoint::IpmWheelGroundPoint(const IpmWheelGroundPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::autodrive::workflow::proto::Vector2f(*from.point_);
  } else {
    point_ = NULL;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.IpmWheelGroundPoint)
}

void IpmWheelGroundPoint::SharedCtor() {
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&point_)) + sizeof(score_));
  _cached_size_ = 0;
}

IpmWheelGroundPoint::~IpmWheelGroundPoint() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.IpmWheelGroundPoint)
  SharedDtor();
}

void IpmWheelGroundPoint::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
}

void IpmWheelGroundPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpmWheelGroundPoint::descriptor() {
  ::protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpmWheelGroundPoint& IpmWheelGroundPoint::default_instance() {
  ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsIpmWheelGroundPoint();
  return *internal_default_instance();
}

IpmWheelGroundPoint* IpmWheelGroundPoint::New(::google::protobuf::Arena* arena) const {
  IpmWheelGroundPoint* n = new IpmWheelGroundPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IpmWheelGroundPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.IpmWheelGroundPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
  score_ = 0;
  _internal_metadata_.Clear();
}

bool IpmWheelGroundPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.IpmWheelGroundPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.Vector2f point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.IpmWheelGroundPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.IpmWheelGroundPoint)
  return false;
#undef DO_
}

void IpmWheelGroundPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.IpmWheelGroundPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector2f point = 1;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // float score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.IpmWheelGroundPoint)
}

::google::protobuf::uint8* IpmWheelGroundPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.IpmWheelGroundPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector2f point = 1;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->point_, deterministic, target);
  }

  // float score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.IpmWheelGroundPoint)
  return target;
}

size_t IpmWheelGroundPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.IpmWheelGroundPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector2f point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->point_);
  }

  // float score = 2;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpmWheelGroundPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.IpmWheelGroundPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const IpmWheelGroundPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpmWheelGroundPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.IpmWheelGroundPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.IpmWheelGroundPoint)
    MergeFrom(*source);
  }
}

void IpmWheelGroundPoint::MergeFrom(const IpmWheelGroundPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.IpmWheelGroundPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.point());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void IpmWheelGroundPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.IpmWheelGroundPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpmWheelGroundPoint::CopyFrom(const IpmWheelGroundPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.IpmWheelGroundPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpmWheelGroundPoint::IsInitialized() const {
  return true;
}

void IpmWheelGroundPoint::Swap(IpmWheelGroundPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpmWheelGroundPoint::InternalSwap(IpmWheelGroundPoint* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IpmWheelGroundPoint::GetMetadata() const {
  protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IpmMultitaskMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_IpmMultitaskMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_IpmMultitaskMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void IpmMultitaskMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void IpmMultitaskMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpmMultitaskMsg::kHeaderFieldNumber;
const int IpmMultitaskMsg::kErrorFieldNumber;
const int IpmMultitaskMsg::kSlotsRawFieldNumber;
const int IpmMultitaskMsg::kIpmWheelGroundPointsFieldNumber;
const int IpmMultitaskMsg::kTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpmMultitaskMsg::IpmMultitaskMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsIpmMultitaskMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.IpmMultitaskMsg)
}
IpmMultitaskMsg::IpmMultitaskMsg(const IpmMultitaskMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slots_raw_(from.slots_raw_),
      ipm_wheel_ground_points_(from.ipm_wheel_ground_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.IpmMultitaskMsg)
}

void IpmMultitaskMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_) -
      reinterpret_cast<char*>(&header_)) + sizeof(test_));
  _cached_size_ = 0;
}

IpmMultitaskMsg::~IpmMultitaskMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.IpmMultitaskMsg)
  SharedDtor();
}

void IpmMultitaskMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void IpmMultitaskMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpmMultitaskMsg::descriptor() {
  ::protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpmMultitaskMsg& IpmMultitaskMsg::default_instance() {
  ::protobuf_ipm_5fmultitask_2eproto::InitDefaultsIpmMultitaskMsg();
  return *internal_default_instance();
}

IpmMultitaskMsg* IpmMultitaskMsg::New(::google::protobuf::Arena* arena) const {
  IpmMultitaskMsg* n = new IpmMultitaskMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IpmMultitaskMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.IpmMultitaskMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_raw_.Clear();
  ipm_wheel_ground_points_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  test_ = 0;
  _internal_metadata_.Clear();
}

bool IpmMultitaskMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.IpmMultitaskMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ParkingSlotRaw slots_raw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_slots_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.IpmWheelGroundPoint ipm_wheel_ground_points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ipm_wheel_ground_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float test = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &test_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.IpmMultitaskMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.IpmMultitaskMsg)
  return false;
#undef DO_
}

void IpmMultitaskMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.IpmMultitaskMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // repeated .autodrive.workflow.proto.ParkingSlotRaw slots_raw = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slots_raw_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slots_raw(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.IpmWheelGroundPoint ipm_wheel_ground_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ipm_wheel_ground_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ipm_wheel_ground_points(static_cast<int>(i)), output);
  }

  // float test = 5;
  if (this->test() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->test(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.IpmMultitaskMsg)
}

::google::protobuf::uint8* IpmMultitaskMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.IpmMultitaskMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // repeated .autodrive.workflow.proto.ParkingSlotRaw slots_raw = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slots_raw_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->slots_raw(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.IpmWheelGroundPoint ipm_wheel_ground_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ipm_wheel_ground_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->ipm_wheel_ground_points(static_cast<int>(i)), deterministic, target);
  }

  // float test = 5;
  if (this->test() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->test(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.IpmMultitaskMsg)
  return target;
}

size_t IpmMultitaskMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.IpmMultitaskMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.ParkingSlotRaw slots_raw = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->slots_raw_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->slots_raw(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.IpmWheelGroundPoint ipm_wheel_ground_points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ipm_wheel_ground_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ipm_wheel_ground_points(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // float test = 5;
  if (this->test() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpmMultitaskMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.IpmMultitaskMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const IpmMultitaskMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpmMultitaskMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.IpmMultitaskMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.IpmMultitaskMsg)
    MergeFrom(*source);
  }
}

void IpmMultitaskMsg::MergeFrom(const IpmMultitaskMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.IpmMultitaskMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_raw_.MergeFrom(from.slots_raw_);
  ipm_wheel_ground_points_.MergeFrom(from.ipm_wheel_ground_points_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.test() != 0) {
    set_test(from.test());
  }
}

void IpmMultitaskMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.IpmMultitaskMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpmMultitaskMsg::CopyFrom(const IpmMultitaskMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.IpmMultitaskMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpmMultitaskMsg::IsInitialized() const {
  return true;
}

void IpmMultitaskMsg::Swap(IpmMultitaskMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpmMultitaskMsg::InternalSwap(IpmMultitaskMsg* other) {
  using std::swap;
  slots_raw_.InternalSwap(&other->slots_raw_);
  ipm_wheel_ground_points_.InternalSwap(&other->ipm_wheel_ground_points_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(test_, other->test_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IpmMultitaskMsg::GetMetadata() const {
  protobuf_ipm_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ipm_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
