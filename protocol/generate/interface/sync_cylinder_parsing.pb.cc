// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_cylinder_parsing.proto

#include "sync_cylinder_parsing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class CylinderParsingImageDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CylinderParsingImageData>
      _instance;
} _CylinderParsingImageData_default_instance_;
class CylinderParsingDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CylinderParsingData>
      _instance;
} _CylinderParsingData_default_instance_;
class SyncCylinderParsingMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncCylinderParsingMsg>
      _instance;
} _SyncCylinderParsingMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_sync_5fcylinder_5fparsing_2eproto {
void InitDefaultsCylinderParsingImageDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_CylinderParsingImageData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::CylinderParsingImageData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::CylinderParsingImageData::InitAsDefaultInstance();
}

void InitDefaultsCylinderParsingImageData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCylinderParsingImageDataImpl);
}

void InitDefaultsCylinderParsingDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsCylinderParsingImageData();
  protobuf_parsing_5fbase_2eproto::InitDefaultsRleCompressedData();
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  {
    void* ptr = &::autodrive::workflow::proto::_CylinderParsingData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::CylinderParsingData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::CylinderParsingData::InitAsDefaultInstance();
}

void InitDefaultsCylinderParsingData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCylinderParsingDataImpl);
}

void InitDefaultsSyncCylinderParsingMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsCylinderParsingData();
  {
    void* ptr = &::autodrive::workflow::proto::_SyncCylinderParsingMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::SyncCylinderParsingMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::SyncCylinderParsingMsg::InitAsDefaultInstance();
}

void InitDefaultsSyncCylinderParsingMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSyncCylinderParsingMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingImageData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingImageData, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingImageData, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingImageData, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingData, camera_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingData, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingData, free_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingData, feature_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingData, rle_parsing_compressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::CylinderParsingData, roi_output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SyncCylinderParsingMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SyncCylinderParsingMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SyncCylinderParsingMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SyncCylinderParsingMsg, cylinder_parsing_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::CylinderParsingImageData)},
  { 9, -1, sizeof(::autodrive::workflow::proto::CylinderParsingData)},
  { 20, -1, sizeof(::autodrive::workflow::proto::SyncCylinderParsingMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_CylinderParsingImageData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_CylinderParsingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_SyncCylinderParsingMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sync_cylinder_parsing.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033sync_cylinder_parsing.proto\022\030autodrive"
      ".workflow.proto\032\014common.proto\032\025perceptio"
      "n_base.proto\032\022parsing_base.proto\"X\n\030Cyli"
      "nderParsingImageData\022\014\n\004data\030\001 \001(\014\022\r\n\005wi"
      "dth\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\017\n\007channel\030\004 \001"
      "(\r\"\332\002\n\023CylinderParsingData\022\022\n\ncamera_idx"
      "\030\001 \001(\r\022\r\n\005scale\030\002 \001(\002\022F\n\nfree_space\030\003 \001("
      "\01322.autodrive.workflow.proto.CylinderPar"
      "singImageData\022G\n\013feature_map\030\004 \001(\01322.aut"
      "odrive.workflow.proto.CylinderParsingIma"
      "geData\022K\n\026rle_parsing_compressed\030\005 \001(\0132+"
      ".autodrive.workflow.proto.RleCompressedD"
      "ata\022B\n\nroi_output\030\006 \001(\0132..autodrive.work"
      "flow.proto.perception_base.Rect\"\313\001\n\026Sync"
      "CylinderParsingMsg\0223\n\006header\030\001 \001(\0132#.aut"
      "odrive.workflow.proto.MsgHeader\022.\n\005error"
      "\030\002 \001(\0132\037.autodrive.workflow.proto.Error\022"
      "L\n\025cylinder_parsing_data\030\003 \003(\0132-.autodri"
      "ve.workflow.proto.CylinderParsingData*\261\003"
      "\n\024CylinderParsingLabel\022\t\n\005kRoad\020\000\022\r\n\tkSi"
      "dewalk\020\001\022\010\n\004kSky\020\002\022\014\n\010kTerrain\020\003\022\t\n\005kCur"
      "b\020\004\022\n\n\006kFence\020\005\022\t\n\005kTree\020\006\022\t\n\005kPole\020\007\022\020\n"
      "\014kTrafficSign\020\010\022\014\n\010kVehicle\020\t\022\017\n\013kThreeW"
      "heel\020\n\022\r\n\tkTwoWheel\020\013\022\013\n\007kPerson\020\014\022\n\n\006kR"
      "ider\020\r\022\014\n\010kTrolley\020\016\022\020\n\014kTrafficCone\020\017\022\014"
      "\n\010kBollard\020\020\022\027\n\023kFoldingWarningSign\020\021\022\027\n"
      "\023kSingleWaterBarrier\020\022\022\022\n\016kUntraversable"
      "\020\023\022\017\n\013kParkingRod\020\024\022\020\n\014kParkingLock\020\025\022\021\n"
      "\rkCementColumn\020\026\022\017\n\013kbackground\020\027\022\020\n\014kFi"
      "reHydrant\020\030\022\024\n\020kPaintedWallRoot\020\031b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sync_cylinder_parsing.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
  ::protobuf_parsing_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sync_5fcylinder_5fparsing_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* CylinderParsingLabel_descriptor() {
  protobuf_sync_5fcylinder_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sync_5fcylinder_5fparsing_2eproto::file_level_enum_descriptors[0];
}
bool CylinderParsingLabel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CylinderParsingImageData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CylinderParsingImageData::kDataFieldNumber;
const int CylinderParsingImageData::kWidthFieldNumber;
const int CylinderParsingImageData::kHeightFieldNumber;
const int CylinderParsingImageData::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CylinderParsingImageData::CylinderParsingImageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsCylinderParsingImageData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.CylinderParsingImageData)
}
CylinderParsingImageData::CylinderParsingImageData(const CylinderParsingImageData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.CylinderParsingImageData)
}

void CylinderParsingImageData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  _cached_size_ = 0;
}

CylinderParsingImageData::~CylinderParsingImageData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.CylinderParsingImageData)
  SharedDtor();
}

void CylinderParsingImageData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CylinderParsingImageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CylinderParsingImageData::descriptor() {
  ::protobuf_sync_5fcylinder_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sync_5fcylinder_5fparsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CylinderParsingImageData& CylinderParsingImageData::default_instance() {
  ::protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsCylinderParsingImageData();
  return *internal_default_instance();
}

CylinderParsingImageData* CylinderParsingImageData::New(::google::protobuf::Arena* arena) const {
  CylinderParsingImageData* n = new CylinderParsingImageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CylinderParsingImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.CylinderParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

bool CylinderParsingImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.CylinderParsingImageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.CylinderParsingImageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.CylinderParsingImageData)
  return false;
#undef DO_
}

void CylinderParsingImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.CylinderParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.CylinderParsingImageData)
}

::google::protobuf::uint8* CylinderParsingImageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.CylinderParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.CylinderParsingImageData)
  return target;
}

size_t CylinderParsingImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.CylinderParsingImageData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CylinderParsingImageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.CylinderParsingImageData)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderParsingImageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CylinderParsingImageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.CylinderParsingImageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.CylinderParsingImageData)
    MergeFrom(*source);
  }
}

void CylinderParsingImageData::MergeFrom(const CylinderParsingImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.CylinderParsingImageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void CylinderParsingImageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.CylinderParsingImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderParsingImageData::CopyFrom(const CylinderParsingImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.CylinderParsingImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderParsingImageData::IsInitialized() const {
  return true;
}

void CylinderParsingImageData::Swap(CylinderParsingImageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CylinderParsingImageData::InternalSwap(CylinderParsingImageData* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CylinderParsingImageData::GetMetadata() const {
  protobuf_sync_5fcylinder_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sync_5fcylinder_5fparsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CylinderParsingData::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_CylinderParsingData_default_instance_._instance.get_mutable()->free_space_ = const_cast< ::autodrive::workflow::proto::CylinderParsingImageData*>(
      ::autodrive::workflow::proto::CylinderParsingImageData::internal_default_instance());
  ::autodrive::workflow::proto::_CylinderParsingData_default_instance_._instance.get_mutable()->feature_map_ = const_cast< ::autodrive::workflow::proto::CylinderParsingImageData*>(
      ::autodrive::workflow::proto::CylinderParsingImageData::internal_default_instance());
  ::autodrive::workflow::proto::_CylinderParsingData_default_instance_._instance.get_mutable()->rle_parsing_compressed_ = const_cast< ::autodrive::workflow::proto::RleCompressedData*>(
      ::autodrive::workflow::proto::RleCompressedData::internal_default_instance());
  ::autodrive::workflow::proto::_CylinderParsingData_default_instance_._instance.get_mutable()->roi_output_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
void CylinderParsingData::clear_rle_parsing_compressed() {
  if (GetArenaNoVirtual() == NULL && rle_parsing_compressed_ != NULL) {
    delete rle_parsing_compressed_;
  }
  rle_parsing_compressed_ = NULL;
}
void CylinderParsingData::clear_roi_output() {
  if (GetArenaNoVirtual() == NULL && roi_output_ != NULL) {
    delete roi_output_;
  }
  roi_output_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CylinderParsingData::kCameraIdxFieldNumber;
const int CylinderParsingData::kScaleFieldNumber;
const int CylinderParsingData::kFreeSpaceFieldNumber;
const int CylinderParsingData::kFeatureMapFieldNumber;
const int CylinderParsingData::kRleParsingCompressedFieldNumber;
const int CylinderParsingData::kRoiOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CylinderParsingData::CylinderParsingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsCylinderParsingData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.CylinderParsingData)
}
CylinderParsingData::CylinderParsingData(const CylinderParsingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_free_space()) {
    free_space_ = new ::autodrive::workflow::proto::CylinderParsingImageData(*from.free_space_);
  } else {
    free_space_ = NULL;
  }
  if (from.has_feature_map()) {
    feature_map_ = new ::autodrive::workflow::proto::CylinderParsingImageData(*from.feature_map_);
  } else {
    feature_map_ = NULL;
  }
  if (from.has_rle_parsing_compressed()) {
    rle_parsing_compressed_ = new ::autodrive::workflow::proto::RleCompressedData(*from.rle_parsing_compressed_);
  } else {
    rle_parsing_compressed_ = NULL;
  }
  if (from.has_roi_output()) {
    roi_output_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.roi_output_);
  } else {
    roi_output_ = NULL;
  }
  ::memcpy(&camera_idx_, &from.camera_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&camera_idx_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.CylinderParsingData)
}

void CylinderParsingData::SharedCtor() {
  ::memset(&free_space_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&free_space_)) + sizeof(scale_));
  _cached_size_ = 0;
}

CylinderParsingData::~CylinderParsingData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.CylinderParsingData)
  SharedDtor();
}

void CylinderParsingData::SharedDtor() {
  if (this != internal_default_instance()) delete free_space_;
  if (this != internal_default_instance()) delete feature_map_;
  if (this != internal_default_instance()) delete rle_parsing_compressed_;
  if (this != internal_default_instance()) delete roi_output_;
}

void CylinderParsingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CylinderParsingData::descriptor() {
  ::protobuf_sync_5fcylinder_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sync_5fcylinder_5fparsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CylinderParsingData& CylinderParsingData::default_instance() {
  ::protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsCylinderParsingData();
  return *internal_default_instance();
}

CylinderParsingData* CylinderParsingData::New(::google::protobuf::Arena* arena) const {
  CylinderParsingData* n = new CylinderParsingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CylinderParsingData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.CylinderParsingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && free_space_ != NULL) {
    delete free_space_;
  }
  free_space_ = NULL;
  if (GetArenaNoVirtual() == NULL && feature_map_ != NULL) {
    delete feature_map_;
  }
  feature_map_ = NULL;
  if (GetArenaNoVirtual() == NULL && rle_parsing_compressed_ != NULL) {
    delete rle_parsing_compressed_;
  }
  rle_parsing_compressed_ = NULL;
  if (GetArenaNoVirtual() == NULL && roi_output_ != NULL) {
    delete roi_output_;
  }
  roi_output_ = NULL;
  ::memset(&camera_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&camera_idx_)) + sizeof(scale_));
  _internal_metadata_.Clear();
}

bool CylinderParsingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.CylinderParsingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 camera_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.CylinderParsingImageData free_space = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_free_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.CylinderParsingImageData feature_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rle_parsing_compressed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Rect roi_output = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roi_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.CylinderParsingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.CylinderParsingData)
  return false;
#undef DO_
}

void CylinderParsingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.CylinderParsingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camera_idx = 1;
  if (this->camera_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_idx(), output);
  }

  // float scale = 2;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // .autodrive.workflow.proto.CylinderParsingImageData free_space = 3;
  if (this->has_free_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->free_space_, output);
  }

  // .autodrive.workflow.proto.CylinderParsingImageData feature_map = 4;
  if (this->has_feature_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->feature_map_, output);
  }

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  if (this->has_rle_parsing_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rle_parsing_compressed_, output);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 6;
  if (this->has_roi_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->roi_output_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.CylinderParsingData)
}

::google::protobuf::uint8* CylinderParsingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.CylinderParsingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camera_idx = 1;
  if (this->camera_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_idx(), target);
  }

  // float scale = 2;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // .autodrive.workflow.proto.CylinderParsingImageData free_space = 3;
  if (this->has_free_space()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->free_space_, deterministic, target);
  }

  // .autodrive.workflow.proto.CylinderParsingImageData feature_map = 4;
  if (this->has_feature_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->feature_map_, deterministic, target);
  }

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  if (this->has_rle_parsing_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->rle_parsing_compressed_, deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 6;
  if (this->has_roi_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->roi_output_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.CylinderParsingData)
  return target;
}

size_t CylinderParsingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.CylinderParsingData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.CylinderParsingImageData free_space = 3;
  if (this->has_free_space()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->free_space_);
  }

  // .autodrive.workflow.proto.CylinderParsingImageData feature_map = 4;
  if (this->has_feature_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->feature_map_);
  }

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  if (this->has_rle_parsing_compressed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rle_parsing_compressed_);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 6;
  if (this->has_roi_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->roi_output_);
  }

  // uint32 camera_idx = 1;
  if (this->camera_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_idx());
  }

  // float scale = 2;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CylinderParsingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.CylinderParsingData)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderParsingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CylinderParsingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.CylinderParsingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.CylinderParsingData)
    MergeFrom(*source);
  }
}

void CylinderParsingData::MergeFrom(const CylinderParsingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.CylinderParsingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_free_space()) {
    mutable_free_space()->::autodrive::workflow::proto::CylinderParsingImageData::MergeFrom(from.free_space());
  }
  if (from.has_feature_map()) {
    mutable_feature_map()->::autodrive::workflow::proto::CylinderParsingImageData::MergeFrom(from.feature_map());
  }
  if (from.has_rle_parsing_compressed()) {
    mutable_rle_parsing_compressed()->::autodrive::workflow::proto::RleCompressedData::MergeFrom(from.rle_parsing_compressed());
  }
  if (from.has_roi_output()) {
    mutable_roi_output()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.roi_output());
  }
  if (from.camera_idx() != 0) {
    set_camera_idx(from.camera_idx());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void CylinderParsingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.CylinderParsingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderParsingData::CopyFrom(const CylinderParsingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.CylinderParsingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderParsingData::IsInitialized() const {
  return true;
}

void CylinderParsingData::Swap(CylinderParsingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CylinderParsingData::InternalSwap(CylinderParsingData* other) {
  using std::swap;
  swap(free_space_, other->free_space_);
  swap(feature_map_, other->feature_map_);
  swap(rle_parsing_compressed_, other->rle_parsing_compressed_);
  swap(roi_output_, other->roi_output_);
  swap(camera_idx_, other->camera_idx_);
  swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CylinderParsingData::GetMetadata() const {
  protobuf_sync_5fcylinder_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sync_5fcylinder_5fparsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SyncCylinderParsingMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_SyncCylinderParsingMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_SyncCylinderParsingMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void SyncCylinderParsingMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void SyncCylinderParsingMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncCylinderParsingMsg::kHeaderFieldNumber;
const int SyncCylinderParsingMsg::kErrorFieldNumber;
const int SyncCylinderParsingMsg::kCylinderParsingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncCylinderParsingMsg::SyncCylinderParsingMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsSyncCylinderParsingMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.SyncCylinderParsingMsg)
}
SyncCylinderParsingMsg::SyncCylinderParsingMsg(const SyncCylinderParsingMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cylinder_parsing_data_(from.cylinder_parsing_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.SyncCylinderParsingMsg)
}

void SyncCylinderParsingMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&header_)) + sizeof(error_));
  _cached_size_ = 0;
}

SyncCylinderParsingMsg::~SyncCylinderParsingMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.SyncCylinderParsingMsg)
  SharedDtor();
}

void SyncCylinderParsingMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void SyncCylinderParsingMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncCylinderParsingMsg::descriptor() {
  ::protobuf_sync_5fcylinder_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sync_5fcylinder_5fparsing_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncCylinderParsingMsg& SyncCylinderParsingMsg::default_instance() {
  ::protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsSyncCylinderParsingMsg();
  return *internal_default_instance();
}

SyncCylinderParsingMsg* SyncCylinderParsingMsg::New(::google::protobuf::Arena* arena) const {
  SyncCylinderParsingMsg* n = new SyncCylinderParsingMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncCylinderParsingMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.SyncCylinderParsingMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cylinder_parsing_data_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool SyncCylinderParsingMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.SyncCylinderParsingMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.CylinderParsingData cylinder_parsing_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cylinder_parsing_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.SyncCylinderParsingMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.SyncCylinderParsingMsg)
  return false;
#undef DO_
}

void SyncCylinderParsingMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.SyncCylinderParsingMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // repeated .autodrive.workflow.proto.CylinderParsingData cylinder_parsing_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cylinder_parsing_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cylinder_parsing_data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.SyncCylinderParsingMsg)
}

::google::protobuf::uint8* SyncCylinderParsingMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.SyncCylinderParsingMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // repeated .autodrive.workflow.proto.CylinderParsingData cylinder_parsing_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cylinder_parsing_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cylinder_parsing_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.SyncCylinderParsingMsg)
  return target;
}

size_t SyncCylinderParsingMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.SyncCylinderParsingMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.CylinderParsingData cylinder_parsing_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cylinder_parsing_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cylinder_parsing_data(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncCylinderParsingMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.SyncCylinderParsingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncCylinderParsingMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncCylinderParsingMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.SyncCylinderParsingMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.SyncCylinderParsingMsg)
    MergeFrom(*source);
  }
}

void SyncCylinderParsingMsg::MergeFrom(const SyncCylinderParsingMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.SyncCylinderParsingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cylinder_parsing_data_.MergeFrom(from.cylinder_parsing_data_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
}

void SyncCylinderParsingMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.SyncCylinderParsingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncCylinderParsingMsg::CopyFrom(const SyncCylinderParsingMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.SyncCylinderParsingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncCylinderParsingMsg::IsInitialized() const {
  return true;
}

void SyncCylinderParsingMsg::Swap(SyncCylinderParsingMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncCylinderParsingMsg::InternalSwap(SyncCylinderParsingMsg* other) {
  using std::swap;
  cylinder_parsing_data_.InternalSwap(&other->cylinder_parsing_data_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncCylinderParsingMsg::GetMetadata() const {
  protobuf_sync_5fcylinder_5fparsing_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sync_5fcylinder_5fparsing_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
