// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_hpa_render.proto

#include "hmi_hpa_render.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class HmiFusionObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiFusionObstacle>
      _instance;
} _HmiFusionObstacle_default_instance_;
class HmiLocalizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiLocalization>
      _instance;
} _HmiLocalization_default_instance_;
class HmiGlbPrcpPrkgSlotsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiGlbPrcpPrkgSlots>
      _instance;
} _HmiGlbPrcpPrkgSlots_default_instance_;
class HmiGlbPrcpObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiGlbPrcpObstacle>
      _instance;
} _HmiGlbPrcpObstacle_default_instance_;
class HmiMapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiMapInfo>
      _instance;
} _HmiMapInfo_default_instance_;
class HmiMapDisplayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiMapDisplay>
      _instance;
} _HmiMapDisplay_default_instance_;
class HmiVpaStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiVpaState>
      _instance;
} _HmiVpaState_default_instance_;
class HmiHpaRenderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiHpaRender>
      _instance;
} _HmiHpaRender_default_instance_;
class HmiHpaRenderMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiHpaRenderMsg>
      _instance;
} _HmiHpaRenderMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_hmi_5fhpa_5frender_2eproto {
void InitDefaultsHmiFusionObstacleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_fusion_5fobstacle_2eproto::InitDefaultsFusionObstacleOutPut();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiFusionObstacle_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiFusionObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiFusionObstacle::InitAsDefaultInstance();
}

void InitDefaultsHmiFusionObstacle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiFusionObstacleImpl);
}

void InitDefaultsHmiLocalizationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ndm_5fbase_2eproto::InitDefaultsNdmSpec();
  protobuf_localization_2eproto::InitDefaultsSpLocation();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiLocalization_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiLocalization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiLocalization::InitAsDefaultInstance();
}

void InitDefaultsHmiLocalization() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiLocalizationImpl);
}

void InitDefaultsHmiGlbPrcpPrkgSlotsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fdisplay_2eproto::InitDefaultsGlbPrkgSlot();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiGlbPrcpPrkgSlots_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiGlbPrcpPrkgSlots();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiGlbPrcpPrkgSlots::InitAsDefaultInstance();
}

void InitDefaultsHmiGlbPrcpPrkgSlots() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiGlbPrcpPrkgSlotsImpl);
}

void InitDefaultsHmiGlbPrcpObstacleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fdisplay_2eproto::InitDefaultsGlbObstacle();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiGlbPrcpObstacle_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiGlbPrcpObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiGlbPrcpObstacle::InitAsDefaultInstance();
}

void InitDefaultsHmiGlbPrcpObstacle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiGlbPrcpObstacleImpl);
}

void InitDefaultsHmiMapInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fdisplay_2eproto::InitDefaultsMapCommonHeader();
  protobuf_map_5fdisplay_2eproto::InitDefaultsGlbTrajectory();
  protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiGlbPrcpPrkgSlots();
  protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiGlbPrcpObstacle();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiMapInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiMapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiMapInfo::InitAsDefaultInstance();
}

void InitDefaultsHmiMapInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiMapInfoImpl);
}

void InitDefaultsHmiMapDisplayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiMapInfo();
  protobuf_map_5fdisplay_2eproto::InitDefaultsMapCommonHeader();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiMapDisplay_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiMapDisplay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiMapDisplay::InitAsDefaultInstance();
}

void InitDefaultsHmiMapDisplay() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiMapDisplayImpl);
}

void InitDefaultsHmiVpaStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_HmiVpaState_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiVpaState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiVpaState::InitAsDefaultInstance();
}

void InitDefaultsHmiVpaState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiVpaStateImpl);
}

void InitDefaultsHmiHpaRenderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiFusionObstacle();
  protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiLocalization();
  protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiMapDisplay();
  protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiVpaState();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiHpaRender_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiHpaRender();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiHpaRender::InitAsDefaultInstance();
}

void InitDefaultsHmiHpaRender() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiHpaRenderImpl);
}

void InitDefaultsHmiHpaRenderMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiHpaRender();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiHpaRenderMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiHpaRenderMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiHpaRenderMsg::InitAsDefaultInstance();
}

void InitDefaultsHmiHpaRenderMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiHpaRenderMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiFusionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiFusionObstacle, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiFusionObstacle, obstacle_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiLocalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiLocalization, ndm_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiLocalization, location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiGlbPrcpPrkgSlots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiGlbPrcpPrkgSlots, glb_prkg_slots_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiGlbPrcpObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiGlbPrcpObstacle, glb_prcp_obstacle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapInfo, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapInfo, global_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapInfo, global_percep_parking_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapInfo, global_perception_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapInfo, map_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapInfo, rest_map_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapInfo, num_speed_bumps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplay, map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplay, update_map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplay, num_maps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplay, new_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplay, is_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplay, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, vpa_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, hpa_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, mapping_odd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, loc_odd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, map_saving_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, local_loc_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, map_deleted_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, map_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, map_optimized_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, target_parking_slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, map_saving_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiVpaState, avaliable_map_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRender, obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRender, localization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRender, map_display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRender, vpa_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRenderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRenderMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRenderMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRenderMsg, hmi_hpa_render_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::HmiFusionObstacle)},
  { 7, -1, sizeof(::autodrive::workflow::proto::HmiLocalization)},
  { 14, -1, sizeof(::autodrive::workflow::proto::HmiGlbPrcpPrkgSlots)},
  { 20, -1, sizeof(::autodrive::workflow::proto::HmiGlbPrcpObstacle)},
  { 26, -1, sizeof(::autodrive::workflow::proto::HmiMapInfo)},
  { 38, -1, sizeof(::autodrive::workflow::proto::HmiMapDisplay)},
  { 49, -1, sizeof(::autodrive::workflow::proto::HmiVpaState)},
  { 67, -1, sizeof(::autodrive::workflow::proto::HmiHpaRender)},
  { 76, -1, sizeof(::autodrive::workflow::proto::HmiHpaRenderMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiFusionObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiLocalization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiGlbPrcpPrkgSlots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiGlbPrcpObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiMapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiMapDisplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiVpaState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiHpaRender_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiHpaRenderMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hmi_hpa_render.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024hmi_hpa_render.proto\022\030autodrive.workfl"
      "ow.proto\032\014common.proto\032\025fusion_obstacle."
      "proto\032\022localization.proto\032\021map_display.p"
      "roto\032\017vpa_state.proto\032\016ndm_base.proto\"m\n"
      "\021HmiFusionObstacle\022\021\n\ttimestamp\030\001 \001(\003\022E\n"
      "\robstacle_list\030\002 \003(\0132..autodrive.workflo"
      "w.proto.FusionObstacleOutPut\"\211\001\n\017HmiLoca"
      "lization\022>\n\nndm_header\030\001 \001(\0132*.autodrive"
      ".workflow.proto.ndm_base.NdmSpec\0226\n\010loca"
      "tion\030\002 \001(\0132$.autodrive.workflow.proto.Sp"
      "Location\"T\n\023HmiGlbPrcpPrkgSlots\022=\n\016glb_p"
      "rkg_slots\030\001 \003(\0132%.autodrive.workflow.pro"
      "to.GlbPrkgSlot\"V\n\022HmiGlbPrcpObstacle\022@\n\021"
      "glb_prcp_obstacle\030\001 \003(\0132%.autodrive.work"
      "flow.proto.GlbObstacle\"\373\002\n\nHmiMapInfo\0229\n"
      "\006header\030\001 \001(\0132).autodrive.workflow.proto"
      ".MapCommonHeader\022B\n\021global_trajectory\030\002 "
      "\001(\0132\'.autodrive.workflow.proto.GlbTrajec"
      "tory\022R\n\033global_percep_parking_slots\030\003 \001("
      "\0132-.autodrive.workflow.proto.HmiGlbPrcpP"
      "rkgSlots\022P\n\032global_perception_obstacle\030\004"
      " \001(\0132,.autodrive.workflow.proto.HmiGlbPr"
      "cpObstacle\022\024\n\014map_distance\030\005 \001(\002\022\031\n\021rest"
      "_map_distance\030\006 \001(\002\022\027\n\017num_speed_bumps\030\007"
      " \001(\005\"\317\001\n\rHmiMapDisplay\0226\n\010map_info\030\001 \001(\013"
      "2$.autodrive.workflow.proto.HmiMapInfo\022\027"
      "\n\017update_map_info\030\002 \001(\010\022\020\n\010num_maps\030\003 \001("
      "\005\022\016\n\006new_id\030\004 \001(\005\022\020\n\010is_match\030\005 \001(\010\0229\n\006h"
      "eader\030\006 \001(\0132).autodrive.workflow.proto.M"
      "apCommonHeader\"\340\005\n\013HmiVpaState\0229\n\tvpa_ev"
      "ent\030\001 \001(\0162&.autodrive.workflow.proto.VPA"
      "EventType\0225\n\thpa_state\030\002 \001(\0162\".autodrive"
      ".workflow.proto.HPAState\022B\n\020mapping_odd_"
      "type\030\003 \001(\0162(.autodrive.workflow.proto.Ma"
      "ppingOddType\022:\n\014loc_odd_type\030\004 \001(\0162$.aut"
      "odrive.workflow.proto.LocOddType\022B\n\020map_"
      "saving_stage\030\005 \001(\0162(.autodrive.workflow."
      "proto.MapSavingStage\022@\n\017local_loc_stage\030"
      "\006 \001(\0162\'.autodrive.workflow.proto.LocalLo"
      "cStage\022E\n\021map_deleted_stage\030\007 \001(\0162*.auto"
      "drive.workflow.proto.MapDeletingStage\0229\n"
      "\tmap_stage\030\010 \001(\0162&.autodrive.workflow.pr"
      "oto.MappingStage\022G\n\023map_optimized_stage\030"
      "\t \001(\0162*.autodrive.workflow.proto.MapOpti"
      "mizeStage\0227\n\nerror_code\030\n \001(\0162#.autodriv"
      "e.workflow.proto.ErrorCode\022\036\n\026target_par"
      "king_slot_id\030\013 \001(\005\022\033\n\023map_saving_progres"
      "s\030\014 \001(\r\022\030\n\020avaliable_map_id\030\r \001(\r\"\207\002\n\014Hm"
      "iHpaRender\022>\n\tobstacles\030\001 \001(\0132+.autodriv"
      "e.workflow.proto.HmiFusionObstacle\022\?\n\014lo"
      "calization\030\002 \001(\0132).autodrive.workflow.pr"
      "oto.HmiLocalization\022<\n\013map_display\030\003 \001(\013"
      "2\'.autodrive.workflow.proto.HmiMapDispla"
      "y\0228\n\tvpa_state\030\004 \001(\0132%.autodrive.workflo"
      "w.proto.HmiVpaState\"\266\001\n\017HmiHpaRenderMsg\022"
      "3\n\006header\030\001 \001(\0132#.autodrive.workflow.pro"
      "to.MsgHeader\022.\n\005error\030\002 \001(\0132\037.autodrive."
      "workflow.proto.Error\022>\n\016hmi_hpa_render\030\003"
      " \001(\0132&.autodrive.workflow.proto.HmiHpaRe"
      "nderb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hmi_hpa_render.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_fusion_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_localization_2eproto::AddDescriptors();
  ::protobuf_map_5fdisplay_2eproto::AddDescriptors();
  ::protobuf_vpa_5fstate_2eproto::AddDescriptors();
  ::protobuf_ndm_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_hmi_5fhpa_5frender_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void HmiFusionObstacle::InitAsDefaultInstance() {
}
void HmiFusionObstacle::clear_obstacle_list() {
  obstacle_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiFusionObstacle::kTimestampFieldNumber;
const int HmiFusionObstacle::kObstacleListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiFusionObstacle::HmiFusionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiFusionObstacle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiFusionObstacle)
}
HmiFusionObstacle::HmiFusionObstacle(const HmiFusionObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obstacle_list_(from.obstacle_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiFusionObstacle)
}

void HmiFusionObstacle::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

HmiFusionObstacle::~HmiFusionObstacle() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiFusionObstacle)
  SharedDtor();
}

void HmiFusionObstacle::SharedDtor() {
}

void HmiFusionObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiFusionObstacle::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiFusionObstacle& HmiFusionObstacle::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiFusionObstacle();
  return *internal_default_instance();
}

HmiFusionObstacle* HmiFusionObstacle::New(::google::protobuf::Arena* arena) const {
  HmiFusionObstacle* n = new HmiFusionObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiFusionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiFusionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_list_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool HmiFusionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiFusionObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.FusionObstacleOutPut obstacle_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_obstacle_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiFusionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiFusionObstacle)
  return false;
#undef DO_
}

void HmiFusionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiFusionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // repeated .autodrive.workflow.proto.FusionObstacleOutPut obstacle_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obstacle_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiFusionObstacle)
}

::google::protobuf::uint8* HmiFusionObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiFusionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // repeated .autodrive.workflow.proto.FusionObstacleOutPut obstacle_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->obstacle_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiFusionObstacle)
  return target;
}

size_t HmiFusionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiFusionObstacle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.FusionObstacleOutPut obstacle_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle_list(static_cast<int>(i)));
    }
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiFusionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiFusionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiFusionObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiFusionObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiFusionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiFusionObstacle)
    MergeFrom(*source);
  }
}

void HmiFusionObstacle::MergeFrom(const HmiFusionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiFusionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_list_.MergeFrom(from.obstacle_list_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void HmiFusionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiFusionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiFusionObstacle::CopyFrom(const HmiFusionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiFusionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiFusionObstacle::IsInitialized() const {
  return true;
}

void HmiFusionObstacle::Swap(HmiFusionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiFusionObstacle::InternalSwap(HmiFusionObstacle* other) {
  using std::swap;
  obstacle_list_.InternalSwap(&other->obstacle_list_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiFusionObstacle::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiLocalization::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiLocalization_default_instance_._instance.get_mutable()->ndm_header_ = const_cast< ::autodrive::workflow::proto::ndm_base::NdmSpec*>(
      ::autodrive::workflow::proto::ndm_base::NdmSpec::internal_default_instance());
  ::autodrive::workflow::proto::_HmiLocalization_default_instance_._instance.get_mutable()->location_ = const_cast< ::autodrive::workflow::proto::SpLocation*>(
      ::autodrive::workflow::proto::SpLocation::internal_default_instance());
}
void HmiLocalization::clear_ndm_header() {
  if (GetArenaNoVirtual() == NULL && ndm_header_ != NULL) {
    delete ndm_header_;
  }
  ndm_header_ = NULL;
}
void HmiLocalization::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiLocalization::kNdmHeaderFieldNumber;
const int HmiLocalization::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiLocalization::HmiLocalization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiLocalization();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiLocalization)
}
HmiLocalization::HmiLocalization(const HmiLocalization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ndm_header()) {
    ndm_header_ = new ::autodrive::workflow::proto::ndm_base::NdmSpec(*from.ndm_header_);
  } else {
    ndm_header_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::autodrive::workflow::proto::SpLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiLocalization)
}

void HmiLocalization::SharedCtor() {
  ::memset(&ndm_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&ndm_header_)) + sizeof(location_));
  _cached_size_ = 0;
}

HmiLocalization::~HmiLocalization() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiLocalization)
  SharedDtor();
}

void HmiLocalization::SharedDtor() {
  if (this != internal_default_instance()) delete ndm_header_;
  if (this != internal_default_instance()) delete location_;
}

void HmiLocalization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiLocalization::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiLocalization& HmiLocalization::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiLocalization();
  return *internal_default_instance();
}

HmiLocalization* HmiLocalization::New(::google::protobuf::Arena* arena) const {
  HmiLocalization* n = new HmiLocalization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiLocalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ndm_header_ != NULL) {
    delete ndm_header_;
  }
  ndm_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  _internal_metadata_.Clear();
}

bool HmiLocalization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiLocalization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ndm_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SpLocation location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiLocalization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiLocalization)
  return false;
#undef DO_
}

void HmiLocalization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiLocalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 1;
  if (this->has_ndm_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ndm_header_, output);
  }

  // .autodrive.workflow.proto.SpLocation location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiLocalization)
}

::google::protobuf::uint8* HmiLocalization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiLocalization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 1;
  if (this->has_ndm_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->ndm_header_, deterministic, target);
  }

  // .autodrive.workflow.proto.SpLocation location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->location_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiLocalization)
  return target;
}

size_t HmiLocalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiLocalization)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 1;
  if (this->has_ndm_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ndm_header_);
  }

  // .autodrive.workflow.proto.SpLocation location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiLocalization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiLocalization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiLocalization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiLocalization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiLocalization)
    MergeFrom(*source);
  }
}

void HmiLocalization::MergeFrom(const HmiLocalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ndm_header()) {
    mutable_ndm_header()->::autodrive::workflow::proto::ndm_base::NdmSpec::MergeFrom(from.ndm_header());
  }
  if (from.has_location()) {
    mutable_location()->::autodrive::workflow::proto::SpLocation::MergeFrom(from.location());
  }
}

void HmiLocalization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiLocalization::CopyFrom(const HmiLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiLocalization::IsInitialized() const {
  return true;
}

void HmiLocalization::Swap(HmiLocalization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiLocalization::InternalSwap(HmiLocalization* other) {
  using std::swap;
  swap(ndm_header_, other->ndm_header_);
  swap(location_, other->location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiLocalization::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiGlbPrcpPrkgSlots::InitAsDefaultInstance() {
}
void HmiGlbPrcpPrkgSlots::clear_glb_prkg_slots() {
  glb_prkg_slots_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiGlbPrcpPrkgSlots::kGlbPrkgSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiGlbPrcpPrkgSlots::HmiGlbPrcpPrkgSlots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiGlbPrcpPrkgSlots();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
}
HmiGlbPrcpPrkgSlots::HmiGlbPrcpPrkgSlots(const HmiGlbPrcpPrkgSlots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      glb_prkg_slots_(from.glb_prkg_slots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
}

void HmiGlbPrcpPrkgSlots::SharedCtor() {
  _cached_size_ = 0;
}

HmiGlbPrcpPrkgSlots::~HmiGlbPrcpPrkgSlots() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  SharedDtor();
}

void HmiGlbPrcpPrkgSlots::SharedDtor() {
}

void HmiGlbPrcpPrkgSlots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiGlbPrcpPrkgSlots::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiGlbPrcpPrkgSlots& HmiGlbPrcpPrkgSlots::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiGlbPrcpPrkgSlots();
  return *internal_default_instance();
}

HmiGlbPrcpPrkgSlots* HmiGlbPrcpPrkgSlots::New(::google::protobuf::Arena* arena) const {
  HmiGlbPrcpPrkgSlots* n = new HmiGlbPrcpPrkgSlots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiGlbPrcpPrkgSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  glb_prkg_slots_.Clear();
  _internal_metadata_.Clear();
}

bool HmiGlbPrcpPrkgSlots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_glb_prkg_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  return false;
#undef DO_
}

void HmiGlbPrcpPrkgSlots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_prkg_slots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->glb_prkg_slots(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
}

::google::protobuf::uint8* HmiGlbPrcpPrkgSlots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_prkg_slots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->glb_prkg_slots(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  return target;
}

size_t HmiGlbPrcpPrkgSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->glb_prkg_slots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->glb_prkg_slots(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiGlbPrcpPrkgSlots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiGlbPrcpPrkgSlots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiGlbPrcpPrkgSlots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
    MergeFrom(*source);
  }
}

void HmiGlbPrcpPrkgSlots::MergeFrom(const HmiGlbPrcpPrkgSlots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  glb_prkg_slots_.MergeFrom(from.glb_prkg_slots_);
}

void HmiGlbPrcpPrkgSlots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiGlbPrcpPrkgSlots::CopyFrom(const HmiGlbPrcpPrkgSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiGlbPrcpPrkgSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiGlbPrcpPrkgSlots::IsInitialized() const {
  return true;
}

void HmiGlbPrcpPrkgSlots::Swap(HmiGlbPrcpPrkgSlots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiGlbPrcpPrkgSlots::InternalSwap(HmiGlbPrcpPrkgSlots* other) {
  using std::swap;
  glb_prkg_slots_.InternalSwap(&other->glb_prkg_slots_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiGlbPrcpPrkgSlots::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiGlbPrcpObstacle::InitAsDefaultInstance() {
}
void HmiGlbPrcpObstacle::clear_glb_prcp_obstacle() {
  glb_prcp_obstacle_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiGlbPrcpObstacle::kGlbPrcpObstacleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiGlbPrcpObstacle::HmiGlbPrcpObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiGlbPrcpObstacle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiGlbPrcpObstacle)
}
HmiGlbPrcpObstacle::HmiGlbPrcpObstacle(const HmiGlbPrcpObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      glb_prcp_obstacle_(from.glb_prcp_obstacle_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiGlbPrcpObstacle)
}

void HmiGlbPrcpObstacle::SharedCtor() {
  _cached_size_ = 0;
}

HmiGlbPrcpObstacle::~HmiGlbPrcpObstacle() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  SharedDtor();
}

void HmiGlbPrcpObstacle::SharedDtor() {
}

void HmiGlbPrcpObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiGlbPrcpObstacle::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiGlbPrcpObstacle& HmiGlbPrcpObstacle::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiGlbPrcpObstacle();
  return *internal_default_instance();
}

HmiGlbPrcpObstacle* HmiGlbPrcpObstacle::New(::google::protobuf::Arena* arena) const {
  HmiGlbPrcpObstacle* n = new HmiGlbPrcpObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiGlbPrcpObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  glb_prcp_obstacle_.Clear();
  _internal_metadata_.Clear();
}

bool HmiGlbPrcpObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_glb_prcp_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  return false;
#undef DO_
}

void HmiGlbPrcpObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_prcp_obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->glb_prcp_obstacle(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiGlbPrcpObstacle)
}

::google::protobuf::uint8* HmiGlbPrcpObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_prcp_obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->glb_prcp_obstacle(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  return target;
}

size_t HmiGlbPrcpObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->glb_prcp_obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->glb_prcp_obstacle(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiGlbPrcpObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiGlbPrcpObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiGlbPrcpObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiGlbPrcpObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiGlbPrcpObstacle)
    MergeFrom(*source);
  }
}

void HmiGlbPrcpObstacle::MergeFrom(const HmiGlbPrcpObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  glb_prcp_obstacle_.MergeFrom(from.glb_prcp_obstacle_);
}

void HmiGlbPrcpObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiGlbPrcpObstacle::CopyFrom(const HmiGlbPrcpObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiGlbPrcpObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiGlbPrcpObstacle::IsInitialized() const {
  return true;
}

void HmiGlbPrcpObstacle::Swap(HmiGlbPrcpObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiGlbPrcpObstacle::InternalSwap(HmiGlbPrcpObstacle* other) {
  using std::swap;
  glb_prcp_obstacle_.InternalSwap(&other->glb_prcp_obstacle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiGlbPrcpObstacle::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiMapInfo::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiMapInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MapCommonHeader*>(
      ::autodrive::workflow::proto::MapCommonHeader::internal_default_instance());
  ::autodrive::workflow::proto::_HmiMapInfo_default_instance_._instance.get_mutable()->global_trajectory_ = const_cast< ::autodrive::workflow::proto::GlbTrajectory*>(
      ::autodrive::workflow::proto::GlbTrajectory::internal_default_instance());
  ::autodrive::workflow::proto::_HmiMapInfo_default_instance_._instance.get_mutable()->global_percep_parking_slots_ = const_cast< ::autodrive::workflow::proto::HmiGlbPrcpPrkgSlots*>(
      ::autodrive::workflow::proto::HmiGlbPrcpPrkgSlots::internal_default_instance());
  ::autodrive::workflow::proto::_HmiMapInfo_default_instance_._instance.get_mutable()->global_perception_obstacle_ = const_cast< ::autodrive::workflow::proto::HmiGlbPrcpObstacle*>(
      ::autodrive::workflow::proto::HmiGlbPrcpObstacle::internal_default_instance());
}
void HmiMapInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void HmiMapInfo::clear_global_trajectory() {
  if (GetArenaNoVirtual() == NULL && global_trajectory_ != NULL) {
    delete global_trajectory_;
  }
  global_trajectory_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiMapInfo::kHeaderFieldNumber;
const int HmiMapInfo::kGlobalTrajectoryFieldNumber;
const int HmiMapInfo::kGlobalPercepParkingSlotsFieldNumber;
const int HmiMapInfo::kGlobalPerceptionObstacleFieldNumber;
const int HmiMapInfo::kMapDistanceFieldNumber;
const int HmiMapInfo::kRestMapDistanceFieldNumber;
const int HmiMapInfo::kNumSpeedBumpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiMapInfo::HmiMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiMapInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiMapInfo)
}
HmiMapInfo::HmiMapInfo(const HmiMapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MapCommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_global_trajectory()) {
    global_trajectory_ = new ::autodrive::workflow::proto::GlbTrajectory(*from.global_trajectory_);
  } else {
    global_trajectory_ = NULL;
  }
  if (from.has_global_percep_parking_slots()) {
    global_percep_parking_slots_ = new ::autodrive::workflow::proto::HmiGlbPrcpPrkgSlots(*from.global_percep_parking_slots_);
  } else {
    global_percep_parking_slots_ = NULL;
  }
  if (from.has_global_perception_obstacle()) {
    global_perception_obstacle_ = new ::autodrive::workflow::proto::HmiGlbPrcpObstacle(*from.global_perception_obstacle_);
  } else {
    global_perception_obstacle_ = NULL;
  }
  ::memcpy(&map_distance_, &from.map_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_speed_bumps_) -
    reinterpret_cast<char*>(&map_distance_)) + sizeof(num_speed_bumps_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiMapInfo)
}

void HmiMapInfo::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_speed_bumps_) -
      reinterpret_cast<char*>(&header_)) + sizeof(num_speed_bumps_));
  _cached_size_ = 0;
}

HmiMapInfo::~HmiMapInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiMapInfo)
  SharedDtor();
}

void HmiMapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete global_trajectory_;
  if (this != internal_default_instance()) delete global_percep_parking_slots_;
  if (this != internal_default_instance()) delete global_perception_obstacle_;
}

void HmiMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiMapInfo::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiMapInfo& HmiMapInfo::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiMapInfo();
  return *internal_default_instance();
}

HmiMapInfo* HmiMapInfo::New(::google::protobuf::Arena* arena) const {
  HmiMapInfo* n = new HmiMapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_trajectory_ != NULL) {
    delete global_trajectory_;
  }
  global_trajectory_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_percep_parking_slots_ != NULL) {
    delete global_percep_parking_slots_;
  }
  global_percep_parking_slots_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_perception_obstacle_ != NULL) {
    delete global_perception_obstacle_;
  }
  global_perception_obstacle_ = NULL;
  ::memset(&map_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_speed_bumps_) -
      reinterpret_cast<char*>(&map_distance_)) + sizeof(num_speed_bumps_));
  _internal_metadata_.Clear();
}

bool HmiMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MapCommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmiGlbPrcpPrkgSlots global_percep_parking_slots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_percep_parking_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmiGlbPrcpObstacle global_perception_obstacle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float map_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rest_map_distance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rest_map_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_speed_bumps = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_speed_bumps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiMapInfo)
  return false;
#undef DO_
}

void HmiMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MapCommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
  if (this->has_global_trajectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->global_trajectory_, output);
  }

  // .autodrive.workflow.proto.HmiGlbPrcpPrkgSlots global_percep_parking_slots = 3;
  if (this->has_global_percep_parking_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->global_percep_parking_slots_, output);
  }

  // .autodrive.workflow.proto.HmiGlbPrcpObstacle global_perception_obstacle = 4;
  if (this->has_global_perception_obstacle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->global_perception_obstacle_, output);
  }

  // float map_distance = 5;
  if (this->map_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->map_distance(), output);
  }

  // float rest_map_distance = 6;
  if (this->rest_map_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rest_map_distance(), output);
  }

  // int32 num_speed_bumps = 7;
  if (this->num_speed_bumps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_speed_bumps(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiMapInfo)
}

::google::protobuf::uint8* HmiMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MapCommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
  if (this->has_global_trajectory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->global_trajectory_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmiGlbPrcpPrkgSlots global_percep_parking_slots = 3;
  if (this->has_global_percep_parking_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->global_percep_parking_slots_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmiGlbPrcpObstacle global_perception_obstacle = 4;
  if (this->has_global_perception_obstacle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->global_perception_obstacle_, deterministic, target);
  }

  // float map_distance = 5;
  if (this->map_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->map_distance(), target);
  }

  // float rest_map_distance = 6;
  if (this->rest_map_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rest_map_distance(), target);
  }

  // int32 num_speed_bumps = 7;
  if (this->num_speed_bumps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num_speed_bumps(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiMapInfo)
  return target;
}

size_t HmiMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiMapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MapCommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
  if (this->has_global_trajectory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->global_trajectory_);
  }

  // .autodrive.workflow.proto.HmiGlbPrcpPrkgSlots global_percep_parking_slots = 3;
  if (this->has_global_percep_parking_slots()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->global_percep_parking_slots_);
  }

  // .autodrive.workflow.proto.HmiGlbPrcpObstacle global_perception_obstacle = 4;
  if (this->has_global_perception_obstacle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->global_perception_obstacle_);
  }

  // float map_distance = 5;
  if (this->map_distance() != 0) {
    total_size += 1 + 4;
  }

  // float rest_map_distance = 6;
  if (this->rest_map_distance() != 0) {
    total_size += 1 + 4;
  }

  // int32 num_speed_bumps = 7;
  if (this->num_speed_bumps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_speed_bumps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiMapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiMapInfo)
    MergeFrom(*source);
  }
}

void HmiMapInfo::MergeFrom(const HmiMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MapCommonHeader::MergeFrom(from.header());
  }
  if (from.has_global_trajectory()) {
    mutable_global_trajectory()->::autodrive::workflow::proto::GlbTrajectory::MergeFrom(from.global_trajectory());
  }
  if (from.has_global_percep_parking_slots()) {
    mutable_global_percep_parking_slots()->::autodrive::workflow::proto::HmiGlbPrcpPrkgSlots::MergeFrom(from.global_percep_parking_slots());
  }
  if (from.has_global_perception_obstacle()) {
    mutable_global_perception_obstacle()->::autodrive::workflow::proto::HmiGlbPrcpObstacle::MergeFrom(from.global_perception_obstacle());
  }
  if (from.map_distance() != 0) {
    set_map_distance(from.map_distance());
  }
  if (from.rest_map_distance() != 0) {
    set_rest_map_distance(from.rest_map_distance());
  }
  if (from.num_speed_bumps() != 0) {
    set_num_speed_bumps(from.num_speed_bumps());
  }
}

void HmiMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiMapInfo::CopyFrom(const HmiMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiMapInfo::IsInitialized() const {
  return true;
}

void HmiMapInfo::Swap(HmiMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiMapInfo::InternalSwap(HmiMapInfo* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(global_trajectory_, other->global_trajectory_);
  swap(global_percep_parking_slots_, other->global_percep_parking_slots_);
  swap(global_perception_obstacle_, other->global_perception_obstacle_);
  swap(map_distance_, other->map_distance_);
  swap(rest_map_distance_, other->rest_map_distance_);
  swap(num_speed_bumps_, other->num_speed_bumps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiMapInfo::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiMapDisplay::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiMapDisplay_default_instance_._instance.get_mutable()->map_info_ = const_cast< ::autodrive::workflow::proto::HmiMapInfo*>(
      ::autodrive::workflow::proto::HmiMapInfo::internal_default_instance());
  ::autodrive::workflow::proto::_HmiMapDisplay_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MapCommonHeader*>(
      ::autodrive::workflow::proto::MapCommonHeader::internal_default_instance());
}
void HmiMapDisplay::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiMapDisplay::kMapInfoFieldNumber;
const int HmiMapDisplay::kUpdateMapInfoFieldNumber;
const int HmiMapDisplay::kNumMapsFieldNumber;
const int HmiMapDisplay::kNewIdFieldNumber;
const int HmiMapDisplay::kIsMatchFieldNumber;
const int HmiMapDisplay::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiMapDisplay::HmiMapDisplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiMapDisplay();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiMapDisplay)
}
HmiMapDisplay::HmiMapDisplay(const HmiMapDisplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_info()) {
    map_info_ = new ::autodrive::workflow::proto::HmiMapInfo(*from.map_info_);
  } else {
    map_info_ = NULL;
  }
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MapCommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&num_maps_, &from.num_maps_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_id_) -
    reinterpret_cast<char*>(&num_maps_)) + sizeof(new_id_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiMapDisplay)
}

void HmiMapDisplay::SharedCtor() {
  ::memset(&map_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_id_) -
      reinterpret_cast<char*>(&map_info_)) + sizeof(new_id_));
  _cached_size_ = 0;
}

HmiMapDisplay::~HmiMapDisplay() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiMapDisplay)
  SharedDtor();
}

void HmiMapDisplay::SharedDtor() {
  if (this != internal_default_instance()) delete map_info_;
  if (this != internal_default_instance()) delete header_;
}

void HmiMapDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiMapDisplay::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiMapDisplay& HmiMapDisplay::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiMapDisplay();
  return *internal_default_instance();
}

HmiMapDisplay* HmiMapDisplay::New(::google::protobuf::Arena* arena) const {
  HmiMapDisplay* n = new HmiMapDisplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiMapDisplay::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiMapDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&num_maps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_id_) -
      reinterpret_cast<char*>(&num_maps_)) + sizeof(new_id_));
  _internal_metadata_.Clear();
}

bool HmiMapDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiMapDisplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.HmiMapInfo map_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool update_map_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_map_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_maps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_maps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 new_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_match = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MapCommonHeader header = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiMapDisplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiMapDisplay)
  return false;
#undef DO_
}

void HmiMapDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiMapDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmiMapInfo map_info = 1;
  if (this->has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_info_, output);
  }

  // bool update_map_info = 2;
  if (this->update_map_info() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update_map_info(), output);
  }

  // int32 num_maps = 3;
  if (this->num_maps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_maps(), output);
  }

  // int32 new_id = 4;
  if (this->new_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->new_id(), output);
  }

  // bool is_match = 5;
  if (this->is_match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_match(), output);
  }

  // .autodrive.workflow.proto.MapCommonHeader header = 6;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiMapDisplay)
}

::google::protobuf::uint8* HmiMapDisplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiMapDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmiMapInfo map_info = 1;
  if (this->has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->map_info_, deterministic, target);
  }

  // bool update_map_info = 2;
  if (this->update_map_info() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update_map_info(), target);
  }

  // int32 num_maps = 3;
  if (this->num_maps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_maps(), target);
  }

  // int32 new_id = 4;
  if (this->new_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->new_id(), target);
  }

  // bool is_match = 5;
  if (this->is_match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_match(), target);
  }

  // .autodrive.workflow.proto.MapCommonHeader header = 6;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiMapDisplay)
  return target;
}

size_t HmiMapDisplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiMapDisplay)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.HmiMapInfo map_info = 1;
  if (this->has_map_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->map_info_);
  }

  // .autodrive.workflow.proto.MapCommonHeader header = 6;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int32 num_maps = 3;
  if (this->num_maps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_maps());
  }

  // bool update_map_info = 2;
  if (this->update_map_info() != 0) {
    total_size += 1 + 1;
  }

  // bool is_match = 5;
  if (this->is_match() != 0) {
    total_size += 1 + 1;
  }

  // int32 new_id = 4;
  if (this->new_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->new_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiMapDisplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiMapDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiMapDisplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiMapDisplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiMapDisplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiMapDisplay)
    MergeFrom(*source);
  }
}

void HmiMapDisplay::MergeFrom(const HmiMapDisplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiMapDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_map_info()) {
    mutable_map_info()->::autodrive::workflow::proto::HmiMapInfo::MergeFrom(from.map_info());
  }
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MapCommonHeader::MergeFrom(from.header());
  }
  if (from.num_maps() != 0) {
    set_num_maps(from.num_maps());
  }
  if (from.update_map_info() != 0) {
    set_update_map_info(from.update_map_info());
  }
  if (from.is_match() != 0) {
    set_is_match(from.is_match());
  }
  if (from.new_id() != 0) {
    set_new_id(from.new_id());
  }
}

void HmiMapDisplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiMapDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiMapDisplay::CopyFrom(const HmiMapDisplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiMapDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiMapDisplay::IsInitialized() const {
  return true;
}

void HmiMapDisplay::Swap(HmiMapDisplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiMapDisplay::InternalSwap(HmiMapDisplay* other) {
  using std::swap;
  swap(map_info_, other->map_info_);
  swap(header_, other->header_);
  swap(num_maps_, other->num_maps_);
  swap(update_map_info_, other->update_map_info_);
  swap(is_match_, other->is_match_);
  swap(new_id_, other->new_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiMapDisplay::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiVpaState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiVpaState::kVpaEventFieldNumber;
const int HmiVpaState::kHpaStateFieldNumber;
const int HmiVpaState::kMappingOddTypeFieldNumber;
const int HmiVpaState::kLocOddTypeFieldNumber;
const int HmiVpaState::kMapSavingStageFieldNumber;
const int HmiVpaState::kLocalLocStageFieldNumber;
const int HmiVpaState::kMapDeletedStageFieldNumber;
const int HmiVpaState::kMapStageFieldNumber;
const int HmiVpaState::kMapOptimizedStageFieldNumber;
const int HmiVpaState::kErrorCodeFieldNumber;
const int HmiVpaState::kTargetParkingSlotIdFieldNumber;
const int HmiVpaState::kMapSavingProgressFieldNumber;
const int HmiVpaState::kAvaliableMapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiVpaState::HmiVpaState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiVpaState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiVpaState)
}
HmiVpaState::HmiVpaState(const HmiVpaState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vpa_event_, &from.vpa_event_,
    static_cast<size_t>(reinterpret_cast<char*>(&avaliable_map_id_) -
    reinterpret_cast<char*>(&vpa_event_)) + sizeof(avaliable_map_id_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiVpaState)
}

void HmiVpaState::SharedCtor() {
  ::memset(&vpa_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avaliable_map_id_) -
      reinterpret_cast<char*>(&vpa_event_)) + sizeof(avaliable_map_id_));
  _cached_size_ = 0;
}

HmiVpaState::~HmiVpaState() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiVpaState)
  SharedDtor();
}

void HmiVpaState::SharedDtor() {
}

void HmiVpaState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiVpaState::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiVpaState& HmiVpaState::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiVpaState();
  return *internal_default_instance();
}

HmiVpaState* HmiVpaState::New(::google::protobuf::Arena* arena) const {
  HmiVpaState* n = new HmiVpaState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiVpaState::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiVpaState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vpa_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avaliable_map_id_) -
      reinterpret_cast<char*>(&vpa_event_)) + sizeof(avaliable_map_id_));
  _internal_metadata_.Clear();
}

bool HmiVpaState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiVpaState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.VPAEventType vpa_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vpa_event(static_cast< ::autodrive::workflow::proto::VPAEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HPAState hpa_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hpa_state(static_cast< ::autodrive::workflow::proto::HPAState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MappingOddType mapping_odd_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mapping_odd_type(static_cast< ::autodrive::workflow::proto::MappingOddType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LocOddType loc_odd_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loc_odd_type(static_cast< ::autodrive::workflow::proto::LocOddType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MapSavingStage map_saving_stage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_map_saving_stage(static_cast< ::autodrive::workflow::proto::MapSavingStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LocalLocStage local_loc_stage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_local_loc_stage(static_cast< ::autodrive::workflow::proto::LocalLocStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MapDeletingStage map_deleted_stage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_map_deleted_stage(static_cast< ::autodrive::workflow::proto::MapDeletingStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MappingStage map_stage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_map_stage(static_cast< ::autodrive::workflow::proto::MappingStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MapOptimizeStage map_optimized_stage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_map_optimized_stage(static_cast< ::autodrive::workflow::proto::MapOptimizeStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ErrorCode error_code = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::autodrive::workflow::proto::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_parking_slot_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_parking_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 map_saving_progress = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_saving_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avaliable_map_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avaliable_map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiVpaState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiVpaState)
  return false;
#undef DO_
}

void HmiVpaState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiVpaState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.VPAEventType vpa_event = 1;
  if (this->vpa_event() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->vpa_event(), output);
  }

  // .autodrive.workflow.proto.HPAState hpa_state = 2;
  if (this->hpa_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->hpa_state(), output);
  }

  // .autodrive.workflow.proto.MappingOddType mapping_odd_type = 3;
  if (this->mapping_odd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mapping_odd_type(), output);
  }

  // .autodrive.workflow.proto.LocOddType loc_odd_type = 4;
  if (this->loc_odd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->loc_odd_type(), output);
  }

  // .autodrive.workflow.proto.MapSavingStage map_saving_stage = 5;
  if (this->map_saving_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->map_saving_stage(), output);
  }

  // .autodrive.workflow.proto.LocalLocStage local_loc_stage = 6;
  if (this->local_loc_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->local_loc_stage(), output);
  }

  // .autodrive.workflow.proto.MapDeletingStage map_deleted_stage = 7;
  if (this->map_deleted_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->map_deleted_stage(), output);
  }

  // .autodrive.workflow.proto.MappingStage map_stage = 8;
  if (this->map_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->map_stage(), output);
  }

  // .autodrive.workflow.proto.MapOptimizeStage map_optimized_stage = 9;
  if (this->map_optimized_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->map_optimized_stage(), output);
  }

  // .autodrive.workflow.proto.ErrorCode error_code = 10;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->error_code(), output);
  }

  // int32 target_parking_slot_id = 11;
  if (this->target_parking_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->target_parking_slot_id(), output);
  }

  // uint32 map_saving_progress = 12;
  if (this->map_saving_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->map_saving_progress(), output);
  }

  // uint32 avaliable_map_id = 13;
  if (this->avaliable_map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->avaliable_map_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiVpaState)
}

::google::protobuf::uint8* HmiVpaState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiVpaState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.VPAEventType vpa_event = 1;
  if (this->vpa_event() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->vpa_event(), target);
  }

  // .autodrive.workflow.proto.HPAState hpa_state = 2;
  if (this->hpa_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->hpa_state(), target);
  }

  // .autodrive.workflow.proto.MappingOddType mapping_odd_type = 3;
  if (this->mapping_odd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mapping_odd_type(), target);
  }

  // .autodrive.workflow.proto.LocOddType loc_odd_type = 4;
  if (this->loc_odd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->loc_odd_type(), target);
  }

  // .autodrive.workflow.proto.MapSavingStage map_saving_stage = 5;
  if (this->map_saving_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->map_saving_stage(), target);
  }

  // .autodrive.workflow.proto.LocalLocStage local_loc_stage = 6;
  if (this->local_loc_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->local_loc_stage(), target);
  }

  // .autodrive.workflow.proto.MapDeletingStage map_deleted_stage = 7;
  if (this->map_deleted_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->map_deleted_stage(), target);
  }

  // .autodrive.workflow.proto.MappingStage map_stage = 8;
  if (this->map_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->map_stage(), target);
  }

  // .autodrive.workflow.proto.MapOptimizeStage map_optimized_stage = 9;
  if (this->map_optimized_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->map_optimized_stage(), target);
  }

  // .autodrive.workflow.proto.ErrorCode error_code = 10;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->error_code(), target);
  }

  // int32 target_parking_slot_id = 11;
  if (this->target_parking_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->target_parking_slot_id(), target);
  }

  // uint32 map_saving_progress = 12;
  if (this->map_saving_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->map_saving_progress(), target);
  }

  // uint32 avaliable_map_id = 13;
  if (this->avaliable_map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->avaliable_map_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiVpaState)
  return target;
}

size_t HmiVpaState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiVpaState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.VPAEventType vpa_event = 1;
  if (this->vpa_event() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vpa_event());
  }

  // .autodrive.workflow.proto.HPAState hpa_state = 2;
  if (this->hpa_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hpa_state());
  }

  // .autodrive.workflow.proto.MappingOddType mapping_odd_type = 3;
  if (this->mapping_odd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mapping_odd_type());
  }

  // .autodrive.workflow.proto.LocOddType loc_odd_type = 4;
  if (this->loc_odd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->loc_odd_type());
  }

  // .autodrive.workflow.proto.MapSavingStage map_saving_stage = 5;
  if (this->map_saving_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->map_saving_stage());
  }

  // .autodrive.workflow.proto.LocalLocStage local_loc_stage = 6;
  if (this->local_loc_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->local_loc_stage());
  }

  // .autodrive.workflow.proto.MapDeletingStage map_deleted_stage = 7;
  if (this->map_deleted_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->map_deleted_stage());
  }

  // .autodrive.workflow.proto.MappingStage map_stage = 8;
  if (this->map_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->map_stage());
  }

  // .autodrive.workflow.proto.MapOptimizeStage map_optimized_stage = 9;
  if (this->map_optimized_stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->map_optimized_stage());
  }

  // .autodrive.workflow.proto.ErrorCode error_code = 10;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // int32 target_parking_slot_id = 11;
  if (this->target_parking_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_parking_slot_id());
  }

  // uint32 map_saving_progress = 12;
  if (this->map_saving_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->map_saving_progress());
  }

  // uint32 avaliable_map_id = 13;
  if (this->avaliable_map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avaliable_map_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiVpaState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiVpaState)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiVpaState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiVpaState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiVpaState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiVpaState)
    MergeFrom(*source);
  }
}

void HmiVpaState::MergeFrom(const HmiVpaState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiVpaState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vpa_event() != 0) {
    set_vpa_event(from.vpa_event());
  }
  if (from.hpa_state() != 0) {
    set_hpa_state(from.hpa_state());
  }
  if (from.mapping_odd_type() != 0) {
    set_mapping_odd_type(from.mapping_odd_type());
  }
  if (from.loc_odd_type() != 0) {
    set_loc_odd_type(from.loc_odd_type());
  }
  if (from.map_saving_stage() != 0) {
    set_map_saving_stage(from.map_saving_stage());
  }
  if (from.local_loc_stage() != 0) {
    set_local_loc_stage(from.local_loc_stage());
  }
  if (from.map_deleted_stage() != 0) {
    set_map_deleted_stage(from.map_deleted_stage());
  }
  if (from.map_stage() != 0) {
    set_map_stage(from.map_stage());
  }
  if (from.map_optimized_stage() != 0) {
    set_map_optimized_stage(from.map_optimized_stage());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.target_parking_slot_id() != 0) {
    set_target_parking_slot_id(from.target_parking_slot_id());
  }
  if (from.map_saving_progress() != 0) {
    set_map_saving_progress(from.map_saving_progress());
  }
  if (from.avaliable_map_id() != 0) {
    set_avaliable_map_id(from.avaliable_map_id());
  }
}

void HmiVpaState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiVpaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiVpaState::CopyFrom(const HmiVpaState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiVpaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiVpaState::IsInitialized() const {
  return true;
}

void HmiVpaState::Swap(HmiVpaState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiVpaState::InternalSwap(HmiVpaState* other) {
  using std::swap;
  swap(vpa_event_, other->vpa_event_);
  swap(hpa_state_, other->hpa_state_);
  swap(mapping_odd_type_, other->mapping_odd_type_);
  swap(loc_odd_type_, other->loc_odd_type_);
  swap(map_saving_stage_, other->map_saving_stage_);
  swap(local_loc_stage_, other->local_loc_stage_);
  swap(map_deleted_stage_, other->map_deleted_stage_);
  swap(map_stage_, other->map_stage_);
  swap(map_optimized_stage_, other->map_optimized_stage_);
  swap(error_code_, other->error_code_);
  swap(target_parking_slot_id_, other->target_parking_slot_id_);
  swap(map_saving_progress_, other->map_saving_progress_);
  swap(avaliable_map_id_, other->avaliable_map_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiVpaState::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiHpaRender::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiHpaRender_default_instance_._instance.get_mutable()->obstacles_ = const_cast< ::autodrive::workflow::proto::HmiFusionObstacle*>(
      ::autodrive::workflow::proto::HmiFusionObstacle::internal_default_instance());
  ::autodrive::workflow::proto::_HmiHpaRender_default_instance_._instance.get_mutable()->localization_ = const_cast< ::autodrive::workflow::proto::HmiLocalization*>(
      ::autodrive::workflow::proto::HmiLocalization::internal_default_instance());
  ::autodrive::workflow::proto::_HmiHpaRender_default_instance_._instance.get_mutable()->map_display_ = const_cast< ::autodrive::workflow::proto::HmiMapDisplay*>(
      ::autodrive::workflow::proto::HmiMapDisplay::internal_default_instance());
  ::autodrive::workflow::proto::_HmiHpaRender_default_instance_._instance.get_mutable()->vpa_state_ = const_cast< ::autodrive::workflow::proto::HmiVpaState*>(
      ::autodrive::workflow::proto::HmiVpaState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiHpaRender::kObstaclesFieldNumber;
const int HmiHpaRender::kLocalizationFieldNumber;
const int HmiHpaRender::kMapDisplayFieldNumber;
const int HmiHpaRender::kVpaStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiHpaRender::HmiHpaRender()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiHpaRender();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiHpaRender)
}
HmiHpaRender::HmiHpaRender(const HmiHpaRender& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obstacles()) {
    obstacles_ = new ::autodrive::workflow::proto::HmiFusionObstacle(*from.obstacles_);
  } else {
    obstacles_ = NULL;
  }
  if (from.has_localization()) {
    localization_ = new ::autodrive::workflow::proto::HmiLocalization(*from.localization_);
  } else {
    localization_ = NULL;
  }
  if (from.has_map_display()) {
    map_display_ = new ::autodrive::workflow::proto::HmiMapDisplay(*from.map_display_);
  } else {
    map_display_ = NULL;
  }
  if (from.has_vpa_state()) {
    vpa_state_ = new ::autodrive::workflow::proto::HmiVpaState(*from.vpa_state_);
  } else {
    vpa_state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiHpaRender)
}

void HmiHpaRender::SharedCtor() {
  ::memset(&obstacles_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vpa_state_) -
      reinterpret_cast<char*>(&obstacles_)) + sizeof(vpa_state_));
  _cached_size_ = 0;
}

HmiHpaRender::~HmiHpaRender() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiHpaRender)
  SharedDtor();
}

void HmiHpaRender::SharedDtor() {
  if (this != internal_default_instance()) delete obstacles_;
  if (this != internal_default_instance()) delete localization_;
  if (this != internal_default_instance()) delete map_display_;
  if (this != internal_default_instance()) delete vpa_state_;
}

void HmiHpaRender::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiHpaRender::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiHpaRender& HmiHpaRender::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiHpaRender();
  return *internal_default_instance();
}

HmiHpaRender* HmiHpaRender::New(::google::protobuf::Arena* arena) const {
  HmiHpaRender* n = new HmiHpaRender;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiHpaRender::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiHpaRender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && obstacles_ != NULL) {
    delete obstacles_;
  }
  obstacles_ = NULL;
  if (GetArenaNoVirtual() == NULL && localization_ != NULL) {
    delete localization_;
  }
  localization_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_display_ != NULL) {
    delete map_display_;
  }
  map_display_ = NULL;
  if (GetArenaNoVirtual() == NULL && vpa_state_ != NULL) {
    delete vpa_state_;
  }
  vpa_state_ = NULL;
  _internal_metadata_.Clear();
}

bool HmiHpaRender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiHpaRender)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.HmiFusionObstacle obstacles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmiLocalization localization = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_localization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmiMapDisplay map_display = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_display()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmiVpaState vpa_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vpa_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiHpaRender)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiHpaRender)
  return false;
#undef DO_
}

void HmiHpaRender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiHpaRender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmiFusionObstacle obstacles = 1;
  if (this->has_obstacles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->obstacles_, output);
  }

  // .autodrive.workflow.proto.HmiLocalization localization = 2;
  if (this->has_localization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->localization_, output);
  }

  // .autodrive.workflow.proto.HmiMapDisplay map_display = 3;
  if (this->has_map_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->map_display_, output);
  }

  // .autodrive.workflow.proto.HmiVpaState vpa_state = 4;
  if (this->has_vpa_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->vpa_state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiHpaRender)
}

::google::protobuf::uint8* HmiHpaRender::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiHpaRender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmiFusionObstacle obstacles = 1;
  if (this->has_obstacles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->obstacles_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmiLocalization localization = 2;
  if (this->has_localization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->localization_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmiMapDisplay map_display = 3;
  if (this->has_map_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->map_display_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmiVpaState vpa_state = 4;
  if (this->has_vpa_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->vpa_state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiHpaRender)
  return target;
}

size_t HmiHpaRender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiHpaRender)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.HmiFusionObstacle obstacles = 1;
  if (this->has_obstacles()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->obstacles_);
  }

  // .autodrive.workflow.proto.HmiLocalization localization = 2;
  if (this->has_localization()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->localization_);
  }

  // .autodrive.workflow.proto.HmiMapDisplay map_display = 3;
  if (this->has_map_display()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->map_display_);
  }

  // .autodrive.workflow.proto.HmiVpaState vpa_state = 4;
  if (this->has_vpa_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vpa_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiHpaRender::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiHpaRender)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiHpaRender* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiHpaRender>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiHpaRender)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiHpaRender)
    MergeFrom(*source);
  }
}

void HmiHpaRender::MergeFrom(const HmiHpaRender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiHpaRender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_obstacles()) {
    mutable_obstacles()->::autodrive::workflow::proto::HmiFusionObstacle::MergeFrom(from.obstacles());
  }
  if (from.has_localization()) {
    mutable_localization()->::autodrive::workflow::proto::HmiLocalization::MergeFrom(from.localization());
  }
  if (from.has_map_display()) {
    mutable_map_display()->::autodrive::workflow::proto::HmiMapDisplay::MergeFrom(from.map_display());
  }
  if (from.has_vpa_state()) {
    mutable_vpa_state()->::autodrive::workflow::proto::HmiVpaState::MergeFrom(from.vpa_state());
  }
}

void HmiHpaRender::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiHpaRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiHpaRender::CopyFrom(const HmiHpaRender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiHpaRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiHpaRender::IsInitialized() const {
  return true;
}

void HmiHpaRender::Swap(HmiHpaRender* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiHpaRender::InternalSwap(HmiHpaRender* other) {
  using std::swap;
  swap(obstacles_, other->obstacles_);
  swap(localization_, other->localization_);
  swap(map_display_, other->map_display_);
  swap(vpa_state_, other->vpa_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiHpaRender::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiHpaRenderMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiHpaRenderMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_HmiHpaRenderMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_HmiHpaRenderMsg_default_instance_._instance.get_mutable()->hmi_hpa_render_ = const_cast< ::autodrive::workflow::proto::HmiHpaRender*>(
      ::autodrive::workflow::proto::HmiHpaRender::internal_default_instance());
}
void HmiHpaRenderMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void HmiHpaRenderMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiHpaRenderMsg::kHeaderFieldNumber;
const int HmiHpaRenderMsg::kErrorFieldNumber;
const int HmiHpaRenderMsg::kHmiHpaRenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiHpaRenderMsg::HmiHpaRenderMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiHpaRenderMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiHpaRenderMsg)
}
HmiHpaRenderMsg::HmiHpaRenderMsg(const HmiHpaRenderMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_hmi_hpa_render()) {
    hmi_hpa_render_ = new ::autodrive::workflow::proto::HmiHpaRender(*from.hmi_hpa_render_);
  } else {
    hmi_hpa_render_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiHpaRenderMsg)
}

void HmiHpaRenderMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hmi_hpa_render_) -
      reinterpret_cast<char*>(&header_)) + sizeof(hmi_hpa_render_));
  _cached_size_ = 0;
}

HmiHpaRenderMsg::~HmiHpaRenderMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiHpaRenderMsg)
  SharedDtor();
}

void HmiHpaRenderMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete hmi_hpa_render_;
}

void HmiHpaRenderMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiHpaRenderMsg::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiHpaRenderMsg& HmiHpaRenderMsg::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_2eproto::InitDefaultsHmiHpaRenderMsg();
  return *internal_default_instance();
}

HmiHpaRenderMsg* HmiHpaRenderMsg::New(::google::protobuf::Arena* arena) const {
  HmiHpaRenderMsg* n = new HmiHpaRenderMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiHpaRenderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiHpaRenderMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && hmi_hpa_render_ != NULL) {
    delete hmi_hpa_render_;
  }
  hmi_hpa_render_ = NULL;
  _internal_metadata_.Clear();
}

bool HmiHpaRenderMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiHpaRenderMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmiHpaRender hmi_hpa_render = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hmi_hpa_render()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiHpaRenderMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiHpaRenderMsg)
  return false;
#undef DO_
}

void HmiHpaRenderMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiHpaRenderMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.HmiHpaRender hmi_hpa_render = 3;
  if (this->has_hmi_hpa_render()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->hmi_hpa_render_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiHpaRenderMsg)
}

::google::protobuf::uint8* HmiHpaRenderMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiHpaRenderMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmiHpaRender hmi_hpa_render = 3;
  if (this->has_hmi_hpa_render()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->hmi_hpa_render_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiHpaRenderMsg)
  return target;
}

size_t HmiHpaRenderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiHpaRenderMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.HmiHpaRender hmi_hpa_render = 3;
  if (this->has_hmi_hpa_render()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hmi_hpa_render_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiHpaRenderMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiHpaRenderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiHpaRenderMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiHpaRenderMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiHpaRenderMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiHpaRenderMsg)
    MergeFrom(*source);
  }
}

void HmiHpaRenderMsg::MergeFrom(const HmiHpaRenderMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiHpaRenderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_hmi_hpa_render()) {
    mutable_hmi_hpa_render()->::autodrive::workflow::proto::HmiHpaRender::MergeFrom(from.hmi_hpa_render());
  }
}

void HmiHpaRenderMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiHpaRenderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiHpaRenderMsg::CopyFrom(const HmiHpaRenderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiHpaRenderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiHpaRenderMsg::IsInitialized() const {
  return true;
}

void HmiHpaRenderMsg::Swap(HmiHpaRenderMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiHpaRenderMsg::InternalSwap(HmiHpaRenderMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(hmi_hpa_render_, other->hmi_hpa_render_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiHpaRenderMsg::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
