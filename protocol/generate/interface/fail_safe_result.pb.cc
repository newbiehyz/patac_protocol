// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fail_safe_result.proto

#include "fail_safe_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class FailSafeLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FailSafeLevel>
      _instance;
} _FailSafeLevel_default_instance_;
class FailSafeResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FailSafeResult>
      _instance;
} _FailSafeResult_default_instance_;
class FailSafeResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FailSafeResults>
      _instance;
} _FailSafeResults_default_instance_;
class FailsafeResultMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FailsafeResultMsg>
      _instance;
} _FailsafeResultMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_fail_5fsafe_5fresult_2eproto {
void InitDefaultsFailSafeLevelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_FailSafeLevel_default_instance_;
    new (ptr) ::autodrive::workflow::proto::FailSafeLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::FailSafeLevel::InitAsDefaultInstance();
}

void InitDefaultsFailSafeLevel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFailSafeLevelImpl);
}

void InitDefaultsFailSafeResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeLevel();
  protobuf_perception_5fbase_2eproto::InitDefaultsSceneParsing();
  {
    void* ptr = &::autodrive::workflow::proto::_FailSafeResult_default_instance_;
    new (ptr) ::autodrive::workflow::proto::FailSafeResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::FailSafeResult::InitAsDefaultInstance();
}

void InitDefaultsFailSafeResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFailSafeResultImpl);
}

void InitDefaultsFailSafeResultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeResult();
  {
    void* ptr = &::autodrive::workflow::proto::_FailSafeResults_default_instance_;
    new (ptr) ::autodrive::workflow::proto::FailSafeResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::FailSafeResults::InitAsDefaultInstance();
}

void InitDefaultsFailSafeResults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFailSafeResultsImpl);
}

void InitDefaultsFailsafeResultMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeResults();
  {
    void* ptr = &::autodrive::workflow::proto::_FailsafeResultMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::FailsafeResultMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::FailsafeResultMsg::InitAsDefaultInstance();
}

void InitDefaultsFailsafeResultMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFailsafeResultMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, rain_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, full_blockage_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, blurred_image_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, splashes_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, low_sun_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, sun_ray_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, out_of_focus_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, out_of_calibration_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, partial_blockage_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, frozen_windshield_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, fog_severity_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, free_sight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeLevel, out_of_calib_tsr_bs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeResult, image_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeResult, fail_safe_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeResult, scene_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailSafeResults, fail_safe_result_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailsafeResultMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailsafeResultMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailsafeResultMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FailsafeResultMsg, safe_results_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::FailSafeLevel)},
  { 18, -1, sizeof(::autodrive::workflow::proto::FailSafeResult)},
  { 26, -1, sizeof(::autodrive::workflow::proto::FailSafeResults)},
  { 32, -1, sizeof(::autodrive::workflow::proto::FailsafeResultMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_FailSafeLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_FailSafeResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_FailSafeResults_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_FailsafeResultMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fail_safe_result.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026fail_safe_result.proto\022\030autodrive.work"
      "flow.proto\032\014common.proto\032\025perception_bas"
      "e.proto\"\345\006\n\rFailSafeLevel\022D\n\023rain_severi"
      "ty_level\030\001 \001(\0162\'.autodrive.workflow.prot"
      "o.SeverityLevel\022M\n\034full_blockage_severit"
      "y_level\030\002 \001(\0162\'.autodrive.workflow.proto"
      ".SeverityLevel\022M\n\034blurred_image_severity"
      "_level\030\003 \001(\0162\'.autodrive.workflow.proto."
      "SeverityLevel\022H\n\027splashes_severity_level"
      "\030\004 \001(\0162\'.autodrive.workflow.proto.Severi"
      "tyLevel\022G\n\026low_sun_severity_level\030\005 \001(\0162"
      "\'.autodrive.workflow.proto.SeverityLevel"
      "\022G\n\026sun_ray_severity_level\030\006 \001(\0162\'.autod"
      "rive.workflow.proto.SeverityLevel\022#\n\033out"
      "_of_focus_severity_level\030\007 \001(\010\022)\n!out_of"
      "_calibration_severity_level\030\010 \001(\010\022P\n\037par"
      "tial_blockage_severity_level\030\t \001(\0162\'.aut"
      "odrive.workflow.proto.SeverityLevel\022Q\n f"
      "rozen_windshield_severity_level\030\n \001(\0162\'."
      "autodrive.workflow.proto.SeverityLevel\022C"
      "\n\022fog_severity_level\030\013 \001(\0162\'.autodrive.w"
      "orkflow.proto.SeverityLevel\022\022\n\nfree_sigh"
      "t\030\014 \001(\010\022F\n\023out_of_calib_tsr_bs\030\r \001(\0162).a"
      "utodrive.workflow.proto.OutOfCalibTsrBs\""
      "\337\001\n\016FailSafeResult\022C\n\010image_id\030\001 \001(\01621.a"
      "utodrive.workflow.proto.perception_base."
      "ImageId\022A\n\020fail_safe_result\030\002 \001(\0132\'.auto"
      "drive.workflow.proto.FailSafeLevel\022E\n\005sc"
      "ene\030\003 \001(\01326.autodrive.workflow.proto.per"
      "ception_base.SceneParsing\"Z\n\017FailSafeRes"
      "ults\022G\n\025fail_safe_result_data\030\001 \003(\0132(.au"
      "todrive.workflow.proto.FailSafeResult\"\271\001"
      "\n\021FailsafeResultMsg\0223\n\006header\030\001 \001(\0132#.au"
      "todrive.workflow.proto.MsgHeader\022.\n\005erro"
      "r\030\002 \001(\0132\037.autodrive.workflow.proto.Error"
      "\022\?\n\014safe_results\030\003 \001(\0132).autodrive.workf"
      "low.proto.FailSafeResults*u\n\rSeverityLev"
      "el\022\026\n\022kSeverityLevelNone\020\000\022\026\n\022kSeverityL"
      "evelMild\020\001\022\032\n\026kSeverityLevelModerate\020\002\022\030"
      "\n\024kSeverityLevelSevere\020\003*n\n\017OutOfCalibTs"
      "rBs\022\022\n\016kTSROutOfCalib\020\000\022\025\n\021kTSROutOfCali"
      "bAEB\020\001\022\025\n\021kTSROutOfCalibYaw\020\002\022\031\n\025kTSROut"
      "OfCalibHorizon\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1704);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fail_safe_result.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fail_5fsafe_5fresult_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* SeverityLevel_descriptor() {
  protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fail_5fsafe_5fresult_2eproto::file_level_enum_descriptors[0];
}
bool SeverityLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OutOfCalibTsrBs_descriptor() {
  protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fail_5fsafe_5fresult_2eproto::file_level_enum_descriptors[1];
}
bool OutOfCalibTsrBs_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FailSafeLevel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FailSafeLevel::kRainSeverityLevelFieldNumber;
const int FailSafeLevel::kFullBlockageSeverityLevelFieldNumber;
const int FailSafeLevel::kBlurredImageSeverityLevelFieldNumber;
const int FailSafeLevel::kSplashesSeverityLevelFieldNumber;
const int FailSafeLevel::kLowSunSeverityLevelFieldNumber;
const int FailSafeLevel::kSunRaySeverityLevelFieldNumber;
const int FailSafeLevel::kOutOfFocusSeverityLevelFieldNumber;
const int FailSafeLevel::kOutOfCalibrationSeverityLevelFieldNumber;
const int FailSafeLevel::kPartialBlockageSeverityLevelFieldNumber;
const int FailSafeLevel::kFrozenWindshieldSeverityLevelFieldNumber;
const int FailSafeLevel::kFogSeverityLevelFieldNumber;
const int FailSafeLevel::kFreeSightFieldNumber;
const int FailSafeLevel::kOutOfCalibTsrBsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FailSafeLevel::FailSafeLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeLevel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.FailSafeLevel)
}
FailSafeLevel::FailSafeLevel(const FailSafeLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rain_severity_level_, &from.rain_severity_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_of_calib_tsr_bs_) -
    reinterpret_cast<char*>(&rain_severity_level_)) + sizeof(out_of_calib_tsr_bs_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.FailSafeLevel)
}

void FailSafeLevel::SharedCtor() {
  ::memset(&rain_severity_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_of_calib_tsr_bs_) -
      reinterpret_cast<char*>(&rain_severity_level_)) + sizeof(out_of_calib_tsr_bs_));
  _cached_size_ = 0;
}

FailSafeLevel::~FailSafeLevel() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.FailSafeLevel)
  SharedDtor();
}

void FailSafeLevel::SharedDtor() {
}

void FailSafeLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailSafeLevel::descriptor() {
  ::protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fail_5fsafe_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FailSafeLevel& FailSafeLevel::default_instance() {
  ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeLevel();
  return *internal_default_instance();
}

FailSafeLevel* FailSafeLevel::New(::google::protobuf::Arena* arena) const {
  FailSafeLevel* n = new FailSafeLevel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FailSafeLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.FailSafeLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rain_severity_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_of_calib_tsr_bs_) -
      reinterpret_cast<char*>(&rain_severity_level_)) + sizeof(out_of_calib_tsr_bs_));
  _internal_metadata_.Clear();
}

bool FailSafeLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.FailSafeLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.SeverityLevel rain_severity_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rain_severity_level(static_cast< ::autodrive::workflow::proto::SeverityLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SeverityLevel full_blockage_severity_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_full_blockage_severity_level(static_cast< ::autodrive::workflow::proto::SeverityLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SeverityLevel blurred_image_severity_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blurred_image_severity_level(static_cast< ::autodrive::workflow::proto::SeverityLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SeverityLevel splashes_severity_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_splashes_severity_level(static_cast< ::autodrive::workflow::proto::SeverityLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SeverityLevel low_sun_severity_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_low_sun_severity_level(static_cast< ::autodrive::workflow::proto::SeverityLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SeverityLevel sun_ray_severity_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sun_ray_severity_level(static_cast< ::autodrive::workflow::proto::SeverityLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool out_of_focus_severity_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_of_focus_severity_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool out_of_calibration_severity_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_of_calibration_severity_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SeverityLevel partial_blockage_severity_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_partial_blockage_severity_level(static_cast< ::autodrive::workflow::proto::SeverityLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SeverityLevel frozen_windshield_severity_level = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_frozen_windshield_severity_level(static_cast< ::autodrive::workflow::proto::SeverityLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SeverityLevel fog_severity_level = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fog_severity_level(static_cast< ::autodrive::workflow::proto::SeverityLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool free_sight = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_sight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.OutOfCalibTsrBs out_of_calib_tsr_bs = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_out_of_calib_tsr_bs(static_cast< ::autodrive::workflow::proto::OutOfCalibTsrBs >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.FailSafeLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.FailSafeLevel)
  return false;
#undef DO_
}

void FailSafeLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.FailSafeLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.SeverityLevel rain_severity_level = 1;
  if (this->rain_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rain_severity_level(), output);
  }

  // .autodrive.workflow.proto.SeverityLevel full_blockage_severity_level = 2;
  if (this->full_blockage_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->full_blockage_severity_level(), output);
  }

  // .autodrive.workflow.proto.SeverityLevel blurred_image_severity_level = 3;
  if (this->blurred_image_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->blurred_image_severity_level(), output);
  }

  // .autodrive.workflow.proto.SeverityLevel splashes_severity_level = 4;
  if (this->splashes_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->splashes_severity_level(), output);
  }

  // .autodrive.workflow.proto.SeverityLevel low_sun_severity_level = 5;
  if (this->low_sun_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->low_sun_severity_level(), output);
  }

  // .autodrive.workflow.proto.SeverityLevel sun_ray_severity_level = 6;
  if (this->sun_ray_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sun_ray_severity_level(), output);
  }

  // bool out_of_focus_severity_level = 7;
  if (this->out_of_focus_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->out_of_focus_severity_level(), output);
  }

  // bool out_of_calibration_severity_level = 8;
  if (this->out_of_calibration_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->out_of_calibration_severity_level(), output);
  }

  // .autodrive.workflow.proto.SeverityLevel partial_blockage_severity_level = 9;
  if (this->partial_blockage_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->partial_blockage_severity_level(), output);
  }

  // .autodrive.workflow.proto.SeverityLevel frozen_windshield_severity_level = 10;
  if (this->frozen_windshield_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->frozen_windshield_severity_level(), output);
  }

  // .autodrive.workflow.proto.SeverityLevel fog_severity_level = 11;
  if (this->fog_severity_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->fog_severity_level(), output);
  }

  // bool free_sight = 12;
  if (this->free_sight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->free_sight(), output);
  }

  // .autodrive.workflow.proto.OutOfCalibTsrBs out_of_calib_tsr_bs = 13;
  if (this->out_of_calib_tsr_bs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->out_of_calib_tsr_bs(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.FailSafeLevel)
}

::google::protobuf::uint8* FailSafeLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.FailSafeLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.SeverityLevel rain_severity_level = 1;
  if (this->rain_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rain_severity_level(), target);
  }

  // .autodrive.workflow.proto.SeverityLevel full_blockage_severity_level = 2;
  if (this->full_blockage_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->full_blockage_severity_level(), target);
  }

  // .autodrive.workflow.proto.SeverityLevel blurred_image_severity_level = 3;
  if (this->blurred_image_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->blurred_image_severity_level(), target);
  }

  // .autodrive.workflow.proto.SeverityLevel splashes_severity_level = 4;
  if (this->splashes_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->splashes_severity_level(), target);
  }

  // .autodrive.workflow.proto.SeverityLevel low_sun_severity_level = 5;
  if (this->low_sun_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->low_sun_severity_level(), target);
  }

  // .autodrive.workflow.proto.SeverityLevel sun_ray_severity_level = 6;
  if (this->sun_ray_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sun_ray_severity_level(), target);
  }

  // bool out_of_focus_severity_level = 7;
  if (this->out_of_focus_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->out_of_focus_severity_level(), target);
  }

  // bool out_of_calibration_severity_level = 8;
  if (this->out_of_calibration_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->out_of_calibration_severity_level(), target);
  }

  // .autodrive.workflow.proto.SeverityLevel partial_blockage_severity_level = 9;
  if (this->partial_blockage_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->partial_blockage_severity_level(), target);
  }

  // .autodrive.workflow.proto.SeverityLevel frozen_windshield_severity_level = 10;
  if (this->frozen_windshield_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->frozen_windshield_severity_level(), target);
  }

  // .autodrive.workflow.proto.SeverityLevel fog_severity_level = 11;
  if (this->fog_severity_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->fog_severity_level(), target);
  }

  // bool free_sight = 12;
  if (this->free_sight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->free_sight(), target);
  }

  // .autodrive.workflow.proto.OutOfCalibTsrBs out_of_calib_tsr_bs = 13;
  if (this->out_of_calib_tsr_bs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->out_of_calib_tsr_bs(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.FailSafeLevel)
  return target;
}

size_t FailSafeLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.FailSafeLevel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.SeverityLevel rain_severity_level = 1;
  if (this->rain_severity_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rain_severity_level());
  }

  // .autodrive.workflow.proto.SeverityLevel full_blockage_severity_level = 2;
  if (this->full_blockage_severity_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->full_blockage_severity_level());
  }

  // .autodrive.workflow.proto.SeverityLevel blurred_image_severity_level = 3;
  if (this->blurred_image_severity_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->blurred_image_severity_level());
  }

  // .autodrive.workflow.proto.SeverityLevel splashes_severity_level = 4;
  if (this->splashes_severity_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->splashes_severity_level());
  }

  // .autodrive.workflow.proto.SeverityLevel low_sun_severity_level = 5;
  if (this->low_sun_severity_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->low_sun_severity_level());
  }

  // .autodrive.workflow.proto.SeverityLevel sun_ray_severity_level = 6;
  if (this->sun_ray_severity_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sun_ray_severity_level());
  }

  // .autodrive.workflow.proto.SeverityLevel partial_blockage_severity_level = 9;
  if (this->partial_blockage_severity_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->partial_blockage_severity_level());
  }

  // bool out_of_focus_severity_level = 7;
  if (this->out_of_focus_severity_level() != 0) {
    total_size += 1 + 1;
  }

  // bool out_of_calibration_severity_level = 8;
  if (this->out_of_calibration_severity_level() != 0) {
    total_size += 1 + 1;
  }

  // bool free_sight = 12;
  if (this->free_sight() != 0) {
    total_size += 1 + 1;
  }

  // .autodrive.workflow.proto.SeverityLevel frozen_windshield_severity_level = 10;
  if (this->frozen_windshield_severity_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->frozen_windshield_severity_level());
  }

  // .autodrive.workflow.proto.SeverityLevel fog_severity_level = 11;
  if (this->fog_severity_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fog_severity_level());
  }

  // .autodrive.workflow.proto.OutOfCalibTsrBs out_of_calib_tsr_bs = 13;
  if (this->out_of_calib_tsr_bs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->out_of_calib_tsr_bs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailSafeLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.FailSafeLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const FailSafeLevel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FailSafeLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.FailSafeLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.FailSafeLevel)
    MergeFrom(*source);
  }
}

void FailSafeLevel::MergeFrom(const FailSafeLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.FailSafeLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rain_severity_level() != 0) {
    set_rain_severity_level(from.rain_severity_level());
  }
  if (from.full_blockage_severity_level() != 0) {
    set_full_blockage_severity_level(from.full_blockage_severity_level());
  }
  if (from.blurred_image_severity_level() != 0) {
    set_blurred_image_severity_level(from.blurred_image_severity_level());
  }
  if (from.splashes_severity_level() != 0) {
    set_splashes_severity_level(from.splashes_severity_level());
  }
  if (from.low_sun_severity_level() != 0) {
    set_low_sun_severity_level(from.low_sun_severity_level());
  }
  if (from.sun_ray_severity_level() != 0) {
    set_sun_ray_severity_level(from.sun_ray_severity_level());
  }
  if (from.partial_blockage_severity_level() != 0) {
    set_partial_blockage_severity_level(from.partial_blockage_severity_level());
  }
  if (from.out_of_focus_severity_level() != 0) {
    set_out_of_focus_severity_level(from.out_of_focus_severity_level());
  }
  if (from.out_of_calibration_severity_level() != 0) {
    set_out_of_calibration_severity_level(from.out_of_calibration_severity_level());
  }
  if (from.free_sight() != 0) {
    set_free_sight(from.free_sight());
  }
  if (from.frozen_windshield_severity_level() != 0) {
    set_frozen_windshield_severity_level(from.frozen_windshield_severity_level());
  }
  if (from.fog_severity_level() != 0) {
    set_fog_severity_level(from.fog_severity_level());
  }
  if (from.out_of_calib_tsr_bs() != 0) {
    set_out_of_calib_tsr_bs(from.out_of_calib_tsr_bs());
  }
}

void FailSafeLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.FailSafeLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailSafeLevel::CopyFrom(const FailSafeLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.FailSafeLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailSafeLevel::IsInitialized() const {
  return true;
}

void FailSafeLevel::Swap(FailSafeLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FailSafeLevel::InternalSwap(FailSafeLevel* other) {
  using std::swap;
  swap(rain_severity_level_, other->rain_severity_level_);
  swap(full_blockage_severity_level_, other->full_blockage_severity_level_);
  swap(blurred_image_severity_level_, other->blurred_image_severity_level_);
  swap(splashes_severity_level_, other->splashes_severity_level_);
  swap(low_sun_severity_level_, other->low_sun_severity_level_);
  swap(sun_ray_severity_level_, other->sun_ray_severity_level_);
  swap(partial_blockage_severity_level_, other->partial_blockage_severity_level_);
  swap(out_of_focus_severity_level_, other->out_of_focus_severity_level_);
  swap(out_of_calibration_severity_level_, other->out_of_calibration_severity_level_);
  swap(free_sight_, other->free_sight_);
  swap(frozen_windshield_severity_level_, other->frozen_windshield_severity_level_);
  swap(fog_severity_level_, other->fog_severity_level_);
  swap(out_of_calib_tsr_bs_, other->out_of_calib_tsr_bs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FailSafeLevel::GetMetadata() const {
  protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fail_5fsafe_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FailSafeResult::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_FailSafeResult_default_instance_._instance.get_mutable()->fail_safe_result_ = const_cast< ::autodrive::workflow::proto::FailSafeLevel*>(
      ::autodrive::workflow::proto::FailSafeLevel::internal_default_instance());
  ::autodrive::workflow::proto::_FailSafeResult_default_instance_._instance.get_mutable()->scene_ = const_cast< ::autodrive::workflow::proto::perception_base::SceneParsing*>(
      ::autodrive::workflow::proto::perception_base::SceneParsing::internal_default_instance());
}
void FailSafeResult::clear_scene() {
  if (GetArenaNoVirtual() == NULL && scene_ != NULL) {
    delete scene_;
  }
  scene_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FailSafeResult::kImageIdFieldNumber;
const int FailSafeResult::kFailSafeResultFieldNumber;
const int FailSafeResult::kSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FailSafeResult::FailSafeResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.FailSafeResult)
}
FailSafeResult::FailSafeResult(const FailSafeResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fail_safe_result()) {
    fail_safe_result_ = new ::autodrive::workflow::proto::FailSafeLevel(*from.fail_safe_result_);
  } else {
    fail_safe_result_ = NULL;
  }
  if (from.has_scene()) {
    scene_ = new ::autodrive::workflow::proto::perception_base::SceneParsing(*from.scene_);
  } else {
    scene_ = NULL;
  }
  image_id_ = from.image_id_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.FailSafeResult)
}

void FailSafeResult::SharedCtor() {
  ::memset(&fail_safe_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_id_) -
      reinterpret_cast<char*>(&fail_safe_result_)) + sizeof(image_id_));
  _cached_size_ = 0;
}

FailSafeResult::~FailSafeResult() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.FailSafeResult)
  SharedDtor();
}

void FailSafeResult::SharedDtor() {
  if (this != internal_default_instance()) delete fail_safe_result_;
  if (this != internal_default_instance()) delete scene_;
}

void FailSafeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailSafeResult::descriptor() {
  ::protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fail_5fsafe_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FailSafeResult& FailSafeResult::default_instance() {
  ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeResult();
  return *internal_default_instance();
}

FailSafeResult* FailSafeResult::New(::google::protobuf::Arena* arena) const {
  FailSafeResult* n = new FailSafeResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FailSafeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.FailSafeResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && fail_safe_result_ != NULL) {
    delete fail_safe_result_;
  }
  fail_safe_result_ = NULL;
  if (GetArenaNoVirtual() == NULL && scene_ != NULL) {
    delete scene_;
  }
  scene_ = NULL;
  image_id_ = 0;
  _internal_metadata_.Clear();
}

bool FailSafeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.FailSafeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_image_id(static_cast< ::autodrive::workflow::proto::perception_base::ImageId >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.FailSafeLevel fail_safe_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fail_safe_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.SceneParsing scene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scene()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.FailSafeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.FailSafeResult)
  return false;
#undef DO_
}

void FailSafeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.FailSafeResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
  if (this->image_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->image_id(), output);
  }

  // .autodrive.workflow.proto.FailSafeLevel fail_safe_result = 2;
  if (this->has_fail_safe_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fail_safe_result_, output);
  }

  // .autodrive.workflow.proto.perception_base.SceneParsing scene = 3;
  if (this->has_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->scene_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.FailSafeResult)
}

::google::protobuf::uint8* FailSafeResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.FailSafeResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
  if (this->image_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->image_id(), target);
  }

  // .autodrive.workflow.proto.FailSafeLevel fail_safe_result = 2;
  if (this->has_fail_safe_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->fail_safe_result_, deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.SceneParsing scene = 3;
  if (this->has_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->scene_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.FailSafeResult)
  return target;
}

size_t FailSafeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.FailSafeResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.FailSafeLevel fail_safe_result = 2;
  if (this->has_fail_safe_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fail_safe_result_);
  }

  // .autodrive.workflow.proto.perception_base.SceneParsing scene = 3;
  if (this->has_scene()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->scene_);
  }

  // .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
  if (this->image_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->image_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailSafeResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.FailSafeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FailSafeResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FailSafeResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.FailSafeResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.FailSafeResult)
    MergeFrom(*source);
  }
}

void FailSafeResult::MergeFrom(const FailSafeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.FailSafeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fail_safe_result()) {
    mutable_fail_safe_result()->::autodrive::workflow::proto::FailSafeLevel::MergeFrom(from.fail_safe_result());
  }
  if (from.has_scene()) {
    mutable_scene()->::autodrive::workflow::proto::perception_base::SceneParsing::MergeFrom(from.scene());
  }
  if (from.image_id() != 0) {
    set_image_id(from.image_id());
  }
}

void FailSafeResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.FailSafeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailSafeResult::CopyFrom(const FailSafeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.FailSafeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailSafeResult::IsInitialized() const {
  return true;
}

void FailSafeResult::Swap(FailSafeResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FailSafeResult::InternalSwap(FailSafeResult* other) {
  using std::swap;
  swap(fail_safe_result_, other->fail_safe_result_);
  swap(scene_, other->scene_);
  swap(image_id_, other->image_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FailSafeResult::GetMetadata() const {
  protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fail_5fsafe_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FailSafeResults::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FailSafeResults::kFailSafeResultDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FailSafeResults::FailSafeResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeResults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.FailSafeResults)
}
FailSafeResults::FailSafeResults(const FailSafeResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fail_safe_result_data_(from.fail_safe_result_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.FailSafeResults)
}

void FailSafeResults::SharedCtor() {
  _cached_size_ = 0;
}

FailSafeResults::~FailSafeResults() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.FailSafeResults)
  SharedDtor();
}

void FailSafeResults::SharedDtor() {
}

void FailSafeResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailSafeResults::descriptor() {
  ::protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fail_5fsafe_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FailSafeResults& FailSafeResults::default_instance() {
  ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeResults();
  return *internal_default_instance();
}

FailSafeResults* FailSafeResults::New(::google::protobuf::Arena* arena) const {
  FailSafeResults* n = new FailSafeResults;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FailSafeResults::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.FailSafeResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fail_safe_result_data_.Clear();
  _internal_metadata_.Clear();
}

bool FailSafeResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.FailSafeResults)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.FailSafeResult fail_safe_result_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fail_safe_result_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.FailSafeResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.FailSafeResults)
  return false;
#undef DO_
}

void FailSafeResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.FailSafeResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.FailSafeResult fail_safe_result_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fail_safe_result_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fail_safe_result_data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.FailSafeResults)
}

::google::protobuf::uint8* FailSafeResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.FailSafeResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.FailSafeResult fail_safe_result_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fail_safe_result_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fail_safe_result_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.FailSafeResults)
  return target;
}

size_t FailSafeResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.FailSafeResults)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.FailSafeResult fail_safe_result_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fail_safe_result_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fail_safe_result_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailSafeResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.FailSafeResults)
  GOOGLE_DCHECK_NE(&from, this);
  const FailSafeResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FailSafeResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.FailSafeResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.FailSafeResults)
    MergeFrom(*source);
  }
}

void FailSafeResults::MergeFrom(const FailSafeResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.FailSafeResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fail_safe_result_data_.MergeFrom(from.fail_safe_result_data_);
}

void FailSafeResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.FailSafeResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailSafeResults::CopyFrom(const FailSafeResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.FailSafeResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailSafeResults::IsInitialized() const {
  return true;
}

void FailSafeResults::Swap(FailSafeResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FailSafeResults::InternalSwap(FailSafeResults* other) {
  using std::swap;
  fail_safe_result_data_.InternalSwap(&other->fail_safe_result_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FailSafeResults::GetMetadata() const {
  protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fail_5fsafe_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FailsafeResultMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_FailsafeResultMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_FailsafeResultMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_FailsafeResultMsg_default_instance_._instance.get_mutable()->safe_results_ = const_cast< ::autodrive::workflow::proto::FailSafeResults*>(
      ::autodrive::workflow::proto::FailSafeResults::internal_default_instance());
}
void FailsafeResultMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void FailsafeResultMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FailsafeResultMsg::kHeaderFieldNumber;
const int FailsafeResultMsg::kErrorFieldNumber;
const int FailsafeResultMsg::kSafeResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FailsafeResultMsg::FailsafeResultMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailsafeResultMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.FailsafeResultMsg)
}
FailsafeResultMsg::FailsafeResultMsg(const FailsafeResultMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_safe_results()) {
    safe_results_ = new ::autodrive::workflow::proto::FailSafeResults(*from.safe_results_);
  } else {
    safe_results_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.FailsafeResultMsg)
}

void FailsafeResultMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_results_) -
      reinterpret_cast<char*>(&header_)) + sizeof(safe_results_));
  _cached_size_ = 0;
}

FailsafeResultMsg::~FailsafeResultMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.FailsafeResultMsg)
  SharedDtor();
}

void FailsafeResultMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete safe_results_;
}

void FailsafeResultMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailsafeResultMsg::descriptor() {
  ::protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fail_5fsafe_5fresult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FailsafeResultMsg& FailsafeResultMsg::default_instance() {
  ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailsafeResultMsg();
  return *internal_default_instance();
}

FailsafeResultMsg* FailsafeResultMsg::New(::google::protobuf::Arena* arena) const {
  FailsafeResultMsg* n = new FailsafeResultMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FailsafeResultMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.FailsafeResultMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && safe_results_ != NULL) {
    delete safe_results_;
  }
  safe_results_ = NULL;
  _internal_metadata_.Clear();
}

bool FailsafeResultMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.FailsafeResultMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.FailSafeResults safe_results = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_safe_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.FailsafeResultMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.FailsafeResultMsg)
  return false;
#undef DO_
}

void FailsafeResultMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.FailsafeResultMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.FailSafeResults safe_results = 3;
  if (this->has_safe_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->safe_results_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.FailsafeResultMsg)
}

::google::protobuf::uint8* FailsafeResultMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.FailsafeResultMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.FailSafeResults safe_results = 3;
  if (this->has_safe_results()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->safe_results_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.FailsafeResultMsg)
  return target;
}

size_t FailsafeResultMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.FailsafeResultMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.FailSafeResults safe_results = 3;
  if (this->has_safe_results()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->safe_results_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailsafeResultMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.FailsafeResultMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FailsafeResultMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FailsafeResultMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.FailsafeResultMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.FailsafeResultMsg)
    MergeFrom(*source);
  }
}

void FailsafeResultMsg::MergeFrom(const FailsafeResultMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.FailsafeResultMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_safe_results()) {
    mutable_safe_results()->::autodrive::workflow::proto::FailSafeResults::MergeFrom(from.safe_results());
  }
}

void FailsafeResultMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.FailsafeResultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailsafeResultMsg::CopyFrom(const FailsafeResultMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.FailsafeResultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailsafeResultMsg::IsInitialized() const {
  return true;
}

void FailsafeResultMsg::Swap(FailsafeResultMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FailsafeResultMsg::InternalSwap(FailsafeResultMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(safe_results_, other->safe_results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FailsafeResultMsg::GetMetadata() const {
  protobuf_fail_5fsafe_5fresult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fail_5fsafe_5fresult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
