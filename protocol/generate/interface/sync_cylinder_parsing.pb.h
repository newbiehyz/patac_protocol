// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_cylinder_parsing.proto

#ifndef PROTOBUF_sync_5fcylinder_5fparsing_2eproto__INCLUDED
#define PROTOBUF_sync_5fcylinder_5fparsing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "perception_base.pb.h"
#include "parsing_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_sync_5fcylinder_5fparsing_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCylinderParsingImageDataImpl();
void InitDefaultsCylinderParsingImageData();
void InitDefaultsCylinderParsingDataImpl();
void InitDefaultsCylinderParsingData();
void InitDefaultsSyncCylinderParsingMsgImpl();
void InitDefaultsSyncCylinderParsingMsg();
inline void InitDefaults() {
  InitDefaultsCylinderParsingImageData();
  InitDefaultsCylinderParsingData();
  InitDefaultsSyncCylinderParsingMsg();
}
}  // namespace protobuf_sync_5fcylinder_5fparsing_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class CylinderParsingData;
class CylinderParsingDataDefaultTypeInternal;
extern CylinderParsingDataDefaultTypeInternal _CylinderParsingData_default_instance_;
class CylinderParsingImageData;
class CylinderParsingImageDataDefaultTypeInternal;
extern CylinderParsingImageDataDefaultTypeInternal _CylinderParsingImageData_default_instance_;
class SyncCylinderParsingMsg;
class SyncCylinderParsingMsgDefaultTypeInternal;
extern SyncCylinderParsingMsgDefaultTypeInternal _SyncCylinderParsingMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum CylinderParsingLabel {
  kRoad = 0,
  kSidewalk = 1,
  kSky = 2,
  kTerrain = 3,
  kCurb = 4,
  kFence = 5,
  kTree = 6,
  kPole = 7,
  kTrafficSign = 8,
  kVehicle = 9,
  kThreeWheel = 10,
  kTwoWheel = 11,
  kPerson = 12,
  kRider = 13,
  kTrolley = 14,
  kTrafficCone = 15,
  kBollard = 16,
  kFoldingWarningSign = 17,
  kSingleWaterBarrier = 18,
  kUntraversable = 19,
  kParkingRod = 20,
  kParkingLock = 21,
  kCementColumn = 22,
  kbackground = 23,
  kFireHydrant = 24,
  kPaintedWallRoot = 25,
  CylinderParsingLabel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CylinderParsingLabel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CylinderParsingLabel_IsValid(int value);
const CylinderParsingLabel CylinderParsingLabel_MIN = kRoad;
const CylinderParsingLabel CylinderParsingLabel_MAX = kPaintedWallRoot;
const int CylinderParsingLabel_ARRAYSIZE = CylinderParsingLabel_MAX + 1;

const ::google::protobuf::EnumDescriptor* CylinderParsingLabel_descriptor();
inline const ::std::string& CylinderParsingLabel_Name(CylinderParsingLabel value) {
  return ::google::protobuf::internal::NameOfEnum(
    CylinderParsingLabel_descriptor(), value);
}
inline bool CylinderParsingLabel_Parse(
    const ::std::string& name, CylinderParsingLabel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CylinderParsingLabel>(
    CylinderParsingLabel_descriptor(), name, value);
}
// ===================================================================

class CylinderParsingImageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.CylinderParsingImageData) */ {
 public:
  CylinderParsingImageData();
  virtual ~CylinderParsingImageData();

  CylinderParsingImageData(const CylinderParsingImageData& from);

  inline CylinderParsingImageData& operator=(const CylinderParsingImageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CylinderParsingImageData(CylinderParsingImageData&& from) noexcept
    : CylinderParsingImageData() {
    *this = ::std::move(from);
  }

  inline CylinderParsingImageData& operator=(CylinderParsingImageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CylinderParsingImageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CylinderParsingImageData* internal_default_instance() {
    return reinterpret_cast<const CylinderParsingImageData*>(
               &_CylinderParsingImageData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CylinderParsingImageData* other);
  friend void swap(CylinderParsingImageData& a, CylinderParsingImageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CylinderParsingImageData* New() const PROTOBUF_FINAL { return New(NULL); }

  CylinderParsingImageData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CylinderParsingImageData& from);
  void MergeFrom(const CylinderParsingImageData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CylinderParsingImageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 channel = 4;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.CylinderParsingImageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 channel_;
  mutable int _cached_size_;
  friend struct ::protobuf_sync_5fcylinder_5fparsing_2eproto::TableStruct;
  friend void ::protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsCylinderParsingImageDataImpl();
};
// -------------------------------------------------------------------

class CylinderParsingData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.CylinderParsingData) */ {
 public:
  CylinderParsingData();
  virtual ~CylinderParsingData();

  CylinderParsingData(const CylinderParsingData& from);

  inline CylinderParsingData& operator=(const CylinderParsingData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CylinderParsingData(CylinderParsingData&& from) noexcept
    : CylinderParsingData() {
    *this = ::std::move(from);
  }

  inline CylinderParsingData& operator=(CylinderParsingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CylinderParsingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CylinderParsingData* internal_default_instance() {
    return reinterpret_cast<const CylinderParsingData*>(
               &_CylinderParsingData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CylinderParsingData* other);
  friend void swap(CylinderParsingData& a, CylinderParsingData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CylinderParsingData* New() const PROTOBUF_FINAL { return New(NULL); }

  CylinderParsingData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CylinderParsingData& from);
  void MergeFrom(const CylinderParsingData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CylinderParsingData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.CylinderParsingImageData free_space = 3;
  bool has_free_space() const;
  void clear_free_space();
  static const int kFreeSpaceFieldNumber = 3;
  const ::autodrive::workflow::proto::CylinderParsingImageData& free_space() const;
  ::autodrive::workflow::proto::CylinderParsingImageData* release_free_space();
  ::autodrive::workflow::proto::CylinderParsingImageData* mutable_free_space();
  void set_allocated_free_space(::autodrive::workflow::proto::CylinderParsingImageData* free_space);

  // .autodrive.workflow.proto.CylinderParsingImageData feature_map = 4;
  bool has_feature_map() const;
  void clear_feature_map();
  static const int kFeatureMapFieldNumber = 4;
  const ::autodrive::workflow::proto::CylinderParsingImageData& feature_map() const;
  ::autodrive::workflow::proto::CylinderParsingImageData* release_feature_map();
  ::autodrive::workflow::proto::CylinderParsingImageData* mutable_feature_map();
  void set_allocated_feature_map(::autodrive::workflow::proto::CylinderParsingImageData* feature_map);

  // .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
  bool has_rle_parsing_compressed() const;
  void clear_rle_parsing_compressed();
  static const int kRleParsingCompressedFieldNumber = 5;
  const ::autodrive::workflow::proto::RleCompressedData& rle_parsing_compressed() const;
  ::autodrive::workflow::proto::RleCompressedData* release_rle_parsing_compressed();
  ::autodrive::workflow::proto::RleCompressedData* mutable_rle_parsing_compressed();
  void set_allocated_rle_parsing_compressed(::autodrive::workflow::proto::RleCompressedData* rle_parsing_compressed);

  // .autodrive.workflow.proto.perception_base.Rect roi_output = 6;
  bool has_roi_output() const;
  void clear_roi_output();
  static const int kRoiOutputFieldNumber = 6;
  const ::autodrive::workflow::proto::perception_base::Rect& roi_output() const;
  ::autodrive::workflow::proto::perception_base::Rect* release_roi_output();
  ::autodrive::workflow::proto::perception_base::Rect* mutable_roi_output();
  void set_allocated_roi_output(::autodrive::workflow::proto::perception_base::Rect* roi_output);

  // uint32 camera_idx = 1;
  void clear_camera_idx();
  static const int kCameraIdxFieldNumber = 1;
  ::google::protobuf::uint32 camera_idx() const;
  void set_camera_idx(::google::protobuf::uint32 value);

  // float scale = 2;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.CylinderParsingData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::CylinderParsingImageData* free_space_;
  ::autodrive::workflow::proto::CylinderParsingImageData* feature_map_;
  ::autodrive::workflow::proto::RleCompressedData* rle_parsing_compressed_;
  ::autodrive::workflow::proto::perception_base::Rect* roi_output_;
  ::google::protobuf::uint32 camera_idx_;
  float scale_;
  mutable int _cached_size_;
  friend struct ::protobuf_sync_5fcylinder_5fparsing_2eproto::TableStruct;
  friend void ::protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsCylinderParsingDataImpl();
};
// -------------------------------------------------------------------

class SyncCylinderParsingMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.SyncCylinderParsingMsg) */ {
 public:
  SyncCylinderParsingMsg();
  virtual ~SyncCylinderParsingMsg();

  SyncCylinderParsingMsg(const SyncCylinderParsingMsg& from);

  inline SyncCylinderParsingMsg& operator=(const SyncCylinderParsingMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncCylinderParsingMsg(SyncCylinderParsingMsg&& from) noexcept
    : SyncCylinderParsingMsg() {
    *this = ::std::move(from);
  }

  inline SyncCylinderParsingMsg& operator=(SyncCylinderParsingMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncCylinderParsingMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncCylinderParsingMsg* internal_default_instance() {
    return reinterpret_cast<const SyncCylinderParsingMsg*>(
               &_SyncCylinderParsingMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SyncCylinderParsingMsg* other);
  friend void swap(SyncCylinderParsingMsg& a, SyncCylinderParsingMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncCylinderParsingMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncCylinderParsingMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncCylinderParsingMsg& from);
  void MergeFrom(const SyncCylinderParsingMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncCylinderParsingMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.CylinderParsingData cylinder_parsing_data = 3;
  int cylinder_parsing_data_size() const;
  void clear_cylinder_parsing_data();
  static const int kCylinderParsingDataFieldNumber = 3;
  const ::autodrive::workflow::proto::CylinderParsingData& cylinder_parsing_data(int index) const;
  ::autodrive::workflow::proto::CylinderParsingData* mutable_cylinder_parsing_data(int index);
  ::autodrive::workflow::proto::CylinderParsingData* add_cylinder_parsing_data();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingData >*
      mutable_cylinder_parsing_data();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingData >&
      cylinder_parsing_data() const;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.SyncCylinderParsingMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingData > cylinder_parsing_data_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  mutable int _cached_size_;
  friend struct ::protobuf_sync_5fcylinder_5fparsing_2eproto::TableStruct;
  friend void ::protobuf_sync_5fcylinder_5fparsing_2eproto::InitDefaultsSyncCylinderParsingMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CylinderParsingImageData

// bytes data = 1;
inline void CylinderParsingImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CylinderParsingImageData::data() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingImageData.data)
  return data_.GetNoArena();
}
inline void CylinderParsingImageData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CylinderParsingImageData.data)
}
#if LANG_CXX11
inline void CylinderParsingImageData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.CylinderParsingImageData.data)
}
#endif
inline void CylinderParsingImageData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.CylinderParsingImageData.data)
}
inline void CylinderParsingImageData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.CylinderParsingImageData.data)
}
inline ::std::string* CylinderParsingImageData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderParsingImageData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CylinderParsingImageData::release_data() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CylinderParsingImageData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CylinderParsingImageData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CylinderParsingImageData.data)
}

// uint32 width = 2;
inline void CylinderParsingImageData::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 CylinderParsingImageData::width() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingImageData.width)
  return width_;
}
inline void CylinderParsingImageData::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CylinderParsingImageData.width)
}

// uint32 height = 3;
inline void CylinderParsingImageData::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 CylinderParsingImageData::height() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingImageData.height)
  return height_;
}
inline void CylinderParsingImageData::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CylinderParsingImageData.height)
}

// uint32 channel = 4;
inline void CylinderParsingImageData::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 CylinderParsingImageData::channel() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingImageData.channel)
  return channel_;
}
inline void CylinderParsingImageData::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CylinderParsingImageData.channel)
}

// -------------------------------------------------------------------

// CylinderParsingData

// uint32 camera_idx = 1;
inline void CylinderParsingData::clear_camera_idx() {
  camera_idx_ = 0u;
}
inline ::google::protobuf::uint32 CylinderParsingData::camera_idx() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingData.camera_idx)
  return camera_idx_;
}
inline void CylinderParsingData::set_camera_idx(::google::protobuf::uint32 value) {
  
  camera_idx_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CylinderParsingData.camera_idx)
}

// float scale = 2;
inline void CylinderParsingData::clear_scale() {
  scale_ = 0;
}
inline float CylinderParsingData::scale() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingData.scale)
  return scale_;
}
inline void CylinderParsingData::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CylinderParsingData.scale)
}

// .autodrive.workflow.proto.CylinderParsingImageData free_space = 3;
inline bool CylinderParsingData::has_free_space() const {
  return this != internal_default_instance() && free_space_ != NULL;
}
inline void CylinderParsingData::clear_free_space() {
  if (GetArenaNoVirtual() == NULL && free_space_ != NULL) {
    delete free_space_;
  }
  free_space_ = NULL;
}
inline const ::autodrive::workflow::proto::CylinderParsingImageData& CylinderParsingData::free_space() const {
  const ::autodrive::workflow::proto::CylinderParsingImageData* p = free_space_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingData.free_space)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::CylinderParsingImageData*>(
      &::autodrive::workflow::proto::_CylinderParsingImageData_default_instance_);
}
inline ::autodrive::workflow::proto::CylinderParsingImageData* CylinderParsingData::release_free_space() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CylinderParsingData.free_space)
  
  ::autodrive::workflow::proto::CylinderParsingImageData* temp = free_space_;
  free_space_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::CylinderParsingImageData* CylinderParsingData::mutable_free_space() {
  
  if (free_space_ == NULL) {
    free_space_ = new ::autodrive::workflow::proto::CylinderParsingImageData;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderParsingData.free_space)
  return free_space_;
}
inline void CylinderParsingData::set_allocated_free_space(::autodrive::workflow::proto::CylinderParsingImageData* free_space) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete free_space_;
  }
  if (free_space) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      free_space = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, free_space, submessage_arena);
    }
    
  } else {
    
  }
  free_space_ = free_space;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CylinderParsingData.free_space)
}

// .autodrive.workflow.proto.CylinderParsingImageData feature_map = 4;
inline bool CylinderParsingData::has_feature_map() const {
  return this != internal_default_instance() && feature_map_ != NULL;
}
inline void CylinderParsingData::clear_feature_map() {
  if (GetArenaNoVirtual() == NULL && feature_map_ != NULL) {
    delete feature_map_;
  }
  feature_map_ = NULL;
}
inline const ::autodrive::workflow::proto::CylinderParsingImageData& CylinderParsingData::feature_map() const {
  const ::autodrive::workflow::proto::CylinderParsingImageData* p = feature_map_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingData.feature_map)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::CylinderParsingImageData*>(
      &::autodrive::workflow::proto::_CylinderParsingImageData_default_instance_);
}
inline ::autodrive::workflow::proto::CylinderParsingImageData* CylinderParsingData::release_feature_map() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CylinderParsingData.feature_map)
  
  ::autodrive::workflow::proto::CylinderParsingImageData* temp = feature_map_;
  feature_map_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::CylinderParsingImageData* CylinderParsingData::mutable_feature_map() {
  
  if (feature_map_ == NULL) {
    feature_map_ = new ::autodrive::workflow::proto::CylinderParsingImageData;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderParsingData.feature_map)
  return feature_map_;
}
inline void CylinderParsingData::set_allocated_feature_map(::autodrive::workflow::proto::CylinderParsingImageData* feature_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete feature_map_;
  }
  if (feature_map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      feature_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feature_map, submessage_arena);
    }
    
  } else {
    
  }
  feature_map_ = feature_map;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CylinderParsingData.feature_map)
}

// .autodrive.workflow.proto.RleCompressedData rle_parsing_compressed = 5;
inline bool CylinderParsingData::has_rle_parsing_compressed() const {
  return this != internal_default_instance() && rle_parsing_compressed_ != NULL;
}
inline const ::autodrive::workflow::proto::RleCompressedData& CylinderParsingData::rle_parsing_compressed() const {
  const ::autodrive::workflow::proto::RleCompressedData* p = rle_parsing_compressed_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingData.rle_parsing_compressed)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::RleCompressedData*>(
      &::autodrive::workflow::proto::_RleCompressedData_default_instance_);
}
inline ::autodrive::workflow::proto::RleCompressedData* CylinderParsingData::release_rle_parsing_compressed() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CylinderParsingData.rle_parsing_compressed)
  
  ::autodrive::workflow::proto::RleCompressedData* temp = rle_parsing_compressed_;
  rle_parsing_compressed_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::RleCompressedData* CylinderParsingData::mutable_rle_parsing_compressed() {
  
  if (rle_parsing_compressed_ == NULL) {
    rle_parsing_compressed_ = new ::autodrive::workflow::proto::RleCompressedData;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderParsingData.rle_parsing_compressed)
  return rle_parsing_compressed_;
}
inline void CylinderParsingData::set_allocated_rle_parsing_compressed(::autodrive::workflow::proto::RleCompressedData* rle_parsing_compressed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rle_parsing_compressed_);
  }
  if (rle_parsing_compressed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rle_parsing_compressed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rle_parsing_compressed, submessage_arena);
    }
    
  } else {
    
  }
  rle_parsing_compressed_ = rle_parsing_compressed;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CylinderParsingData.rle_parsing_compressed)
}

// .autodrive.workflow.proto.perception_base.Rect roi_output = 6;
inline bool CylinderParsingData::has_roi_output() const {
  return this != internal_default_instance() && roi_output_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::Rect& CylinderParsingData::roi_output() const {
  const ::autodrive::workflow::proto::perception_base::Rect* p = roi_output_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderParsingData.roi_output)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::Rect*>(
      &::autodrive::workflow::proto::perception_base::_Rect_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::Rect* CylinderParsingData::release_roi_output() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CylinderParsingData.roi_output)
  
  ::autodrive::workflow::proto::perception_base::Rect* temp = roi_output_;
  roi_output_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::Rect* CylinderParsingData::mutable_roi_output() {
  
  if (roi_output_ == NULL) {
    roi_output_ = new ::autodrive::workflow::proto::perception_base::Rect;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderParsingData.roi_output)
  return roi_output_;
}
inline void CylinderParsingData::set_allocated_roi_output(::autodrive::workflow::proto::perception_base::Rect* roi_output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(roi_output_);
  }
  if (roi_output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roi_output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roi_output, submessage_arena);
    }
    
  } else {
    
  }
  roi_output_ = roi_output;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CylinderParsingData.roi_output)
}

// -------------------------------------------------------------------

// SyncCylinderParsingMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool SyncCylinderParsingMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& SyncCylinderParsingMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SyncCylinderParsingMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* SyncCylinderParsingMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SyncCylinderParsingMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* SyncCylinderParsingMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SyncCylinderParsingMsg.header)
  return header_;
}
inline void SyncCylinderParsingMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SyncCylinderParsingMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool SyncCylinderParsingMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& SyncCylinderParsingMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SyncCylinderParsingMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* SyncCylinderParsingMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SyncCylinderParsingMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* SyncCylinderParsingMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SyncCylinderParsingMsg.error)
  return error_;
}
inline void SyncCylinderParsingMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SyncCylinderParsingMsg.error)
}

// repeated .autodrive.workflow.proto.CylinderParsingData cylinder_parsing_data = 3;
inline int SyncCylinderParsingMsg::cylinder_parsing_data_size() const {
  return cylinder_parsing_data_.size();
}
inline void SyncCylinderParsingMsg::clear_cylinder_parsing_data() {
  cylinder_parsing_data_.Clear();
}
inline const ::autodrive::workflow::proto::CylinderParsingData& SyncCylinderParsingMsg::cylinder_parsing_data(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SyncCylinderParsingMsg.cylinder_parsing_data)
  return cylinder_parsing_data_.Get(index);
}
inline ::autodrive::workflow::proto::CylinderParsingData* SyncCylinderParsingMsg::mutable_cylinder_parsing_data(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SyncCylinderParsingMsg.cylinder_parsing_data)
  return cylinder_parsing_data_.Mutable(index);
}
inline ::autodrive::workflow::proto::CylinderParsingData* SyncCylinderParsingMsg::add_cylinder_parsing_data() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.SyncCylinderParsingMsg.cylinder_parsing_data)
  return cylinder_parsing_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingData >*
SyncCylinderParsingMsg::mutable_cylinder_parsing_data() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.SyncCylinderParsingMsg.cylinder_parsing_data)
  return &cylinder_parsing_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingData >&
SyncCylinderParsingMsg::cylinder_parsing_data() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.SyncCylinderParsingMsg.cylinder_parsing_data)
  return cylinder_parsing_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::CylinderParsingLabel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::CylinderParsingLabel>() {
  return ::autodrive::workflow::proto::CylinderParsingLabel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sync_5fcylinder_5fparsing_2eproto__INCLUDED
