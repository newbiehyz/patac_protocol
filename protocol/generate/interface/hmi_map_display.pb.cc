// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_map_display.proto

#include "hmi_map_display.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class HmdGlbPrcpPrkgSlotsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmdGlbPrcpPrkgSlots>
      _instance;
} _HmdGlbPrcpPrkgSlots_default_instance_;
class HmdGlbPrcpObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmdGlbPrcpObstacle>
      _instance;
} _HmdGlbPrcpObstacle_default_instance_;
class HmdGlbRoadMakMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmdGlbRoadMakMap>
      _instance;
} _HmdGlbRoadMakMap_default_instance_;
class HmdMapCommonHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmdMapCommonHeader>
      _instance;
} _HmdMapCommonHeader_default_instance_;
class HmdMapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmdMapInfo>
      _instance;
} _HmdMapInfo_default_instance_;
class HmdMapDisplayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmdMapDisplay>
      _instance;
} _HmdMapDisplay_default_instance_;
class HmiMapDisplayMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiMapDisplayMsg>
      _instance;
} _HmiMapDisplayMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_hmi_5fmap_5fdisplay_2eproto {
void InitDefaultsHmdGlbPrcpPrkgSlotsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fdisplay_2eproto::InitDefaultsGlbPrkgSlot();
  {
    void* ptr = &::autodrive::workflow::proto::_HmdGlbPrcpPrkgSlots_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmdGlbPrcpPrkgSlots();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmdGlbPrcpPrkgSlots::InitAsDefaultInstance();
}

void InitDefaultsHmdGlbPrcpPrkgSlots() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmdGlbPrcpPrkgSlotsImpl);
}

void InitDefaultsHmdGlbPrcpObstacleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fdisplay_2eproto::InitDefaultsGlbObstacle();
  {
    void* ptr = &::autodrive::workflow::proto::_HmdGlbPrcpObstacle_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmdGlbPrcpObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmdGlbPrcpObstacle::InitAsDefaultInstance();
}

void InitDefaultsHmdGlbPrcpObstacle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmdGlbPrcpObstacleImpl);
}

void InitDefaultsHmdGlbRoadMakMapImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fdisplay_2eproto::InitDefaultsGlbRoadMark();
  {
    void* ptr = &::autodrive::workflow::proto::_HmdGlbRoadMakMap_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmdGlbRoadMakMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmdGlbRoadMakMap::InitAsDefaultInstance();
}

void InitDefaultsHmdGlbRoadMakMap() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmdGlbRoadMakMapImpl);
}

void InitDefaultsHmdMapCommonHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_HmdMapCommonHeader_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmdMapCommonHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmdMapCommonHeader::InitAsDefaultInstance();
}

void InitDefaultsHmdMapCommonHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmdMapCommonHeaderImpl);
}

void InitDefaultsHmdMapInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapCommonHeader();
  protobuf_map_5fdisplay_2eproto::InitDefaultsGlbTrajectory();
  protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdGlbPrcpPrkgSlots();
  protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdGlbRoadMakMap();
  protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdGlbPrcpObstacle();
  {
    void* ptr = &::autodrive::workflow::proto::_HmdMapInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmdMapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmdMapInfo::InitAsDefaultInstance();
}

void InitDefaultsHmdMapInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmdMapInfoImpl);
}

void InitDefaultsHmdMapDisplayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapInfo();
  protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapCommonHeader();
  {
    void* ptr = &::autodrive::workflow::proto::_HmdMapDisplay_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmdMapDisplay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmdMapDisplay::InitAsDefaultInstance();
}

void InitDefaultsHmdMapDisplay() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmdMapDisplayImpl);
}

void InitDefaultsHmiMapDisplayMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapDisplay();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiMapDisplayMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiMapDisplayMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiMapDisplayMsg::InitAsDefaultInstance();
}

void InitDefaultsHmiMapDisplayMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiMapDisplayMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdGlbPrcpPrkgSlots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdGlbPrcpPrkgSlots, glb_prkg_slots_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdGlbPrcpObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdGlbPrcpObstacle, glb_prcp_obstacle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdGlbRoadMakMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdGlbRoadMakMap, glb_road_mak_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, map_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, utc_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, num_glb_trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, map_total_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, map_total_floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapCommonHeader, slot_parking_times_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapInfo, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapInfo, global_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapInfo, global_percep_parking_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapInfo, global_road_mark_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapInfo, global_perception_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapInfo, map_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapInfo, rest_map_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapInfo, num_speed_bumps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapDisplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapDisplay, map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapDisplay, update_map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapDisplay, num_maps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmdMapDisplay, all_map_headers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplayMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplayMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplayMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiMapDisplayMsg, map_display_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::HmdGlbPrcpPrkgSlots)},
  { 6, -1, sizeof(::autodrive::workflow::proto::HmdGlbPrcpObstacle)},
  { 12, -1, sizeof(::autodrive::workflow::proto::HmdGlbRoadMakMap)},
  { 18, -1, sizeof(::autodrive::workflow::proto::HmdMapCommonHeader)},
  { 32, -1, sizeof(::autodrive::workflow::proto::HmdMapInfo)},
  { 45, -1, sizeof(::autodrive::workflow::proto::HmdMapDisplay)},
  { 54, -1, sizeof(::autodrive::workflow::proto::HmiMapDisplayMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmdGlbPrcpPrkgSlots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmdGlbPrcpObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmdGlbRoadMakMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmdMapCommonHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmdMapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmdMapDisplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiMapDisplayMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hmi_map_display.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025hmi_map_display.proto\022\030autodrive.workf"
      "low.proto\032\014common.proto\032\025fusion_obstacle"
      ".proto\032\022localization.proto\032\021map_display."
      "proto\032\017vpa_state.proto\032\016ndm_base.proto\"T"
      "\n\023HmdGlbPrcpPrkgSlots\022=\n\016glb_prkg_slots\030"
      "\001 \003(\0132%.autodrive.workflow.proto.GlbPrkg"
      "Slot\"V\n\022HmdGlbPrcpObstacle\022@\n\021glb_prcp_o"
      "bstacle\030\001 \003(\0132%.autodrive.workflow.proto"
      ".GlbObstacle\"S\n\020HmdGlbRoadMakMap\022\?\n\020glb_"
      "road_mak_map\030\001 \003(\0132%.autodrive.workflow."
      "proto.GlbRoadMark\"\205\002\n\022HmdMapCommonHeader"
      "\022\016\n\006map_id\030\001 \001(\005\0227\n\010map_type\030\002 \001(\0162%.aut"
      "odrive.workflow.proto.MapDataType\022\020\n\010utc"
      "_time\030\003 \001(\004\022\020\n\010latitude\030\004 \001(\005\022\021\n\tlongitu"
      "de\030\005 \001(\005\022 \n\030num_glb_trajectory_point\030\006 \001"
      "(\r\022\030\n\020map_total_height\030\007 \001(\002\022\027\n\017map_tota"
      "l_floor\030\010 \001(\002\022\032\n\022slot_parking_times\030\t \001("
      "\005\"\310\003\n\nHmdMapInfo\022<\n\006header\030\001 \001(\0132,.autod"
      "rive.workflow.proto.HmdMapCommonHeader\022B"
      "\n\021global_trajectory\030\002 \001(\0132\'.autodrive.wo"
      "rkflow.proto.GlbTrajectory\022R\n\033global_per"
      "cep_parking_slots\030\003 \001(\0132-.autodrive.work"
      "flow.proto.HmdGlbPrcpPrkgSlots\022H\n\024global"
      "_road_mark_map\030\004 \001(\0132*.autodrive.workflo"
      "w.proto.HmdGlbRoadMakMap\022P\n\032global_perce"
      "ption_obstacle\030\005 \001(\0132,.autodrive.workflo"
      "w.proto.HmdGlbPrcpObstacle\022\024\n\014map_distan"
      "ce\030\006 \001(\002\022\031\n\021rest_map_distance\030\007 \001(\002\022\027\n\017n"
      "um_speed_bumps\030\010 \001(\005\"\271\001\n\rHmdMapDisplay\0226"
      "\n\010map_info\030\001 \001(\0132$.autodrive.workflow.pr"
      "oto.HmdMapInfo\022\027\n\017update_map_info\030\002 \001(\010\022"
      "\020\n\010num_maps\030\003 \001(\005\022E\n\017all_map_headers\030\004 \003"
      "(\0132,.autodrive.workflow.proto.HmdMapComm"
      "onHeader\"\265\001\n\020HmiMapDisplayMsg\0223\n\006header\030"
      "\001 \001(\0132#.autodrive.workflow.proto.MsgHead"
      "er\022.\n\005error\030\002 \001(\0132\037.autodrive.workflow.p"
      "roto.Error\022<\n\013map_display\030\003 \001(\0132\'.autodr"
      "ive.workflow.proto.HmdMapDisplayb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hmi_map_display.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_fusion_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_localization_2eproto::AddDescriptors();
  ::protobuf_map_5fdisplay_2eproto::AddDescriptors();
  ::protobuf_vpa_5fstate_2eproto::AddDescriptors();
  ::protobuf_ndm_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_hmi_5fmap_5fdisplay_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void HmdGlbPrcpPrkgSlots::InitAsDefaultInstance() {
}
void HmdGlbPrcpPrkgSlots::clear_glb_prkg_slots() {
  glb_prkg_slots_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmdGlbPrcpPrkgSlots::kGlbPrkgSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmdGlbPrcpPrkgSlots::HmdGlbPrcpPrkgSlots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdGlbPrcpPrkgSlots();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
}
HmdGlbPrcpPrkgSlots::HmdGlbPrcpPrkgSlots(const HmdGlbPrcpPrkgSlots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      glb_prkg_slots_(from.glb_prkg_slots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
}

void HmdGlbPrcpPrkgSlots::SharedCtor() {
  _cached_size_ = 0;
}

HmdGlbPrcpPrkgSlots::~HmdGlbPrcpPrkgSlots() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  SharedDtor();
}

void HmdGlbPrcpPrkgSlots::SharedDtor() {
}

void HmdGlbPrcpPrkgSlots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmdGlbPrcpPrkgSlots::descriptor() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmdGlbPrcpPrkgSlots& HmdGlbPrcpPrkgSlots::default_instance() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdGlbPrcpPrkgSlots();
  return *internal_default_instance();
}

HmdGlbPrcpPrkgSlots* HmdGlbPrcpPrkgSlots::New(::google::protobuf::Arena* arena) const {
  HmdGlbPrcpPrkgSlots* n = new HmdGlbPrcpPrkgSlots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmdGlbPrcpPrkgSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  glb_prkg_slots_.Clear();
  _internal_metadata_.Clear();
}

bool HmdGlbPrcpPrkgSlots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_glb_prkg_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  return false;
#undef DO_
}

void HmdGlbPrcpPrkgSlots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_prkg_slots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->glb_prkg_slots(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
}

::google::protobuf::uint8* HmdGlbPrcpPrkgSlots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_prkg_slots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->glb_prkg_slots(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  return target;
}

size_t HmdGlbPrcpPrkgSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.GlbPrkgSlot glb_prkg_slots = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->glb_prkg_slots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->glb_prkg_slots(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmdGlbPrcpPrkgSlots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  GOOGLE_DCHECK_NE(&from, this);
  const HmdGlbPrcpPrkgSlots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmdGlbPrcpPrkgSlots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
    MergeFrom(*source);
  }
}

void HmdGlbPrcpPrkgSlots::MergeFrom(const HmdGlbPrcpPrkgSlots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  glb_prkg_slots_.MergeFrom(from.glb_prkg_slots_);
}

void HmdGlbPrcpPrkgSlots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmdGlbPrcpPrkgSlots::CopyFrom(const HmdGlbPrcpPrkgSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmdGlbPrcpPrkgSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmdGlbPrcpPrkgSlots::IsInitialized() const {
  return true;
}

void HmdGlbPrcpPrkgSlots::Swap(HmdGlbPrcpPrkgSlots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmdGlbPrcpPrkgSlots::InternalSwap(HmdGlbPrcpPrkgSlots* other) {
  using std::swap;
  glb_prkg_slots_.InternalSwap(&other->glb_prkg_slots_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmdGlbPrcpPrkgSlots::GetMetadata() const {
  protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmdGlbPrcpObstacle::InitAsDefaultInstance() {
}
void HmdGlbPrcpObstacle::clear_glb_prcp_obstacle() {
  glb_prcp_obstacle_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmdGlbPrcpObstacle::kGlbPrcpObstacleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmdGlbPrcpObstacle::HmdGlbPrcpObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdGlbPrcpObstacle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmdGlbPrcpObstacle)
}
HmdGlbPrcpObstacle::HmdGlbPrcpObstacle(const HmdGlbPrcpObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      glb_prcp_obstacle_(from.glb_prcp_obstacle_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmdGlbPrcpObstacle)
}

void HmdGlbPrcpObstacle::SharedCtor() {
  _cached_size_ = 0;
}

HmdGlbPrcpObstacle::~HmdGlbPrcpObstacle() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  SharedDtor();
}

void HmdGlbPrcpObstacle::SharedDtor() {
}

void HmdGlbPrcpObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmdGlbPrcpObstacle::descriptor() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmdGlbPrcpObstacle& HmdGlbPrcpObstacle::default_instance() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdGlbPrcpObstacle();
  return *internal_default_instance();
}

HmdGlbPrcpObstacle* HmdGlbPrcpObstacle::New(::google::protobuf::Arena* arena) const {
  HmdGlbPrcpObstacle* n = new HmdGlbPrcpObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmdGlbPrcpObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  glb_prcp_obstacle_.Clear();
  _internal_metadata_.Clear();
}

bool HmdGlbPrcpObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_glb_prcp_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  return false;
#undef DO_
}

void HmdGlbPrcpObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_prcp_obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->glb_prcp_obstacle(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmdGlbPrcpObstacle)
}

::google::protobuf::uint8* HmdGlbPrcpObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_prcp_obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->glb_prcp_obstacle(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  return target;
}

size_t HmdGlbPrcpObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.GlbObstacle glb_prcp_obstacle = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->glb_prcp_obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->glb_prcp_obstacle(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmdGlbPrcpObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const HmdGlbPrcpObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmdGlbPrcpObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmdGlbPrcpObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmdGlbPrcpObstacle)
    MergeFrom(*source);
  }
}

void HmdGlbPrcpObstacle::MergeFrom(const HmdGlbPrcpObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  glb_prcp_obstacle_.MergeFrom(from.glb_prcp_obstacle_);
}

void HmdGlbPrcpObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmdGlbPrcpObstacle::CopyFrom(const HmdGlbPrcpObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmdGlbPrcpObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmdGlbPrcpObstacle::IsInitialized() const {
  return true;
}

void HmdGlbPrcpObstacle::Swap(HmdGlbPrcpObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmdGlbPrcpObstacle::InternalSwap(HmdGlbPrcpObstacle* other) {
  using std::swap;
  glb_prcp_obstacle_.InternalSwap(&other->glb_prcp_obstacle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmdGlbPrcpObstacle::GetMetadata() const {
  protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmdGlbRoadMakMap::InitAsDefaultInstance() {
}
void HmdGlbRoadMakMap::clear_glb_road_mak_map() {
  glb_road_mak_map_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmdGlbRoadMakMap::kGlbRoadMakMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmdGlbRoadMakMap::HmdGlbRoadMakMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdGlbRoadMakMap();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmdGlbRoadMakMap)
}
HmdGlbRoadMakMap::HmdGlbRoadMakMap(const HmdGlbRoadMakMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      glb_road_mak_map_(from.glb_road_mak_map_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmdGlbRoadMakMap)
}

void HmdGlbRoadMakMap::SharedCtor() {
  _cached_size_ = 0;
}

HmdGlbRoadMakMap::~HmdGlbRoadMakMap() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmdGlbRoadMakMap)
  SharedDtor();
}

void HmdGlbRoadMakMap::SharedDtor() {
}

void HmdGlbRoadMakMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmdGlbRoadMakMap::descriptor() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmdGlbRoadMakMap& HmdGlbRoadMakMap::default_instance() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdGlbRoadMakMap();
  return *internal_default_instance();
}

HmdGlbRoadMakMap* HmdGlbRoadMakMap::New(::google::protobuf::Arena* arena) const {
  HmdGlbRoadMakMap* n = new HmdGlbRoadMakMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmdGlbRoadMakMap::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmdGlbRoadMakMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  glb_road_mak_map_.Clear();
  _internal_metadata_.Clear();
}

bool HmdGlbRoadMakMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmdGlbRoadMakMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.GlbRoadMark glb_road_mak_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_glb_road_mak_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmdGlbRoadMakMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmdGlbRoadMakMap)
  return false;
#undef DO_
}

void HmdGlbRoadMakMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmdGlbRoadMakMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbRoadMark glb_road_mak_map = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_road_mak_map_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->glb_road_mak_map(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmdGlbRoadMakMap)
}

::google::protobuf::uint8* HmdGlbRoadMakMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmdGlbRoadMakMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.GlbRoadMark glb_road_mak_map = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glb_road_mak_map_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->glb_road_mak_map(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmdGlbRoadMakMap)
  return target;
}

size_t HmdGlbRoadMakMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmdGlbRoadMakMap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.GlbRoadMark glb_road_mak_map = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->glb_road_mak_map_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->glb_road_mak_map(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmdGlbRoadMakMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmdGlbRoadMakMap)
  GOOGLE_DCHECK_NE(&from, this);
  const HmdGlbRoadMakMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmdGlbRoadMakMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmdGlbRoadMakMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmdGlbRoadMakMap)
    MergeFrom(*source);
  }
}

void HmdGlbRoadMakMap::MergeFrom(const HmdGlbRoadMakMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmdGlbRoadMakMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  glb_road_mak_map_.MergeFrom(from.glb_road_mak_map_);
}

void HmdGlbRoadMakMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmdGlbRoadMakMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmdGlbRoadMakMap::CopyFrom(const HmdGlbRoadMakMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmdGlbRoadMakMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmdGlbRoadMakMap::IsInitialized() const {
  return true;
}

void HmdGlbRoadMakMap::Swap(HmdGlbRoadMakMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmdGlbRoadMakMap::InternalSwap(HmdGlbRoadMakMap* other) {
  using std::swap;
  glb_road_mak_map_.InternalSwap(&other->glb_road_mak_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmdGlbRoadMakMap::GetMetadata() const {
  protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmdMapCommonHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmdMapCommonHeader::kMapIdFieldNumber;
const int HmdMapCommonHeader::kMapTypeFieldNumber;
const int HmdMapCommonHeader::kUtcTimeFieldNumber;
const int HmdMapCommonHeader::kLatitudeFieldNumber;
const int HmdMapCommonHeader::kLongitudeFieldNumber;
const int HmdMapCommonHeader::kNumGlbTrajectoryPointFieldNumber;
const int HmdMapCommonHeader::kMapTotalHeightFieldNumber;
const int HmdMapCommonHeader::kMapTotalFloorFieldNumber;
const int HmdMapCommonHeader::kSlotParkingTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmdMapCommonHeader::HmdMapCommonHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapCommonHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmdMapCommonHeader)
}
HmdMapCommonHeader::HmdMapCommonHeader(const HmdMapCommonHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&map_id_, &from.map_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_parking_times_) -
    reinterpret_cast<char*>(&map_id_)) + sizeof(slot_parking_times_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmdMapCommonHeader)
}

void HmdMapCommonHeader::SharedCtor() {
  ::memset(&map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_parking_times_) -
      reinterpret_cast<char*>(&map_id_)) + sizeof(slot_parking_times_));
  _cached_size_ = 0;
}

HmdMapCommonHeader::~HmdMapCommonHeader() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmdMapCommonHeader)
  SharedDtor();
}

void HmdMapCommonHeader::SharedDtor() {
}

void HmdMapCommonHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmdMapCommonHeader::descriptor() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmdMapCommonHeader& HmdMapCommonHeader::default_instance() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapCommonHeader();
  return *internal_default_instance();
}

HmdMapCommonHeader* HmdMapCommonHeader::New(::google::protobuf::Arena* arena) const {
  HmdMapCommonHeader* n = new HmdMapCommonHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmdMapCommonHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmdMapCommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_parking_times_) -
      reinterpret_cast<char*>(&map_id_)) + sizeof(slot_parking_times_));
  _internal_metadata_.Clear();
}

bool HmdMapCommonHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmdMapCommonHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 map_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MapDataType map_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_map_type(static_cast< ::autodrive::workflow::proto::MapDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 utc_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_glb_trajectory_point = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_glb_trajectory_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float map_total_height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_total_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float map_total_floor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_total_floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slot_parking_times = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_parking_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmdMapCommonHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmdMapCommonHeader)
  return false;
#undef DO_
}

void HmdMapCommonHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmdMapCommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_id = 1;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }

  // .autodrive.workflow.proto.MapDataType map_type = 2;
  if (this->map_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->map_type(), output);
  }

  // uint64 utc_time = 3;
  if (this->utc_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->utc_time(), output);
  }

  // int32 latitude = 4;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->latitude(), output);
  }

  // int32 longitude = 5;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->longitude(), output);
  }

  // uint32 num_glb_trajectory_point = 6;
  if (this->num_glb_trajectory_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_glb_trajectory_point(), output);
  }

  // float map_total_height = 7;
  if (this->map_total_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->map_total_height(), output);
  }

  // float map_total_floor = 8;
  if (this->map_total_floor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->map_total_floor(), output);
  }

  // int32 slot_parking_times = 9;
  if (this->slot_parking_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->slot_parking_times(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmdMapCommonHeader)
}

::google::protobuf::uint8* HmdMapCommonHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmdMapCommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_id = 1;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_id(), target);
  }

  // .autodrive.workflow.proto.MapDataType map_type = 2;
  if (this->map_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->map_type(), target);
  }

  // uint64 utc_time = 3;
  if (this->utc_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->utc_time(), target);
  }

  // int32 latitude = 4;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->latitude(), target);
  }

  // int32 longitude = 5;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->longitude(), target);
  }

  // uint32 num_glb_trajectory_point = 6;
  if (this->num_glb_trajectory_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_glb_trajectory_point(), target);
  }

  // float map_total_height = 7;
  if (this->map_total_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->map_total_height(), target);
  }

  // float map_total_floor = 8;
  if (this->map_total_floor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->map_total_floor(), target);
  }

  // int32 slot_parking_times = 9;
  if (this->slot_parking_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->slot_parking_times(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmdMapCommonHeader)
  return target;
}

size_t HmdMapCommonHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmdMapCommonHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 map_id = 1;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_id());
  }

  // .autodrive.workflow.proto.MapDataType map_type = 2;
  if (this->map_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->map_type());
  }

  // uint64 utc_time = 3;
  if (this->utc_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->utc_time());
  }

  // int32 latitude = 4;
  if (this->latitude() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());
  }

  // int32 longitude = 5;
  if (this->longitude() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());
  }

  // uint32 num_glb_trajectory_point = 6;
  if (this->num_glb_trajectory_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_glb_trajectory_point());
  }

  // float map_total_height = 7;
  if (this->map_total_height() != 0) {
    total_size += 1 + 4;
  }

  // float map_total_floor = 8;
  if (this->map_total_floor() != 0) {
    total_size += 1 + 4;
  }

  // int32 slot_parking_times = 9;
  if (this->slot_parking_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_parking_times());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmdMapCommonHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmdMapCommonHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const HmdMapCommonHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmdMapCommonHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmdMapCommonHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmdMapCommonHeader)
    MergeFrom(*source);
  }
}

void HmdMapCommonHeader::MergeFrom(const HmdMapCommonHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmdMapCommonHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
  if (from.map_type() != 0) {
    set_map_type(from.map_type());
  }
  if (from.utc_time() != 0) {
    set_utc_time(from.utc_time());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.num_glb_trajectory_point() != 0) {
    set_num_glb_trajectory_point(from.num_glb_trajectory_point());
  }
  if (from.map_total_height() != 0) {
    set_map_total_height(from.map_total_height());
  }
  if (from.map_total_floor() != 0) {
    set_map_total_floor(from.map_total_floor());
  }
  if (from.slot_parking_times() != 0) {
    set_slot_parking_times(from.slot_parking_times());
  }
}

void HmdMapCommonHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmdMapCommonHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmdMapCommonHeader::CopyFrom(const HmdMapCommonHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmdMapCommonHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmdMapCommonHeader::IsInitialized() const {
  return true;
}

void HmdMapCommonHeader::Swap(HmdMapCommonHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmdMapCommonHeader::InternalSwap(HmdMapCommonHeader* other) {
  using std::swap;
  swap(map_id_, other->map_id_);
  swap(map_type_, other->map_type_);
  swap(utc_time_, other->utc_time_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(num_glb_trajectory_point_, other->num_glb_trajectory_point_);
  swap(map_total_height_, other->map_total_height_);
  swap(map_total_floor_, other->map_total_floor_);
  swap(slot_parking_times_, other->slot_parking_times_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmdMapCommonHeader::GetMetadata() const {
  protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmdMapInfo::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmdMapInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::HmdMapCommonHeader*>(
      ::autodrive::workflow::proto::HmdMapCommonHeader::internal_default_instance());
  ::autodrive::workflow::proto::_HmdMapInfo_default_instance_._instance.get_mutable()->global_trajectory_ = const_cast< ::autodrive::workflow::proto::GlbTrajectory*>(
      ::autodrive::workflow::proto::GlbTrajectory::internal_default_instance());
  ::autodrive::workflow::proto::_HmdMapInfo_default_instance_._instance.get_mutable()->global_percep_parking_slots_ = const_cast< ::autodrive::workflow::proto::HmdGlbPrcpPrkgSlots*>(
      ::autodrive::workflow::proto::HmdGlbPrcpPrkgSlots::internal_default_instance());
  ::autodrive::workflow::proto::_HmdMapInfo_default_instance_._instance.get_mutable()->global_road_mark_map_ = const_cast< ::autodrive::workflow::proto::HmdGlbRoadMakMap*>(
      ::autodrive::workflow::proto::HmdGlbRoadMakMap::internal_default_instance());
  ::autodrive::workflow::proto::_HmdMapInfo_default_instance_._instance.get_mutable()->global_perception_obstacle_ = const_cast< ::autodrive::workflow::proto::HmdGlbPrcpObstacle*>(
      ::autodrive::workflow::proto::HmdGlbPrcpObstacle::internal_default_instance());
}
void HmdMapInfo::clear_global_trajectory() {
  if (GetArenaNoVirtual() == NULL && global_trajectory_ != NULL) {
    delete global_trajectory_;
  }
  global_trajectory_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmdMapInfo::kHeaderFieldNumber;
const int HmdMapInfo::kGlobalTrajectoryFieldNumber;
const int HmdMapInfo::kGlobalPercepParkingSlotsFieldNumber;
const int HmdMapInfo::kGlobalRoadMarkMapFieldNumber;
const int HmdMapInfo::kGlobalPerceptionObstacleFieldNumber;
const int HmdMapInfo::kMapDistanceFieldNumber;
const int HmdMapInfo::kRestMapDistanceFieldNumber;
const int HmdMapInfo::kNumSpeedBumpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmdMapInfo::HmdMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmdMapInfo)
}
HmdMapInfo::HmdMapInfo(const HmdMapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::HmdMapCommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_global_trajectory()) {
    global_trajectory_ = new ::autodrive::workflow::proto::GlbTrajectory(*from.global_trajectory_);
  } else {
    global_trajectory_ = NULL;
  }
  if (from.has_global_percep_parking_slots()) {
    global_percep_parking_slots_ = new ::autodrive::workflow::proto::HmdGlbPrcpPrkgSlots(*from.global_percep_parking_slots_);
  } else {
    global_percep_parking_slots_ = NULL;
  }
  if (from.has_global_road_mark_map()) {
    global_road_mark_map_ = new ::autodrive::workflow::proto::HmdGlbRoadMakMap(*from.global_road_mark_map_);
  } else {
    global_road_mark_map_ = NULL;
  }
  if (from.has_global_perception_obstacle()) {
    global_perception_obstacle_ = new ::autodrive::workflow::proto::HmdGlbPrcpObstacle(*from.global_perception_obstacle_);
  } else {
    global_perception_obstacle_ = NULL;
  }
  ::memcpy(&map_distance_, &from.map_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_speed_bumps_) -
    reinterpret_cast<char*>(&map_distance_)) + sizeof(num_speed_bumps_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmdMapInfo)
}

void HmdMapInfo::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_speed_bumps_) -
      reinterpret_cast<char*>(&header_)) + sizeof(num_speed_bumps_));
  _cached_size_ = 0;
}

HmdMapInfo::~HmdMapInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmdMapInfo)
  SharedDtor();
}

void HmdMapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete global_trajectory_;
  if (this != internal_default_instance()) delete global_percep_parking_slots_;
  if (this != internal_default_instance()) delete global_road_mark_map_;
  if (this != internal_default_instance()) delete global_perception_obstacle_;
}

void HmdMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmdMapInfo::descriptor() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmdMapInfo& HmdMapInfo::default_instance() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapInfo();
  return *internal_default_instance();
}

HmdMapInfo* HmdMapInfo::New(::google::protobuf::Arena* arena) const {
  HmdMapInfo* n = new HmdMapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmdMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmdMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_trajectory_ != NULL) {
    delete global_trajectory_;
  }
  global_trajectory_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_percep_parking_slots_ != NULL) {
    delete global_percep_parking_slots_;
  }
  global_percep_parking_slots_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_road_mark_map_ != NULL) {
    delete global_road_mark_map_;
  }
  global_road_mark_map_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_perception_obstacle_ != NULL) {
    delete global_perception_obstacle_;
  }
  global_perception_obstacle_ = NULL;
  ::memset(&map_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_speed_bumps_) -
      reinterpret_cast<char*>(&map_distance_)) + sizeof(num_speed_bumps_));
  _internal_metadata_.Clear();
}

bool HmdMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmdMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmdGlbPrcpPrkgSlots global_percep_parking_slots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_percep_parking_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmdGlbRoadMakMap global_road_mark_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_road_mark_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmdGlbPrcpObstacle global_perception_obstacle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float map_distance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rest_map_distance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rest_map_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_speed_bumps = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_speed_bumps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmdMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmdMapInfo)
  return false;
#undef DO_
}

void HmdMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmdMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
  if (this->has_global_trajectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->global_trajectory_, output);
  }

  // .autodrive.workflow.proto.HmdGlbPrcpPrkgSlots global_percep_parking_slots = 3;
  if (this->has_global_percep_parking_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->global_percep_parking_slots_, output);
  }

  // .autodrive.workflow.proto.HmdGlbRoadMakMap global_road_mark_map = 4;
  if (this->has_global_road_mark_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->global_road_mark_map_, output);
  }

  // .autodrive.workflow.proto.HmdGlbPrcpObstacle global_perception_obstacle = 5;
  if (this->has_global_perception_obstacle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->global_perception_obstacle_, output);
  }

  // float map_distance = 6;
  if (this->map_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->map_distance(), output);
  }

  // float rest_map_distance = 7;
  if (this->rest_map_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rest_map_distance(), output);
  }

  // int32 num_speed_bumps = 8;
  if (this->num_speed_bumps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_speed_bumps(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmdMapInfo)
}

::google::protobuf::uint8* HmdMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmdMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
  if (this->has_global_trajectory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->global_trajectory_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmdGlbPrcpPrkgSlots global_percep_parking_slots = 3;
  if (this->has_global_percep_parking_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->global_percep_parking_slots_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmdGlbRoadMakMap global_road_mark_map = 4;
  if (this->has_global_road_mark_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->global_road_mark_map_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmdGlbPrcpObstacle global_perception_obstacle = 5;
  if (this->has_global_perception_obstacle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->global_perception_obstacle_, deterministic, target);
  }

  // float map_distance = 6;
  if (this->map_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->map_distance(), target);
  }

  // float rest_map_distance = 7;
  if (this->rest_map_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rest_map_distance(), target);
  }

  // int32 num_speed_bumps = 8;
  if (this->num_speed_bumps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_speed_bumps(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmdMapInfo)
  return target;
}

size_t HmdMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmdMapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.GlbTrajectory global_trajectory = 2;
  if (this->has_global_trajectory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->global_trajectory_);
  }

  // .autodrive.workflow.proto.HmdGlbPrcpPrkgSlots global_percep_parking_slots = 3;
  if (this->has_global_percep_parking_slots()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->global_percep_parking_slots_);
  }

  // .autodrive.workflow.proto.HmdGlbRoadMakMap global_road_mark_map = 4;
  if (this->has_global_road_mark_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->global_road_mark_map_);
  }

  // .autodrive.workflow.proto.HmdGlbPrcpObstacle global_perception_obstacle = 5;
  if (this->has_global_perception_obstacle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->global_perception_obstacle_);
  }

  // float map_distance = 6;
  if (this->map_distance() != 0) {
    total_size += 1 + 4;
  }

  // float rest_map_distance = 7;
  if (this->rest_map_distance() != 0) {
    total_size += 1 + 4;
  }

  // int32 num_speed_bumps = 8;
  if (this->num_speed_bumps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_speed_bumps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmdMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmdMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HmdMapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmdMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmdMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmdMapInfo)
    MergeFrom(*source);
  }
}

void HmdMapInfo::MergeFrom(const HmdMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmdMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::HmdMapCommonHeader::MergeFrom(from.header());
  }
  if (from.has_global_trajectory()) {
    mutable_global_trajectory()->::autodrive::workflow::proto::GlbTrajectory::MergeFrom(from.global_trajectory());
  }
  if (from.has_global_percep_parking_slots()) {
    mutable_global_percep_parking_slots()->::autodrive::workflow::proto::HmdGlbPrcpPrkgSlots::MergeFrom(from.global_percep_parking_slots());
  }
  if (from.has_global_road_mark_map()) {
    mutable_global_road_mark_map()->::autodrive::workflow::proto::HmdGlbRoadMakMap::MergeFrom(from.global_road_mark_map());
  }
  if (from.has_global_perception_obstacle()) {
    mutable_global_perception_obstacle()->::autodrive::workflow::proto::HmdGlbPrcpObstacle::MergeFrom(from.global_perception_obstacle());
  }
  if (from.map_distance() != 0) {
    set_map_distance(from.map_distance());
  }
  if (from.rest_map_distance() != 0) {
    set_rest_map_distance(from.rest_map_distance());
  }
  if (from.num_speed_bumps() != 0) {
    set_num_speed_bumps(from.num_speed_bumps());
  }
}

void HmdMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmdMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmdMapInfo::CopyFrom(const HmdMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmdMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmdMapInfo::IsInitialized() const {
  return true;
}

void HmdMapInfo::Swap(HmdMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmdMapInfo::InternalSwap(HmdMapInfo* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(global_trajectory_, other->global_trajectory_);
  swap(global_percep_parking_slots_, other->global_percep_parking_slots_);
  swap(global_road_mark_map_, other->global_road_mark_map_);
  swap(global_perception_obstacle_, other->global_perception_obstacle_);
  swap(map_distance_, other->map_distance_);
  swap(rest_map_distance_, other->rest_map_distance_);
  swap(num_speed_bumps_, other->num_speed_bumps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmdMapInfo::GetMetadata() const {
  protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmdMapDisplay::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmdMapDisplay_default_instance_._instance.get_mutable()->map_info_ = const_cast< ::autodrive::workflow::proto::HmdMapInfo*>(
      ::autodrive::workflow::proto::HmdMapInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmdMapDisplay::kMapInfoFieldNumber;
const int HmdMapDisplay::kUpdateMapInfoFieldNumber;
const int HmdMapDisplay::kNumMapsFieldNumber;
const int HmdMapDisplay::kAllMapHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmdMapDisplay::HmdMapDisplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapDisplay();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmdMapDisplay)
}
HmdMapDisplay::HmdMapDisplay(const HmdMapDisplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      all_map_headers_(from.all_map_headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_info()) {
    map_info_ = new ::autodrive::workflow::proto::HmdMapInfo(*from.map_info_);
  } else {
    map_info_ = NULL;
  }
  ::memcpy(&update_map_info_, &from.update_map_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_maps_) -
    reinterpret_cast<char*>(&update_map_info_)) + sizeof(num_maps_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmdMapDisplay)
}

void HmdMapDisplay::SharedCtor() {
  ::memset(&map_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_maps_) -
      reinterpret_cast<char*>(&map_info_)) + sizeof(num_maps_));
  _cached_size_ = 0;
}

HmdMapDisplay::~HmdMapDisplay() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmdMapDisplay)
  SharedDtor();
}

void HmdMapDisplay::SharedDtor() {
  if (this != internal_default_instance()) delete map_info_;
}

void HmdMapDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmdMapDisplay::descriptor() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmdMapDisplay& HmdMapDisplay::default_instance() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapDisplay();
  return *internal_default_instance();
}

HmdMapDisplay* HmdMapDisplay::New(::google::protobuf::Arena* arena) const {
  HmdMapDisplay* n = new HmdMapDisplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmdMapDisplay::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmdMapDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_map_headers_.Clear();
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
  ::memset(&update_map_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_maps_) -
      reinterpret_cast<char*>(&update_map_info_)) + sizeof(num_maps_));
  _internal_metadata_.Clear();
}

bool HmdMapDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmdMapDisplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.HmdMapInfo map_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool update_map_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_map_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_maps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_maps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_all_map_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmdMapDisplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmdMapDisplay)
  return false;
#undef DO_
}

void HmdMapDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmdMapDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmdMapInfo map_info = 1;
  if (this->has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_info_, output);
  }

  // bool update_map_info = 2;
  if (this->update_map_info() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update_map_info(), output);
  }

  // int32 num_maps = 3;
  if (this->num_maps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_maps(), output);
  }

  // repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_map_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->all_map_headers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmdMapDisplay)
}

::google::protobuf::uint8* HmdMapDisplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmdMapDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmdMapInfo map_info = 1;
  if (this->has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->map_info_, deterministic, target);
  }

  // bool update_map_info = 2;
  if (this->update_map_info() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update_map_info(), target);
  }

  // int32 num_maps = 3;
  if (this->num_maps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_maps(), target);
  }

  // repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_map_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->all_map_headers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmdMapDisplay)
  return target;
}

size_t HmdMapDisplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmdMapDisplay)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->all_map_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->all_map_headers(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.HmdMapInfo map_info = 1;
  if (this->has_map_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->map_info_);
  }

  // bool update_map_info = 2;
  if (this->update_map_info() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_maps = 3;
  if (this->num_maps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_maps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmdMapDisplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmdMapDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  const HmdMapDisplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmdMapDisplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmdMapDisplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmdMapDisplay)
    MergeFrom(*source);
  }
}

void HmdMapDisplay::MergeFrom(const HmdMapDisplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmdMapDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_map_headers_.MergeFrom(from.all_map_headers_);
  if (from.has_map_info()) {
    mutable_map_info()->::autodrive::workflow::proto::HmdMapInfo::MergeFrom(from.map_info());
  }
  if (from.update_map_info() != 0) {
    set_update_map_info(from.update_map_info());
  }
  if (from.num_maps() != 0) {
    set_num_maps(from.num_maps());
  }
}

void HmdMapDisplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmdMapDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmdMapDisplay::CopyFrom(const HmdMapDisplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmdMapDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmdMapDisplay::IsInitialized() const {
  return true;
}

void HmdMapDisplay::Swap(HmdMapDisplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmdMapDisplay::InternalSwap(HmdMapDisplay* other) {
  using std::swap;
  all_map_headers_.InternalSwap(&other->all_map_headers_);
  swap(map_info_, other->map_info_);
  swap(update_map_info_, other->update_map_info_);
  swap(num_maps_, other->num_maps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmdMapDisplay::GetMetadata() const {
  protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiMapDisplayMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiMapDisplayMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_HmiMapDisplayMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_HmiMapDisplayMsg_default_instance_._instance.get_mutable()->map_display_ = const_cast< ::autodrive::workflow::proto::HmdMapDisplay*>(
      ::autodrive::workflow::proto::HmdMapDisplay::internal_default_instance());
}
void HmiMapDisplayMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void HmiMapDisplayMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiMapDisplayMsg::kHeaderFieldNumber;
const int HmiMapDisplayMsg::kErrorFieldNumber;
const int HmiMapDisplayMsg::kMapDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiMapDisplayMsg::HmiMapDisplayMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmiMapDisplayMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiMapDisplayMsg)
}
HmiMapDisplayMsg::HmiMapDisplayMsg(const HmiMapDisplayMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_map_display()) {
    map_display_ = new ::autodrive::workflow::proto::HmdMapDisplay(*from.map_display_);
  } else {
    map_display_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiMapDisplayMsg)
}

void HmiMapDisplayMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_display_) -
      reinterpret_cast<char*>(&header_)) + sizeof(map_display_));
  _cached_size_ = 0;
}

HmiMapDisplayMsg::~HmiMapDisplayMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiMapDisplayMsg)
  SharedDtor();
}

void HmiMapDisplayMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete map_display_;
}

void HmiMapDisplayMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiMapDisplayMsg::descriptor() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiMapDisplayMsg& HmiMapDisplayMsg::default_instance() {
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmiMapDisplayMsg();
  return *internal_default_instance();
}

HmiMapDisplayMsg* HmiMapDisplayMsg::New(::google::protobuf::Arena* arena) const {
  HmiMapDisplayMsg* n = new HmiMapDisplayMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiMapDisplayMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiMapDisplayMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_display_ != NULL) {
    delete map_display_;
  }
  map_display_ = NULL;
  _internal_metadata_.Clear();
}

bool HmiMapDisplayMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiMapDisplayMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmdMapDisplay map_display = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_display()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiMapDisplayMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiMapDisplayMsg)
  return false;
#undef DO_
}

void HmiMapDisplayMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiMapDisplayMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.HmdMapDisplay map_display = 3;
  if (this->has_map_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->map_display_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiMapDisplayMsg)
}

::google::protobuf::uint8* HmiMapDisplayMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiMapDisplayMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmdMapDisplay map_display = 3;
  if (this->has_map_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->map_display_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiMapDisplayMsg)
  return target;
}

size_t HmiMapDisplayMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiMapDisplayMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.HmdMapDisplay map_display = 3;
  if (this->has_map_display()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->map_display_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiMapDisplayMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiMapDisplayMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiMapDisplayMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiMapDisplayMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiMapDisplayMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiMapDisplayMsg)
    MergeFrom(*source);
  }
}

void HmiMapDisplayMsg::MergeFrom(const HmiMapDisplayMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiMapDisplayMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_map_display()) {
    mutable_map_display()->::autodrive::workflow::proto::HmdMapDisplay::MergeFrom(from.map_display());
  }
}

void HmiMapDisplayMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiMapDisplayMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiMapDisplayMsg::CopyFrom(const HmiMapDisplayMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiMapDisplayMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiMapDisplayMsg::IsInitialized() const {
  return true;
}

void HmiMapDisplayMsg::Swap(HmiMapDisplayMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiMapDisplayMsg::InternalSwap(HmiMapDisplayMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(map_display_, other->map_display_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiMapDisplayMsg::GetMetadata() const {
  protobuf_hmi_5fmap_5fdisplay_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fdisplay_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
