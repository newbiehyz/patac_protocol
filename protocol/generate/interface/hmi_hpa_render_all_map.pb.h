// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_hpa_render_all_map.proto

#ifndef PROTOBUF_hmi_5fhpa_5frender_5fall_5fmap_2eproto__INCLUDED
#define PROTOBUF_hmi_5fhpa_5frender_5fall_5fmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "hmi_map_display.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHmiAllMapInfoImpl();
void InitDefaultsHmiAllMapInfo();
void InitDefaultsHmiAllMapDisplayImpl();
void InitDefaultsHmiAllMapDisplay();
void InitDefaultsHmiHpaAllMapRenderImpl();
void InitDefaultsHmiHpaAllMapRender();
void InitDefaultsHmiHpaRenderAllMapMsgImpl();
void InitDefaultsHmiHpaRenderAllMapMsg();
inline void InitDefaults() {
  InitDefaultsHmiAllMapInfo();
  InitDefaultsHmiAllMapDisplay();
  InitDefaultsHmiHpaAllMapRender();
  InitDefaultsHmiHpaRenderAllMapMsg();
}
}  // namespace protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class HmiAllMapDisplay;
class HmiAllMapDisplayDefaultTypeInternal;
extern HmiAllMapDisplayDefaultTypeInternal _HmiAllMapDisplay_default_instance_;
class HmiAllMapInfo;
class HmiAllMapInfoDefaultTypeInternal;
extern HmiAllMapInfoDefaultTypeInternal _HmiAllMapInfo_default_instance_;
class HmiHpaAllMapRender;
class HmiHpaAllMapRenderDefaultTypeInternal;
extern HmiHpaAllMapRenderDefaultTypeInternal _HmiHpaAllMapRender_default_instance_;
class HmiHpaRenderAllMapMsg;
class HmiHpaRenderAllMapMsgDefaultTypeInternal;
extern HmiHpaRenderAllMapMsgDefaultTypeInternal _HmiHpaRenderAllMapMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class HmiAllMapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.HmiAllMapInfo) */ {
 public:
  HmiAllMapInfo();
  virtual ~HmiAllMapInfo();

  HmiAllMapInfo(const HmiAllMapInfo& from);

  inline HmiAllMapInfo& operator=(const HmiAllMapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmiAllMapInfo(HmiAllMapInfo&& from) noexcept
    : HmiAllMapInfo() {
    *this = ::std::move(from);
  }

  inline HmiAllMapInfo& operator=(HmiAllMapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmiAllMapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmiAllMapInfo* internal_default_instance() {
    return reinterpret_cast<const HmiAllMapInfo*>(
               &_HmiAllMapInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HmiAllMapInfo* other);
  friend void swap(HmiAllMapInfo& a, HmiAllMapInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmiAllMapInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  HmiAllMapInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HmiAllMapInfo& from);
  void MergeFrom(const HmiAllMapInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HmiAllMapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::HmdMapCommonHeader& header() const;
  ::autodrive::workflow::proto::HmdMapCommonHeader* release_header();
  ::autodrive::workflow::proto::HmdMapCommonHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::HmdMapCommonHeader* header);

  // float map_distance = 2;
  void clear_map_distance();
  static const int kMapDistanceFieldNumber = 2;
  float map_distance() const;
  void set_map_distance(float value);

  // float rest_map_distance = 3;
  void clear_rest_map_distance();
  static const int kRestMapDistanceFieldNumber = 3;
  float rest_map_distance() const;
  void set_rest_map_distance(float value);

  // int32 num_speed_bumps = 4;
  void clear_num_speed_bumps();
  static const int kNumSpeedBumpsFieldNumber = 4;
  ::google::protobuf::int32 num_speed_bumps() const;
  void set_num_speed_bumps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.HmiAllMapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::HmdMapCommonHeader* header_;
  float map_distance_;
  float rest_map_distance_;
  ::google::protobuf::int32 num_speed_bumps_;
  mutable int _cached_size_;
  friend struct ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::TableStruct;
  friend void ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiAllMapInfoImpl();
};
// -------------------------------------------------------------------

class HmiAllMapDisplay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.HmiAllMapDisplay) */ {
 public:
  HmiAllMapDisplay();
  virtual ~HmiAllMapDisplay();

  HmiAllMapDisplay(const HmiAllMapDisplay& from);

  inline HmiAllMapDisplay& operator=(const HmiAllMapDisplay& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmiAllMapDisplay(HmiAllMapDisplay&& from) noexcept
    : HmiAllMapDisplay() {
    *this = ::std::move(from);
  }

  inline HmiAllMapDisplay& operator=(HmiAllMapDisplay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmiAllMapDisplay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmiAllMapDisplay* internal_default_instance() {
    return reinterpret_cast<const HmiAllMapDisplay*>(
               &_HmiAllMapDisplay_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HmiAllMapDisplay* other);
  friend void swap(HmiAllMapDisplay& a, HmiAllMapDisplay& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmiAllMapDisplay* New() const PROTOBUF_FINAL { return New(NULL); }

  HmiAllMapDisplay* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HmiAllMapDisplay& from);
  void MergeFrom(const HmiAllMapDisplay& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HmiAllMapDisplay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 6;
  int all_map_headers_size() const;
  void clear_all_map_headers();
  static const int kAllMapHeadersFieldNumber = 6;
  const ::autodrive::workflow::proto::HmdMapCommonHeader& all_map_headers(int index) const;
  ::autodrive::workflow::proto::HmdMapCommonHeader* mutable_all_map_headers(int index);
  ::autodrive::workflow::proto::HmdMapCommonHeader* add_all_map_headers();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::HmdMapCommonHeader >*
      mutable_all_map_headers();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::HmdMapCommonHeader >&
      all_map_headers() const;

  // .autodrive.workflow.proto.HmiAllMapInfo map_info = 1;
  bool has_map_info() const;
  void clear_map_info();
  static const int kMapInfoFieldNumber = 1;
  const ::autodrive::workflow::proto::HmiAllMapInfo& map_info() const;
  ::autodrive::workflow::proto::HmiAllMapInfo* release_map_info();
  ::autodrive::workflow::proto::HmiAllMapInfo* mutable_map_info();
  void set_allocated_map_info(::autodrive::workflow::proto::HmiAllMapInfo* map_info);

  // int32 num_maps = 3;
  void clear_num_maps();
  static const int kNumMapsFieldNumber = 3;
  ::google::protobuf::int32 num_maps() const;
  void set_num_maps(::google::protobuf::int32 value);

  // bool update_map_info = 2;
  void clear_update_map_info();
  static const int kUpdateMapInfoFieldNumber = 2;
  bool update_map_info() const;
  void set_update_map_info(bool value);

  // bool is_match = 4;
  void clear_is_match();
  static const int kIsMatchFieldNumber = 4;
  bool is_match() const;
  void set_is_match(bool value);

  // int32 map_id = 5;
  void clear_map_id();
  static const int kMapIdFieldNumber = 5;
  ::google::protobuf::int32 map_id() const;
  void set_map_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.HmiAllMapDisplay)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::HmdMapCommonHeader > all_map_headers_;
  ::autodrive::workflow::proto::HmiAllMapInfo* map_info_;
  ::google::protobuf::int32 num_maps_;
  bool update_map_info_;
  bool is_match_;
  ::google::protobuf::int32 map_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::TableStruct;
  friend void ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiAllMapDisplayImpl();
};
// -------------------------------------------------------------------

class HmiHpaAllMapRender : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.HmiHpaAllMapRender) */ {
 public:
  HmiHpaAllMapRender();
  virtual ~HmiHpaAllMapRender();

  HmiHpaAllMapRender(const HmiHpaAllMapRender& from);

  inline HmiHpaAllMapRender& operator=(const HmiHpaAllMapRender& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmiHpaAllMapRender(HmiHpaAllMapRender&& from) noexcept
    : HmiHpaAllMapRender() {
    *this = ::std::move(from);
  }

  inline HmiHpaAllMapRender& operator=(HmiHpaAllMapRender&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmiHpaAllMapRender& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmiHpaAllMapRender* internal_default_instance() {
    return reinterpret_cast<const HmiHpaAllMapRender*>(
               &_HmiHpaAllMapRender_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HmiHpaAllMapRender* other);
  friend void swap(HmiHpaAllMapRender& a, HmiHpaAllMapRender& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmiHpaAllMapRender* New() const PROTOBUF_FINAL { return New(NULL); }

  HmiHpaAllMapRender* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HmiHpaAllMapRender& from);
  void MergeFrom(const HmiHpaAllMapRender& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HmiHpaAllMapRender* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.HmiAllMapDisplay hmi_map_display = 1;
  bool has_hmi_map_display() const;
  void clear_hmi_map_display();
  static const int kHmiMapDisplayFieldNumber = 1;
  const ::autodrive::workflow::proto::HmiAllMapDisplay& hmi_map_display() const;
  ::autodrive::workflow::proto::HmiAllMapDisplay* release_hmi_map_display();
  ::autodrive::workflow::proto::HmiAllMapDisplay* mutable_hmi_map_display();
  void set_allocated_hmi_map_display(::autodrive::workflow::proto::HmiAllMapDisplay* hmi_map_display);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.HmiHpaAllMapRender)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::HmiAllMapDisplay* hmi_map_display_;
  mutable int _cached_size_;
  friend struct ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::TableStruct;
  friend void ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiHpaAllMapRenderImpl();
};
// -------------------------------------------------------------------

class HmiHpaRenderAllMapMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.HmiHpaRenderAllMapMsg) */ {
 public:
  HmiHpaRenderAllMapMsg();
  virtual ~HmiHpaRenderAllMapMsg();

  HmiHpaRenderAllMapMsg(const HmiHpaRenderAllMapMsg& from);

  inline HmiHpaRenderAllMapMsg& operator=(const HmiHpaRenderAllMapMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HmiHpaRenderAllMapMsg(HmiHpaRenderAllMapMsg&& from) noexcept
    : HmiHpaRenderAllMapMsg() {
    *this = ::std::move(from);
  }

  inline HmiHpaRenderAllMapMsg& operator=(HmiHpaRenderAllMapMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HmiHpaRenderAllMapMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HmiHpaRenderAllMapMsg* internal_default_instance() {
    return reinterpret_cast<const HmiHpaRenderAllMapMsg*>(
               &_HmiHpaRenderAllMapMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HmiHpaRenderAllMapMsg* other);
  friend void swap(HmiHpaRenderAllMapMsg& a, HmiHpaRenderAllMapMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HmiHpaRenderAllMapMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  HmiHpaRenderAllMapMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HmiHpaRenderAllMapMsg& from);
  void MergeFrom(const HmiHpaRenderAllMapMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HmiHpaRenderAllMapMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.HmiHpaAllMapRender hmi_hpa_render = 3;
  bool has_hmi_hpa_render() const;
  void clear_hmi_hpa_render();
  static const int kHmiHpaRenderFieldNumber = 3;
  const ::autodrive::workflow::proto::HmiHpaAllMapRender& hmi_hpa_render() const;
  ::autodrive::workflow::proto::HmiHpaAllMapRender* release_hmi_hpa_render();
  ::autodrive::workflow::proto::HmiHpaAllMapRender* mutable_hmi_hpa_render();
  void set_allocated_hmi_hpa_render(::autodrive::workflow::proto::HmiHpaAllMapRender* hmi_hpa_render);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::HmiHpaAllMapRender* hmi_hpa_render_;
  mutable int _cached_size_;
  friend struct ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::TableStruct;
  friend void ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiHpaRenderAllMapMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HmiAllMapInfo

// .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
inline bool HmiAllMapInfo::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::HmdMapCommonHeader& HmiAllMapInfo::header() const {
  const ::autodrive::workflow::proto::HmdMapCommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapInfo.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::HmdMapCommonHeader*>(
      &::autodrive::workflow::proto::_HmdMapCommonHeader_default_instance_);
}
inline ::autodrive::workflow::proto::HmdMapCommonHeader* HmiAllMapInfo::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.HmiAllMapInfo.header)
  
  ::autodrive::workflow::proto::HmdMapCommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::HmdMapCommonHeader* HmiAllMapInfo::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::HmdMapCommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.HmiAllMapInfo.header)
  return header_;
}
inline void HmiAllMapInfo::set_allocated_header(::autodrive::workflow::proto::HmdMapCommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.HmiAllMapInfo.header)
}

// float map_distance = 2;
inline void HmiAllMapInfo::clear_map_distance() {
  map_distance_ = 0;
}
inline float HmiAllMapInfo::map_distance() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapInfo.map_distance)
  return map_distance_;
}
inline void HmiAllMapInfo::set_map_distance(float value) {
  
  map_distance_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.HmiAllMapInfo.map_distance)
}

// float rest_map_distance = 3;
inline void HmiAllMapInfo::clear_rest_map_distance() {
  rest_map_distance_ = 0;
}
inline float HmiAllMapInfo::rest_map_distance() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapInfo.rest_map_distance)
  return rest_map_distance_;
}
inline void HmiAllMapInfo::set_rest_map_distance(float value) {
  
  rest_map_distance_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.HmiAllMapInfo.rest_map_distance)
}

// int32 num_speed_bumps = 4;
inline void HmiAllMapInfo::clear_num_speed_bumps() {
  num_speed_bumps_ = 0;
}
inline ::google::protobuf::int32 HmiAllMapInfo::num_speed_bumps() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapInfo.num_speed_bumps)
  return num_speed_bumps_;
}
inline void HmiAllMapInfo::set_num_speed_bumps(::google::protobuf::int32 value) {
  
  num_speed_bumps_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.HmiAllMapInfo.num_speed_bumps)
}

// -------------------------------------------------------------------

// HmiAllMapDisplay

// .autodrive.workflow.proto.HmiAllMapInfo map_info = 1;
inline bool HmiAllMapDisplay::has_map_info() const {
  return this != internal_default_instance() && map_info_ != NULL;
}
inline void HmiAllMapDisplay::clear_map_info() {
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
}
inline const ::autodrive::workflow::proto::HmiAllMapInfo& HmiAllMapDisplay::map_info() const {
  const ::autodrive::workflow::proto::HmiAllMapInfo* p = map_info_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapDisplay.map_info)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::HmiAllMapInfo*>(
      &::autodrive::workflow::proto::_HmiAllMapInfo_default_instance_);
}
inline ::autodrive::workflow::proto::HmiAllMapInfo* HmiAllMapDisplay::release_map_info() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.HmiAllMapDisplay.map_info)
  
  ::autodrive::workflow::proto::HmiAllMapInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::HmiAllMapInfo* HmiAllMapDisplay::mutable_map_info() {
  
  if (map_info_ == NULL) {
    map_info_ = new ::autodrive::workflow::proto::HmiAllMapInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.HmiAllMapDisplay.map_info)
  return map_info_;
}
inline void HmiAllMapDisplay::set_allocated_map_info(::autodrive::workflow::proto::HmiAllMapInfo* map_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete map_info_;
  }
  if (map_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_info, submessage_arena);
    }
    
  } else {
    
  }
  map_info_ = map_info;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.HmiAllMapDisplay.map_info)
}

// bool update_map_info = 2;
inline void HmiAllMapDisplay::clear_update_map_info() {
  update_map_info_ = false;
}
inline bool HmiAllMapDisplay::update_map_info() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapDisplay.update_map_info)
  return update_map_info_;
}
inline void HmiAllMapDisplay::set_update_map_info(bool value) {
  
  update_map_info_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.HmiAllMapDisplay.update_map_info)
}

// int32 num_maps = 3;
inline void HmiAllMapDisplay::clear_num_maps() {
  num_maps_ = 0;
}
inline ::google::protobuf::int32 HmiAllMapDisplay::num_maps() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapDisplay.num_maps)
  return num_maps_;
}
inline void HmiAllMapDisplay::set_num_maps(::google::protobuf::int32 value) {
  
  num_maps_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.HmiAllMapDisplay.num_maps)
}

// bool is_match = 4;
inline void HmiAllMapDisplay::clear_is_match() {
  is_match_ = false;
}
inline bool HmiAllMapDisplay::is_match() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapDisplay.is_match)
  return is_match_;
}
inline void HmiAllMapDisplay::set_is_match(bool value) {
  
  is_match_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.HmiAllMapDisplay.is_match)
}

// int32 map_id = 5;
inline void HmiAllMapDisplay::clear_map_id() {
  map_id_ = 0;
}
inline ::google::protobuf::int32 HmiAllMapDisplay::map_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapDisplay.map_id)
  return map_id_;
}
inline void HmiAllMapDisplay::set_map_id(::google::protobuf::int32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.HmiAllMapDisplay.map_id)
}

// repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 6;
inline int HmiAllMapDisplay::all_map_headers_size() const {
  return all_map_headers_.size();
}
inline const ::autodrive::workflow::proto::HmdMapCommonHeader& HmiAllMapDisplay::all_map_headers(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiAllMapDisplay.all_map_headers)
  return all_map_headers_.Get(index);
}
inline ::autodrive::workflow::proto::HmdMapCommonHeader* HmiAllMapDisplay::mutable_all_map_headers(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.HmiAllMapDisplay.all_map_headers)
  return all_map_headers_.Mutable(index);
}
inline ::autodrive::workflow::proto::HmdMapCommonHeader* HmiAllMapDisplay::add_all_map_headers() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.HmiAllMapDisplay.all_map_headers)
  return all_map_headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::HmdMapCommonHeader >*
HmiAllMapDisplay::mutable_all_map_headers() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.HmiAllMapDisplay.all_map_headers)
  return &all_map_headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::HmdMapCommonHeader >&
HmiAllMapDisplay::all_map_headers() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.HmiAllMapDisplay.all_map_headers)
  return all_map_headers_;
}

// -------------------------------------------------------------------

// HmiHpaAllMapRender

// .autodrive.workflow.proto.HmiAllMapDisplay hmi_map_display = 1;
inline bool HmiHpaAllMapRender::has_hmi_map_display() const {
  return this != internal_default_instance() && hmi_map_display_ != NULL;
}
inline void HmiHpaAllMapRender::clear_hmi_map_display() {
  if (GetArenaNoVirtual() == NULL && hmi_map_display_ != NULL) {
    delete hmi_map_display_;
  }
  hmi_map_display_ = NULL;
}
inline const ::autodrive::workflow::proto::HmiAllMapDisplay& HmiHpaAllMapRender::hmi_map_display() const {
  const ::autodrive::workflow::proto::HmiAllMapDisplay* p = hmi_map_display_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiHpaAllMapRender.hmi_map_display)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::HmiAllMapDisplay*>(
      &::autodrive::workflow::proto::_HmiAllMapDisplay_default_instance_);
}
inline ::autodrive::workflow::proto::HmiAllMapDisplay* HmiHpaAllMapRender::release_hmi_map_display() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.HmiHpaAllMapRender.hmi_map_display)
  
  ::autodrive::workflow::proto::HmiAllMapDisplay* temp = hmi_map_display_;
  hmi_map_display_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::HmiAllMapDisplay* HmiHpaAllMapRender::mutable_hmi_map_display() {
  
  if (hmi_map_display_ == NULL) {
    hmi_map_display_ = new ::autodrive::workflow::proto::HmiAllMapDisplay;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.HmiHpaAllMapRender.hmi_map_display)
  return hmi_map_display_;
}
inline void HmiHpaAllMapRender::set_allocated_hmi_map_display(::autodrive::workflow::proto::HmiAllMapDisplay* hmi_map_display) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hmi_map_display_;
  }
  if (hmi_map_display) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hmi_map_display = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hmi_map_display, submessage_arena);
    }
    
  } else {
    
  }
  hmi_map_display_ = hmi_map_display;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.HmiHpaAllMapRender.hmi_map_display)
}

// -------------------------------------------------------------------

// HmiHpaRenderAllMapMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool HmiHpaRenderAllMapMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& HmiHpaRenderAllMapMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* HmiHpaRenderAllMapMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* HmiHpaRenderAllMapMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.header)
  return header_;
}
inline void HmiHpaRenderAllMapMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool HmiHpaRenderAllMapMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& HmiHpaRenderAllMapMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* HmiHpaRenderAllMapMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* HmiHpaRenderAllMapMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.error)
  return error_;
}
inline void HmiHpaRenderAllMapMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.error)
}

// .autodrive.workflow.proto.HmiHpaAllMapRender hmi_hpa_render = 3;
inline bool HmiHpaRenderAllMapMsg::has_hmi_hpa_render() const {
  return this != internal_default_instance() && hmi_hpa_render_ != NULL;
}
inline void HmiHpaRenderAllMapMsg::clear_hmi_hpa_render() {
  if (GetArenaNoVirtual() == NULL && hmi_hpa_render_ != NULL) {
    delete hmi_hpa_render_;
  }
  hmi_hpa_render_ = NULL;
}
inline const ::autodrive::workflow::proto::HmiHpaAllMapRender& HmiHpaRenderAllMapMsg::hmi_hpa_render() const {
  const ::autodrive::workflow::proto::HmiHpaAllMapRender* p = hmi_hpa_render_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.hmi_hpa_render)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::HmiHpaAllMapRender*>(
      &::autodrive::workflow::proto::_HmiHpaAllMapRender_default_instance_);
}
inline ::autodrive::workflow::proto::HmiHpaAllMapRender* HmiHpaRenderAllMapMsg::release_hmi_hpa_render() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.hmi_hpa_render)
  
  ::autodrive::workflow::proto::HmiHpaAllMapRender* temp = hmi_hpa_render_;
  hmi_hpa_render_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::HmiHpaAllMapRender* HmiHpaRenderAllMapMsg::mutable_hmi_hpa_render() {
  
  if (hmi_hpa_render_ == NULL) {
    hmi_hpa_render_ = new ::autodrive::workflow::proto::HmiHpaAllMapRender;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.hmi_hpa_render)
  return hmi_hpa_render_;
}
inline void HmiHpaRenderAllMapMsg::set_allocated_hmi_hpa_render(::autodrive::workflow::proto::HmiHpaAllMapRender* hmi_hpa_render) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hmi_hpa_render_;
  }
  if (hmi_hpa_render) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hmi_hpa_render = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hmi_hpa_render, submessage_arena);
    }
    
  } else {
    
  }
  hmi_hpa_render_ = hmi_hpa_render;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.HmiHpaRenderAllMapMsg.hmi_hpa_render)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hmi_5fhpa_5frender_5fall_5fmap_2eproto__INCLUDED
