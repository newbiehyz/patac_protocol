// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topics.proto

#ifndef PROTOBUF_topics_2eproto__INCLUDED
#define PROTOBUF_topics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_topics_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTopicRequestMsgImpl();
void InitDefaultsTopicRequestMsg();
void InitDefaultsProtoMapImpl();
void InitDefaultsProtoMap();
void InitDefaultsTopicResponseMsg_TopiclistResultEntry_DoNotUseImpl();
void InitDefaultsTopicResponseMsg_TopiclistResultEntry_DoNotUse();
void InitDefaultsTopicResponseMsg_SubscribeResultEntry_DoNotUseImpl();
void InitDefaultsTopicResponseMsg_SubscribeResultEntry_DoNotUse();
void InitDefaultsTopicResponseMsgImpl();
void InitDefaultsTopicResponseMsg();
inline void InitDefaults() {
  InitDefaultsTopicRequestMsg();
  InitDefaultsProtoMap();
  InitDefaultsTopicResponseMsg_TopiclistResultEntry_DoNotUse();
  InitDefaultsTopicResponseMsg_SubscribeResultEntry_DoNotUse();
  InitDefaultsTopicResponseMsg();
}
}  // namespace protobuf_topics_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class ProtoMap;
class ProtoMapDefaultTypeInternal;
extern ProtoMapDefaultTypeInternal _ProtoMap_default_instance_;
class TopicRequestMsg;
class TopicRequestMsgDefaultTypeInternal;
extern TopicRequestMsgDefaultTypeInternal _TopicRequestMsg_default_instance_;
class TopicResponseMsg;
class TopicResponseMsgDefaultTypeInternal;
extern TopicResponseMsgDefaultTypeInternal _TopicResponseMsg_default_instance_;
class TopicResponseMsg_SubscribeResultEntry_DoNotUse;
class TopicResponseMsg_SubscribeResultEntry_DoNotUseDefaultTypeInternal;
extern TopicResponseMsg_SubscribeResultEntry_DoNotUseDefaultTypeInternal _TopicResponseMsg_SubscribeResultEntry_DoNotUse_default_instance_;
class TopicResponseMsg_TopiclistResultEntry_DoNotUse;
class TopicResponseMsg_TopiclistResultEntry_DoNotUseDefaultTypeInternal;
extern TopicResponseMsg_TopiclistResultEntry_DoNotUseDefaultTypeInternal _TopicResponseMsg_TopiclistResultEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum MsgType {
  TOPICLIST = 0,
  SUBSCRIBR = 1,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = TOPICLIST;
const MsgType MsgType_MAX = SUBSCRIBR;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class TopicRequestMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.TopicRequestMsg) */ {
 public:
  TopicRequestMsg();
  virtual ~TopicRequestMsg();

  TopicRequestMsg(const TopicRequestMsg& from);

  inline TopicRequestMsg& operator=(const TopicRequestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicRequestMsg(TopicRequestMsg&& from) noexcept
    : TopicRequestMsg() {
    *this = ::std::move(from);
  }

  inline TopicRequestMsg& operator=(TopicRequestMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicRequestMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicRequestMsg* internal_default_instance() {
    return reinterpret_cast<const TopicRequestMsg*>(
               &_TopicRequestMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TopicRequestMsg* other);
  friend void swap(TopicRequestMsg& a, TopicRequestMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicRequestMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  TopicRequestMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TopicRequestMsg& from);
  void MergeFrom(const TopicRequestMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TopicRequestMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topics = 5;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 5;
  const ::std::string& topics(int index) const;
  ::std::string* mutable_topics(int index);
  void set_topics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_topics(int index, ::std::string&& value);
  #endif
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  ::std::string* add_topics();
  void add_topics(const ::std::string& value);
  #if LANG_CXX11
  void add_topics(::std::string&& value);
  #endif
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topics();

  // string service = 3;
  void clear_service();
  static const int kServiceFieldNumber = 3;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // string param = 6;
  void clear_param();
  static const int kParamFieldNumber = 6;
  const ::std::string& param() const;
  void set_param(const ::std::string& value);
  #if LANG_CXX11
  void set_param(::std::string&& value);
  #endif
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  ::std::string* mutable_param();
  ::std::string* release_param();
  void set_allocated_param(::std::string* param);

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.MsgType msg_type = 4;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 4;
  ::autodrive::workflow::proto::MsgType msg_type() const;
  void set_msg_type(::autodrive::workflow::proto::MsgType value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.TopicRequestMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topics_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr param_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  int msg_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_topics_2eproto::TableStruct;
  friend void ::protobuf_topics_2eproto::InitDefaultsTopicRequestMsgImpl();
};
// -------------------------------------------------------------------

class ProtoMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.ProtoMap) */ {
 public:
  ProtoMap();
  virtual ~ProtoMap();

  ProtoMap(const ProtoMap& from);

  inline ProtoMap& operator=(const ProtoMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoMap(ProtoMap&& from) noexcept
    : ProtoMap() {
    *this = ::std::move(from);
  }

  inline ProtoMap& operator=(ProtoMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoMap* internal_default_instance() {
    return reinterpret_cast<const ProtoMap*>(
               &_ProtoMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ProtoMap* other);
  friend void swap(ProtoMap& a, ProtoMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoMap* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtoMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtoMap& from);
  void MergeFrom(const ProtoMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtoMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string proto_name = 1;
  void clear_proto_name();
  static const int kProtoNameFieldNumber = 1;
  const ::std::string& proto_name() const;
  void set_proto_name(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_name(::std::string&& value);
  #endif
  void set_proto_name(const char* value);
  void set_proto_name(const char* value, size_t size);
  ::std::string* mutable_proto_name();
  ::std::string* release_proto_name();
  void set_allocated_proto_name(::std::string* proto_name);

  // string proto_data = 2;
  void clear_proto_data();
  static const int kProtoDataFieldNumber = 2;
  const ::std::string& proto_data() const;
  void set_proto_data(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_data(::std::string&& value);
  #endif
  void set_proto_data(const char* value);
  void set_proto_data(const char* value, size_t size);
  ::std::string* mutable_proto_data();
  ::std::string* release_proto_data();
  void set_allocated_proto_data(::std::string* proto_data);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.ProtoMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr proto_name_;
  ::google::protobuf::internal::ArenaStringPtr proto_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_topics_2eproto::TableStruct;
  friend void ::protobuf_topics_2eproto::InitDefaultsProtoMapImpl();
};
// -------------------------------------------------------------------

class TopicResponseMsg_TopiclistResultEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TopicResponseMsg_TopiclistResultEntry_DoNotUse, 
    ::std::string, ::autodrive::workflow::proto::ProtoMap,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TopicResponseMsg_TopiclistResultEntry_DoNotUse, 
    ::std::string, ::autodrive::workflow::proto::ProtoMap,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TopicResponseMsg_TopiclistResultEntry_DoNotUse();
  TopicResponseMsg_TopiclistResultEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TopicResponseMsg_TopiclistResultEntry_DoNotUse& other);
  static const TopicResponseMsg_TopiclistResultEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TopicResponseMsg_TopiclistResultEntry_DoNotUse*>(&_TopicResponseMsg_TopiclistResultEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TopicResponseMsg_SubscribeResultEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TopicResponseMsg_SubscribeResultEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TopicResponseMsg_SubscribeResultEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TopicResponseMsg_SubscribeResultEntry_DoNotUse();
  TopicResponseMsg_SubscribeResultEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TopicResponseMsg_SubscribeResultEntry_DoNotUse& other);
  static const TopicResponseMsg_SubscribeResultEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TopicResponseMsg_SubscribeResultEntry_DoNotUse*>(&_TopicResponseMsg_SubscribeResultEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TopicResponseMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.TopicResponseMsg) */ {
 public:
  TopicResponseMsg();
  virtual ~TopicResponseMsg();

  TopicResponseMsg(const TopicResponseMsg& from);

  inline TopicResponseMsg& operator=(const TopicResponseMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicResponseMsg(TopicResponseMsg&& from) noexcept
    : TopicResponseMsg() {
    *this = ::std::move(from);
  }

  inline TopicResponseMsg& operator=(TopicResponseMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicResponseMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicResponseMsg* internal_default_instance() {
    return reinterpret_cast<const TopicResponseMsg*>(
               &_TopicResponseMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TopicResponseMsg* other);
  friend void swap(TopicResponseMsg& a, TopicResponseMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicResponseMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  TopicResponseMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TopicResponseMsg& from);
  void MergeFrom(const TopicResponseMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TopicResponseMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .autodrive.workflow.proto.ProtoMap> topiclist_result = 5;
  int topiclist_result_size() const;
  void clear_topiclist_result();
  static const int kTopiclistResultFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >&
      topiclist_result() const;
  ::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >*
      mutable_topiclist_result();

  // map<string, string> subscribe_result = 6;
  int subscribe_result_size() const;
  void clear_subscribe_result();
  static const int kSubscribeResultFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      subscribe_result() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_subscribe_result();

  // string service = 3;
  void clear_service();
  static const int kServiceFieldNumber = 3;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.MsgType msg_type = 4;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 4;
  ::autodrive::workflow::proto::MsgType msg_type() const;
  void set_msg_type(::autodrive::workflow::proto::MsgType value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.TopicResponseMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TopicResponseMsg_TopiclistResultEntry_DoNotUse,
      ::std::string, ::autodrive::workflow::proto::ProtoMap,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > topiclist_result_;
  ::google::protobuf::internal::MapField<
      TopicResponseMsg_SubscribeResultEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > subscribe_result_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  int msg_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_topics_2eproto::TableStruct;
  friend void ::protobuf_topics_2eproto::InitDefaultsTopicResponseMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicRequestMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool TopicRequestMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& TopicRequestMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicRequestMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* TopicRequestMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.TopicRequestMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* TopicRequestMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.TopicRequestMsg.header)
  return header_;
}
inline void TopicRequestMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.TopicRequestMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool TopicRequestMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& TopicRequestMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicRequestMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* TopicRequestMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.TopicRequestMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* TopicRequestMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.TopicRequestMsg.error)
  return error_;
}
inline void TopicRequestMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.TopicRequestMsg.error)
}

// string service = 3;
inline void TopicRequestMsg::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicRequestMsg::service() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicRequestMsg.service)
  return service_.GetNoArena();
}
inline void TopicRequestMsg::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.TopicRequestMsg.service)
}
#if LANG_CXX11
inline void TopicRequestMsg::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.TopicRequestMsg.service)
}
#endif
inline void TopicRequestMsg::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.TopicRequestMsg.service)
}
inline void TopicRequestMsg::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.TopicRequestMsg.service)
}
inline ::std::string* TopicRequestMsg::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.TopicRequestMsg.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicRequestMsg::release_service() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.TopicRequestMsg.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicRequestMsg::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.TopicRequestMsg.service)
}

// .autodrive.workflow.proto.MsgType msg_type = 4;
inline void TopicRequestMsg::clear_msg_type() {
  msg_type_ = 0;
}
inline ::autodrive::workflow::proto::MsgType TopicRequestMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicRequestMsg.msg_type)
  return static_cast< ::autodrive::workflow::proto::MsgType >(msg_type_);
}
inline void TopicRequestMsg::set_msg_type(::autodrive::workflow::proto::MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.TopicRequestMsg.msg_type)
}

// repeated string topics = 5;
inline int TopicRequestMsg::topics_size() const {
  return topics_.size();
}
inline void TopicRequestMsg::clear_topics() {
  topics_.Clear();
}
inline const ::std::string& TopicRequestMsg::topics(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicRequestMsg.topics)
  return topics_.Get(index);
}
inline ::std::string* TopicRequestMsg::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.TopicRequestMsg.topics)
  return topics_.Mutable(index);
}
inline void TopicRequestMsg::set_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.TopicRequestMsg.topics)
  topics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TopicRequestMsg::set_topics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.TopicRequestMsg.topics)
  topics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TopicRequestMsg::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.TopicRequestMsg.topics)
}
inline void TopicRequestMsg::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.TopicRequestMsg.topics)
}
inline ::std::string* TopicRequestMsg::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:autodrive.workflow.proto.TopicRequestMsg.topics)
  return topics_.Add();
}
inline void TopicRequestMsg::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.TopicRequestMsg.topics)
}
#if LANG_CXX11
inline void TopicRequestMsg::add_topics(::std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.TopicRequestMsg.topics)
}
#endif
inline void TopicRequestMsg::add_topics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:autodrive.workflow.proto.TopicRequestMsg.topics)
}
inline void TopicRequestMsg::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:autodrive.workflow.proto.TopicRequestMsg.topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicRequestMsg::topics() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.TopicRequestMsg.topics)
  return topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicRequestMsg::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.TopicRequestMsg.topics)
  return &topics_;
}

// string param = 6;
inline void TopicRequestMsg::clear_param() {
  param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicRequestMsg::param() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicRequestMsg.param)
  return param_.GetNoArena();
}
inline void TopicRequestMsg::set_param(const ::std::string& value) {
  
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.TopicRequestMsg.param)
}
#if LANG_CXX11
inline void TopicRequestMsg::set_param(::std::string&& value) {
  
  param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.TopicRequestMsg.param)
}
#endif
inline void TopicRequestMsg::set_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.TopicRequestMsg.param)
}
inline void TopicRequestMsg::set_param(const char* value, size_t size) {
  
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.TopicRequestMsg.param)
}
inline ::std::string* TopicRequestMsg::mutable_param() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.TopicRequestMsg.param)
  return param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicRequestMsg::release_param() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.TopicRequestMsg.param)
  
  return param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicRequestMsg::set_allocated_param(::std::string* param) {
  if (param != NULL) {
    
  } else {
    
  }
  param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.TopicRequestMsg.param)
}

// -------------------------------------------------------------------

// ProtoMap

// string proto_name = 1;
inline void ProtoMap::clear_proto_name() {
  proto_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoMap::proto_name() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ProtoMap.proto_name)
  return proto_name_.GetNoArena();
}
inline void ProtoMap::set_proto_name(const ::std::string& value) {
  
  proto_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ProtoMap.proto_name)
}
#if LANG_CXX11
inline void ProtoMap::set_proto_name(::std::string&& value) {
  
  proto_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.ProtoMap.proto_name)
}
#endif
inline void ProtoMap::set_proto_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proto_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.ProtoMap.proto_name)
}
inline void ProtoMap::set_proto_name(const char* value, size_t size) {
  
  proto_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.ProtoMap.proto_name)
}
inline ::std::string* ProtoMap::mutable_proto_name() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ProtoMap.proto_name)
  return proto_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoMap::release_proto_name() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ProtoMap.proto_name)
  
  return proto_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoMap::set_allocated_proto_name(::std::string* proto_name) {
  if (proto_name != NULL) {
    
  } else {
    
  }
  proto_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_name);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ProtoMap.proto_name)
}

// string proto_data = 2;
inline void ProtoMap::clear_proto_data() {
  proto_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoMap::proto_data() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ProtoMap.proto_data)
  return proto_data_.GetNoArena();
}
inline void ProtoMap::set_proto_data(const ::std::string& value) {
  
  proto_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ProtoMap.proto_data)
}
#if LANG_CXX11
inline void ProtoMap::set_proto_data(::std::string&& value) {
  
  proto_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.ProtoMap.proto_data)
}
#endif
inline void ProtoMap::set_proto_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proto_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.ProtoMap.proto_data)
}
inline void ProtoMap::set_proto_data(const char* value, size_t size) {
  
  proto_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.ProtoMap.proto_data)
}
inline ::std::string* ProtoMap::mutable_proto_data() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ProtoMap.proto_data)
  return proto_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoMap::release_proto_data() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ProtoMap.proto_data)
  
  return proto_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoMap::set_allocated_proto_data(::std::string* proto_data) {
  if (proto_data != NULL) {
    
  } else {
    
  }
  proto_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_data);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ProtoMap.proto_data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TopicResponseMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool TopicResponseMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& TopicResponseMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicResponseMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* TopicResponseMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.TopicResponseMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* TopicResponseMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.TopicResponseMsg.header)
  return header_;
}
inline void TopicResponseMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.TopicResponseMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool TopicResponseMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& TopicResponseMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicResponseMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* TopicResponseMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.TopicResponseMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* TopicResponseMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.TopicResponseMsg.error)
  return error_;
}
inline void TopicResponseMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.TopicResponseMsg.error)
}

// string service = 3;
inline void TopicResponseMsg::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicResponseMsg::service() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicResponseMsg.service)
  return service_.GetNoArena();
}
inline void TopicResponseMsg::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.TopicResponseMsg.service)
}
#if LANG_CXX11
inline void TopicResponseMsg::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.TopicResponseMsg.service)
}
#endif
inline void TopicResponseMsg::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.TopicResponseMsg.service)
}
inline void TopicResponseMsg::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.TopicResponseMsg.service)
}
inline ::std::string* TopicResponseMsg::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.TopicResponseMsg.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicResponseMsg::release_service() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.TopicResponseMsg.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicResponseMsg::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.TopicResponseMsg.service)
}

// .autodrive.workflow.proto.MsgType msg_type = 4;
inline void TopicResponseMsg::clear_msg_type() {
  msg_type_ = 0;
}
inline ::autodrive::workflow::proto::MsgType TopicResponseMsg::msg_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.TopicResponseMsg.msg_type)
  return static_cast< ::autodrive::workflow::proto::MsgType >(msg_type_);
}
inline void TopicResponseMsg::set_msg_type(::autodrive::workflow::proto::MsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.TopicResponseMsg.msg_type)
}

// map<string, .autodrive.workflow.proto.ProtoMap> topiclist_result = 5;
inline int TopicResponseMsg::topiclist_result_size() const {
  return topiclist_result_.size();
}
inline void TopicResponseMsg::clear_topiclist_result() {
  topiclist_result_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >&
TopicResponseMsg::topiclist_result() const {
  // @@protoc_insertion_point(field_map:autodrive.workflow.proto.TopicResponseMsg.topiclist_result)
  return topiclist_result_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >*
TopicResponseMsg::mutable_topiclist_result() {
  // @@protoc_insertion_point(field_mutable_map:autodrive.workflow.proto.TopicResponseMsg.topiclist_result)
  return topiclist_result_.MutableMap();
}

// map<string, string> subscribe_result = 6;
inline int TopicResponseMsg::subscribe_result_size() const {
  return subscribe_result_.size();
}
inline void TopicResponseMsg::clear_subscribe_result() {
  subscribe_result_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
TopicResponseMsg::subscribe_result() const {
  // @@protoc_insertion_point(field_map:autodrive.workflow.proto.TopicResponseMsg.subscribe_result)
  return subscribe_result_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
TopicResponseMsg::mutable_subscribe_result() {
  // @@protoc_insertion_point(field_mutable_map:autodrive.workflow.proto.TopicResponseMsg.subscribe_result)
  return subscribe_result_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::MsgType>() {
  return ::autodrive::workflow::proto::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_topics_2eproto__INCLUDED
