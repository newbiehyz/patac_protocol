// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_data.proto

#ifndef PROTOBUF_image_5fdata_2eproto__INCLUDED
#define PROTOBUF_image_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_image_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsImageInfoImpl();
void InitDefaultsImageInfo();
void InitDefaultsMemInfoImpl();
void InitDefaultsMemInfo();
void InitDefaultsImageMsgImpl();
void InitDefaultsImageMsg();
inline void InitDefaults() {
  InitDefaultsImageInfo();
  InitDefaultsMemInfo();
  InitDefaultsImageMsg();
}
}  // namespace protobuf_image_5fdata_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class ImageInfo;
class ImageInfoDefaultTypeInternal;
extern ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
class ImageMsg;
class ImageMsgDefaultTypeInternal;
extern ImageMsgDefaultTypeInternal _ImageMsg_default_instance_;
class MemInfo;
class MemInfoDefaultTypeInternal;
extern MemInfoDefaultTypeInternal _MemInfo_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class ImageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.ImageInfo) */ {
 public:
  ImageInfo();
  virtual ~ImageInfo();

  ImageInfo(const ImageInfo& from);

  inline ImageInfo& operator=(const ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageInfo(ImageInfo&& from) noexcept
    : ImageInfo() {
    *this = ::std::move(from);
  }

  inline ImageInfo& operator=(ImageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageInfo* internal_default_instance() {
    return reinterpret_cast<const ImageInfo*>(
               &_ImageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ImageInfo* other);
  friend void swap(ImageInfo& a, ImageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageInfo& from);
  void MergeFrom(const ImageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.ImageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_image_5fdata_2eproto::TableStruct;
  friend void ::protobuf_image_5fdata_2eproto::InitDefaultsImageInfoImpl();
};
// -------------------------------------------------------------------

class MemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MemInfo) */ {
 public:
  MemInfo();
  virtual ~MemInfo();

  MemInfo(const MemInfo& from);

  inline MemInfo& operator=(const MemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemInfo(MemInfo&& from) noexcept
    : MemInfo() {
    *this = ::std::move(from);
  }

  inline MemInfo& operator=(MemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfo* internal_default_instance() {
    return reinterpret_cast<const MemInfo*>(
               &_MemInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MemInfo* other);
  friend void swap(MemInfo& a, MemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MemInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemInfo& from);
  void MergeFrom(const MemInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  ::google::protobuf::uint64 addr() const;
  void set_addr(::google::protobuf::uint64 value);

  // uint32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // uint32 pitch = 3;
  void clear_pitch();
  static const int kPitchFieldNumber = 3;
  ::google::protobuf::uint32 pitch() const;
  void set_pitch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 addr_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 pitch_;
  mutable int _cached_size_;
  friend struct ::protobuf_image_5fdata_2eproto::TableStruct;
  friend void ::protobuf_image_5fdata_2eproto::InitDefaultsMemInfoImpl();
};
// -------------------------------------------------------------------

class ImageMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.ImageMsg) */ {
 public:
  ImageMsg();
  virtual ~ImageMsg();

  ImageMsg(const ImageMsg& from);

  inline ImageMsg& operator=(const ImageMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageMsg(ImageMsg&& from) noexcept
    : ImageMsg() {
    *this = ::std::move(from);
  }

  inline ImageMsg& operator=(ImageMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageMsg* internal_default_instance() {
    return reinterpret_cast<const ImageMsg*>(
               &_ImageMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ImageMsg* other);
  friend void swap(ImageMsg& a, ImageMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageMsg& from);
  void MergeFrom(const ImageMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.ImageInfo image_info = 3;
  bool has_image_info() const;
  void clear_image_info();
  static const int kImageInfoFieldNumber = 3;
  const ::autodrive::workflow::proto::ImageInfo& image_info() const;
  ::autodrive::workflow::proto::ImageInfo* release_image_info();
  ::autodrive::workflow::proto::ImageInfo* mutable_image_info();
  void set_allocated_image_info(::autodrive::workflow::proto::ImageInfo* image_info);

  // .autodrive.workflow.proto.MemInfo mem_info_y = 4;
  bool has_mem_info_y() const;
  void clear_mem_info_y();
  static const int kMemInfoYFieldNumber = 4;
  const ::autodrive::workflow::proto::MemInfo& mem_info_y() const;
  ::autodrive::workflow::proto::MemInfo* release_mem_info_y();
  ::autodrive::workflow::proto::MemInfo* mutable_mem_info_y();
  void set_allocated_mem_info_y(::autodrive::workflow::proto::MemInfo* mem_info_y);

  // .autodrive.workflow.proto.MemInfo mem_info_uv = 5;
  bool has_mem_info_uv() const;
  void clear_mem_info_uv();
  static const int kMemInfoUvFieldNumber = 5;
  const ::autodrive::workflow::proto::MemInfo& mem_info_uv() const;
  ::autodrive::workflow::proto::MemInfo* release_mem_info_uv();
  ::autodrive::workflow::proto::MemInfo* mutable_mem_info_uv();
  void set_allocated_mem_info_uv(::autodrive::workflow::proto::MemInfo* mem_info_uv);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.ImageMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::ImageInfo* image_info_;
  ::autodrive::workflow::proto::MemInfo* mem_info_y_;
  ::autodrive::workflow::proto::MemInfo* mem_info_uv_;
  mutable int _cached_size_;
  friend struct ::protobuf_image_5fdata_2eproto::TableStruct;
  friend void ::protobuf_image_5fdata_2eproto::InitDefaultsImageMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageInfo

// uint32 width = 1;
inline void ImageInfo::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 ImageInfo::width() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImageInfo.width)
  return width_;
}
inline void ImageInfo::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ImageInfo.width)
}

// uint32 height = 2;
inline void ImageInfo::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 ImageInfo::height() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImageInfo.height)
  return height_;
}
inline void ImageInfo::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ImageInfo.height)
}

// -------------------------------------------------------------------

// MemInfo

// uint64 addr = 1;
inline void MemInfo::clear_addr() {
  addr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemInfo::addr() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MemInfo.addr)
  return addr_;
}
inline void MemInfo::set_addr(::google::protobuf::uint64 value) {
  
  addr_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MemInfo.addr)
}

// uint32 size = 2;
inline void MemInfo::clear_size() {
  size_ = 0u;
}
inline ::google::protobuf::uint32 MemInfo::size() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MemInfo.size)
  return size_;
}
inline void MemInfo::set_size(::google::protobuf::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MemInfo.size)
}

// uint32 pitch = 3;
inline void MemInfo::clear_pitch() {
  pitch_ = 0u;
}
inline ::google::protobuf::uint32 MemInfo::pitch() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MemInfo.pitch)
  return pitch_;
}
inline void MemInfo::set_pitch(::google::protobuf::uint32 value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MemInfo.pitch)
}

// -------------------------------------------------------------------

// ImageMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool ImageMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& ImageMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImageMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* ImageMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ImageMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* ImageMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ImageMsg.header)
  return header_;
}
inline void ImageMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ImageMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool ImageMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& ImageMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImageMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* ImageMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ImageMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* ImageMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ImageMsg.error)
  return error_;
}
inline void ImageMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ImageMsg.error)
}

// .autodrive.workflow.proto.ImageInfo image_info = 3;
inline bool ImageMsg::has_image_info() const {
  return this != internal_default_instance() && image_info_ != NULL;
}
inline void ImageMsg::clear_image_info() {
  if (GetArenaNoVirtual() == NULL && image_info_ != NULL) {
    delete image_info_;
  }
  image_info_ = NULL;
}
inline const ::autodrive::workflow::proto::ImageInfo& ImageMsg::image_info() const {
  const ::autodrive::workflow::proto::ImageInfo* p = image_info_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImageMsg.image_info)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::ImageInfo*>(
      &::autodrive::workflow::proto::_ImageInfo_default_instance_);
}
inline ::autodrive::workflow::proto::ImageInfo* ImageMsg::release_image_info() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ImageMsg.image_info)
  
  ::autodrive::workflow::proto::ImageInfo* temp = image_info_;
  image_info_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::ImageInfo* ImageMsg::mutable_image_info() {
  
  if (image_info_ == NULL) {
    image_info_ = new ::autodrive::workflow::proto::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ImageMsg.image_info)
  return image_info_;
}
inline void ImageMsg::set_allocated_image_info(::autodrive::workflow::proto::ImageInfo* image_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_info_;
  }
  if (image_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_info, submessage_arena);
    }
    
  } else {
    
  }
  image_info_ = image_info;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ImageMsg.image_info)
}

// .autodrive.workflow.proto.MemInfo mem_info_y = 4;
inline bool ImageMsg::has_mem_info_y() const {
  return this != internal_default_instance() && mem_info_y_ != NULL;
}
inline void ImageMsg::clear_mem_info_y() {
  if (GetArenaNoVirtual() == NULL && mem_info_y_ != NULL) {
    delete mem_info_y_;
  }
  mem_info_y_ = NULL;
}
inline const ::autodrive::workflow::proto::MemInfo& ImageMsg::mem_info_y() const {
  const ::autodrive::workflow::proto::MemInfo* p = mem_info_y_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImageMsg.mem_info_y)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MemInfo*>(
      &::autodrive::workflow::proto::_MemInfo_default_instance_);
}
inline ::autodrive::workflow::proto::MemInfo* ImageMsg::release_mem_info_y() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ImageMsg.mem_info_y)
  
  ::autodrive::workflow::proto::MemInfo* temp = mem_info_y_;
  mem_info_y_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MemInfo* ImageMsg::mutable_mem_info_y() {
  
  if (mem_info_y_ == NULL) {
    mem_info_y_ = new ::autodrive::workflow::proto::MemInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ImageMsg.mem_info_y)
  return mem_info_y_;
}
inline void ImageMsg::set_allocated_mem_info_y(::autodrive::workflow::proto::MemInfo* mem_info_y) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mem_info_y_;
  }
  if (mem_info_y) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mem_info_y = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mem_info_y, submessage_arena);
    }
    
  } else {
    
  }
  mem_info_y_ = mem_info_y;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ImageMsg.mem_info_y)
}

// .autodrive.workflow.proto.MemInfo mem_info_uv = 5;
inline bool ImageMsg::has_mem_info_uv() const {
  return this != internal_default_instance() && mem_info_uv_ != NULL;
}
inline void ImageMsg::clear_mem_info_uv() {
  if (GetArenaNoVirtual() == NULL && mem_info_uv_ != NULL) {
    delete mem_info_uv_;
  }
  mem_info_uv_ = NULL;
}
inline const ::autodrive::workflow::proto::MemInfo& ImageMsg::mem_info_uv() const {
  const ::autodrive::workflow::proto::MemInfo* p = mem_info_uv_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ImageMsg.mem_info_uv)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MemInfo*>(
      &::autodrive::workflow::proto::_MemInfo_default_instance_);
}
inline ::autodrive::workflow::proto::MemInfo* ImageMsg::release_mem_info_uv() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ImageMsg.mem_info_uv)
  
  ::autodrive::workflow::proto::MemInfo* temp = mem_info_uv_;
  mem_info_uv_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MemInfo* ImageMsg::mutable_mem_info_uv() {
  
  if (mem_info_uv_ == NULL) {
    mem_info_uv_ = new ::autodrive::workflow::proto::MemInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ImageMsg.mem_info_uv)
  return mem_info_uv_;
}
inline void ImageMsg::set_allocated_mem_info_uv(::autodrive::workflow::proto::MemInfo* mem_info_uv) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mem_info_uv_;
  }
  if (mem_info_uv) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mem_info_uv = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mem_info_uv, submessage_arena);
    }
    
  } else {
    
  }
  mem_info_uv_ = mem_info_uv;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ImageMsg.mem_info_uv)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_image_5fdata_2eproto__INCLUDED
