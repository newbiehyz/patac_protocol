// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#ifndef PROTOBUF_localization_2eproto__INCLUDED
#define PROTOBUF_localization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
#include "common.pb.h"
#include "loc_odo.pb.h"
#include "ndm_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_localization_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSpLocationImpl();
void InitDefaultsSpLocation();
void InitDefaultsLocalizationMsgImpl();
void InitDefaultsLocalizationMsg();
inline void InitDefaults() {
  InitDefaultsSpLocation();
  InitDefaultsLocalizationMsg();
}
}  // namespace protobuf_localization_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class LocalizationMsg;
class LocalizationMsgDefaultTypeInternal;
extern LocalizationMsgDefaultTypeInternal _LocalizationMsg_default_instance_;
class SpLocation;
class SpLocationDefaultTypeInternal;
extern SpLocationDefaultTypeInternal _SpLocation_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum SpLocation_SpLocationState {
  SpLocation_SpLocationState_kSpLocationStateUninit = 0,
  SpLocation_SpLocationState_kSpLocationStateIniting = 1,
  SpLocation_SpLocationState_kSpLocationStateLocNormal = 2,
  SpLocation_SpLocationState_kSpLocationStateLocUnnormal = 3,
  SpLocation_SpLocationState_kSpLocationStateLocLowPrecision = 4,
  SpLocation_SpLocationState_SpLocation_SpLocationState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SpLocation_SpLocationState_SpLocation_SpLocationState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SpLocation_SpLocationState_IsValid(int value);
const SpLocation_SpLocationState SpLocation_SpLocationState_SpLocationState_MIN = SpLocation_SpLocationState_kSpLocationStateUninit;
const SpLocation_SpLocationState SpLocation_SpLocationState_SpLocationState_MAX = SpLocation_SpLocationState_kSpLocationStateLocLowPrecision;
const int SpLocation_SpLocationState_SpLocationState_ARRAYSIZE = SpLocation_SpLocationState_SpLocationState_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpLocation_SpLocationState_descriptor();
inline const ::std::string& SpLocation_SpLocationState_Name(SpLocation_SpLocationState value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpLocation_SpLocationState_descriptor(), value);
}
inline bool SpLocation_SpLocationState_Parse(
    const ::std::string& name, SpLocation_SpLocationState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpLocation_SpLocationState>(
    SpLocation_SpLocationState_descriptor(), name, value);
}
// ===================================================================

class SpLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.SpLocation) */ {
 public:
  SpLocation();
  virtual ~SpLocation();

  SpLocation(const SpLocation& from);

  inline SpLocation& operator=(const SpLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpLocation(SpLocation&& from) noexcept
    : SpLocation() {
    *this = ::std::move(from);
  }

  inline SpLocation& operator=(SpLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpLocation* internal_default_instance() {
    return reinterpret_cast<const SpLocation*>(
               &_SpLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SpLocation* other);
  friend void swap(SpLocation& a, SpLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  SpLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpLocation& from);
  void MergeFrom(const SpLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SpLocation_SpLocationState SpLocationState;
  static const SpLocationState kSpLocationStateUninit =
    SpLocation_SpLocationState_kSpLocationStateUninit;
  static const SpLocationState kSpLocationStateIniting =
    SpLocation_SpLocationState_kSpLocationStateIniting;
  static const SpLocationState kSpLocationStateLocNormal =
    SpLocation_SpLocationState_kSpLocationStateLocNormal;
  static const SpLocationState kSpLocationStateLocUnnormal =
    SpLocation_SpLocationState_kSpLocationStateLocUnnormal;
  static const SpLocationState kSpLocationStateLocLowPrecision =
    SpLocation_SpLocationState_kSpLocationStateLocLowPrecision;
  static inline bool SpLocationState_IsValid(int value) {
    return SpLocation_SpLocationState_IsValid(value);
  }
  static const SpLocationState SpLocationState_MIN =
    SpLocation_SpLocationState_SpLocationState_MIN;
  static const SpLocationState SpLocationState_MAX =
    SpLocation_SpLocationState_SpLocationState_MAX;
  static const int SpLocationState_ARRAYSIZE =
    SpLocation_SpLocationState_SpLocationState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SpLocationState_descriptor() {
    return SpLocation_SpLocationState_descriptor();
  }
  static inline const ::std::string& SpLocationState_Name(SpLocationState value) {
    return SpLocation_SpLocationState_Name(value);
  }
  static inline bool SpLocationState_Parse(const ::std::string& name,
      SpLocationState* value) {
    return SpLocation_SpLocationState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.loc_odo.Odometry loc_odom = 1;
  bool has_loc_odom() const;
  void clear_loc_odom();
  static const int kLocOdomFieldNumber = 1;
  const ::autodrive::workflow::proto::loc_odo::Odometry& loc_odom() const;
  ::autodrive::workflow::proto::loc_odo::Odometry* release_loc_odom();
  ::autodrive::workflow::proto::loc_odo::Odometry* mutable_loc_odom();
  void set_allocated_loc_odom(::autodrive::workflow::proto::loc_odo::Odometry* loc_odom);

  // .autodrive.workflow.proto.Vector3f velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  const ::autodrive::workflow::proto::Vector3f& velocity() const;
  ::autodrive::workflow::proto::Vector3f* release_velocity();
  ::autodrive::workflow::proto::Vector3f* mutable_velocity();
  void set_allocated_velocity(::autodrive::workflow::proto::Vector3f* velocity);

  // .autodrive.workflow.proto.Vector3f angular_vel = 4;
  bool has_angular_vel() const;
  void clear_angular_vel();
  static const int kAngularVelFieldNumber = 4;
  const ::autodrive::workflow::proto::Vector3f& angular_vel() const;
  ::autodrive::workflow::proto::Vector3f* release_angular_vel();
  ::autodrive::workflow::proto::Vector3f* mutable_angular_vel();
  void set_allocated_angular_vel(::autodrive::workflow::proto::Vector3f* angular_vel);

  // .autodrive.workflow.proto.SpLocation.SpLocationState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::autodrive::workflow::proto::SpLocation_SpLocationState state() const;
  void set_state(::autodrive::workflow::proto::SpLocation_SpLocationState value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.SpLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::loc_odo::Odometry* loc_odom_;
  ::autodrive::workflow::proto::Vector3f* velocity_;
  ::autodrive::workflow::proto::Vector3f* angular_vel_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_localization_2eproto::TableStruct;
  friend void ::protobuf_localization_2eproto::InitDefaultsSpLocationImpl();
};
// -------------------------------------------------------------------

class LocalizationMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LocalizationMsg) */ {
 public:
  LocalizationMsg();
  virtual ~LocalizationMsg();

  LocalizationMsg(const LocalizationMsg& from);

  inline LocalizationMsg& operator=(const LocalizationMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalizationMsg(LocalizationMsg&& from) noexcept
    : LocalizationMsg() {
    *this = ::std::move(from);
  }

  inline LocalizationMsg& operator=(LocalizationMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalizationMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationMsg* internal_default_instance() {
    return reinterpret_cast<const LocalizationMsg*>(
               &_LocalizationMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LocalizationMsg* other);
  friend void swap(LocalizationMsg& a, LocalizationMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalizationMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalizationMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocalizationMsg& from);
  void MergeFrom(const LocalizationMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocalizationMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 3;
  bool has_ndm_header() const;
  void clear_ndm_header();
  static const int kNdmHeaderFieldNumber = 3;
  const ::autodrive::workflow::proto::ndm_base::NdmSpec& ndm_header() const;
  ::autodrive::workflow::proto::ndm_base::NdmSpec* release_ndm_header();
  ::autodrive::workflow::proto::ndm_base::NdmSpec* mutable_ndm_header();
  void set_allocated_ndm_header(::autodrive::workflow::proto::ndm_base::NdmSpec* ndm_header);

  // .autodrive.workflow.proto.SpLocation location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const ::autodrive::workflow::proto::SpLocation& location() const;
  ::autodrive::workflow::proto::SpLocation* release_location();
  ::autodrive::workflow::proto::SpLocation* mutable_location();
  void set_allocated_location(::autodrive::workflow::proto::SpLocation* location);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LocalizationMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::ndm_base::NdmSpec* ndm_header_;
  ::autodrive::workflow::proto::SpLocation* location_;
  mutable int _cached_size_;
  friend struct ::protobuf_localization_2eproto::TableStruct;
  friend void ::protobuf_localization_2eproto::InitDefaultsLocalizationMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpLocation

// .autodrive.workflow.proto.loc_odo.Odometry loc_odom = 1;
inline bool SpLocation::has_loc_odom() const {
  return this != internal_default_instance() && loc_odom_ != NULL;
}
inline const ::autodrive::workflow::proto::loc_odo::Odometry& SpLocation::loc_odom() const {
  const ::autodrive::workflow::proto::loc_odo::Odometry* p = loc_odom_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpLocation.loc_odom)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::loc_odo::Odometry*>(
      &::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_);
}
inline ::autodrive::workflow::proto::loc_odo::Odometry* SpLocation::release_loc_odom() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpLocation.loc_odom)
  
  ::autodrive::workflow::proto::loc_odo::Odometry* temp = loc_odom_;
  loc_odom_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::loc_odo::Odometry* SpLocation::mutable_loc_odom() {
  
  if (loc_odom_ == NULL) {
    loc_odom_ = new ::autodrive::workflow::proto::loc_odo::Odometry;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpLocation.loc_odom)
  return loc_odom_;
}
inline void SpLocation::set_allocated_loc_odom(::autodrive::workflow::proto::loc_odo::Odometry* loc_odom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(loc_odom_);
  }
  if (loc_odom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      loc_odom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loc_odom, submessage_arena);
    }
    
  } else {
    
  }
  loc_odom_ = loc_odom;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpLocation.loc_odom)
}

// .autodrive.workflow.proto.SpLocation.SpLocationState state = 2;
inline void SpLocation::clear_state() {
  state_ = 0;
}
inline ::autodrive::workflow::proto::SpLocation_SpLocationState SpLocation::state() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpLocation.state)
  return static_cast< ::autodrive::workflow::proto::SpLocation_SpLocationState >(state_);
}
inline void SpLocation::set_state(::autodrive::workflow::proto::SpLocation_SpLocationState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpLocation.state)
}

// .autodrive.workflow.proto.Vector3f velocity = 3;
inline bool SpLocation::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& SpLocation::velocity() const {
  const ::autodrive::workflow::proto::Vector3f* p = velocity_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpLocation.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* SpLocation::release_velocity() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpLocation.velocity)
  
  ::autodrive::workflow::proto::Vector3f* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* SpLocation::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpLocation.velocity)
  return velocity_;
}
inline void SpLocation::set_allocated_velocity(::autodrive::workflow::proto::Vector3f* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpLocation.velocity)
}

// .autodrive.workflow.proto.Vector3f angular_vel = 4;
inline bool SpLocation::has_angular_vel() const {
  return this != internal_default_instance() && angular_vel_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& SpLocation::angular_vel() const {
  const ::autodrive::workflow::proto::Vector3f* p = angular_vel_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpLocation.angular_vel)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* SpLocation::release_angular_vel() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpLocation.angular_vel)
  
  ::autodrive::workflow::proto::Vector3f* temp = angular_vel_;
  angular_vel_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* SpLocation::mutable_angular_vel() {
  
  if (angular_vel_ == NULL) {
    angular_vel_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpLocation.angular_vel)
  return angular_vel_;
}
inline void SpLocation::set_allocated_angular_vel(::autodrive::workflow::proto::Vector3f* angular_vel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angular_vel_);
  }
  if (angular_vel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angular_vel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angular_vel, submessage_arena);
    }
    
  } else {
    
  }
  angular_vel_ = angular_vel;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpLocation.angular_vel)
}

// -------------------------------------------------------------------

// LocalizationMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool LocalizationMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& LocalizationMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LocalizationMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* LocalizationMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LocalizationMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* LocalizationMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LocalizationMsg.header)
  return header_;
}
inline void LocalizationMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LocalizationMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool LocalizationMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& LocalizationMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LocalizationMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* LocalizationMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LocalizationMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* LocalizationMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LocalizationMsg.error)
  return error_;
}
inline void LocalizationMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LocalizationMsg.error)
}

// .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 3;
inline bool LocalizationMsg::has_ndm_header() const {
  return this != internal_default_instance() && ndm_header_ != NULL;
}
inline const ::autodrive::workflow::proto::ndm_base::NdmSpec& LocalizationMsg::ndm_header() const {
  const ::autodrive::workflow::proto::ndm_base::NdmSpec* p = ndm_header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LocalizationMsg.ndm_header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::ndm_base::NdmSpec*>(
      &::autodrive::workflow::proto::ndm_base::_NdmSpec_default_instance_);
}
inline ::autodrive::workflow::proto::ndm_base::NdmSpec* LocalizationMsg::release_ndm_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LocalizationMsg.ndm_header)
  
  ::autodrive::workflow::proto::ndm_base::NdmSpec* temp = ndm_header_;
  ndm_header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::ndm_base::NdmSpec* LocalizationMsg::mutable_ndm_header() {
  
  if (ndm_header_ == NULL) {
    ndm_header_ = new ::autodrive::workflow::proto::ndm_base::NdmSpec;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LocalizationMsg.ndm_header)
  return ndm_header_;
}
inline void LocalizationMsg::set_allocated_ndm_header(::autodrive::workflow::proto::ndm_base::NdmSpec* ndm_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ndm_header_);
  }
  if (ndm_header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ndm_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ndm_header, submessage_arena);
    }
    
  } else {
    
  }
  ndm_header_ = ndm_header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LocalizationMsg.ndm_header)
}

// .autodrive.workflow.proto.SpLocation location = 4;
inline bool LocalizationMsg::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void LocalizationMsg::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::autodrive::workflow::proto::SpLocation& LocalizationMsg::location() const {
  const ::autodrive::workflow::proto::SpLocation* p = location_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LocalizationMsg.location)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::SpLocation*>(
      &::autodrive::workflow::proto::_SpLocation_default_instance_);
}
inline ::autodrive::workflow::proto::SpLocation* LocalizationMsg::release_location() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LocalizationMsg.location)
  
  ::autodrive::workflow::proto::SpLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::SpLocation* LocalizationMsg::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::autodrive::workflow::proto::SpLocation;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LocalizationMsg.location)
  return location_;
}
inline void LocalizationMsg::set_allocated_location(::autodrive::workflow::proto::SpLocation* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LocalizationMsg.location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::SpLocation_SpLocationState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::SpLocation_SpLocationState>() {
  return ::autodrive::workflow::proto::SpLocation_SpLocationState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_localization_2eproto__INCLUDED
