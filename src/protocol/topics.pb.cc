// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topics.proto

#include "topics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class TopicRequestMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopicRequestMsg>
      _instance;
} _TopicRequestMsg_default_instance_;
class ProtoMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProtoMap>
      _instance;
} _ProtoMap_default_instance_;
class TopicResponseMsg_TopiclistResultEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopicResponseMsg_TopiclistResultEntry_DoNotUse>
      _instance;
} _TopicResponseMsg_TopiclistResultEntry_DoNotUse_default_instance_;
class TopicResponseMsg_SubscribeResultEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopicResponseMsg_SubscribeResultEntry_DoNotUse>
      _instance;
} _TopicResponseMsg_SubscribeResultEntry_DoNotUse_default_instance_;
class TopicResponseMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopicResponseMsg>
      _instance;
} _TopicResponseMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_topics_2eproto {
void InitDefaultsTopicRequestMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  {
    void* ptr = &::autodrive::workflow::proto::_TopicRequestMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::TopicRequestMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::TopicRequestMsg::InitAsDefaultInstance();
}

void InitDefaultsTopicRequestMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTopicRequestMsgImpl);
}

void InitDefaultsProtoMapImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_ProtoMap_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ProtoMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ProtoMap::InitAsDefaultInstance();
}

void InitDefaultsProtoMap() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProtoMapImpl);
}

void InitDefaultsTopicResponseMsg_TopiclistResultEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_topics_2eproto::InitDefaultsProtoMap();
  {
    void* ptr = &::autodrive::workflow::proto::_TopicResponseMsg_TopiclistResultEntry_DoNotUse_default_instance_;
    new (ptr) ::autodrive::workflow::proto::TopicResponseMsg_TopiclistResultEntry_DoNotUse();
  }
  ::autodrive::workflow::proto::TopicResponseMsg_TopiclistResultEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsTopicResponseMsg_TopiclistResultEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTopicResponseMsg_TopiclistResultEntry_DoNotUseImpl);
}

void InitDefaultsTopicResponseMsg_SubscribeResultEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_TopicResponseMsg_SubscribeResultEntry_DoNotUse_default_instance_;
    new (ptr) ::autodrive::workflow::proto::TopicResponseMsg_SubscribeResultEntry_DoNotUse();
  }
  ::autodrive::workflow::proto::TopicResponseMsg_SubscribeResultEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsTopicResponseMsg_SubscribeResultEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTopicResponseMsg_SubscribeResultEntry_DoNotUseImpl);
}

void InitDefaultsTopicResponseMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_topics_2eproto::InitDefaultsTopicResponseMsg_TopiclistResultEntry_DoNotUse();
  protobuf_topics_2eproto::InitDefaultsTopicResponseMsg_SubscribeResultEntry_DoNotUse();
  {
    void* ptr = &::autodrive::workflow::proto::_TopicResponseMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::TopicResponseMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::TopicResponseMsg::InitAsDefaultInstance();
}

void InitDefaultsTopicResponseMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTopicResponseMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicRequestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicRequestMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicRequestMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicRequestMsg, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicRequestMsg, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicRequestMsg, topics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicRequestMsg, param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ProtoMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ProtoMap, proto_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ProtoMap, proto_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg_TopiclistResultEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg_TopiclistResultEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg_TopiclistResultEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg_TopiclistResultEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg_SubscribeResultEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg_SubscribeResultEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg_SubscribeResultEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg_SubscribeResultEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg, topiclist_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TopicResponseMsg, subscribe_result_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::TopicRequestMsg)},
  { 11, -1, sizeof(::autodrive::workflow::proto::ProtoMap)},
  { 18, 25, sizeof(::autodrive::workflow::proto::TopicResponseMsg_TopiclistResultEntry_DoNotUse)},
  { 27, 34, sizeof(::autodrive::workflow::proto::TopicResponseMsg_SubscribeResultEntry_DoNotUse)},
  { 36, -1, sizeof(::autodrive::workflow::proto::TopicResponseMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_TopicRequestMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ProtoMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_TopicResponseMsg_TopiclistResultEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_TopicResponseMsg_SubscribeResultEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_TopicResponseMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "topics.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014topics.proto\022\030autodrive.workflow.proto"
      "\032\014common.proto\"\333\001\n\017TopicRequestMsg\0223\n\006he"
      "ader\030\001 \001(\0132#.autodrive.workflow.proto.Ms"
      "gHeader\022.\n\005error\030\002 \001(\0132\037.autodrive.workf"
      "low.proto.Error\022\017\n\007service\030\003 \001(\t\0223\n\010msg_"
      "type\030\004 \001(\0162!.autodrive.workflow.proto.Ms"
      "gType\022\016\n\006topics\030\005 \003(\t\022\r\n\005param\030\006 \001(\t\"2\n\010"
      "ProtoMap\022\022\n\nproto_name\030\001 \001(\t\022\022\n\nproto_da"
      "ta\030\002 \001(\t\"\207\004\n\020TopicResponseMsg\0223\n\006header\030"
      "\001 \001(\0132#.autodrive.workflow.proto.MsgHead"
      "er\022.\n\005error\030\002 \001(\0132\037.autodrive.workflow.p"
      "roto.Error\022\017\n\007service\030\003 \001(\t\0223\n\010msg_type\030"
      "\004 \001(\0162!.autodrive.workflow.proto.MsgType"
      "\022Y\n\020topiclist_result\030\005 \003(\0132\?.autodrive.w"
      "orkflow.proto.TopicResponseMsg.Topiclist"
      "ResultEntry\022Y\n\020subscribe_result\030\006 \003(\0132\?."
      "autodrive.workflow.proto.TopicResponseMs"
      "g.SubscribeResultEntry\032Z\n\024TopiclistResul"
      "tEntry\022\013\n\003key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".aut"
      "odrive.workflow.proto.ProtoMap:\0028\001\0326\n\024Su"
      "bscribeResultEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
      "\030\002 \001(\t:\0028\001*\'\n\007MsgType\022\r\n\tTOPICLIST\020\000\022\r\n\t"
      "SUBSCRIBR\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 899);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "topics.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_topics_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_topics_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_topics_2eproto::file_level_enum_descriptors[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TopicRequestMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_TopicRequestMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_TopicRequestMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void TopicRequestMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void TopicRequestMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicRequestMsg::kHeaderFieldNumber;
const int TopicRequestMsg::kErrorFieldNumber;
const int TopicRequestMsg::kServiceFieldNumber;
const int TopicRequestMsg::kMsgTypeFieldNumber;
const int TopicRequestMsg::kTopicsFieldNumber;
const int TopicRequestMsg::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicRequestMsg::TopicRequestMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_topics_2eproto::InitDefaultsTopicRequestMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.TopicRequestMsg)
}
TopicRequestMsg::TopicRequestMsg(const TopicRequestMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      topics_(from.topics_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service().size() > 0) {
    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.param().size() > 0) {
    param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_);
  }
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.TopicRequestMsg)
}

void TopicRequestMsg::SharedCtor() {
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(msg_type_));
  _cached_size_ = 0;
}

TopicRequestMsg::~TopicRequestMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.TopicRequestMsg)
  SharedDtor();
}

void TopicRequestMsg::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void TopicRequestMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicRequestMsg::descriptor() {
  ::protobuf_topics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopicRequestMsg& TopicRequestMsg::default_instance() {
  ::protobuf_topics_2eproto::InitDefaultsTopicRequestMsg();
  return *internal_default_instance();
}

TopicRequestMsg* TopicRequestMsg::New(::google::protobuf::Arena* arena) const {
  TopicRequestMsg* n = new TopicRequestMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicRequestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.TopicRequestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  msg_type_ = 0;
  _internal_metadata_.Clear();
}

bool TopicRequestMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.TopicRequestMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), static_cast<int>(this->service().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.TopicRequestMsg.service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MsgType msg_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::autodrive::workflow::proto::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string topics = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topics()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topics(this->topics_size() - 1).data(),
            static_cast<int>(this->topics(this->topics_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.TopicRequestMsg.topics"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->param().data(), static_cast<int>(this->param().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.TopicRequestMsg.param"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.TopicRequestMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.TopicRequestMsg)
  return false;
#undef DO_
}

void TopicRequestMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.TopicRequestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // string service = 3;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.TopicRequestMsg.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service(), output);
  }

  // .autodrive.workflow.proto.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_type(), output);
  }

  // repeated string topics = 5;
  for (int i = 0, n = this->topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topics(i).data(), static_cast<int>(this->topics(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.TopicRequestMsg.topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->topics(i), output);
  }

  // string param = 6;
  if (this->param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->param().data(), static_cast<int>(this->param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.TopicRequestMsg.param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->param(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.TopicRequestMsg)
}

::google::protobuf::uint8* TopicRequestMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.TopicRequestMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // string service = 3;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.TopicRequestMsg.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service(), target);
  }

  // .autodrive.workflow.proto.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msg_type(), target);
  }

  // repeated string topics = 5;
  for (int i = 0, n = this->topics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topics(i).data(), static_cast<int>(this->topics(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.TopicRequestMsg.topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->topics(i), target);
  }

  // string param = 6;
  if (this->param().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->param().data(), static_cast<int>(this->param().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.TopicRequestMsg.param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->param(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.TopicRequestMsg)
  return target;
}

size_t TopicRequestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.TopicRequestMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string topics = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->topics_size());
  for (int i = 0, n = this->topics_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topics(i));
  }

  // string service = 3;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // string param = 6;
  if (this->param().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->param());
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicRequestMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.TopicRequestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicRequestMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicRequestMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.TopicRequestMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.TopicRequestMsg)
    MergeFrom(*source);
  }
}

void TopicRequestMsg::MergeFrom(const TopicRequestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.TopicRequestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.param().size() > 0) {

    param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_);
  }
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
}

void TopicRequestMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.TopicRequestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicRequestMsg::CopyFrom(const TopicRequestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.TopicRequestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicRequestMsg::IsInitialized() const {
  return true;
}

void TopicRequestMsg::Swap(TopicRequestMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicRequestMsg::InternalSwap(TopicRequestMsg* other) {
  using std::swap;
  topics_.InternalSwap(&other->topics_);
  service_.Swap(&other->service_);
  param_.Swap(&other->param_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(msg_type_, other->msg_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicRequestMsg::GetMetadata() const {
  protobuf_topics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProtoMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoMap::kProtoNameFieldNumber;
const int ProtoMap::kProtoDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoMap::ProtoMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_topics_2eproto::InitDefaultsProtoMap();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ProtoMap)
}
ProtoMap::ProtoMap(const ProtoMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proto_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proto_name().size() > 0) {
    proto_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_name_);
  }
  proto_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proto_data().size() > 0) {
    proto_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_data_);
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ProtoMap)
}

void ProtoMap::SharedCtor() {
  proto_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ProtoMap::~ProtoMap() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ProtoMap)
  SharedDtor();
}

void ProtoMap::SharedDtor() {
  proto_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtoMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMap::descriptor() {
  ::protobuf_topics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProtoMap& ProtoMap::default_instance() {
  ::protobuf_topics_2eproto::InitDefaultsProtoMap();
  return *internal_default_instance();
}

ProtoMap* ProtoMap::New(::google::protobuf::Arena* arena) const {
  ProtoMap* n = new ProtoMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoMap::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ProtoMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ProtoMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ProtoMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string proto_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proto_name().data(), static_cast<int>(this->proto_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.ProtoMap.proto_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proto_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proto_data().data(), static_cast<int>(this->proto_data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.ProtoMap.proto_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ProtoMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ProtoMap)
  return false;
#undef DO_
}

void ProtoMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ProtoMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proto_name = 1;
  if (this->proto_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto_name().data(), static_cast<int>(this->proto_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ProtoMap.proto_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proto_name(), output);
  }

  // string proto_data = 2;
  if (this->proto_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto_data().data(), static_cast<int>(this->proto_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ProtoMap.proto_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proto_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ProtoMap)
}

::google::protobuf::uint8* ProtoMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ProtoMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string proto_name = 1;
  if (this->proto_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto_name().data(), static_cast<int>(this->proto_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ProtoMap.proto_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proto_name(), target);
  }

  // string proto_data = 2;
  if (this->proto_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto_data().data(), static_cast<int>(this->proto_data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.ProtoMap.proto_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proto_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ProtoMap)
  return target;
}

size_t ProtoMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ProtoMap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string proto_name = 1;
  if (this->proto_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proto_name());
  }

  // string proto_data = 2;
  if (this->proto_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proto_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ProtoMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtoMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ProtoMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ProtoMap)
    MergeFrom(*source);
  }
}

void ProtoMap::MergeFrom(const ProtoMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ProtoMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proto_name().size() > 0) {

    proto_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_name_);
  }
  if (from.proto_data().size() > 0) {

    proto_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_data_);
  }
}

void ProtoMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ProtoMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMap::CopyFrom(const ProtoMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ProtoMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMap::IsInitialized() const {
  return true;
}

void ProtoMap::Swap(ProtoMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoMap::InternalSwap(ProtoMap* other) {
  using std::swap;
  proto_name_.Swap(&other->proto_name_);
  proto_data_.Swap(&other->proto_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoMap::GetMetadata() const {
  protobuf_topics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TopicResponseMsg_TopiclistResultEntry_DoNotUse::TopicResponseMsg_TopiclistResultEntry_DoNotUse() {}
TopicResponseMsg_TopiclistResultEntry_DoNotUse::TopicResponseMsg_TopiclistResultEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TopicResponseMsg_TopiclistResultEntry_DoNotUse::MergeFrom(const TopicResponseMsg_TopiclistResultEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TopicResponseMsg_TopiclistResultEntry_DoNotUse::GetMetadata() const {
  ::protobuf_topics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topics_2eproto::file_level_metadata[2];
}
void TopicResponseMsg_TopiclistResultEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TopicResponseMsg_SubscribeResultEntry_DoNotUse::TopicResponseMsg_SubscribeResultEntry_DoNotUse() {}
TopicResponseMsg_SubscribeResultEntry_DoNotUse::TopicResponseMsg_SubscribeResultEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TopicResponseMsg_SubscribeResultEntry_DoNotUse::MergeFrom(const TopicResponseMsg_SubscribeResultEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TopicResponseMsg_SubscribeResultEntry_DoNotUse::GetMetadata() const {
  ::protobuf_topics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topics_2eproto::file_level_metadata[3];
}
void TopicResponseMsg_SubscribeResultEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TopicResponseMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_TopicResponseMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_TopicResponseMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
}
void TopicResponseMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void TopicResponseMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicResponseMsg::kHeaderFieldNumber;
const int TopicResponseMsg::kErrorFieldNumber;
const int TopicResponseMsg::kServiceFieldNumber;
const int TopicResponseMsg::kMsgTypeFieldNumber;
const int TopicResponseMsg::kTopiclistResultFieldNumber;
const int TopicResponseMsg::kSubscribeResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicResponseMsg::TopicResponseMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_topics_2eproto::InitDefaultsTopicResponseMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.TopicResponseMsg)
}
TopicResponseMsg::TopicResponseMsg(const TopicResponseMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topiclist_result_.MergeFrom(from.topiclist_result_);
  subscribe_result_.MergeFrom(from.subscribe_result_);
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service().size() > 0) {
    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.TopicResponseMsg)
}

void TopicResponseMsg::SharedCtor() {
  service_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(msg_type_));
  _cached_size_ = 0;
}

TopicResponseMsg::~TopicResponseMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.TopicResponseMsg)
  SharedDtor();
}

void TopicResponseMsg::SharedDtor() {
  service_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
}

void TopicResponseMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicResponseMsg::descriptor() {
  ::protobuf_topics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topics_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopicResponseMsg& TopicResponseMsg::default_instance() {
  ::protobuf_topics_2eproto::InitDefaultsTopicResponseMsg();
  return *internal_default_instance();
}

TopicResponseMsg* TopicResponseMsg::New(::google::protobuf::Arena* arena) const {
  TopicResponseMsg* n = new TopicResponseMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicResponseMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.TopicResponseMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topiclist_result_.Clear();
  subscribe_result_.Clear();
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  msg_type_ = 0;
  _internal_metadata_.Clear();
}

bool TopicResponseMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.TopicResponseMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service().data(), static_cast<int>(this->service().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.TopicResponseMsg.service"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MsgType msg_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::autodrive::workflow::proto::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .autodrive.workflow.proto.ProtoMap> topiclist_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          TopicResponseMsg_TopiclistResultEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TopicResponseMsg_TopiclistResultEntry_DoNotUse,
              ::std::string, ::autodrive::workflow::proto::ProtoMap,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap > > parser(&topiclist_result_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.TopicResponseMsg.TopiclistResultEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> subscribe_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          TopicResponseMsg_SubscribeResultEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TopicResponseMsg_SubscribeResultEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&subscribe_result_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.TopicResponseMsg.SubscribeResultEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.TopicResponseMsg.SubscribeResultEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.TopicResponseMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.TopicResponseMsg)
  return false;
#undef DO_
}

void TopicResponseMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.TopicResponseMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // string service = 3;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.TopicResponseMsg.service");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service(), output);
  }

  // .autodrive.workflow.proto.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_type(), output);
  }

  // map<string, .autodrive.workflow.proto.ProtoMap> topiclist_result = 5;
  if (!this->topiclist_result().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "autodrive.workflow.proto.TopicResponseMsg.TopiclistResultEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->topiclist_result().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->topiclist_result().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >::const_iterator
          it = this->topiclist_result().begin();
          it != this->topiclist_result().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TopicResponseMsg_TopiclistResultEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(topiclist_result_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TopicResponseMsg_TopiclistResultEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >::const_iterator
          it = this->topiclist_result().begin();
          it != this->topiclist_result().end(); ++it) {
        entry.reset(topiclist_result_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> subscribe_result = 6;
  if (!this->subscribe_result().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "autodrive.workflow.proto.TopicResponseMsg.SubscribeResultEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "autodrive.workflow.proto.TopicResponseMsg.SubscribeResultEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->subscribe_result().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->subscribe_result().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->subscribe_result().begin();
          it != this->subscribe_result().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TopicResponseMsg_SubscribeResultEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(subscribe_result_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TopicResponseMsg_SubscribeResultEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->subscribe_result().begin();
          it != this->subscribe_result().end(); ++it) {
        entry.reset(subscribe_result_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.TopicResponseMsg)
}

::google::protobuf::uint8* TopicResponseMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.TopicResponseMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // string service = 3;
  if (this->service().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service().data(), static_cast<int>(this->service().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.TopicResponseMsg.service");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service(), target);
  }

  // .autodrive.workflow.proto.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msg_type(), target);
  }

  // map<string, .autodrive.workflow.proto.ProtoMap> topiclist_result = 5;
  if (!this->topiclist_result().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "autodrive.workflow.proto.TopicResponseMsg.TopiclistResultEntry.key");
      }
    };

    if (deterministic &&
        this->topiclist_result().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->topiclist_result().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >::const_iterator
          it = this->topiclist_result().begin();
          it != this->topiclist_result().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TopicResponseMsg_TopiclistResultEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(topiclist_result_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TopicResponseMsg_TopiclistResultEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >::const_iterator
          it = this->topiclist_result().begin();
          it != this->topiclist_result().end(); ++it) {
        entry.reset(topiclist_result_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> subscribe_result = 6;
  if (!this->subscribe_result().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "autodrive.workflow.proto.TopicResponseMsg.SubscribeResultEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "autodrive.workflow.proto.TopicResponseMsg.SubscribeResultEntry.value");
      }
    };

    if (deterministic &&
        this->subscribe_result().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->subscribe_result().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->subscribe_result().begin();
          it != this->subscribe_result().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TopicResponseMsg_SubscribeResultEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(subscribe_result_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TopicResponseMsg_SubscribeResultEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->subscribe_result().begin();
          it != this->subscribe_result().end(); ++it) {
        entry.reset(subscribe_result_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.TopicResponseMsg)
  return target;
}

size_t TopicResponseMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.TopicResponseMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .autodrive.workflow.proto.ProtoMap> topiclist_result = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->topiclist_result_size());
  {
    ::google::protobuf::scoped_ptr<TopicResponseMsg_TopiclistResultEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::autodrive::workflow::proto::ProtoMap >::const_iterator
        it = this->topiclist_result().begin();
        it != this->topiclist_result().end(); ++it) {
      entry.reset(topiclist_result_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> subscribe_result = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subscribe_result_size());
  {
    ::google::protobuf::scoped_ptr<TopicResponseMsg_SubscribeResultEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->subscribe_result().begin();
        it != this->subscribe_result().end(); ++it) {
      entry.reset(subscribe_result_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string service = 3;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service());
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicResponseMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.TopicResponseMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicResponseMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicResponseMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.TopicResponseMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.TopicResponseMsg)
    MergeFrom(*source);
  }
}

void TopicResponseMsg::MergeFrom(const TopicResponseMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.TopicResponseMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topiclist_result_.MergeFrom(from.topiclist_result_);
  subscribe_result_.MergeFrom(from.subscribe_result_);
  if (from.service().size() > 0) {

    service_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_);
  }
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
}

void TopicResponseMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.TopicResponseMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicResponseMsg::CopyFrom(const TopicResponseMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.TopicResponseMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicResponseMsg::IsInitialized() const {
  return true;
}

void TopicResponseMsg::Swap(TopicResponseMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicResponseMsg::InternalSwap(TopicResponseMsg* other) {
  using std::swap;
  topiclist_result_.Swap(&other->topiclist_result_);
  subscribe_result_.Swap(&other->subscribe_result_);
  service_.Swap(&other->service_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(msg_type_, other->msg_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicResponseMsg::GetMetadata() const {
  protobuf_topics_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_topics_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
