// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_multitask.proto

#include "lane_multitask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class LaneParsingImageDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneParsingImageData>
      _instance;
} _LaneParsingImageData_default_instance_;
class EdgePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EdgePoint>
      _instance;
} _EdgePoint_default_instance_;
class LaneTransitionPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneTransitionPoint>
      _instance;
} _LaneTransitionPoint_default_instance_;
class LineBasicInfoPtsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LineBasicInfoPts>
      _instance;
} _LineBasicInfoPts_default_instance_;
class LineExtraInfoPtsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LineExtraInfoPts>
      _instance;
} _LineExtraInfoPts_default_instance_;
class LaneContourDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneContour>
      _instance;
} _LaneContour_default_instance_;
class LaneMultitaskMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneMultitaskMsg>
      _instance;
} _LaneMultitaskMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_lane_5fmultitask_2eproto {
void InitDefaultsLaneParsingImageDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_LaneParsingImageData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LaneParsingImageData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LaneParsingImageData::InitAsDefaultInstance();
}

void InitDefaultsLaneParsingImageData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneParsingImageDataImpl);
}

void InitDefaultsEdgePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_EdgePoint_default_instance_;
    new (ptr) ::autodrive::workflow::proto::EdgePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::EdgePoint::InitAsDefaultInstance();
}

void InitDefaultsEdgePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEdgePointImpl);
}

void InitDefaultsLaneTransitionPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_road_5finfo_2eproto::InitDefaultsTransitionPoints();
  {
    void* ptr = &::autodrive::workflow::proto::_LaneTransitionPoint_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LaneTransitionPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LaneTransitionPoint::InitAsDefaultInstance();
}

void InitDefaultsLaneTransitionPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneTransitionPointImpl);
}

void InitDefaultsLineBasicInfoPtsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector2f();
  {
    void* ptr = &::autodrive::workflow::proto::_LineBasicInfoPts_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LineBasicInfoPts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LineBasicInfoPts::InitAsDefaultInstance();
}

void InitDefaultsLineBasicInfoPts() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLineBasicInfoPtsImpl);
}

void InitDefaultsLineExtraInfoPtsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector2f();
  {
    void* ptr = &::autodrive::workflow::proto::_LineExtraInfoPts_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LineExtraInfoPts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LineExtraInfoPts::InitAsDefaultInstance();
}

void InitDefaultsLineExtraInfoPts() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLineExtraInfoPtsImpl);
}

void InitDefaultsLaneContourImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_lane_5fmultitask_2eproto::InitDefaultsLineBasicInfoPts();
  protobuf_lane_5fmultitask_2eproto::InitDefaultsLineExtraInfoPts();
  {
    void* ptr = &::autodrive::workflow::proto::_LaneContour_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LaneContour();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LaneContour::InitAsDefaultInstance();
}

void InitDefaultsLaneContour() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneContourImpl);
}

void InitDefaultsLaneMultitaskMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneTransitionPoint();
  protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneParsingImageData();
  protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneContour();
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  {
    void* ptr = &::autodrive::workflow::proto::_LaneMultitaskMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LaneMultitaskMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LaneMultitaskMsg::InitAsDefaultInstance();
}

void InitDefaultsLaneMultitaskMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneMultitaskMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneParsingImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneParsingImageData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneParsingImageData, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneParsingImageData, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneParsingImageData, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EdgePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EdgePoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EdgePoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EdgePoint, prob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EdgePoint, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::EdgePoint, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneTransitionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneTransitionPoint, transition_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineBasicInfoPts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineBasicInfoPts, pt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineBasicInfoPts, pt_rle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineBasicInfoPts, pt_oriimg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineBasicInfoPts, pt_img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineBasicInfoPts, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineBasicInfoPts, conf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineExtraInfoPts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineExtraInfoPts, xstart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineExtraInfoPts, xend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineExtraInfoPts, y_parsing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineExtraInfoPts, gray_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineExtraInfoPts, pt_rle_c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineExtraInfoPts, width_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineExtraInfoPts, flag_dash_endpt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LineExtraInfoPts, horizontal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneContour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneContour, basic_pts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneContour, extra_pts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneMultitaskMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneMultitaskMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneMultitaskMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneMultitaskMsg, lane_transition_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneMultitaskMsg, lane_parsing_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneMultitaskMsg, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneMultitaskMsg, lane_contours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneMultitaskMsg, roi_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::LaneParsingImageData)},
  { 9, -1, sizeof(::autodrive::workflow::proto::EdgePoint)},
  { 19, -1, sizeof(::autodrive::workflow::proto::LaneTransitionPoint)},
  { 25, -1, sizeof(::autodrive::workflow::proto::LineBasicInfoPts)},
  { 36, -1, sizeof(::autodrive::workflow::proto::LineExtraInfoPts)},
  { 49, -1, sizeof(::autodrive::workflow::proto::LaneContour)},
  { 56, -1, sizeof(::autodrive::workflow::proto::LaneMultitaskMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LaneParsingImageData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_EdgePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LaneTransitionPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LineBasicInfoPts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LineExtraInfoPts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LaneContour_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LaneMultitaskMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "lane_multitask.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024lane_multitask.proto\022\030autodrive.workfl"
      "ow.proto\032\014common.proto\032\017road_info.proto\032"
      "\013basic.proto\032\025perception_base.proto\"T\n\024L"
      "aneParsingImageData\022\014\n\004data\030\001 \001(\014\022\r\n\005wid"
      "th\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\017\n\007channel\030\004 \001("
      "\r\"\237\001\n\tEdgePoint\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\014\n"
      "\004prob\030\003 \001(\002\0226\n\004side\030\004 \001(\0162(.autodrive.wo"
      "rkflow.proto.RoadBorderSide\0226\n\004type\030\005 \001("
      "\0162(.autodrive.workflow.proto.RoadBorderT"
      "ype\"\\\n\023LaneTransitionPoint\022E\n\021transition"
      "_points\030\001 \003(\0132*.autodrive.workflow.proto"
      ".TransitionPoints\"\376\001\n\020LineBasicInfoPts\022."
      "\n\002pt\030\001 \001(\0132\".autodrive.workflow.proto.Ve"
      "ctor2f\0222\n\006pt_rle\030\002 \001(\0132\".autodrive.workf"
      "low.proto.Vector2f\0225\n\tpt_oriimg\030\003 \001(\0132\"."
      "autodrive.workflow.proto.Vector2f\0222\n\006pt_"
      "img\030\004 \001(\0132\".autodrive.workflow.proto.Vec"
      "tor2f\022\r\n\005label\030\005 \001(\004\022\014\n\004conf\030\006 \001(\005\"\354\001\n\020L"
      "ineExtraInfoPts\022\016\n\006xstart\030\001 \001(\005\022\014\n\004xend\030"
      "\002 \001(\005\022\021\n\ty_parsing\030\003 \001(\005\022\014\n\004gray\030\004 \001(\005\0224"
      "\n\010pt_rle_c\030\005 \001(\0132\".autodrive.workflow.pr"
      "oto.Vector2f\0226\n\nwidth_info\030\006 \001(\0132\".autod"
      "rive.workflow.proto.Vector2f\022\027\n\017flag_das"
      "h_endpt\030\007 \001(\010\022\022\n\nhorizontal\030\010 \001(\010\"\213\001\n\013La"
      "neContour\022=\n\tbasic_pts\030\001 \003(\0132*.autodrive"
      ".workflow.proto.LineBasicInfoPts\022=\n\textr"
      "a_pts\030\002 \003(\0132*.autodrive.workflow.proto.L"
      "ineExtraInfoPts\"\237\003\n\020LaneMultitaskMsg\0223\n\006"
      "header\030\001 \001(\0132#.autodrive.workflow.proto."
      "MsgHeader\022.\n\005error\030\002 \001(\0132\037.autodrive.wor"
      "kflow.proto.Error\022L\n\025lane_transition_poi"
      "nt\030\003 \001(\0132-.autodrive.workflow.proto.Lane"
      "TransitionPoint\022J\n\022lane_parsing_image\030\004 "
      "\003(\0132..autodrive.workflow.proto.LaneParsi"
      "ngImageData\022\021\n\tcamera_id\030\005 \001(\005\022<\n\rlane_c"
      "ontours\030\006 \003(\0132%.autodrive.workflow.proto"
      ".LaneContour\022;\n\003roi\030\007 \001(\0132..autodrive.wo"
      "rkflow.proto.perception_base.Rectb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lane_multitask.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_road_5finfo_2eproto::AddDescriptors();
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_lane_5fmultitask_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void LaneParsingImageData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneParsingImageData::kDataFieldNumber;
const int LaneParsingImageData::kWidthFieldNumber;
const int LaneParsingImageData::kHeightFieldNumber;
const int LaneParsingImageData::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneParsingImageData::LaneParsingImageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneParsingImageData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LaneParsingImageData)
}
LaneParsingImageData::LaneParsingImageData(const LaneParsingImageData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LaneParsingImageData)
}

void LaneParsingImageData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  _cached_size_ = 0;
}

LaneParsingImageData::~LaneParsingImageData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LaneParsingImageData)
  SharedDtor();
}

void LaneParsingImageData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneParsingImageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneParsingImageData::descriptor() {
  ::protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneParsingImageData& LaneParsingImageData::default_instance() {
  ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneParsingImageData();
  return *internal_default_instance();
}

LaneParsingImageData* LaneParsingImageData::New(::google::protobuf::Arena* arena) const {
  LaneParsingImageData* n = new LaneParsingImageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneParsingImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LaneParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

bool LaneParsingImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LaneParsingImageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LaneParsingImageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LaneParsingImageData)
  return false;
#undef DO_
}

void LaneParsingImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LaneParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LaneParsingImageData)
}

::google::protobuf::uint8* LaneParsingImageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LaneParsingImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LaneParsingImageData)
  return target;
}

size_t LaneParsingImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LaneParsingImageData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 channel = 4;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneParsingImageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LaneParsingImageData)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneParsingImageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneParsingImageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LaneParsingImageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LaneParsingImageData)
    MergeFrom(*source);
  }
}

void LaneParsingImageData::MergeFrom(const LaneParsingImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LaneParsingImageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void LaneParsingImageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LaneParsingImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneParsingImageData::CopyFrom(const LaneParsingImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LaneParsingImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneParsingImageData::IsInitialized() const {
  return true;
}

void LaneParsingImageData::Swap(LaneParsingImageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneParsingImageData::InternalSwap(LaneParsingImageData* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneParsingImageData::GetMetadata() const {
  protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EdgePoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgePoint::kXFieldNumber;
const int EdgePoint::kYFieldNumber;
const int EdgePoint::kProbFieldNumber;
const int EdgePoint::kSideFieldNumber;
const int EdgePoint::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgePoint::EdgePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fmultitask_2eproto::InitDefaultsEdgePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.EdgePoint)
}
EdgePoint::EdgePoint(const EdgePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&x_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.EdgePoint)
}

void EdgePoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&x_)) + sizeof(type_));
  _cached_size_ = 0;
}

EdgePoint::~EdgePoint() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.EdgePoint)
  SharedDtor();
}

void EdgePoint::SharedDtor() {
}

void EdgePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgePoint::descriptor() {
  ::protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EdgePoint& EdgePoint::default_instance() {
  ::protobuf_lane_5fmultitask_2eproto::InitDefaultsEdgePoint();
  return *internal_default_instance();
}

EdgePoint* EdgePoint::New(::google::protobuf::Arena* arena) const {
  EdgePoint* n = new EdgePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.EdgePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&x_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool EdgePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.EdgePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float prob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RoadBorderSide side = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::autodrive::workflow::proto::RoadBorderSide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RoadBorderType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::autodrive::workflow::proto::RoadBorderType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.EdgePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.EdgePoint)
  return false;
#undef DO_
}

void EdgePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.EdgePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float prob = 3;
  if (this->prob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->prob(), output);
  }

  // .autodrive.workflow.proto.RoadBorderSide side = 4;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->side(), output);
  }

  // .autodrive.workflow.proto.RoadBorderType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.EdgePoint)
}

::google::protobuf::uint8* EdgePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.EdgePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float prob = 3;
  if (this->prob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->prob(), target);
  }

  // .autodrive.workflow.proto.RoadBorderSide side = 4;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->side(), target);
  }

  // .autodrive.workflow.proto.RoadBorderType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.EdgePoint)
  return target;
}

size_t EdgePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.EdgePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float prob = 3;
  if (this->prob() != 0) {
    total_size += 1 + 4;
  }

  // .autodrive.workflow.proto.RoadBorderSide side = 4;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // .autodrive.workflow.proto.RoadBorderType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.EdgePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.EdgePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.EdgePoint)
    MergeFrom(*source);
  }
}

void EdgePoint::MergeFrom(const EdgePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.EdgePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.prob() != 0) {
    set_prob(from.prob());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void EdgePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.EdgePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgePoint::CopyFrom(const EdgePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.EdgePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgePoint::IsInitialized() const {
  return true;
}

void EdgePoint::Swap(EdgePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgePoint::InternalSwap(EdgePoint* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(prob_, other->prob_);
  swap(side_, other->side_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgePoint::GetMetadata() const {
  protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneTransitionPoint::InitAsDefaultInstance() {
}
void LaneTransitionPoint::clear_transition_points() {
  transition_points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneTransitionPoint::kTransitionPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneTransitionPoint::LaneTransitionPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneTransitionPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LaneTransitionPoint)
}
LaneTransitionPoint::LaneTransitionPoint(const LaneTransitionPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      transition_points_(from.transition_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LaneTransitionPoint)
}

void LaneTransitionPoint::SharedCtor() {
  _cached_size_ = 0;
}

LaneTransitionPoint::~LaneTransitionPoint() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LaneTransitionPoint)
  SharedDtor();
}

void LaneTransitionPoint::SharedDtor() {
}

void LaneTransitionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneTransitionPoint::descriptor() {
  ::protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneTransitionPoint& LaneTransitionPoint::default_instance() {
  ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneTransitionPoint();
  return *internal_default_instance();
}

LaneTransitionPoint* LaneTransitionPoint::New(::google::protobuf::Arena* arena) const {
  LaneTransitionPoint* n = new LaneTransitionPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneTransitionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LaneTransitionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transition_points_.Clear();
  _internal_metadata_.Clear();
}

bool LaneTransitionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LaneTransitionPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.TransitionPoints transition_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_transition_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LaneTransitionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LaneTransitionPoint)
  return false;
#undef DO_
}

void LaneTransitionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LaneTransitionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.TransitionPoints transition_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transition_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transition_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LaneTransitionPoint)
}

::google::protobuf::uint8* LaneTransitionPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LaneTransitionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.TransitionPoints transition_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transition_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->transition_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LaneTransitionPoint)
  return target;
}

size_t LaneTransitionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LaneTransitionPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.TransitionPoints transition_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->transition_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transition_points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneTransitionPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LaneTransitionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneTransitionPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneTransitionPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LaneTransitionPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LaneTransitionPoint)
    MergeFrom(*source);
  }
}

void LaneTransitionPoint::MergeFrom(const LaneTransitionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LaneTransitionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transition_points_.MergeFrom(from.transition_points_);
}

void LaneTransitionPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LaneTransitionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneTransitionPoint::CopyFrom(const LaneTransitionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LaneTransitionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneTransitionPoint::IsInitialized() const {
  return true;
}

void LaneTransitionPoint::Swap(LaneTransitionPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneTransitionPoint::InternalSwap(LaneTransitionPoint* other) {
  using std::swap;
  transition_points_.InternalSwap(&other->transition_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneTransitionPoint::GetMetadata() const {
  protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LineBasicInfoPts::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_LineBasicInfoPts_default_instance_._instance.get_mutable()->pt_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_LineBasicInfoPts_default_instance_._instance.get_mutable()->pt_rle_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_LineBasicInfoPts_default_instance_._instance.get_mutable()->pt_oriimg_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_LineBasicInfoPts_default_instance_._instance.get_mutable()->pt_img_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
}
void LineBasicInfoPts::clear_pt() {
  if (GetArenaNoVirtual() == NULL && pt_ != NULL) {
    delete pt_;
  }
  pt_ = NULL;
}
void LineBasicInfoPts::clear_pt_rle() {
  if (GetArenaNoVirtual() == NULL && pt_rle_ != NULL) {
    delete pt_rle_;
  }
  pt_rle_ = NULL;
}
void LineBasicInfoPts::clear_pt_oriimg() {
  if (GetArenaNoVirtual() == NULL && pt_oriimg_ != NULL) {
    delete pt_oriimg_;
  }
  pt_oriimg_ = NULL;
}
void LineBasicInfoPts::clear_pt_img() {
  if (GetArenaNoVirtual() == NULL && pt_img_ != NULL) {
    delete pt_img_;
  }
  pt_img_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineBasicInfoPts::kPtFieldNumber;
const int LineBasicInfoPts::kPtRleFieldNumber;
const int LineBasicInfoPts::kPtOriimgFieldNumber;
const int LineBasicInfoPts::kPtImgFieldNumber;
const int LineBasicInfoPts::kLabelFieldNumber;
const int LineBasicInfoPts::kConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineBasicInfoPts::LineBasicInfoPts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLineBasicInfoPts();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LineBasicInfoPts)
}
LineBasicInfoPts::LineBasicInfoPts(const LineBasicInfoPts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pt()) {
    pt_ = new ::autodrive::workflow::proto::Vector2f(*from.pt_);
  } else {
    pt_ = NULL;
  }
  if (from.has_pt_rle()) {
    pt_rle_ = new ::autodrive::workflow::proto::Vector2f(*from.pt_rle_);
  } else {
    pt_rle_ = NULL;
  }
  if (from.has_pt_oriimg()) {
    pt_oriimg_ = new ::autodrive::workflow::proto::Vector2f(*from.pt_oriimg_);
  } else {
    pt_oriimg_ = NULL;
  }
  if (from.has_pt_img()) {
    pt_img_ = new ::autodrive::workflow::proto::Vector2f(*from.pt_img_);
  } else {
    pt_img_ = NULL;
  }
  ::memcpy(&label_, &from.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&conf_) -
    reinterpret_cast<char*>(&label_)) + sizeof(conf_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LineBasicInfoPts)
}

void LineBasicInfoPts::SharedCtor() {
  ::memset(&pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&pt_)) + sizeof(conf_));
  _cached_size_ = 0;
}

LineBasicInfoPts::~LineBasicInfoPts() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LineBasicInfoPts)
  SharedDtor();
}

void LineBasicInfoPts::SharedDtor() {
  if (this != internal_default_instance()) delete pt_;
  if (this != internal_default_instance()) delete pt_rle_;
  if (this != internal_default_instance()) delete pt_oriimg_;
  if (this != internal_default_instance()) delete pt_img_;
}

void LineBasicInfoPts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineBasicInfoPts::descriptor() {
  ::protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LineBasicInfoPts& LineBasicInfoPts::default_instance() {
  ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLineBasicInfoPts();
  return *internal_default_instance();
}

LineBasicInfoPts* LineBasicInfoPts::New(::google::protobuf::Arena* arena) const {
  LineBasicInfoPts* n = new LineBasicInfoPts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineBasicInfoPts::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LineBasicInfoPts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pt_ != NULL) {
    delete pt_;
  }
  pt_ = NULL;
  if (GetArenaNoVirtual() == NULL && pt_rle_ != NULL) {
    delete pt_rle_;
  }
  pt_rle_ = NULL;
  if (GetArenaNoVirtual() == NULL && pt_oriimg_ != NULL) {
    delete pt_oriimg_;
  }
  pt_oriimg_ = NULL;
  if (GetArenaNoVirtual() == NULL && pt_img_ != NULL) {
    delete pt_img_;
  }
  pt_img_ = NULL;
  ::memset(&label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&label_)) + sizeof(conf_));
  _internal_metadata_.Clear();
}

bool LineBasicInfoPts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LineBasicInfoPts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.Vector2f pt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f pt_rle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt_rle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f pt_oriimg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt_oriimg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f pt_img = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LineBasicInfoPts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LineBasicInfoPts)
  return false;
#undef DO_
}

void LineBasicInfoPts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LineBasicInfoPts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector2f pt = 1;
  if (this->has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pt_, output);
  }

  // .autodrive.workflow.proto.Vector2f pt_rle = 2;
  if (this->has_pt_rle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pt_rle_, output);
  }

  // .autodrive.workflow.proto.Vector2f pt_oriimg = 3;
  if (this->has_pt_oriimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pt_oriimg_, output);
  }

  // .autodrive.workflow.proto.Vector2f pt_img = 4;
  if (this->has_pt_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pt_img_, output);
  }

  // uint64 label = 5;
  if (this->label() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->label(), output);
  }

  // int32 conf = 6;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->conf(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LineBasicInfoPts)
}

::google::protobuf::uint8* LineBasicInfoPts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LineBasicInfoPts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector2f pt = 1;
  if (this->has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->pt_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f pt_rle = 2;
  if (this->has_pt_rle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->pt_rle_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f pt_oriimg = 3;
  if (this->has_pt_oriimg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->pt_oriimg_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f pt_img = 4;
  if (this->has_pt_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->pt_img_, deterministic, target);
  }

  // uint64 label = 5;
  if (this->label() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->label(), target);
  }

  // int32 conf = 6;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->conf(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LineBasicInfoPts)
  return target;
}

size_t LineBasicInfoPts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LineBasicInfoPts)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector2f pt = 1;
  if (this->has_pt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pt_);
  }

  // .autodrive.workflow.proto.Vector2f pt_rle = 2;
  if (this->has_pt_rle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pt_rle_);
  }

  // .autodrive.workflow.proto.Vector2f pt_oriimg = 3;
  if (this->has_pt_oriimg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pt_oriimg_);
  }

  // .autodrive.workflow.proto.Vector2f pt_img = 4;
  if (this->has_pt_img()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pt_img_);
  }

  // uint64 label = 5;
  if (this->label() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->label());
  }

  // int32 conf = 6;
  if (this->conf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->conf());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineBasicInfoPts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LineBasicInfoPts)
  GOOGLE_DCHECK_NE(&from, this);
  const LineBasicInfoPts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LineBasicInfoPts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LineBasicInfoPts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LineBasicInfoPts)
    MergeFrom(*source);
  }
}

void LineBasicInfoPts::MergeFrom(const LineBasicInfoPts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LineBasicInfoPts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pt()) {
    mutable_pt()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.pt());
  }
  if (from.has_pt_rle()) {
    mutable_pt_rle()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.pt_rle());
  }
  if (from.has_pt_oriimg()) {
    mutable_pt_oriimg()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.pt_oriimg());
  }
  if (from.has_pt_img()) {
    mutable_pt_img()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.pt_img());
  }
  if (from.label() != 0) {
    set_label(from.label());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
}

void LineBasicInfoPts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LineBasicInfoPts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineBasicInfoPts::CopyFrom(const LineBasicInfoPts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LineBasicInfoPts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineBasicInfoPts::IsInitialized() const {
  return true;
}

void LineBasicInfoPts::Swap(LineBasicInfoPts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineBasicInfoPts::InternalSwap(LineBasicInfoPts* other) {
  using std::swap;
  swap(pt_, other->pt_);
  swap(pt_rle_, other->pt_rle_);
  swap(pt_oriimg_, other->pt_oriimg_);
  swap(pt_img_, other->pt_img_);
  swap(label_, other->label_);
  swap(conf_, other->conf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineBasicInfoPts::GetMetadata() const {
  protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LineExtraInfoPts::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_LineExtraInfoPts_default_instance_._instance.get_mutable()->pt_rle_c_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_LineExtraInfoPts_default_instance_._instance.get_mutable()->width_info_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
}
void LineExtraInfoPts::clear_pt_rle_c() {
  if (GetArenaNoVirtual() == NULL && pt_rle_c_ != NULL) {
    delete pt_rle_c_;
  }
  pt_rle_c_ = NULL;
}
void LineExtraInfoPts::clear_width_info() {
  if (GetArenaNoVirtual() == NULL && width_info_ != NULL) {
    delete width_info_;
  }
  width_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineExtraInfoPts::kXstartFieldNumber;
const int LineExtraInfoPts::kXendFieldNumber;
const int LineExtraInfoPts::kYParsingFieldNumber;
const int LineExtraInfoPts::kGrayFieldNumber;
const int LineExtraInfoPts::kPtRleCFieldNumber;
const int LineExtraInfoPts::kWidthInfoFieldNumber;
const int LineExtraInfoPts::kFlagDashEndptFieldNumber;
const int LineExtraInfoPts::kHorizontalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineExtraInfoPts::LineExtraInfoPts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLineExtraInfoPts();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LineExtraInfoPts)
}
LineExtraInfoPts::LineExtraInfoPts(const LineExtraInfoPts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pt_rle_c()) {
    pt_rle_c_ = new ::autodrive::workflow::proto::Vector2f(*from.pt_rle_c_);
  } else {
    pt_rle_c_ = NULL;
  }
  if (from.has_width_info()) {
    width_info_ = new ::autodrive::workflow::proto::Vector2f(*from.width_info_);
  } else {
    width_info_ = NULL;
  }
  ::memcpy(&xstart_, &from.xstart_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_) -
    reinterpret_cast<char*>(&xstart_)) + sizeof(horizontal_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LineExtraInfoPts)
}

void LineExtraInfoPts::SharedCtor() {
  ::memset(&pt_rle_c_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_) -
      reinterpret_cast<char*>(&pt_rle_c_)) + sizeof(horizontal_));
  _cached_size_ = 0;
}

LineExtraInfoPts::~LineExtraInfoPts() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LineExtraInfoPts)
  SharedDtor();
}

void LineExtraInfoPts::SharedDtor() {
  if (this != internal_default_instance()) delete pt_rle_c_;
  if (this != internal_default_instance()) delete width_info_;
}

void LineExtraInfoPts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineExtraInfoPts::descriptor() {
  ::protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LineExtraInfoPts& LineExtraInfoPts::default_instance() {
  ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLineExtraInfoPts();
  return *internal_default_instance();
}

LineExtraInfoPts* LineExtraInfoPts::New(::google::protobuf::Arena* arena) const {
  LineExtraInfoPts* n = new LineExtraInfoPts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineExtraInfoPts::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LineExtraInfoPts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pt_rle_c_ != NULL) {
    delete pt_rle_c_;
  }
  pt_rle_c_ = NULL;
  if (GetArenaNoVirtual() == NULL && width_info_ != NULL) {
    delete width_info_;
  }
  width_info_ = NULL;
  ::memset(&xstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_) -
      reinterpret_cast<char*>(&xstart_)) + sizeof(horizontal_));
  _internal_metadata_.Clear();
}

bool LineExtraInfoPts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LineExtraInfoPts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 xstart = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 xend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y_parsing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_parsing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gray = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gray_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f pt_rle_c = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt_rle_c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f width_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_width_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool flag_dash_endpt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_dash_endpt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool horizontal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LineExtraInfoPts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LineExtraInfoPts)
  return false;
#undef DO_
}

void LineExtraInfoPts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LineExtraInfoPts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xstart = 1;
  if (this->xstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xstart(), output);
  }

  // int32 xend = 2;
  if (this->xend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xend(), output);
  }

  // int32 y_parsing = 3;
  if (this->y_parsing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y_parsing(), output);
  }

  // int32 gray = 4;
  if (this->gray() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gray(), output);
  }

  // .autodrive.workflow.proto.Vector2f pt_rle_c = 5;
  if (this->has_pt_rle_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->pt_rle_c_, output);
  }

  // .autodrive.workflow.proto.Vector2f width_info = 6;
  if (this->has_width_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->width_info_, output);
  }

  // bool flag_dash_endpt = 7;
  if (this->flag_dash_endpt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->flag_dash_endpt(), output);
  }

  // bool horizontal = 8;
  if (this->horizontal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->horizontal(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LineExtraInfoPts)
}

::google::protobuf::uint8* LineExtraInfoPts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LineExtraInfoPts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xstart = 1;
  if (this->xstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xstart(), target);
  }

  // int32 xend = 2;
  if (this->xend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xend(), target);
  }

  // int32 y_parsing = 3;
  if (this->y_parsing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y_parsing(), target);
  }

  // int32 gray = 4;
  if (this->gray() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gray(), target);
  }

  // .autodrive.workflow.proto.Vector2f pt_rle_c = 5;
  if (this->has_pt_rle_c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->pt_rle_c_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f width_info = 6;
  if (this->has_width_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->width_info_, deterministic, target);
  }

  // bool flag_dash_endpt = 7;
  if (this->flag_dash_endpt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->flag_dash_endpt(), target);
  }

  // bool horizontal = 8;
  if (this->horizontal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->horizontal(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LineExtraInfoPts)
  return target;
}

size_t LineExtraInfoPts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LineExtraInfoPts)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector2f pt_rle_c = 5;
  if (this->has_pt_rle_c()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pt_rle_c_);
  }

  // .autodrive.workflow.proto.Vector2f width_info = 6;
  if (this->has_width_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->width_info_);
  }

  // int32 xstart = 1;
  if (this->xstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xstart());
  }

  // int32 xend = 2;
  if (this->xend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xend());
  }

  // int32 y_parsing = 3;
  if (this->y_parsing() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_parsing());
  }

  // int32 gray = 4;
  if (this->gray() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gray());
  }

  // bool flag_dash_endpt = 7;
  if (this->flag_dash_endpt() != 0) {
    total_size += 1 + 1;
  }

  // bool horizontal = 8;
  if (this->horizontal() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineExtraInfoPts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LineExtraInfoPts)
  GOOGLE_DCHECK_NE(&from, this);
  const LineExtraInfoPts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LineExtraInfoPts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LineExtraInfoPts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LineExtraInfoPts)
    MergeFrom(*source);
  }
}

void LineExtraInfoPts::MergeFrom(const LineExtraInfoPts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LineExtraInfoPts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pt_rle_c()) {
    mutable_pt_rle_c()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.pt_rle_c());
  }
  if (from.has_width_info()) {
    mutable_width_info()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.width_info());
  }
  if (from.xstart() != 0) {
    set_xstart(from.xstart());
  }
  if (from.xend() != 0) {
    set_xend(from.xend());
  }
  if (from.y_parsing() != 0) {
    set_y_parsing(from.y_parsing());
  }
  if (from.gray() != 0) {
    set_gray(from.gray());
  }
  if (from.flag_dash_endpt() != 0) {
    set_flag_dash_endpt(from.flag_dash_endpt());
  }
  if (from.horizontal() != 0) {
    set_horizontal(from.horizontal());
  }
}

void LineExtraInfoPts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LineExtraInfoPts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineExtraInfoPts::CopyFrom(const LineExtraInfoPts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LineExtraInfoPts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineExtraInfoPts::IsInitialized() const {
  return true;
}

void LineExtraInfoPts::Swap(LineExtraInfoPts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineExtraInfoPts::InternalSwap(LineExtraInfoPts* other) {
  using std::swap;
  swap(pt_rle_c_, other->pt_rle_c_);
  swap(width_info_, other->width_info_);
  swap(xstart_, other->xstart_);
  swap(xend_, other->xend_);
  swap(y_parsing_, other->y_parsing_);
  swap(gray_, other->gray_);
  swap(flag_dash_endpt_, other->flag_dash_endpt_);
  swap(horizontal_, other->horizontal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineExtraInfoPts::GetMetadata() const {
  protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneContour::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneContour::kBasicPtsFieldNumber;
const int LaneContour::kExtraPtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneContour::LaneContour()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneContour();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LaneContour)
}
LaneContour::LaneContour(const LaneContour& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      basic_pts_(from.basic_pts_),
      extra_pts_(from.extra_pts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LaneContour)
}

void LaneContour::SharedCtor() {
  _cached_size_ = 0;
}

LaneContour::~LaneContour() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LaneContour)
  SharedDtor();
}

void LaneContour::SharedDtor() {
}

void LaneContour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneContour::descriptor() {
  ::protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneContour& LaneContour::default_instance() {
  ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneContour();
  return *internal_default_instance();
}

LaneContour* LaneContour::New(::google::protobuf::Arena* arena) const {
  LaneContour* n = new LaneContour;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneContour::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LaneContour)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basic_pts_.Clear();
  extra_pts_.Clear();
  _internal_metadata_.Clear();
}

bool LaneContour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LaneContour)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.LineBasicInfoPts basic_pts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_basic_pts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.LineExtraInfoPts extra_pts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_extra_pts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LaneContour)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LaneContour)
  return false;
#undef DO_
}

void LaneContour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LaneContour)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.LineBasicInfoPts basic_pts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->basic_pts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic_pts(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.LineExtraInfoPts extra_pts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_pts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extra_pts(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LaneContour)
}

::google::protobuf::uint8* LaneContour::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LaneContour)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.LineBasicInfoPts basic_pts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->basic_pts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->basic_pts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.LineExtraInfoPts extra_pts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_pts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->extra_pts(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LaneContour)
  return target;
}

size_t LaneContour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LaneContour)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.LineBasicInfoPts basic_pts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->basic_pts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->basic_pts(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.LineExtraInfoPts extra_pts = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_pts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extra_pts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneContour::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LaneContour)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneContour* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneContour>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LaneContour)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LaneContour)
    MergeFrom(*source);
  }
}

void LaneContour::MergeFrom(const LaneContour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LaneContour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  basic_pts_.MergeFrom(from.basic_pts_);
  extra_pts_.MergeFrom(from.extra_pts_);
}

void LaneContour::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LaneContour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneContour::CopyFrom(const LaneContour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LaneContour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneContour::IsInitialized() const {
  return true;
}

void LaneContour::Swap(LaneContour* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneContour::InternalSwap(LaneContour* other) {
  using std::swap;
  basic_pts_.InternalSwap(&other->basic_pts_);
  extra_pts_.InternalSwap(&other->extra_pts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneContour::GetMetadata() const {
  protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneMultitaskMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_LaneMultitaskMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_LaneMultitaskMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_LaneMultitaskMsg_default_instance_._instance.get_mutable()->lane_transition_point_ = const_cast< ::autodrive::workflow::proto::LaneTransitionPoint*>(
      ::autodrive::workflow::proto::LaneTransitionPoint::internal_default_instance());
  ::autodrive::workflow::proto::_LaneMultitaskMsg_default_instance_._instance.get_mutable()->roi_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
void LaneMultitaskMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void LaneMultitaskMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void LaneMultitaskMsg::clear_roi() {
  if (GetArenaNoVirtual() == NULL && roi_ != NULL) {
    delete roi_;
  }
  roi_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMultitaskMsg::kHeaderFieldNumber;
const int LaneMultitaskMsg::kErrorFieldNumber;
const int LaneMultitaskMsg::kLaneTransitionPointFieldNumber;
const int LaneMultitaskMsg::kLaneParsingImageFieldNumber;
const int LaneMultitaskMsg::kCameraIdFieldNumber;
const int LaneMultitaskMsg::kLaneContoursFieldNumber;
const int LaneMultitaskMsg::kRoiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMultitaskMsg::LaneMultitaskMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneMultitaskMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LaneMultitaskMsg)
}
LaneMultitaskMsg::LaneMultitaskMsg(const LaneMultitaskMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_parsing_image_(from.lane_parsing_image_),
      lane_contours_(from.lane_contours_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_lane_transition_point()) {
    lane_transition_point_ = new ::autodrive::workflow::proto::LaneTransitionPoint(*from.lane_transition_point_);
  } else {
    lane_transition_point_ = NULL;
  }
  if (from.has_roi()) {
    roi_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.roi_);
  } else {
    roi_ = NULL;
  }
  camera_id_ = from.camera_id_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LaneMultitaskMsg)
}

void LaneMultitaskMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(camera_id_));
  _cached_size_ = 0;
}

LaneMultitaskMsg::~LaneMultitaskMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LaneMultitaskMsg)
  SharedDtor();
}

void LaneMultitaskMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete lane_transition_point_;
  if (this != internal_default_instance()) delete roi_;
}

void LaneMultitaskMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMultitaskMsg::descriptor() {
  ::protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneMultitaskMsg& LaneMultitaskMsg::default_instance() {
  ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneMultitaskMsg();
  return *internal_default_instance();
}

LaneMultitaskMsg* LaneMultitaskMsg::New(::google::protobuf::Arena* arena) const {
  LaneMultitaskMsg* n = new LaneMultitaskMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMultitaskMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LaneMultitaskMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_parsing_image_.Clear();
  lane_contours_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_transition_point_ != NULL) {
    delete lane_transition_point_;
  }
  lane_transition_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && roi_ != NULL) {
    delete roi_;
  }
  roi_ = NULL;
  camera_id_ = 0;
  _internal_metadata_.Clear();
}

bool LaneMultitaskMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LaneMultitaskMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LaneTransitionPoint lane_transition_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_transition_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_parsing_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 camera_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.LaneContour lane_contours = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_contours()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Rect roi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LaneMultitaskMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LaneMultitaskMsg)
  return false;
#undef DO_
}

void LaneMultitaskMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LaneMultitaskMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.LaneTransitionPoint lane_transition_point = 3;
  if (this->has_lane_transition_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lane_transition_point_, output);
  }

  // repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_parsing_image_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lane_parsing_image(static_cast<int>(i)), output);
  }

  // int32 camera_id = 5;
  if (this->camera_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->camera_id(), output);
  }

  // repeated .autodrive.workflow.proto.LaneContour lane_contours = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_contours_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lane_contours(static_cast<int>(i)), output);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi = 7;
  if (this->has_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->roi_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LaneMultitaskMsg)
}

::google::protobuf::uint8* LaneMultitaskMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LaneMultitaskMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.LaneTransitionPoint lane_transition_point = 3;
  if (this->has_lane_transition_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->lane_transition_point_, deterministic, target);
  }

  // repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_parsing_image_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->lane_parsing_image(static_cast<int>(i)), deterministic, target);
  }

  // int32 camera_id = 5;
  if (this->camera_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->camera_id(), target);
  }

  // repeated .autodrive.workflow.proto.LaneContour lane_contours = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_contours_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->lane_contours(static_cast<int>(i)), deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi = 7;
  if (this->has_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->roi_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LaneMultitaskMsg)
  return target;
}

size_t LaneMultitaskMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LaneMultitaskMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_parsing_image_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_parsing_image(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.LaneContour lane_contours = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_contours_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_contours(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.LaneTransitionPoint lane_transition_point = 3;
  if (this->has_lane_transition_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lane_transition_point_);
  }

  // .autodrive.workflow.proto.perception_base.Rect roi = 7;
  if (this->has_roi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->roi_);
  }

  // int32 camera_id = 5;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->camera_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMultitaskMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LaneMultitaskMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMultitaskMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMultitaskMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LaneMultitaskMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LaneMultitaskMsg)
    MergeFrom(*source);
  }
}

void LaneMultitaskMsg::MergeFrom(const LaneMultitaskMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LaneMultitaskMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_parsing_image_.MergeFrom(from.lane_parsing_image_);
  lane_contours_.MergeFrom(from.lane_contours_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_lane_transition_point()) {
    mutable_lane_transition_point()->::autodrive::workflow::proto::LaneTransitionPoint::MergeFrom(from.lane_transition_point());
  }
  if (from.has_roi()) {
    mutable_roi()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.roi());
  }
  if (from.camera_id() != 0) {
    set_camera_id(from.camera_id());
  }
}

void LaneMultitaskMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LaneMultitaskMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMultitaskMsg::CopyFrom(const LaneMultitaskMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LaneMultitaskMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMultitaskMsg::IsInitialized() const {
  return true;
}

void LaneMultitaskMsg::Swap(LaneMultitaskMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMultitaskMsg::InternalSwap(LaneMultitaskMsg* other) {
  using std::swap;
  lane_parsing_image_.InternalSwap(&other->lane_parsing_image_);
  lane_contours_.InternalSwap(&other->lane_contours_);
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(lane_transition_point_, other->lane_transition_point_);
  swap(roi_, other->roi_);
  swap(camera_id_, other->camera_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMultitaskMsg::GetMetadata() const {
  protobuf_lane_5fmultitask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fmultitask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
