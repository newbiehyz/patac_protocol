// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_hpa_render_all_map.proto

#include "hmi_hpa_render_all_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class HmiAllMapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiAllMapInfo>
      _instance;
} _HmiAllMapInfo_default_instance_;
class HmiAllMapDisplayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiAllMapDisplay>
      _instance;
} _HmiAllMapDisplay_default_instance_;
class HmiHpaAllMapRenderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiHpaAllMapRender>
      _instance;
} _HmiHpaAllMapRender_default_instance_;
class HmiHpaRenderAllMapMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HmiHpaRenderAllMapMsg>
      _instance;
} _HmiHpaRenderAllMapMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto {
void InitDefaultsHmiAllMapInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapCommonHeader();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiAllMapInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiAllMapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiAllMapInfo::InitAsDefaultInstance();
}

void InitDefaultsHmiAllMapInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiAllMapInfoImpl);
}

void InitDefaultsHmiAllMapDisplayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiAllMapInfo();
  protobuf_hmi_5fmap_5fdisplay_2eproto::InitDefaultsHmdMapCommonHeader();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiAllMapDisplay_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiAllMapDisplay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiAllMapDisplay::InitAsDefaultInstance();
}

void InitDefaultsHmiAllMapDisplay() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiAllMapDisplayImpl);
}

void InitDefaultsHmiHpaAllMapRenderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiAllMapDisplay();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiHpaAllMapRender_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiHpaAllMapRender();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiHpaAllMapRender::InitAsDefaultInstance();
}

void InitDefaultsHmiHpaAllMapRender() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiHpaAllMapRenderImpl);
}

void InitDefaultsHmiHpaRenderAllMapMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiHpaAllMapRender();
  {
    void* ptr = &::autodrive::workflow::proto::_HmiHpaRenderAllMapMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::HmiHpaRenderAllMapMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::HmiHpaRenderAllMapMsg::InitAsDefaultInstance();
}

void InitDefaultsHmiHpaRenderAllMapMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHmiHpaRenderAllMapMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapInfo, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapInfo, map_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapInfo, rest_map_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapInfo, num_speed_bumps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapDisplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapDisplay, map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapDisplay, update_map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapDisplay, num_maps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapDisplay, is_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapDisplay, map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiAllMapDisplay, all_map_headers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaAllMapRender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaAllMapRender, hmi_map_display_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRenderAllMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRenderAllMapMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRenderAllMapMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::HmiHpaRenderAllMapMsg, hmi_hpa_render_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::HmiAllMapInfo)},
  { 9, -1, sizeof(::autodrive::workflow::proto::HmiAllMapDisplay)},
  { 20, -1, sizeof(::autodrive::workflow::proto::HmiHpaAllMapRender)},
  { 26, -1, sizeof(::autodrive::workflow::proto::HmiHpaRenderAllMapMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiAllMapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiAllMapDisplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiHpaAllMapRender_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_HmiHpaRenderAllMapMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hmi_hpa_render_all_map.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034hmi_hpa_render_all_map.proto\022\030autodriv"
      "e.workflow.proto\032\014common.proto\032\025hmi_map_"
      "display.proto\"\227\001\n\rHmiAllMapInfo\022<\n\006heade"
      "r\030\001 \001(\0132,.autodrive.workflow.proto.HmdMa"
      "pCommonHeader\022\024\n\014map_distance\030\002 \001(\002\022\031\n\021r"
      "est_map_distance\030\003 \001(\002\022\027\n\017num_speed_bump"
      "s\030\004 \001(\005\"\341\001\n\020HmiAllMapDisplay\0229\n\010map_info"
      "\030\001 \001(\0132\'.autodrive.workflow.proto.HmiAll"
      "MapInfo\022\027\n\017update_map_info\030\002 \001(\010\022\020\n\010num_"
      "maps\030\003 \001(\005\022\020\n\010is_match\030\004 \001(\010\022\016\n\006map_id\030\005"
      " \001(\005\022E\n\017all_map_headers\030\006 \003(\0132,.autodriv"
      "e.workflow.proto.HmdMapCommonHeader\"Y\n\022H"
      "miHpaAllMapRender\022C\n\017hmi_map_display\030\001 \001"
      "(\0132*.autodrive.workflow.proto.HmiAllMapD"
      "isplay\"\302\001\n\025HmiHpaRenderAllMapMsg\0223\n\006head"
      "er\030\001 \001(\0132#.autodrive.workflow.proto.MsgH"
      "eader\022.\n\005error\030\002 \001(\0132\037.autodrive.workflo"
      "w.proto.Error\022D\n\016hmi_hpa_render\030\003 \001(\0132,."
      "autodrive.workflow.proto.HmiHpaAllMapRen"
      "derb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 771);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hmi_hpa_render_all_map.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_hmi_5fmap_5fdisplay_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void HmiAllMapInfo::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiAllMapInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::HmdMapCommonHeader*>(
      ::autodrive::workflow::proto::HmdMapCommonHeader::internal_default_instance());
}
void HmiAllMapInfo::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiAllMapInfo::kHeaderFieldNumber;
const int HmiAllMapInfo::kMapDistanceFieldNumber;
const int HmiAllMapInfo::kRestMapDistanceFieldNumber;
const int HmiAllMapInfo::kNumSpeedBumpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiAllMapInfo::HmiAllMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiAllMapInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiAllMapInfo)
}
HmiAllMapInfo::HmiAllMapInfo(const HmiAllMapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::HmdMapCommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&map_distance_, &from.map_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_speed_bumps_) -
    reinterpret_cast<char*>(&map_distance_)) + sizeof(num_speed_bumps_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiAllMapInfo)
}

void HmiAllMapInfo::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_speed_bumps_) -
      reinterpret_cast<char*>(&header_)) + sizeof(num_speed_bumps_));
  _cached_size_ = 0;
}

HmiAllMapInfo::~HmiAllMapInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiAllMapInfo)
  SharedDtor();
}

void HmiAllMapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void HmiAllMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiAllMapInfo::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiAllMapInfo& HmiAllMapInfo::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiAllMapInfo();
  return *internal_default_instance();
}

HmiAllMapInfo* HmiAllMapInfo::New(::google::protobuf::Arena* arena) const {
  HmiAllMapInfo* n = new HmiAllMapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiAllMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiAllMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&map_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_speed_bumps_) -
      reinterpret_cast<char*>(&map_distance_)) + sizeof(num_speed_bumps_));
  _internal_metadata_.Clear();
}

bool HmiAllMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiAllMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float map_distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rest_map_distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rest_map_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_speed_bumps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_speed_bumps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiAllMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiAllMapInfo)
  return false;
#undef DO_
}

void HmiAllMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiAllMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // float map_distance = 2;
  if (this->map_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->map_distance(), output);
  }

  // float rest_map_distance = 3;
  if (this->rest_map_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rest_map_distance(), output);
  }

  // int32 num_speed_bumps = 4;
  if (this->num_speed_bumps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_speed_bumps(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiAllMapInfo)
}

::google::protobuf::uint8* HmiAllMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiAllMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // float map_distance = 2;
  if (this->map_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->map_distance(), target);
  }

  // float rest_map_distance = 3;
  if (this->rest_map_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rest_map_distance(), target);
  }

  // int32 num_speed_bumps = 4;
  if (this->num_speed_bumps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_speed_bumps(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiAllMapInfo)
  return target;
}

size_t HmiAllMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiAllMapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.HmdMapCommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // float map_distance = 2;
  if (this->map_distance() != 0) {
    total_size += 1 + 4;
  }

  // float rest_map_distance = 3;
  if (this->rest_map_distance() != 0) {
    total_size += 1 + 4;
  }

  // int32 num_speed_bumps = 4;
  if (this->num_speed_bumps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_speed_bumps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiAllMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiAllMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiAllMapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiAllMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiAllMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiAllMapInfo)
    MergeFrom(*source);
  }
}

void HmiAllMapInfo::MergeFrom(const HmiAllMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiAllMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::HmdMapCommonHeader::MergeFrom(from.header());
  }
  if (from.map_distance() != 0) {
    set_map_distance(from.map_distance());
  }
  if (from.rest_map_distance() != 0) {
    set_rest_map_distance(from.rest_map_distance());
  }
  if (from.num_speed_bumps() != 0) {
    set_num_speed_bumps(from.num_speed_bumps());
  }
}

void HmiAllMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiAllMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiAllMapInfo::CopyFrom(const HmiAllMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiAllMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiAllMapInfo::IsInitialized() const {
  return true;
}

void HmiAllMapInfo::Swap(HmiAllMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiAllMapInfo::InternalSwap(HmiAllMapInfo* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(map_distance_, other->map_distance_);
  swap(rest_map_distance_, other->rest_map_distance_);
  swap(num_speed_bumps_, other->num_speed_bumps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiAllMapInfo::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiAllMapDisplay::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiAllMapDisplay_default_instance_._instance.get_mutable()->map_info_ = const_cast< ::autodrive::workflow::proto::HmiAllMapInfo*>(
      ::autodrive::workflow::proto::HmiAllMapInfo::internal_default_instance());
}
void HmiAllMapDisplay::clear_all_map_headers() {
  all_map_headers_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiAllMapDisplay::kMapInfoFieldNumber;
const int HmiAllMapDisplay::kUpdateMapInfoFieldNumber;
const int HmiAllMapDisplay::kNumMapsFieldNumber;
const int HmiAllMapDisplay::kIsMatchFieldNumber;
const int HmiAllMapDisplay::kMapIdFieldNumber;
const int HmiAllMapDisplay::kAllMapHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiAllMapDisplay::HmiAllMapDisplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiAllMapDisplay();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiAllMapDisplay)
}
HmiAllMapDisplay::HmiAllMapDisplay(const HmiAllMapDisplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      all_map_headers_(from.all_map_headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_info()) {
    map_info_ = new ::autodrive::workflow::proto::HmiAllMapInfo(*from.map_info_);
  } else {
    map_info_ = NULL;
  }
  ::memcpy(&num_maps_, &from.num_maps_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_id_) -
    reinterpret_cast<char*>(&num_maps_)) + sizeof(map_id_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiAllMapDisplay)
}

void HmiAllMapDisplay::SharedCtor() {
  ::memset(&map_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_id_) -
      reinterpret_cast<char*>(&map_info_)) + sizeof(map_id_));
  _cached_size_ = 0;
}

HmiAllMapDisplay::~HmiAllMapDisplay() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiAllMapDisplay)
  SharedDtor();
}

void HmiAllMapDisplay::SharedDtor() {
  if (this != internal_default_instance()) delete map_info_;
}

void HmiAllMapDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiAllMapDisplay::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiAllMapDisplay& HmiAllMapDisplay::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiAllMapDisplay();
  return *internal_default_instance();
}

HmiAllMapDisplay* HmiAllMapDisplay::New(::google::protobuf::Arena* arena) const {
  HmiAllMapDisplay* n = new HmiAllMapDisplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiAllMapDisplay::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiAllMapDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_map_headers_.Clear();
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
  ::memset(&num_maps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_id_) -
      reinterpret_cast<char*>(&num_maps_)) + sizeof(map_id_));
  _internal_metadata_.Clear();
}

bool HmiAllMapDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiAllMapDisplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.HmiAllMapInfo map_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool update_map_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_map_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_maps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_maps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_match = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 map_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_all_map_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiAllMapDisplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiAllMapDisplay)
  return false;
#undef DO_
}

void HmiAllMapDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiAllMapDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmiAllMapInfo map_info = 1;
  if (this->has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_info_, output);
  }

  // bool update_map_info = 2;
  if (this->update_map_info() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update_map_info(), output);
  }

  // int32 num_maps = 3;
  if (this->num_maps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_maps(), output);
  }

  // bool is_match = 4;
  if (this->is_match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_match(), output);
  }

  // int32 map_id = 5;
  if (this->map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_id(), output);
  }

  // repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_map_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->all_map_headers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiAllMapDisplay)
}

::google::protobuf::uint8* HmiAllMapDisplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiAllMapDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmiAllMapInfo map_info = 1;
  if (this->has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->map_info_, deterministic, target);
  }

  // bool update_map_info = 2;
  if (this->update_map_info() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update_map_info(), target);
  }

  // int32 num_maps = 3;
  if (this->num_maps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_maps(), target);
  }

  // bool is_match = 4;
  if (this->is_match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_match(), target);
  }

  // int32 map_id = 5;
  if (this->map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_id(), target);
  }

  // repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_map_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->all_map_headers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiAllMapDisplay)
  return target;
}

size_t HmiAllMapDisplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiAllMapDisplay)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.HmdMapCommonHeader all_map_headers = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->all_map_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->all_map_headers(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.HmiAllMapInfo map_info = 1;
  if (this->has_map_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->map_info_);
  }

  // int32 num_maps = 3;
  if (this->num_maps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_maps());
  }

  // bool update_map_info = 2;
  if (this->update_map_info() != 0) {
    total_size += 1 + 1;
  }

  // bool is_match = 4;
  if (this->is_match() != 0) {
    total_size += 1 + 1;
  }

  // int32 map_id = 5;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiAllMapDisplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiAllMapDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiAllMapDisplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiAllMapDisplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiAllMapDisplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiAllMapDisplay)
    MergeFrom(*source);
  }
}

void HmiAllMapDisplay::MergeFrom(const HmiAllMapDisplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiAllMapDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_map_headers_.MergeFrom(from.all_map_headers_);
  if (from.has_map_info()) {
    mutable_map_info()->::autodrive::workflow::proto::HmiAllMapInfo::MergeFrom(from.map_info());
  }
  if (from.num_maps() != 0) {
    set_num_maps(from.num_maps());
  }
  if (from.update_map_info() != 0) {
    set_update_map_info(from.update_map_info());
  }
  if (from.is_match() != 0) {
    set_is_match(from.is_match());
  }
  if (from.map_id() != 0) {
    set_map_id(from.map_id());
  }
}

void HmiAllMapDisplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiAllMapDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiAllMapDisplay::CopyFrom(const HmiAllMapDisplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiAllMapDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiAllMapDisplay::IsInitialized() const {
  return true;
}

void HmiAllMapDisplay::Swap(HmiAllMapDisplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiAllMapDisplay::InternalSwap(HmiAllMapDisplay* other) {
  using std::swap;
  all_map_headers_.InternalSwap(&other->all_map_headers_);
  swap(map_info_, other->map_info_);
  swap(num_maps_, other->num_maps_);
  swap(update_map_info_, other->update_map_info_);
  swap(is_match_, other->is_match_);
  swap(map_id_, other->map_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiAllMapDisplay::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiHpaAllMapRender::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiHpaAllMapRender_default_instance_._instance.get_mutable()->hmi_map_display_ = const_cast< ::autodrive::workflow::proto::HmiAllMapDisplay*>(
      ::autodrive::workflow::proto::HmiAllMapDisplay::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiHpaAllMapRender::kHmiMapDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiHpaAllMapRender::HmiHpaAllMapRender()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiHpaAllMapRender();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiHpaAllMapRender)
}
HmiHpaAllMapRender::HmiHpaAllMapRender(const HmiHpaAllMapRender& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hmi_map_display()) {
    hmi_map_display_ = new ::autodrive::workflow::proto::HmiAllMapDisplay(*from.hmi_map_display_);
  } else {
    hmi_map_display_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiHpaAllMapRender)
}

void HmiHpaAllMapRender::SharedCtor() {
  hmi_map_display_ = NULL;
  _cached_size_ = 0;
}

HmiHpaAllMapRender::~HmiHpaAllMapRender() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiHpaAllMapRender)
  SharedDtor();
}

void HmiHpaAllMapRender::SharedDtor() {
  if (this != internal_default_instance()) delete hmi_map_display_;
}

void HmiHpaAllMapRender::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiHpaAllMapRender::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiHpaAllMapRender& HmiHpaAllMapRender::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiHpaAllMapRender();
  return *internal_default_instance();
}

HmiHpaAllMapRender* HmiHpaAllMapRender::New(::google::protobuf::Arena* arena) const {
  HmiHpaAllMapRender* n = new HmiHpaAllMapRender;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiHpaAllMapRender::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiHpaAllMapRender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hmi_map_display_ != NULL) {
    delete hmi_map_display_;
  }
  hmi_map_display_ = NULL;
  _internal_metadata_.Clear();
}

bool HmiHpaAllMapRender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiHpaAllMapRender)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.HmiAllMapDisplay hmi_map_display = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hmi_map_display()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiHpaAllMapRender)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiHpaAllMapRender)
  return false;
#undef DO_
}

void HmiHpaAllMapRender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiHpaAllMapRender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmiAllMapDisplay hmi_map_display = 1;
  if (this->has_hmi_map_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hmi_map_display_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiHpaAllMapRender)
}

::google::protobuf::uint8* HmiHpaAllMapRender::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiHpaAllMapRender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.HmiAllMapDisplay hmi_map_display = 1;
  if (this->has_hmi_map_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->hmi_map_display_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiHpaAllMapRender)
  return target;
}

size_t HmiHpaAllMapRender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiHpaAllMapRender)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.HmiAllMapDisplay hmi_map_display = 1;
  if (this->has_hmi_map_display()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hmi_map_display_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiHpaAllMapRender::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiHpaAllMapRender)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiHpaAllMapRender* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiHpaAllMapRender>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiHpaAllMapRender)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiHpaAllMapRender)
    MergeFrom(*source);
  }
}

void HmiHpaAllMapRender::MergeFrom(const HmiHpaAllMapRender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiHpaAllMapRender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hmi_map_display()) {
    mutable_hmi_map_display()->::autodrive::workflow::proto::HmiAllMapDisplay::MergeFrom(from.hmi_map_display());
  }
}

void HmiHpaAllMapRender::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiHpaAllMapRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiHpaAllMapRender::CopyFrom(const HmiHpaAllMapRender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiHpaAllMapRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiHpaAllMapRender::IsInitialized() const {
  return true;
}

void HmiHpaAllMapRender::Swap(HmiHpaAllMapRender* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiHpaAllMapRender::InternalSwap(HmiHpaAllMapRender* other) {
  using std::swap;
  swap(hmi_map_display_, other->hmi_map_display_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiHpaAllMapRender::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HmiHpaRenderAllMapMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_HmiHpaRenderAllMapMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_HmiHpaRenderAllMapMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_HmiHpaRenderAllMapMsg_default_instance_._instance.get_mutable()->hmi_hpa_render_ = const_cast< ::autodrive::workflow::proto::HmiHpaAllMapRender*>(
      ::autodrive::workflow::proto::HmiHpaAllMapRender::internal_default_instance());
}
void HmiHpaRenderAllMapMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void HmiHpaRenderAllMapMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmiHpaRenderAllMapMsg::kHeaderFieldNumber;
const int HmiHpaRenderAllMapMsg::kErrorFieldNumber;
const int HmiHpaRenderAllMapMsg::kHmiHpaRenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmiHpaRenderAllMapMsg::HmiHpaRenderAllMapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiHpaRenderAllMapMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
}
HmiHpaRenderAllMapMsg::HmiHpaRenderAllMapMsg(const HmiHpaRenderAllMapMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_hmi_hpa_render()) {
    hmi_hpa_render_ = new ::autodrive::workflow::proto::HmiHpaAllMapRender(*from.hmi_hpa_render_);
  } else {
    hmi_hpa_render_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
}

void HmiHpaRenderAllMapMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hmi_hpa_render_) -
      reinterpret_cast<char*>(&header_)) + sizeof(hmi_hpa_render_));
  _cached_size_ = 0;
}

HmiHpaRenderAllMapMsg::~HmiHpaRenderAllMapMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  SharedDtor();
}

void HmiHpaRenderAllMapMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete hmi_hpa_render_;
}

void HmiHpaRenderAllMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmiHpaRenderAllMapMsg::descriptor() {
  ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HmiHpaRenderAllMapMsg& HmiHpaRenderAllMapMsg::default_instance() {
  ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::InitDefaultsHmiHpaRenderAllMapMsg();
  return *internal_default_instance();
}

HmiHpaRenderAllMapMsg* HmiHpaRenderAllMapMsg::New(::google::protobuf::Arena* arena) const {
  HmiHpaRenderAllMapMsg* n = new HmiHpaRenderAllMapMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmiHpaRenderAllMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && hmi_hpa_render_ != NULL) {
    delete hmi_hpa_render_;
  }
  hmi_hpa_render_ = NULL;
  _internal_metadata_.Clear();
}

bool HmiHpaRenderAllMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.HmiHpaAllMapRender hmi_hpa_render = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hmi_hpa_render()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  return false;
#undef DO_
}

void HmiHpaRenderAllMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.HmiHpaAllMapRender hmi_hpa_render = 3;
  if (this->has_hmi_hpa_render()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->hmi_hpa_render_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
}

::google::protobuf::uint8* HmiHpaRenderAllMapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.HmiHpaAllMapRender hmi_hpa_render = 3;
  if (this->has_hmi_hpa_render()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->hmi_hpa_render_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  return target;
}

size_t HmiHpaRenderAllMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.HmiHpaAllMapRender hmi_hpa_render = 3;
  if (this->has_hmi_hpa_render()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->hmi_hpa_render_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmiHpaRenderAllMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HmiHpaRenderAllMapMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HmiHpaRenderAllMapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
    MergeFrom(*source);
  }
}

void HmiHpaRenderAllMapMsg::MergeFrom(const HmiHpaRenderAllMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_hmi_hpa_render()) {
    mutable_hmi_hpa_render()->::autodrive::workflow::proto::HmiHpaAllMapRender::MergeFrom(from.hmi_hpa_render());
  }
}

void HmiHpaRenderAllMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmiHpaRenderAllMapMsg::CopyFrom(const HmiHpaRenderAllMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.HmiHpaRenderAllMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiHpaRenderAllMapMsg::IsInitialized() const {
  return true;
}

void HmiHpaRenderAllMapMsg::Swap(HmiHpaRenderAllMapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmiHpaRenderAllMapMsg::InternalSwap(HmiHpaRenderAllMapMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(hmi_hpa_render_, other->hmi_hpa_render_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmiHpaRenderAllMapMsg::GetMetadata() const {
  protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fhpa_5frender_5fall_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
