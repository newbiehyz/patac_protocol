// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odometry_data.proto

#include "odometry_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class StableDataPitchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StableDataPitch>
      _instance;
} _StableDataPitch_default_instance_;
class VehicleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vehicle>
      _instance;
} _Vehicle_default_instance_;
class OdometryMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OdometryMsg>
      _instance;
} _OdometryMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_odometry_5fdata_2eproto {
void InitDefaultsStableDataPitchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_StableDataPitch_default_instance_;
    new (ptr) ::autodrive::workflow::proto::StableDataPitch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::StableDataPitch::InitAsDefaultInstance();
}

void InitDefaultsStableDataPitch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStableDataPitchImpl);
}

void InitDefaultsVehicleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_Vehicle_default_instance_;
    new (ptr) ::autodrive::workflow::proto::Vehicle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::Vehicle::InitAsDefaultInstance();
}

void InitDefaultsVehicle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleImpl);
}

void InitDefaultsOdometryMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_basic_2eproto::InitDefaultsVector3f();
  protobuf_basic_2eproto::InitDefaultsVector2f();
  protobuf_odometry_5fdata_2eproto::InitDefaultsStableDataPitch();
  protobuf_basic_2eproto::InitDefaultsVector3d();
  protobuf_odometry_5fdata_2eproto::InitDefaultsVehicle();
  {
    void* ptr = &::autodrive::workflow::proto::_OdometryMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::OdometryMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::OdometryMsg::InitAsDefaultInstance();
}

void InitDefaultsOdometryMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOdometryMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StableDataPitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StableDataPitch, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StableDataPitch, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::StableDataPitch, is_jitter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, light_brightness_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, lignt_validity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, left_turning_light_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, right_turning_light_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, rain_fall_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, whl_pulse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, whl_pulse_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, whl_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, yaw_rate_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, speed_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, gear_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, wl_pluse_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, tire_pressure_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, tire_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Vehicle, wheel_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, speed_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, yaw_rate_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, wheel_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, slope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, stable_pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, slope_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, diagnostic_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, cov_translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, cov_eular_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, position_hr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, is_slope_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, yaw_rate_bias_estimate_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::OdometryMsg, vehicle_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::StableDataPitch)},
  { 8, -1, sizeof(::autodrive::workflow::proto::Vehicle)},
  { 29, -1, sizeof(::autodrive::workflow::proto::OdometryMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_StableDataPitch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_Vehicle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_OdometryMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "odometry_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023odometry_data.proto\022\030autodrive.workflo"
      "w.proto\032\013basic.proto\032\014common.proto\"E\n\017St"
      "ableDataPitch\022\r\n\005pitch\030\001 \001(\002\022\020\n\010is_valid"
      "\030\002 \001(\010\022\021\n\tis_jitter\030\003 \001(\010\"\350\004\n\007Vehicle\022\034\n"
      "\024light_brightness_raw\030\001 \001(\r\022H\n\016lignt_val"
      "idity\030\002 \001(\01620.autodrive.workflow.proto.L"
      "ightIntensityValidity\022O\n\031left_turning_li"
      "ght_status\030\003 \001(\0162,.autodrive.workflow.pr"
      "oto.TurningLightStatus\022P\n\032right_turning_"
      "light_status\030\004 \001(\0162,.autodrive.workflow."
      "proto.TurningLightStatus\022@\n\017rain_fall_le"
      "vel\030\005 \001(\0162\'.autodrive.workflow.proto.Rai"
      "nFallLevel\022,\n\004gear\030\006 \001(\0162\036.autodrive.wor"
      "kflow.proto.Gear\022\021\n\twhl_pulse\030\007 \003(\r\022\027\n\017w"
      "hl_pulse_valid\030\010 \003(\r\022\021\n\twhl_speed\030\t \003(\002\022"
      "\026\n\016yaw_rate_valid\030\n \001(\r\022\023\n\013speed_valid\030\013"
      " \001(\r\022\022\n\ngear_valid\030\014 \001(\r\022\032\n\022wl_pluse_dir"
      "ection\030\r \003(\r\022\033\n\023tire_pressure_valid\030\016 \003("
      "\r\022\025\n\rtire_pressure\030\017 \003(\002\022\022\n\nwheel_size\030\020"
      " \001(\r\"\271\010\n\013OdometryMsg\0223\n\006header\030\001 \001(\0132#.a"
      "utodrive.workflow.proto.MsgHeader\022.\n\005err"
      "or\030\002 \001(\0132\037.autodrive.workflow.proto.Erro"
      "r\0224\n\010position\030\003 \001(\0132\".autodrive.workflow"
      ".proto.Vector3f\0227\n\013orientation\030\004 \001(\0132\".a"
      "utodrive.workflow.proto.Vector3f\022\r\n\005spee"
      "d\030\005 \001(\002\022\023\n\013speed_scale\030\006 \001(\002\0228\n\014accelera"
      "tion\030\007 \001(\0132\".autodrive.workflow.proto.Ve"
      "ctor2f\022\020\n\010yaw_rate\030\010 \001(\002\022\025\n\ryaw_rate_bia"
      "s\030\t \001(\002\022\023\n\013wheel_angle\030\n \001(\002\022\r\n\005slope\030\013 "
      "\001(\002\022\?\n\014stable_pitch\030\014 \001(\0132).autodrive.wo"
      "rkflow.proto.StableDataPitch\022\030\n\020slope_co"
      "nfidence\030\r \001(\002\022\027\n\017diagnostic_code\030\016 \001(\r\022"
      ";\n\017cov_translation\030\017 \001(\0132\".autodrive.wor"
      "kflow.proto.Vector3d\022;\n\017cov_eular_angle\030"
      "\020 \001(\0132\".autodrive.workflow.proto.Vector3"
      "d\0227\n\013position_hr\030\021 \001(\0132\".autodrive.workf"
      "low.proto.Vector3d\022\016\n\006source\030\022 \001(\r\022\032\n\022is"
      "_slope_available\030\023 \001(\010\0228\n\004type\030\024 \001(\0162*.a"
      "utodrive.workflow.proto.OdometryDataType"
      "\022:\n\005state\030\025 \001(\0162+.autodrive.workflow.pro"
      "to.OdometryDataState\022C\n\nerror_code\030\026 \001(\016"
      "2/.autodrive.workflow.proto.OdometryData"
      "ErrorCode\022d\n\034yaw_rate_bias_estimate_stat"
      "e\030\027 \001(\0162>.autodrive.workflow.proto.Odome"
      "tryDataYawRateBiasEstimateState\0227\n\014vehic"
      "le_info\030\030 \001(\0132!.autodrive.workflow.proto"
      ".Vehicle*\233\002\n\022OdometryDataSource\022\032\n\026kOdom"
      "etrySourceUnknown\020\000\022\033\n\027kOdometrySourceTw"
      "oWheel\020\001\022\034\n\030kOdometrySourceFourWheel\020\002\022\030"
      "\n\024kOdometrySourceSpeed\020\004\022\032\n\026kOdometrySou"
      "rceYawRate\020\010\022 \n\034kOdometrySourceSteeringA"
      "ngle\020\020\022\035\n\031kOdometrySourceWheelSpeed\020 \022\035\n"
      "\031kOdometrySourceWheelPulse\020@\022\030\n\023kOdometr"
      "ySourceGear\020\200\001*s\n\020OdometryDataType\022\030\n\024kO"
      "dometryDataTypeCan\020\000\022%\n!kOdometryDataTyp"
      "eOfflineOptimized\020\001\022\036\n\032kOdometryDataType"
      "OnlineIns\020\002*n\n\021OdometryDataState\022\034\n\030kOdo"
      "metryDataStateNormal\020\000\022\036\n\032kOdometryDataS"
      "tateUnnormal\020\001\022\033\n\027kOdometryDataStateRese"
      "t\020\002*\345\003\n\025OdometryDataErrorCode\022!\n\035kOdomet"
      "ryDataErrorCodeNoError\020\000\022)\n%kOdometryDat"
      "aErrorCodeErrorCanTimeout\020\001\022.\n*kOdometry"
      "DataErrorCodeErrorCanOdomOutrange\020\002\022*\n&k"
      "OdometryDataErrorCodeErrorCanHugeDiff\020\003\022"
      "/\n+kOdometryDataErrorCodeErrorCanAbnorma"
      "lValue\020\004\022$\n kOdometryDataErrorCodeErrorN"
      "oImu\020\005\022%\n!kOdometryDataErrorCodeErrorNoG"
      "nss\020\006\022$\n kOdometryDataErrorCodeErrorNoCa"
      "n\020\007\022&\n\"kOdometryDataErrorCodeErrorNoImag"
      "e\020\010\022\'\n#kOdometryDataErrorCodeErrorGnssLo"
      "st\020\t\022-\n)kOdometryDataErrorCodeErrorImage"
      "Timestamp\020\n*\364\001\n$OdometryDataYawRateBiasE"
      "stimateState\022#\n\037kYawRateBiasEstimateStat"
      "eNormal\020\000\022)\n%kYawRateBiasEstimateStateSt"
      "aticUpdate\020\001\022\'\n#kYawRateBiasEstimateStat"
      "eLaneUpdate\020\002\022$\n kYawRateBiasEstimateSta"
      "teOnCurve\020\003\022-\n)kYawRateBiasEstimateState"
      "LaneNotSatisfied\020\004*F\n\004Gear\022\016\n\nkGearTypeN"
      "\020\000\022\016\n\nKGearTypeP\020\001\022\016\n\nkGearTypeR\020\002\022\016\n\nkG"
      "earTypeD\020\003*\215\001\n\026LightIntensityValidity\022\032\n"
      "\026kUndefinedDataAccuracy\020\000\022\033\n\027kTemporaryU"
      "ndefinedData\020\001\022\'\n#kDataAccuracyNotWithin"
      "Specification\020\002\022\021\n\rkAccurateData\020\003*B\n\022Tu"
      "rningLightStatus\022\010\n\004kOff\020\000\022\007\n\003kOn\020\001\022\n\n\006k"
      "Error\020\002\022\r\n\tkReserved\020\003*N\n\rRainFallLevel\022"
      "\021\n\rkAmntSnsrAmnt\020\000\022\026\n\022kAmntSnsrInitValue"
      "\020\016\022\022\n\016kAmntSnsrError\020\017b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "odometry_data.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_odometry_5fdata_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* OdometryDataSource_descriptor() {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odometry_5fdata_2eproto::file_level_enum_descriptors[0];
}
bool OdometryDataSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OdometryDataType_descriptor() {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odometry_5fdata_2eproto::file_level_enum_descriptors[1];
}
bool OdometryDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OdometryDataState_descriptor() {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odometry_5fdata_2eproto::file_level_enum_descriptors[2];
}
bool OdometryDataState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OdometryDataErrorCode_descriptor() {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odometry_5fdata_2eproto::file_level_enum_descriptors[3];
}
bool OdometryDataErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OdometryDataYawRateBiasEstimateState_descriptor() {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odometry_5fdata_2eproto::file_level_enum_descriptors[4];
}
bool OdometryDataYawRateBiasEstimateState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Gear_descriptor() {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odometry_5fdata_2eproto::file_level_enum_descriptors[5];
}
bool Gear_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LightIntensityValidity_descriptor() {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odometry_5fdata_2eproto::file_level_enum_descriptors[6];
}
bool LightIntensityValidity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TurningLightStatus_descriptor() {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odometry_5fdata_2eproto::file_level_enum_descriptors[7];
}
bool TurningLightStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RainFallLevel_descriptor() {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_odometry_5fdata_2eproto::file_level_enum_descriptors[8];
}
bool RainFallLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StableDataPitch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StableDataPitch::kPitchFieldNumber;
const int StableDataPitch::kIsValidFieldNumber;
const int StableDataPitch::kIsJitterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StableDataPitch::StableDataPitch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_odometry_5fdata_2eproto::InitDefaultsStableDataPitch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.StableDataPitch)
}
StableDataPitch::StableDataPitch(const StableDataPitch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_jitter_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(is_jitter_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.StableDataPitch)
}

void StableDataPitch::SharedCtor() {
  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_jitter_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(is_jitter_));
  _cached_size_ = 0;
}

StableDataPitch::~StableDataPitch() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.StableDataPitch)
  SharedDtor();
}

void StableDataPitch::SharedDtor() {
}

void StableDataPitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StableDataPitch::descriptor() {
  ::protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odometry_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StableDataPitch& StableDataPitch::default_instance() {
  ::protobuf_odometry_5fdata_2eproto::InitDefaultsStableDataPitch();
  return *internal_default_instance();
}

StableDataPitch* StableDataPitch::New(::google::protobuf::Arena* arena) const {
  StableDataPitch* n = new StableDataPitch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StableDataPitch::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.StableDataPitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_jitter_) -
      reinterpret_cast<char*>(&pitch_)) + sizeof(is_jitter_));
  _internal_metadata_.Clear();
}

bool StableDataPitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.StableDataPitch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pitch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_jitter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.StableDataPitch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.StableDataPitch)
  return false;
#undef DO_
}

void StableDataPitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.StableDataPitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_valid(), output);
  }

  // bool is_jitter = 3;
  if (this->is_jitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_jitter(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.StableDataPitch)
}

::google::protobuf::uint8* StableDataPitch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.StableDataPitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_valid(), target);
  }

  // bool is_jitter = 3;
  if (this->is_jitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_jitter(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.StableDataPitch)
  return target;
}

size_t StableDataPitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.StableDataPitch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // bool is_valid = 2;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_jitter = 3;
  if (this->is_jitter() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StableDataPitch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.StableDataPitch)
  GOOGLE_DCHECK_NE(&from, this);
  const StableDataPitch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StableDataPitch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.StableDataPitch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.StableDataPitch)
    MergeFrom(*source);
  }
}

void StableDataPitch::MergeFrom(const StableDataPitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.StableDataPitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.is_jitter() != 0) {
    set_is_jitter(from.is_jitter());
  }
}

void StableDataPitch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.StableDataPitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StableDataPitch::CopyFrom(const StableDataPitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.StableDataPitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StableDataPitch::IsInitialized() const {
  return true;
}

void StableDataPitch::Swap(StableDataPitch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StableDataPitch::InternalSwap(StableDataPitch* other) {
  using std::swap;
  swap(pitch_, other->pitch_);
  swap(is_valid_, other->is_valid_);
  swap(is_jitter_, other->is_jitter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StableDataPitch::GetMetadata() const {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odometry_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vehicle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle::kLightBrightnessRawFieldNumber;
const int Vehicle::kLigntValidityFieldNumber;
const int Vehicle::kLeftTurningLightStatusFieldNumber;
const int Vehicle::kRightTurningLightStatusFieldNumber;
const int Vehicle::kRainFallLevelFieldNumber;
const int Vehicle::kGearFieldNumber;
const int Vehicle::kWhlPulseFieldNumber;
const int Vehicle::kWhlPulseValidFieldNumber;
const int Vehicle::kWhlSpeedFieldNumber;
const int Vehicle::kYawRateValidFieldNumber;
const int Vehicle::kSpeedValidFieldNumber;
const int Vehicle::kGearValidFieldNumber;
const int Vehicle::kWlPluseDirectionFieldNumber;
const int Vehicle::kTirePressureValidFieldNumber;
const int Vehicle::kTirePressureFieldNumber;
const int Vehicle::kWheelSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle::Vehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_odometry_5fdata_2eproto::InitDefaultsVehicle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.Vehicle)
}
Vehicle::Vehicle(const Vehicle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      whl_pulse_(from.whl_pulse_),
      whl_pulse_valid_(from.whl_pulse_valid_),
      whl_speed_(from.whl_speed_),
      wl_pluse_direction_(from.wl_pluse_direction_),
      tire_pressure_valid_(from.tire_pressure_valid_),
      tire_pressure_(from.tire_pressure_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&light_brightness_raw_, &from.light_brightness_raw_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_size_) -
    reinterpret_cast<char*>(&light_brightness_raw_)) + sizeof(wheel_size_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.Vehicle)
}

void Vehicle::SharedCtor() {
  ::memset(&light_brightness_raw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_size_) -
      reinterpret_cast<char*>(&light_brightness_raw_)) + sizeof(wheel_size_));
  _cached_size_ = 0;
}

Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.Vehicle)
  SharedDtor();
}

void Vehicle::SharedDtor() {
}

void Vehicle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle::descriptor() {
  ::protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odometry_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle& Vehicle::default_instance() {
  ::protobuf_odometry_5fdata_2eproto::InitDefaultsVehicle();
  return *internal_default_instance();
}

Vehicle* Vehicle::New(::google::protobuf::Arena* arena) const {
  Vehicle* n = new Vehicle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  whl_pulse_.Clear();
  whl_pulse_valid_.Clear();
  whl_speed_.Clear();
  wl_pluse_direction_.Clear();
  tire_pressure_valid_.Clear();
  tire_pressure_.Clear();
  ::memset(&light_brightness_raw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_size_) -
      reinterpret_cast<char*>(&light_brightness_raw_)) + sizeof(wheel_size_));
  _internal_metadata_.Clear();
}

bool Vehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.Vehicle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 light_brightness_raw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &light_brightness_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LightIntensityValidity lignt_validity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lignt_validity(static_cast< ::autodrive::workflow::proto::LightIntensityValidity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.TurningLightStatus left_turning_light_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_left_turning_light_status(static_cast< ::autodrive::workflow::proto::TurningLightStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.TurningLightStatus right_turning_light_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_right_turning_light_status(static_cast< ::autodrive::workflow::proto::TurningLightStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.RainFallLevel rain_fall_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rain_fall_level(static_cast< ::autodrive::workflow::proto::RainFallLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Gear gear = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear(static_cast< ::autodrive::workflow::proto::Gear >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 whl_pulse = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_whl_pulse())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_whl_pulse())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 whl_pulse_valid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_whl_pulse_valid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_whl_pulse_valid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float whl_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_whl_speed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_whl_speed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 yaw_rate_valid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yaw_rate_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed_valid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gear_valid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gear_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 wl_pluse_direction = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wl_pluse_direction())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_wl_pluse_direction())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tire_pressure_valid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tire_pressure_valid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_tire_pressure_valid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tire_pressure = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tire_pressure())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 122u, input, this->mutable_tire_pressure())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wheel_size = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wheel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.Vehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.Vehicle)
  return false;
#undef DO_
}

void Vehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 light_brightness_raw = 1;
  if (this->light_brightness_raw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->light_brightness_raw(), output);
  }

  // .autodrive.workflow.proto.LightIntensityValidity lignt_validity = 2;
  if (this->lignt_validity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lignt_validity(), output);
  }

  // .autodrive.workflow.proto.TurningLightStatus left_turning_light_status = 3;
  if (this->left_turning_light_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->left_turning_light_status(), output);
  }

  // .autodrive.workflow.proto.TurningLightStatus right_turning_light_status = 4;
  if (this->right_turning_light_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->right_turning_light_status(), output);
  }

  // .autodrive.workflow.proto.RainFallLevel rain_fall_level = 5;
  if (this->rain_fall_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->rain_fall_level(), output);
  }

  // .autodrive.workflow.proto.Gear gear = 6;
  if (this->gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gear(), output);
  }

  // repeated uint32 whl_pulse = 7;
  if (this->whl_pulse_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _whl_pulse_cached_byte_size_));
  }
  for (int i = 0, n = this->whl_pulse_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->whl_pulse(i), output);
  }

  // repeated uint32 whl_pulse_valid = 8;
  if (this->whl_pulse_valid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _whl_pulse_valid_cached_byte_size_));
  }
  for (int i = 0, n = this->whl_pulse_valid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->whl_pulse_valid(i), output);
  }

  // repeated float whl_speed = 9;
  if (this->whl_speed_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _whl_speed_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->whl_speed().data(), this->whl_speed_size(), output);
  }

  // uint32 yaw_rate_valid = 10;
  if (this->yaw_rate_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->yaw_rate_valid(), output);
  }

  // uint32 speed_valid = 11;
  if (this->speed_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->speed_valid(), output);
  }

  // uint32 gear_valid = 12;
  if (this->gear_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gear_valid(), output);
  }

  // repeated uint32 wl_pluse_direction = 13;
  if (this->wl_pluse_direction_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _wl_pluse_direction_cached_byte_size_));
  }
  for (int i = 0, n = this->wl_pluse_direction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->wl_pluse_direction(i), output);
  }

  // repeated uint32 tire_pressure_valid = 14;
  if (this->tire_pressure_valid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tire_pressure_valid_cached_byte_size_));
  }
  for (int i = 0, n = this->tire_pressure_valid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tire_pressure_valid(i), output);
  }

  // repeated float tire_pressure = 15;
  if (this->tire_pressure_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tire_pressure_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->tire_pressure().data(), this->tire_pressure_size(), output);
  }

  // uint32 wheel_size = 16;
  if (this->wheel_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->wheel_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.Vehicle)
}

::google::protobuf::uint8* Vehicle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 light_brightness_raw = 1;
  if (this->light_brightness_raw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->light_brightness_raw(), target);
  }

  // .autodrive.workflow.proto.LightIntensityValidity lignt_validity = 2;
  if (this->lignt_validity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lignt_validity(), target);
  }

  // .autodrive.workflow.proto.TurningLightStatus left_turning_light_status = 3;
  if (this->left_turning_light_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->left_turning_light_status(), target);
  }

  // .autodrive.workflow.proto.TurningLightStatus right_turning_light_status = 4;
  if (this->right_turning_light_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->right_turning_light_status(), target);
  }

  // .autodrive.workflow.proto.RainFallLevel rain_fall_level = 5;
  if (this->rain_fall_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->rain_fall_level(), target);
  }

  // .autodrive.workflow.proto.Gear gear = 6;
  if (this->gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gear(), target);
  }

  // repeated uint32 whl_pulse = 7;
  if (this->whl_pulse_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _whl_pulse_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->whl_pulse_, target);
  }

  // repeated uint32 whl_pulse_valid = 8;
  if (this->whl_pulse_valid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _whl_pulse_valid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->whl_pulse_valid_, target);
  }

  // repeated float whl_speed = 9;
  if (this->whl_speed_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _whl_speed_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->whl_speed_, target);
  }

  // uint32 yaw_rate_valid = 10;
  if (this->yaw_rate_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->yaw_rate_valid(), target);
  }

  // uint32 speed_valid = 11;
  if (this->speed_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->speed_valid(), target);
  }

  // uint32 gear_valid = 12;
  if (this->gear_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gear_valid(), target);
  }

  // repeated uint32 wl_pluse_direction = 13;
  if (this->wl_pluse_direction_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _wl_pluse_direction_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->wl_pluse_direction_, target);
  }

  // repeated uint32 tire_pressure_valid = 14;
  if (this->tire_pressure_valid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tire_pressure_valid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tire_pressure_valid_, target);
  }

  // repeated float tire_pressure = 15;
  if (this->tire_pressure_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tire_pressure_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tire_pressure_, target);
  }

  // uint32 wheel_size = 16;
  if (this->wheel_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->wheel_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.Vehicle)
  return target;
}

size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.Vehicle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 whl_pulse = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->whl_pulse_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _whl_pulse_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 whl_pulse_valid = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->whl_pulse_valid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _whl_pulse_valid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float whl_speed = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->whl_speed_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _whl_speed_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 wl_pluse_direction = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wl_pluse_direction_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _wl_pluse_direction_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 tire_pressure_valid = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tire_pressure_valid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tire_pressure_valid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float tire_pressure = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->tire_pressure_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tire_pressure_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 light_brightness_raw = 1;
  if (this->light_brightness_raw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->light_brightness_raw());
  }

  // .autodrive.workflow.proto.LightIntensityValidity lignt_validity = 2;
  if (this->lignt_validity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lignt_validity());
  }

  // .autodrive.workflow.proto.TurningLightStatus left_turning_light_status = 3;
  if (this->left_turning_light_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->left_turning_light_status());
  }

  // .autodrive.workflow.proto.TurningLightStatus right_turning_light_status = 4;
  if (this->right_turning_light_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->right_turning_light_status());
  }

  // .autodrive.workflow.proto.RainFallLevel rain_fall_level = 5;
  if (this->rain_fall_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rain_fall_level());
  }

  // .autodrive.workflow.proto.Gear gear = 6;
  if (this->gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
  }

  // uint32 yaw_rate_valid = 10;
  if (this->yaw_rate_valid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yaw_rate_valid());
  }

  // uint32 speed_valid = 11;
  if (this->speed_valid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed_valid());
  }

  // uint32 gear_valid = 12;
  if (this->gear_valid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gear_valid());
  }

  // uint32 wheel_size = 16;
  if (this->wheel_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wheel_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.Vehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.Vehicle)
    MergeFrom(*source);
  }
}

void Vehicle::MergeFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  whl_pulse_.MergeFrom(from.whl_pulse_);
  whl_pulse_valid_.MergeFrom(from.whl_pulse_valid_);
  whl_speed_.MergeFrom(from.whl_speed_);
  wl_pluse_direction_.MergeFrom(from.wl_pluse_direction_);
  tire_pressure_valid_.MergeFrom(from.tire_pressure_valid_);
  tire_pressure_.MergeFrom(from.tire_pressure_);
  if (from.light_brightness_raw() != 0) {
    set_light_brightness_raw(from.light_brightness_raw());
  }
  if (from.lignt_validity() != 0) {
    set_lignt_validity(from.lignt_validity());
  }
  if (from.left_turning_light_status() != 0) {
    set_left_turning_light_status(from.left_turning_light_status());
  }
  if (from.right_turning_light_status() != 0) {
    set_right_turning_light_status(from.right_turning_light_status());
  }
  if (from.rain_fall_level() != 0) {
    set_rain_fall_level(from.rain_fall_level());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
  if (from.yaw_rate_valid() != 0) {
    set_yaw_rate_valid(from.yaw_rate_valid());
  }
  if (from.speed_valid() != 0) {
    set_speed_valid(from.speed_valid());
  }
  if (from.gear_valid() != 0) {
    set_gear_valid(from.gear_valid());
  }
  if (from.wheel_size() != 0) {
    set_wheel_size(from.wheel_size());
  }
}

void Vehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle::IsInitialized() const {
  return true;
}

void Vehicle::Swap(Vehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle::InternalSwap(Vehicle* other) {
  using std::swap;
  whl_pulse_.InternalSwap(&other->whl_pulse_);
  whl_pulse_valid_.InternalSwap(&other->whl_pulse_valid_);
  whl_speed_.InternalSwap(&other->whl_speed_);
  wl_pluse_direction_.InternalSwap(&other->wl_pluse_direction_);
  tire_pressure_valid_.InternalSwap(&other->tire_pressure_valid_);
  tire_pressure_.InternalSwap(&other->tire_pressure_);
  swap(light_brightness_raw_, other->light_brightness_raw_);
  swap(lignt_validity_, other->lignt_validity_);
  swap(left_turning_light_status_, other->left_turning_light_status_);
  swap(right_turning_light_status_, other->right_turning_light_status_);
  swap(rain_fall_level_, other->rain_fall_level_);
  swap(gear_, other->gear_);
  swap(yaw_rate_valid_, other->yaw_rate_valid_);
  swap(speed_valid_, other->speed_valid_);
  swap(gear_valid_, other->gear_valid_);
  swap(wheel_size_, other->wheel_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle::GetMetadata() const {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odometry_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OdometryMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->position_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->stable_pitch_ = const_cast< ::autodrive::workflow::proto::StableDataPitch*>(
      ::autodrive::workflow::proto::StableDataPitch::internal_default_instance());
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->cov_translation_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->cov_eular_angle_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->position_hr_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
  ::autodrive::workflow::proto::_OdometryMsg_default_instance_._instance.get_mutable()->vehicle_info_ = const_cast< ::autodrive::workflow::proto::Vehicle*>(
      ::autodrive::workflow::proto::Vehicle::internal_default_instance());
}
void OdometryMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void OdometryMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void OdometryMsg::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void OdometryMsg::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
}
void OdometryMsg::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
}
void OdometryMsg::clear_cov_translation() {
  if (GetArenaNoVirtual() == NULL && cov_translation_ != NULL) {
    delete cov_translation_;
  }
  cov_translation_ = NULL;
}
void OdometryMsg::clear_cov_eular_angle() {
  if (GetArenaNoVirtual() == NULL && cov_eular_angle_ != NULL) {
    delete cov_eular_angle_;
  }
  cov_eular_angle_ = NULL;
}
void OdometryMsg::clear_position_hr() {
  if (GetArenaNoVirtual() == NULL && position_hr_ != NULL) {
    delete position_hr_;
  }
  position_hr_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryMsg::kHeaderFieldNumber;
const int OdometryMsg::kErrorFieldNumber;
const int OdometryMsg::kPositionFieldNumber;
const int OdometryMsg::kOrientationFieldNumber;
const int OdometryMsg::kSpeedFieldNumber;
const int OdometryMsg::kSpeedScaleFieldNumber;
const int OdometryMsg::kAccelerationFieldNumber;
const int OdometryMsg::kYawRateFieldNumber;
const int OdometryMsg::kYawRateBiasFieldNumber;
const int OdometryMsg::kWheelAngleFieldNumber;
const int OdometryMsg::kSlopeFieldNumber;
const int OdometryMsg::kStablePitchFieldNumber;
const int OdometryMsg::kSlopeConfidenceFieldNumber;
const int OdometryMsg::kDiagnosticCodeFieldNumber;
const int OdometryMsg::kCovTranslationFieldNumber;
const int OdometryMsg::kCovEularAngleFieldNumber;
const int OdometryMsg::kPositionHrFieldNumber;
const int OdometryMsg::kSourceFieldNumber;
const int OdometryMsg::kIsSlopeAvailableFieldNumber;
const int OdometryMsg::kTypeFieldNumber;
const int OdometryMsg::kStateFieldNumber;
const int OdometryMsg::kErrorCodeFieldNumber;
const int OdometryMsg::kYawRateBiasEstimateStateFieldNumber;
const int OdometryMsg::kVehicleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryMsg::OdometryMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_odometry_5fdata_2eproto::InitDefaultsOdometryMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.OdometryMsg)
}
OdometryMsg::OdometryMsg(const OdometryMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::autodrive::workflow::proto::Vector3f(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::autodrive::workflow::proto::Vector3f(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::autodrive::workflow::proto::Vector2f(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_stable_pitch()) {
    stable_pitch_ = new ::autodrive::workflow::proto::StableDataPitch(*from.stable_pitch_);
  } else {
    stable_pitch_ = NULL;
  }
  if (from.has_cov_translation()) {
    cov_translation_ = new ::autodrive::workflow::proto::Vector3d(*from.cov_translation_);
  } else {
    cov_translation_ = NULL;
  }
  if (from.has_cov_eular_angle()) {
    cov_eular_angle_ = new ::autodrive::workflow::proto::Vector3d(*from.cov_eular_angle_);
  } else {
    cov_eular_angle_ = NULL;
  }
  if (from.has_position_hr()) {
    position_hr_ = new ::autodrive::workflow::proto::Vector3d(*from.position_hr_);
  } else {
    position_hr_ = NULL;
  }
  if (from.has_vehicle_info()) {
    vehicle_info_ = new ::autodrive::workflow::proto::Vehicle(*from.vehicle_info_);
  } else {
    vehicle_info_ = NULL;
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_bias_estimate_state_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(yaw_rate_bias_estimate_state_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.OdometryMsg)
}

void OdometryMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_bias_estimate_state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(yaw_rate_bias_estimate_state_));
  _cached_size_ = 0;
}

OdometryMsg::~OdometryMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.OdometryMsg)
  SharedDtor();
}

void OdometryMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete stable_pitch_;
  if (this != internal_default_instance()) delete cov_translation_;
  if (this != internal_default_instance()) delete cov_eular_angle_;
  if (this != internal_default_instance()) delete position_hr_;
  if (this != internal_default_instance()) delete vehicle_info_;
}

void OdometryMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryMsg::descriptor() {
  ::protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odometry_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OdometryMsg& OdometryMsg::default_instance() {
  ::protobuf_odometry_5fdata_2eproto::InitDefaultsOdometryMsg();
  return *internal_default_instance();
}

OdometryMsg* OdometryMsg::New(::google::protobuf::Arena* arena) const {
  OdometryMsg* n = new OdometryMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OdometryMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.OdometryMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && stable_pitch_ != NULL) {
    delete stable_pitch_;
  }
  stable_pitch_ = NULL;
  if (GetArenaNoVirtual() == NULL && cov_translation_ != NULL) {
    delete cov_translation_;
  }
  cov_translation_ = NULL;
  if (GetArenaNoVirtual() == NULL && cov_eular_angle_ != NULL) {
    delete cov_eular_angle_;
  }
  cov_eular_angle_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_hr_ != NULL) {
    delete position_hr_;
  }
  position_hr_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_info_ != NULL) {
    delete vehicle_info_;
  }
  vehicle_info_ = NULL;
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_bias_estimate_state_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(yaw_rate_bias_estimate_state_));
  _internal_metadata_.Clear();
}

bool OdometryMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.OdometryMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_scale = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f acceleration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate_bias = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheel_angle = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float slope = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.StableDataPitch stable_pitch = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stable_pitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float slope_confidence = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slope_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 diagnostic_code = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diagnostic_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d cov_translation = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cov_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d cov_eular_angle = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cov_eular_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d position_hr = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_hr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_slope_available = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_slope_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.OdometryDataType type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::autodrive::workflow::proto::OdometryDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.OdometryDataState state = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::autodrive::workflow::proto::OdometryDataState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.OdometryDataErrorCode error_code = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::autodrive::workflow::proto::OdometryDataErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.OdometryDataYawRateBiasEstimateState yaw_rate_bias_estimate_state = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_yaw_rate_bias_estimate_state(static_cast< ::autodrive::workflow::proto::OdometryDataYawRateBiasEstimateState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vehicle vehicle_info = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.OdometryMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.OdometryMsg)
  return false;
#undef DO_
}

void OdometryMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.OdometryMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.Vector3f position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // .autodrive.workflow.proto.Vector3f orientation = 4;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->orientation_, output);
  }

  // float speed = 5;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // float speed_scale = 6;
  if (this->speed_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed_scale(), output);
  }

  // .autodrive.workflow.proto.Vector2f acceleration = 7;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->acceleration_, output);
  }

  // float yaw_rate = 8;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->yaw_rate(), output);
  }

  // float yaw_rate_bias = 9;
  if (this->yaw_rate_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->yaw_rate_bias(), output);
  }

  // float wheel_angle = 10;
  if (this->wheel_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->wheel_angle(), output);
  }

  // float slope = 11;
  if (this->slope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->slope(), output);
  }

  // .autodrive.workflow.proto.StableDataPitch stable_pitch = 12;
  if (this->has_stable_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->stable_pitch_, output);
  }

  // float slope_confidence = 13;
  if (this->slope_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->slope_confidence(), output);
  }

  // uint32 diagnostic_code = 14;
  if (this->diagnostic_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->diagnostic_code(), output);
  }

  // .autodrive.workflow.proto.Vector3d cov_translation = 15;
  if (this->has_cov_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->cov_translation_, output);
  }

  // .autodrive.workflow.proto.Vector3d cov_eular_angle = 16;
  if (this->has_cov_eular_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->cov_eular_angle_, output);
  }

  // .autodrive.workflow.proto.Vector3d position_hr = 17;
  if (this->has_position_hr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->position_hr_, output);
  }

  // uint32 source = 18;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->source(), output);
  }

  // bool is_slope_available = 19;
  if (this->is_slope_available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_slope_available(), output);
  }

  // .autodrive.workflow.proto.OdometryDataType type = 20;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // .autodrive.workflow.proto.OdometryDataState state = 21;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->state(), output);
  }

  // .autodrive.workflow.proto.OdometryDataErrorCode error_code = 22;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->error_code(), output);
  }

  // .autodrive.workflow.proto.OdometryDataYawRateBiasEstimateState yaw_rate_bias_estimate_state = 23;
  if (this->yaw_rate_bias_estimate_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->yaw_rate_bias_estimate_state(), output);
  }

  // .autodrive.workflow.proto.Vehicle vehicle_info = 24;
  if (this->has_vehicle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->vehicle_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.OdometryMsg)
}

::google::protobuf::uint8* OdometryMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.OdometryMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->position_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f orientation = 4;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->orientation_, deterministic, target);
  }

  // float speed = 5;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // float speed_scale = 6;
  if (this->speed_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed_scale(), target);
  }

  // .autodrive.workflow.proto.Vector2f acceleration = 7;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->acceleration_, deterministic, target);
  }

  // float yaw_rate = 8;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->yaw_rate(), target);
  }

  // float yaw_rate_bias = 9;
  if (this->yaw_rate_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->yaw_rate_bias(), target);
  }

  // float wheel_angle = 10;
  if (this->wheel_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->wheel_angle(), target);
  }

  // float slope = 11;
  if (this->slope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->slope(), target);
  }

  // .autodrive.workflow.proto.StableDataPitch stable_pitch = 12;
  if (this->has_stable_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->stable_pitch_, deterministic, target);
  }

  // float slope_confidence = 13;
  if (this->slope_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->slope_confidence(), target);
  }

  // uint32 diagnostic_code = 14;
  if (this->diagnostic_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->diagnostic_code(), target);
  }

  // .autodrive.workflow.proto.Vector3d cov_translation = 15;
  if (this->has_cov_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *this->cov_translation_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3d cov_eular_angle = 16;
  if (this->has_cov_eular_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->cov_eular_angle_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3d position_hr = 17;
  if (this->has_position_hr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, *this->position_hr_, deterministic, target);
  }

  // uint32 source = 18;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->source(), target);
  }

  // bool is_slope_available = 19;
  if (this->is_slope_available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_slope_available(), target);
  }

  // .autodrive.workflow.proto.OdometryDataType type = 20;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->type(), target);
  }

  // .autodrive.workflow.proto.OdometryDataState state = 21;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->state(), target);
  }

  // .autodrive.workflow.proto.OdometryDataErrorCode error_code = 22;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->error_code(), target);
  }

  // .autodrive.workflow.proto.OdometryDataYawRateBiasEstimateState yaw_rate_bias_estimate_state = 23;
  if (this->yaw_rate_bias_estimate_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->yaw_rate_bias_estimate_state(), target);
  }

  // .autodrive.workflow.proto.Vehicle vehicle_info = 24;
  if (this->has_vehicle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, *this->vehicle_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.OdometryMsg)
  return target;
}

size_t OdometryMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.OdometryMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.Vector3f position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_);
  }

  // .autodrive.workflow.proto.Vector3f orientation = 4;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->orientation_);
  }

  // .autodrive.workflow.proto.Vector2f acceleration = 7;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acceleration_);
  }

  // .autodrive.workflow.proto.StableDataPitch stable_pitch = 12;
  if (this->has_stable_pitch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->stable_pitch_);
  }

  // .autodrive.workflow.proto.Vector3d cov_translation = 15;
  if (this->has_cov_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cov_translation_);
  }

  // .autodrive.workflow.proto.Vector3d cov_eular_angle = 16;
  if (this->has_cov_eular_angle()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cov_eular_angle_);
  }

  // .autodrive.workflow.proto.Vector3d position_hr = 17;
  if (this->has_position_hr()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_hr_);
  }

  // .autodrive.workflow.proto.Vehicle vehicle_info = 24;
  if (this->has_vehicle_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_info_);
  }

  // float speed = 5;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // float speed_scale = 6;
  if (this->speed_scale() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate = 8;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate_bias = 9;
  if (this->yaw_rate_bias() != 0) {
    total_size += 1 + 4;
  }

  // float wheel_angle = 10;
  if (this->wheel_angle() != 0) {
    total_size += 1 + 4;
  }

  // float slope = 11;
  if (this->slope() != 0) {
    total_size += 1 + 4;
  }

  // float slope_confidence = 13;
  if (this->slope_confidence() != 0) {
    total_size += 1 + 4;
  }

  // uint32 diagnostic_code = 14;
  if (this->diagnostic_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->diagnostic_code());
  }

  // uint32 source = 18;
  if (this->source() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());
  }

  // bool is_slope_available = 19;
  if (this->is_slope_available() != 0) {
    total_size += 2 + 1;
  }

  // .autodrive.workflow.proto.OdometryDataType type = 20;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .autodrive.workflow.proto.OdometryDataState state = 21;
  if (this->state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // .autodrive.workflow.proto.OdometryDataErrorCode error_code = 22;
  if (this->error_code() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // .autodrive.workflow.proto.OdometryDataYawRateBiasEstimateState yaw_rate_bias_estimate_state = 23;
  if (this->yaw_rate_bias_estimate_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->yaw_rate_bias_estimate_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.OdometryMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.OdometryMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.OdometryMsg)
    MergeFrom(*source);
  }
}

void OdometryMsg::MergeFrom(const OdometryMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.OdometryMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_position()) {
    mutable_position()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.orientation());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.acceleration());
  }
  if (from.has_stable_pitch()) {
    mutable_stable_pitch()->::autodrive::workflow::proto::StableDataPitch::MergeFrom(from.stable_pitch());
  }
  if (from.has_cov_translation()) {
    mutable_cov_translation()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.cov_translation());
  }
  if (from.has_cov_eular_angle()) {
    mutable_cov_eular_angle()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.cov_eular_angle());
  }
  if (from.has_position_hr()) {
    mutable_position_hr()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.position_hr());
  }
  if (from.has_vehicle_info()) {
    mutable_vehicle_info()->::autodrive::workflow::proto::Vehicle::MergeFrom(from.vehicle_info());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.speed_scale() != 0) {
    set_speed_scale(from.speed_scale());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
  if (from.yaw_rate_bias() != 0) {
    set_yaw_rate_bias(from.yaw_rate_bias());
  }
  if (from.wheel_angle() != 0) {
    set_wheel_angle(from.wheel_angle());
  }
  if (from.slope() != 0) {
    set_slope(from.slope());
  }
  if (from.slope_confidence() != 0) {
    set_slope_confidence(from.slope_confidence());
  }
  if (from.diagnostic_code() != 0) {
    set_diagnostic_code(from.diagnostic_code());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.is_slope_available() != 0) {
    set_is_slope_available(from.is_slope_available());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.yaw_rate_bias_estimate_state() != 0) {
    set_yaw_rate_bias_estimate_state(from.yaw_rate_bias_estimate_state());
  }
}

void OdometryMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.OdometryMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryMsg::CopyFrom(const OdometryMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.OdometryMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryMsg::IsInitialized() const {
  return true;
}

void OdometryMsg::Swap(OdometryMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryMsg::InternalSwap(OdometryMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(acceleration_, other->acceleration_);
  swap(stable_pitch_, other->stable_pitch_);
  swap(cov_translation_, other->cov_translation_);
  swap(cov_eular_angle_, other->cov_eular_angle_);
  swap(position_hr_, other->position_hr_);
  swap(vehicle_info_, other->vehicle_info_);
  swap(speed_, other->speed_);
  swap(speed_scale_, other->speed_scale_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(yaw_rate_bias_, other->yaw_rate_bias_);
  swap(wheel_angle_, other->wheel_angle_);
  swap(slope_, other->slope_);
  swap(slope_confidence_, other->slope_confidence_);
  swap(diagnostic_code_, other->diagnostic_code_);
  swap(source_, other->source_);
  swap(is_slope_available_, other->is_slope_available_);
  swap(type_, other->type_);
  swap(state_, other->state_);
  swap(error_code_, other->error_code_);
  swap(yaw_rate_bias_estimate_state_, other->yaw_rate_bias_estimate_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OdometryMsg::GetMetadata() const {
  protobuf_odometry_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_odometry_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
