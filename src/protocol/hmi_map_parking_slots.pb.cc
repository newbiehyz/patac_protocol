// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_map_parking_slots.proto

#include "hmi_map_parking_slots.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class MapParkingSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapParkingSlot>
      _instance;
} _MapParkingSlot_default_instance_;
class MapParkingSlotsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapParkingSlots>
      _instance;
} _MapParkingSlots_default_instance_;
class MapParkingSlotsMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapParkingSlotsMsg>
      _instance;
} _MapParkingSlotsMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_hmi_5fmap_5fparking_5fslots_2eproto {
void InitDefaultsMapParkingSlotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::autodrive::workflow::proto::_MapParkingSlot_default_instance_;
    new (ptr) ::autodrive::workflow::proto::MapParkingSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::MapParkingSlot::InitAsDefaultInstance();
}

void InitDefaultsMapParkingSlot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapParkingSlotImpl);
}

void InitDefaultsMapParkingSlotsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlot();
  {
    void* ptr = &::autodrive::workflow::proto::_MapParkingSlots_default_instance_;
    new (ptr) ::autodrive::workflow::proto::MapParkingSlots();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::MapParkingSlots::InitAsDefaultInstance();
}

void InitDefaultsMapParkingSlots() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapParkingSlotsImpl);
}

void InitDefaultsMapParkingSlotsMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlots();
  {
    void* ptr = &::autodrive::workflow::proto::_MapParkingSlotsMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::MapParkingSlotsMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::MapParkingSlotsMsg::InitAsDefaultInstance();
}

void InitDefaultsMapParkingSlotsMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapParkingSlotsMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlot, slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlot, slot_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlot, slot_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlot, slot_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlots, all_map_parking_slots_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlotsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlotsMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlotsMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapParkingSlotsMsg, map_parking_slots_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::MapParkingSlot)},
  { 9, -1, sizeof(::autodrive::workflow::proto::MapParkingSlots)},
  { 15, -1, sizeof(::autodrive::workflow::proto::MapParkingSlotsMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_MapParkingSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_MapParkingSlots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_MapParkingSlotsMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hmi_map_parking_slots.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033hmi_map_parking_slots.proto\022\030autodrive"
      ".workflow.proto\032\014common.proto\032\013basic.pro"
      "to\"\201\001\n\016MapParkingSlot\022\017\n\007slot_id\030\001 \001(\005\022\022"
      "\n\nslot_state\030\002 \001(\005\022\021\n\tslot_type\030\003 \001(\005\0227\n"
      "\013slot_points\030\004 \003(\0132\".autodrive.workflow."
      "proto.Vector3f\"Z\n\017MapParkingSlots\022G\n\025all"
      "_map_parking_slots\030\001 \003(\0132(.autodrive.wor"
      "kflow.proto.MapParkingSlot\"\277\001\n\022MapParkin"
      "gSlotsMsg\0223\n\006header\030\001 \001(\0132#.autodrive.wo"
      "rkflow.proto.MsgHeader\022.\n\005error\030\002 \001(\0132\037."
      "autodrive.workflow.proto.Error\022D\n\021map_pa"
      "rking_slots\030\003 \001(\0132).autodrive.workflow.p"
      "roto.MapParkingSlotsb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hmi_map_parking_slots.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_basic_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_hmi_5fmap_5fparking_5fslots_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void MapParkingSlot::InitAsDefaultInstance() {
}
void MapParkingSlot::clear_slot_points() {
  slot_points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapParkingSlot::kSlotIdFieldNumber;
const int MapParkingSlot::kSlotStateFieldNumber;
const int MapParkingSlot::kSlotTypeFieldNumber;
const int MapParkingSlot::kSlotPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapParkingSlot::MapParkingSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.MapParkingSlot)
}
MapParkingSlot::MapParkingSlot(const MapParkingSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slot_points_(from.slot_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slot_id_, &from.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_type_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(slot_type_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.MapParkingSlot)
}

void MapParkingSlot::SharedCtor() {
  ::memset(&slot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_type_) -
      reinterpret_cast<char*>(&slot_id_)) + sizeof(slot_type_));
  _cached_size_ = 0;
}

MapParkingSlot::~MapParkingSlot() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.MapParkingSlot)
  SharedDtor();
}

void MapParkingSlot::SharedDtor() {
}

void MapParkingSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapParkingSlot::descriptor() {
  ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapParkingSlot& MapParkingSlot::default_instance() {
  ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlot();
  return *internal_default_instance();
}

MapParkingSlot* MapParkingSlot::New(::google::protobuf::Arena* arena) const {
  MapParkingSlot* n = new MapParkingSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapParkingSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.MapParkingSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_points_.Clear();
  ::memset(&slot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_type_) -
      reinterpret_cast<char*>(&slot_id_)) + sizeof(slot_type_));
  _internal_metadata_.Clear();
}

bool MapParkingSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.MapParkingSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 slot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slot_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slot_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.Vector3f slot_points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_slot_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.MapParkingSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.MapParkingSlot)
  return false;
#undef DO_
}

void MapParkingSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.MapParkingSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slot_id = 1;
  if (this->slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_id(), output);
  }

  // int32 slot_state = 2;
  if (this->slot_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_state(), output);
  }

  // int32 slot_type = 3;
  if (this->slot_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_type(), output);
  }

  // repeated .autodrive.workflow.proto.Vector3f slot_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slot_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->slot_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.MapParkingSlot)
}

::google::protobuf::uint8* MapParkingSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.MapParkingSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 slot_id = 1;
  if (this->slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_id(), target);
  }

  // int32 slot_state = 2;
  if (this->slot_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_state(), target);
  }

  // int32 slot_type = 3;
  if (this->slot_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_type(), target);
  }

  // repeated .autodrive.workflow.proto.Vector3f slot_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slot_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->slot_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.MapParkingSlot)
  return target;
}

size_t MapParkingSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.MapParkingSlot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.Vector3f slot_points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->slot_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->slot_points(static_cast<int>(i)));
    }
  }

  // int32 slot_id = 1;
  if (this->slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_id());
  }

  // int32 slot_state = 2;
  if (this->slot_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_state());
  }

  // int32 slot_type = 3;
  if (this->slot_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapParkingSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.MapParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const MapParkingSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapParkingSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.MapParkingSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.MapParkingSlot)
    MergeFrom(*source);
  }
}

void MapParkingSlot::MergeFrom(const MapParkingSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.MapParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slot_points_.MergeFrom(from.slot_points_);
  if (from.slot_id() != 0) {
    set_slot_id(from.slot_id());
  }
  if (from.slot_state() != 0) {
    set_slot_state(from.slot_state());
  }
  if (from.slot_type() != 0) {
    set_slot_type(from.slot_type());
  }
}

void MapParkingSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.MapParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapParkingSlot::CopyFrom(const MapParkingSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.MapParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapParkingSlot::IsInitialized() const {
  return true;
}

void MapParkingSlot::Swap(MapParkingSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapParkingSlot::InternalSwap(MapParkingSlot* other) {
  using std::swap;
  slot_points_.InternalSwap(&other->slot_points_);
  swap(slot_id_, other->slot_id_);
  swap(slot_state_, other->slot_state_);
  swap(slot_type_, other->slot_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapParkingSlot::GetMetadata() const {
  protobuf_hmi_5fmap_5fparking_5fslots_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapParkingSlots::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapParkingSlots::kAllMapParkingSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapParkingSlots::MapParkingSlots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlots();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.MapParkingSlots)
}
MapParkingSlots::MapParkingSlots(const MapParkingSlots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      all_map_parking_slots_(from.all_map_parking_slots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.MapParkingSlots)
}

void MapParkingSlots::SharedCtor() {
  _cached_size_ = 0;
}

MapParkingSlots::~MapParkingSlots() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.MapParkingSlots)
  SharedDtor();
}

void MapParkingSlots::SharedDtor() {
}

void MapParkingSlots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapParkingSlots::descriptor() {
  ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapParkingSlots& MapParkingSlots::default_instance() {
  ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlots();
  return *internal_default_instance();
}

MapParkingSlots* MapParkingSlots::New(::google::protobuf::Arena* arena) const {
  MapParkingSlots* n = new MapParkingSlots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapParkingSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.MapParkingSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_map_parking_slots_.Clear();
  _internal_metadata_.Clear();
}

bool MapParkingSlots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.MapParkingSlots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autodrive.workflow.proto.MapParkingSlot all_map_parking_slots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_all_map_parking_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.MapParkingSlots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.MapParkingSlots)
  return false;
#undef DO_
}

void MapParkingSlots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.MapParkingSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.MapParkingSlot all_map_parking_slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_map_parking_slots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_map_parking_slots(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.MapParkingSlots)
}

::google::protobuf::uint8* MapParkingSlots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.MapParkingSlots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autodrive.workflow.proto.MapParkingSlot all_map_parking_slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->all_map_parking_slots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->all_map_parking_slots(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.MapParkingSlots)
  return target;
}

size_t MapParkingSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.MapParkingSlots)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.MapParkingSlot all_map_parking_slots = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->all_map_parking_slots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->all_map_parking_slots(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapParkingSlots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.MapParkingSlots)
  GOOGLE_DCHECK_NE(&from, this);
  const MapParkingSlots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapParkingSlots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.MapParkingSlots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.MapParkingSlots)
    MergeFrom(*source);
  }
}

void MapParkingSlots::MergeFrom(const MapParkingSlots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.MapParkingSlots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_map_parking_slots_.MergeFrom(from.all_map_parking_slots_);
}

void MapParkingSlots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.MapParkingSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapParkingSlots::CopyFrom(const MapParkingSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.MapParkingSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapParkingSlots::IsInitialized() const {
  return true;
}

void MapParkingSlots::Swap(MapParkingSlots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapParkingSlots::InternalSwap(MapParkingSlots* other) {
  using std::swap;
  all_map_parking_slots_.InternalSwap(&other->all_map_parking_slots_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapParkingSlots::GetMetadata() const {
  protobuf_hmi_5fmap_5fparking_5fslots_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapParkingSlotsMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_MapParkingSlotsMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_MapParkingSlotsMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_MapParkingSlotsMsg_default_instance_._instance.get_mutable()->map_parking_slots_ = const_cast< ::autodrive::workflow::proto::MapParkingSlots*>(
      ::autodrive::workflow::proto::MapParkingSlots::internal_default_instance());
}
void MapParkingSlotsMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void MapParkingSlotsMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapParkingSlotsMsg::kHeaderFieldNumber;
const int MapParkingSlotsMsg::kErrorFieldNumber;
const int MapParkingSlotsMsg::kMapParkingSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapParkingSlotsMsg::MapParkingSlotsMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlotsMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.MapParkingSlotsMsg)
}
MapParkingSlotsMsg::MapParkingSlotsMsg(const MapParkingSlotsMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_map_parking_slots()) {
    map_parking_slots_ = new ::autodrive::workflow::proto::MapParkingSlots(*from.map_parking_slots_);
  } else {
    map_parking_slots_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.MapParkingSlotsMsg)
}

void MapParkingSlotsMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_parking_slots_) -
      reinterpret_cast<char*>(&header_)) + sizeof(map_parking_slots_));
  _cached_size_ = 0;
}

MapParkingSlotsMsg::~MapParkingSlotsMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.MapParkingSlotsMsg)
  SharedDtor();
}

void MapParkingSlotsMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete map_parking_slots_;
}

void MapParkingSlotsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapParkingSlotsMsg::descriptor() {
  ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapParkingSlotsMsg& MapParkingSlotsMsg::default_instance() {
  ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlotsMsg();
  return *internal_default_instance();
}

MapParkingSlotsMsg* MapParkingSlotsMsg::New(::google::protobuf::Arena* arena) const {
  MapParkingSlotsMsg* n = new MapParkingSlotsMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapParkingSlotsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.MapParkingSlotsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_parking_slots_ != NULL) {
    delete map_parking_slots_;
  }
  map_parking_slots_ = NULL;
  _internal_metadata_.Clear();
}

bool MapParkingSlotsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.MapParkingSlotsMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MapParkingSlots map_parking_slots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_parking_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.MapParkingSlotsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.MapParkingSlotsMsg)
  return false;
#undef DO_
}

void MapParkingSlotsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.MapParkingSlotsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.MapParkingSlots map_parking_slots = 3;
  if (this->has_map_parking_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->map_parking_slots_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.MapParkingSlotsMsg)
}

::google::protobuf::uint8* MapParkingSlotsMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.MapParkingSlotsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.MapParkingSlots map_parking_slots = 3;
  if (this->has_map_parking_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->map_parking_slots_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.MapParkingSlotsMsg)
  return target;
}

size_t MapParkingSlotsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.MapParkingSlotsMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.MapParkingSlots map_parking_slots = 3;
  if (this->has_map_parking_slots()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->map_parking_slots_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapParkingSlotsMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.MapParkingSlotsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MapParkingSlotsMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapParkingSlotsMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.MapParkingSlotsMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.MapParkingSlotsMsg)
    MergeFrom(*source);
  }
}

void MapParkingSlotsMsg::MergeFrom(const MapParkingSlotsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.MapParkingSlotsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_map_parking_slots()) {
    mutable_map_parking_slots()->::autodrive::workflow::proto::MapParkingSlots::MergeFrom(from.map_parking_slots());
  }
}

void MapParkingSlotsMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.MapParkingSlotsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapParkingSlotsMsg::CopyFrom(const MapParkingSlotsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.MapParkingSlotsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapParkingSlotsMsg::IsInitialized() const {
  return true;
}

void MapParkingSlotsMsg::Swap(MapParkingSlotsMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapParkingSlotsMsg::InternalSwap(MapParkingSlotsMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(map_parking_slots_, other->map_parking_slots_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapParkingSlotsMsg::GetMetadata() const {
  protobuf_hmi_5fmap_5fparking_5fslots_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
