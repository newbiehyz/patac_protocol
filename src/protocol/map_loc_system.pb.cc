// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_loc_system.proto

#include "map_loc_system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class MapLocSystemMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapLocSystemMsg>
      _instance;
} _MapLocSystemMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_map_5floc_5fsystem_2eproto {
void InitDefaultsMapLocSystemMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_system_5ftype_5fbase_2eproto::InitDefaultsApaStateInfo();
  {
    void* ptr = &::autodrive::workflow::proto::_MapLocSystemMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::MapLocSystemMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::MapLocSystemMsg::InitAsDefaultInstance();
}

void InitDefaultsMapLocSystemMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapLocSystemMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapLocSystemMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapLocSystemMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapLocSystemMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapLocSystemMsg, avp_lp_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapLocSystemMsg, control_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapLocSystemMsg, target_parking_slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapLocSystemMsg, delete_map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapLocSystemMsg, select_map_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::MapLocSystemMsg, apa_states_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::MapLocSystemMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_MapLocSystemMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "map_loc_system.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024map_loc_system.proto\022\030autodrive.workfl"
      "ow.proto\032\014common.proto\032\026system_type_base"
      ".proto\"\370\002\n\017MapLocSystemMsg\0223\n\006header\030\001 \001"
      "(\0132#.autodrive.workflow.proto.MsgHeader\022"
      ".\n\005error\030\002 \001(\0132\037.autodrive.workflow.prot"
      "o.Error\022;\n\014avp_lp_state\030\003 \001(\0162%.autodriv"
      "e.workflow.proto.AVP_LPState\0229\n\013control_"
      "cmd\030\004 \001(\0162$.autodrive.workflow.proto.Con"
      "trolCmd\022\036\n\026target_parking_slot_id\030\005 \001(\r\022"
      "\025\n\rdelete_map_id\030\006 \001(\r\022\025\n\rselect_map_id\030"
      "\007 \001(\r\022:\n\napa_states\030\010 \001(\0132&.autodrive.wo"
      "rkflow.proto.ApaStateInfo*\267\001\n\013AVP_LPStat"
      "e\022\n\n\006AVPOff\020\000\022\n\n\006kAbort\020\001\022\014\n\010kStandby\020\002\022"
      "\020\n\014kMapLearning\020\003\022\024\n\020kParkinPreActive\020\004\022"
      "\r\n\tkCruising\020\005\022\022\n\016kParkInProcess\020\006\022\014\n\010kS"
      "uspend\020\007\022\025\n\021kFunctionComplete\020\010\022\022\n\016kMapM"
      "anageMent\020\t*\274\001\n\nControlCmd\022\014\n\010kDefault\020\000"
      "\022\024\n\020kGetAllMapHeader\020\001\022\022\n\016kGetOneMapInfo"
      "\020\002\022\021\n\rkDeleteOneMap\020\003\022\021\n\rkDeleteAllMap\020\004"
      "\022\032\n\026kSendTargetParkingSlot\020\005\022\026\n\022kFinishM"
      "apLearning\020\006\022\020\n\014kCruisingEnd\020\007\022\n\n\006kReset"
      "\020\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 850);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_loc_system.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_system_5ftype_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5floc_5fsystem_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* AVP_LPState_descriptor() {
  protobuf_map_5floc_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5floc_5fsystem_2eproto::file_level_enum_descriptors[0];
}
bool AVP_LPState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ControlCmd_descriptor() {
  protobuf_map_5floc_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5floc_5fsystem_2eproto::file_level_enum_descriptors[1];
}
bool ControlCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MapLocSystemMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_MapLocSystemMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_MapLocSystemMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_MapLocSystemMsg_default_instance_._instance.get_mutable()->apa_states_ = const_cast< ::autodrive::workflow::proto::ApaStateInfo*>(
      ::autodrive::workflow::proto::ApaStateInfo::internal_default_instance());
}
void MapLocSystemMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void MapLocSystemMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void MapLocSystemMsg::clear_apa_states() {
  if (GetArenaNoVirtual() == NULL && apa_states_ != NULL) {
    delete apa_states_;
  }
  apa_states_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapLocSystemMsg::kHeaderFieldNumber;
const int MapLocSystemMsg::kErrorFieldNumber;
const int MapLocSystemMsg::kAvpLpStateFieldNumber;
const int MapLocSystemMsg::kControlCmdFieldNumber;
const int MapLocSystemMsg::kTargetParkingSlotIdFieldNumber;
const int MapLocSystemMsg::kDeleteMapIdFieldNumber;
const int MapLocSystemMsg::kSelectMapIdFieldNumber;
const int MapLocSystemMsg::kApaStatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapLocSystemMsg::MapLocSystemMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5floc_5fsystem_2eproto::InitDefaultsMapLocSystemMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.MapLocSystemMsg)
}
MapLocSystemMsg::MapLocSystemMsg(const MapLocSystemMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_apa_states()) {
    apa_states_ = new ::autodrive::workflow::proto::ApaStateInfo(*from.apa_states_);
  } else {
    apa_states_ = NULL;
  }
  ::memcpy(&avp_lp_state_, &from.avp_lp_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&select_map_id_) -
    reinterpret_cast<char*>(&avp_lp_state_)) + sizeof(select_map_id_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.MapLocSystemMsg)
}

void MapLocSystemMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&select_map_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(select_map_id_));
  _cached_size_ = 0;
}

MapLocSystemMsg::~MapLocSystemMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.MapLocSystemMsg)
  SharedDtor();
}

void MapLocSystemMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete apa_states_;
}

void MapLocSystemMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapLocSystemMsg::descriptor() {
  ::protobuf_map_5floc_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5floc_5fsystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapLocSystemMsg& MapLocSystemMsg::default_instance() {
  ::protobuf_map_5floc_5fsystem_2eproto::InitDefaultsMapLocSystemMsg();
  return *internal_default_instance();
}

MapLocSystemMsg* MapLocSystemMsg::New(::google::protobuf::Arena* arena) const {
  MapLocSystemMsg* n = new MapLocSystemMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapLocSystemMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.MapLocSystemMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && apa_states_ != NULL) {
    delete apa_states_;
  }
  apa_states_ = NULL;
  ::memset(&avp_lp_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&select_map_id_) -
      reinterpret_cast<char*>(&avp_lp_state_)) + sizeof(select_map_id_));
  _internal_metadata_.Clear();
}

bool MapLocSystemMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.MapLocSystemMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.AVP_LPState avp_lp_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_avp_lp_state(static_cast< ::autodrive::workflow::proto::AVP_LPState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ControlCmd control_cmd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_control_cmd(static_cast< ::autodrive::workflow::proto::ControlCmd >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_parking_slot_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_parking_slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 delete_map_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delete_map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 select_map_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &select_map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ApaStateInfo apa_states = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apa_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.MapLocSystemMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.MapLocSystemMsg)
  return false;
#undef DO_
}

void MapLocSystemMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.MapLocSystemMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.AVP_LPState avp_lp_state = 3;
  if (this->avp_lp_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->avp_lp_state(), output);
  }

  // .autodrive.workflow.proto.ControlCmd control_cmd = 4;
  if (this->control_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->control_cmd(), output);
  }

  // uint32 target_parking_slot_id = 5;
  if (this->target_parking_slot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_parking_slot_id(), output);
  }

  // uint32 delete_map_id = 6;
  if (this->delete_map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delete_map_id(), output);
  }

  // uint32 select_map_id = 7;
  if (this->select_map_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->select_map_id(), output);
  }

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 8;
  if (this->has_apa_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->apa_states_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.MapLocSystemMsg)
}

::google::protobuf::uint8* MapLocSystemMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.MapLocSystemMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.AVP_LPState avp_lp_state = 3;
  if (this->avp_lp_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->avp_lp_state(), target);
  }

  // .autodrive.workflow.proto.ControlCmd control_cmd = 4;
  if (this->control_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->control_cmd(), target);
  }

  // uint32 target_parking_slot_id = 5;
  if (this->target_parking_slot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_parking_slot_id(), target);
  }

  // uint32 delete_map_id = 6;
  if (this->delete_map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delete_map_id(), target);
  }

  // uint32 select_map_id = 7;
  if (this->select_map_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->select_map_id(), target);
  }

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 8;
  if (this->has_apa_states()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->apa_states_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.MapLocSystemMsg)
  return target;
}

size_t MapLocSystemMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.MapLocSystemMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 8;
  if (this->has_apa_states()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->apa_states_);
  }

  // .autodrive.workflow.proto.AVP_LPState avp_lp_state = 3;
  if (this->avp_lp_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->avp_lp_state());
  }

  // .autodrive.workflow.proto.ControlCmd control_cmd = 4;
  if (this->control_cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->control_cmd());
  }

  // uint32 target_parking_slot_id = 5;
  if (this->target_parking_slot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_parking_slot_id());
  }

  // uint32 delete_map_id = 6;
  if (this->delete_map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delete_map_id());
  }

  // uint32 select_map_id = 7;
  if (this->select_map_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->select_map_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapLocSystemMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.MapLocSystemMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MapLocSystemMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapLocSystemMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.MapLocSystemMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.MapLocSystemMsg)
    MergeFrom(*source);
  }
}

void MapLocSystemMsg::MergeFrom(const MapLocSystemMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.MapLocSystemMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_apa_states()) {
    mutable_apa_states()->::autodrive::workflow::proto::ApaStateInfo::MergeFrom(from.apa_states());
  }
  if (from.avp_lp_state() != 0) {
    set_avp_lp_state(from.avp_lp_state());
  }
  if (from.control_cmd() != 0) {
    set_control_cmd(from.control_cmd());
  }
  if (from.target_parking_slot_id() != 0) {
    set_target_parking_slot_id(from.target_parking_slot_id());
  }
  if (from.delete_map_id() != 0) {
    set_delete_map_id(from.delete_map_id());
  }
  if (from.select_map_id() != 0) {
    set_select_map_id(from.select_map_id());
  }
}

void MapLocSystemMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.MapLocSystemMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLocSystemMsg::CopyFrom(const MapLocSystemMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.MapLocSystemMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLocSystemMsg::IsInitialized() const {
  return true;
}

void MapLocSystemMsg::Swap(MapLocSystemMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapLocSystemMsg::InternalSwap(MapLocSystemMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(apa_states_, other->apa_states_);
  swap(avp_lp_state_, other->avp_lp_state_);
  swap(control_cmd_, other->control_cmd_);
  swap(target_parking_slot_id_, other->target_parking_slot_id_);
  swap(delete_map_id_, other->delete_map_id_);
  swap(select_map_id_, other->select_map_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapLocSystemMsg::GetMetadata() const {
  protobuf_map_5floc_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5floc_5fsystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
