// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localization.proto

#include "localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class SpLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpLocation>
      _instance;
} _SpLocation_default_instance_;
class LocalizationMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalizationMsg>
      _instance;
} _LocalizationMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_localization_2eproto {
void InitDefaultsSpLocationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_loc_5fodo_2eproto::InitDefaultsOdometry();
  protobuf_basic_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::autodrive::workflow::proto::_SpLocation_default_instance_;
    new (ptr) ::autodrive::workflow::proto::SpLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::SpLocation::InitAsDefaultInstance();
}

void InitDefaultsSpLocation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpLocationImpl);
}

void InitDefaultsLocalizationMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_ndm_5fbase_2eproto::InitDefaultsNdmSpec();
  protobuf_localization_2eproto::InitDefaultsSpLocation();
  {
    void* ptr = &::autodrive::workflow::proto::_LocalizationMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LocalizationMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LocalizationMsg::InitAsDefaultInstance();
}

void InitDefaultsLocalizationMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocalizationMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpLocation, loc_odom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpLocation, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpLocation, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SpLocation, angular_vel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LocalizationMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LocalizationMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LocalizationMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LocalizationMsg, ndm_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LocalizationMsg, location_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::SpLocation)},
  { 9, -1, sizeof(::autodrive::workflow::proto::LocalizationMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_SpLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LocalizationMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "localization.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022localization.proto\022\030autodrive.workflow"
      ".proto\032\013basic.proto\032\014common.proto\032\rloc_o"
      "do.proto\032\016ndm_base.proto\"\260\003\n\nSpLocation\022"
      "<\n\010loc_odom\030\001 \001(\0132*.autodrive.workflow.p"
      "roto.loc_odo.Odometry\022C\n\005state\030\002 \001(\01624.a"
      "utodrive.workflow.proto.SpLocation.SpLoc"
      "ationState\0224\n\010velocity\030\003 \001(\0132\".autodrive"
      ".workflow.proto.Vector3f\0227\n\013angular_vel\030"
      "\004 \001(\0132\".autodrive.workflow.proto.Vector3"
      "f\"\257\001\n\017SpLocationState\022\032\n\026kSpLocationStat"
      "eUninit\020\000\022\033\n\027kSpLocationStateIniting\020\001\022\035"
      "\n\031kSpLocationStateLocNormal\020\002\022\037\n\033kSpLoca"
      "tionStateLocUnnormal\020\003\022#\n\037kSpLocationSta"
      "teLocLowPrecision\020\004\"\356\001\n\017LocalizationMsg\022"
      "3\n\006header\030\001 \001(\0132#.autodrive.workflow.pro"
      "to.MsgHeader\022.\n\005error\030\002 \001(\0132\037.autodrive."
      "workflow.proto.Error\022>\n\nndm_header\030\003 \001(\013"
      "2*.autodrive.workflow.proto.ndm_base.Ndm"
      "Spec\0226\n\010location\030\004 \001(\0132$.autodrive.workf"
      "low.proto.SpLocationb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 788);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "localization.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_loc_5fodo_2eproto::AddDescriptors();
  ::protobuf_ndm_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_localization_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* SpLocation_SpLocationState_descriptor() {
  protobuf_localization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_localization_2eproto::file_level_enum_descriptors[0];
}
bool SpLocation_SpLocationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SpLocation_SpLocationState SpLocation::kSpLocationStateUninit;
const SpLocation_SpLocationState SpLocation::kSpLocationStateIniting;
const SpLocation_SpLocationState SpLocation::kSpLocationStateLocNormal;
const SpLocation_SpLocationState SpLocation::kSpLocationStateLocUnnormal;
const SpLocation_SpLocationState SpLocation::kSpLocationStateLocLowPrecision;
const SpLocation_SpLocationState SpLocation::SpLocationState_MIN;
const SpLocation_SpLocationState SpLocation::SpLocationState_MAX;
const int SpLocation::SpLocationState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SpLocation::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_SpLocation_default_instance_._instance.get_mutable()->loc_odom_ = const_cast< ::autodrive::workflow::proto::loc_odo::Odometry*>(
      ::autodrive::workflow::proto::loc_odo::Odometry::internal_default_instance());
  ::autodrive::workflow::proto::_SpLocation_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_SpLocation_default_instance_._instance.get_mutable()->angular_vel_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
}
void SpLocation::clear_loc_odom() {
  if (GetArenaNoVirtual() == NULL && loc_odom_ != NULL) {
    delete loc_odom_;
  }
  loc_odom_ = NULL;
}
void SpLocation::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
void SpLocation::clear_angular_vel() {
  if (GetArenaNoVirtual() == NULL && angular_vel_ != NULL) {
    delete angular_vel_;
  }
  angular_vel_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpLocation::kLocOdomFieldNumber;
const int SpLocation::kStateFieldNumber;
const int SpLocation::kVelocityFieldNumber;
const int SpLocation::kAngularVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpLocation::SpLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_localization_2eproto::InitDefaultsSpLocation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.SpLocation)
}
SpLocation::SpLocation(const SpLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_loc_odom()) {
    loc_odom_ = new ::autodrive::workflow::proto::loc_odo::Odometry(*from.loc_odom_);
  } else {
    loc_odom_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::autodrive::workflow::proto::Vector3f(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_angular_vel()) {
    angular_vel_ = new ::autodrive::workflow::proto::Vector3f(*from.angular_vel_);
  } else {
    angular_vel_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.SpLocation)
}

void SpLocation::SharedCtor() {
  ::memset(&loc_odom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&loc_odom_)) + sizeof(state_));
  _cached_size_ = 0;
}

SpLocation::~SpLocation() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.SpLocation)
  SharedDtor();
}

void SpLocation::SharedDtor() {
  if (this != internal_default_instance()) delete loc_odom_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete angular_vel_;
}

void SpLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpLocation::descriptor() {
  ::protobuf_localization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_localization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpLocation& SpLocation::default_instance() {
  ::protobuf_localization_2eproto::InitDefaultsSpLocation();
  return *internal_default_instance();
}

SpLocation* SpLocation::New(::google::protobuf::Arena* arena) const {
  SpLocation* n = new SpLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.SpLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && loc_odom_ != NULL) {
    delete loc_odom_;
  }
  loc_odom_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_vel_ != NULL) {
    delete angular_vel_;
  }
  angular_vel_ = NULL;
  state_ = 0;
  _internal_metadata_.Clear();
}

bool SpLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.SpLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.loc_odo.Odometry loc_odom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_loc_odom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SpLocation.SpLocationState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::autodrive::workflow::proto::SpLocation_SpLocationState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f angular_vel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.SpLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.SpLocation)
  return false;
#undef DO_
}

void SpLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.SpLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.loc_odo.Odometry loc_odom = 1;
  if (this->has_loc_odom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->loc_odom_, output);
  }

  // .autodrive.workflow.proto.SpLocation.SpLocationState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // .autodrive.workflow.proto.Vector3f velocity = 3;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  // .autodrive.workflow.proto.Vector3f angular_vel = 4;
  if (this->has_angular_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angular_vel_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.SpLocation)
}

::google::protobuf::uint8* SpLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.SpLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.loc_odo.Odometry loc_odom = 1;
  if (this->has_loc_odom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->loc_odom_, deterministic, target);
  }

  // .autodrive.workflow.proto.SpLocation.SpLocationState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // .autodrive.workflow.proto.Vector3f velocity = 3;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->velocity_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f angular_vel = 4;
  if (this->has_angular_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->angular_vel_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.SpLocation)
  return target;
}

size_t SpLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.SpLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.loc_odo.Odometry loc_odom = 1;
  if (this->has_loc_odom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->loc_odom_);
  }

  // .autodrive.workflow.proto.Vector3f velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->velocity_);
  }

  // .autodrive.workflow.proto.Vector3f angular_vel = 4;
  if (this->has_angular_vel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->angular_vel_);
  }

  // .autodrive.workflow.proto.SpLocation.SpLocationState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.SpLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const SpLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.SpLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.SpLocation)
    MergeFrom(*source);
  }
}

void SpLocation::MergeFrom(const SpLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.SpLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_loc_odom()) {
    mutable_loc_odom()->::autodrive::workflow::proto::loc_odo::Odometry::MergeFrom(from.loc_odom());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.velocity());
  }
  if (from.has_angular_vel()) {
    mutable_angular_vel()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.angular_vel());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void SpLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.SpLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpLocation::CopyFrom(const SpLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.SpLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpLocation::IsInitialized() const {
  return true;
}

void SpLocation::Swap(SpLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpLocation::InternalSwap(SpLocation* other) {
  using std::swap;
  swap(loc_odom_, other->loc_odom_);
  swap(velocity_, other->velocity_);
  swap(angular_vel_, other->angular_vel_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpLocation::GetMetadata() const {
  protobuf_localization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_localization_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocalizationMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_LocalizationMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_LocalizationMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_LocalizationMsg_default_instance_._instance.get_mutable()->ndm_header_ = const_cast< ::autodrive::workflow::proto::ndm_base::NdmSpec*>(
      ::autodrive::workflow::proto::ndm_base::NdmSpec::internal_default_instance());
  ::autodrive::workflow::proto::_LocalizationMsg_default_instance_._instance.get_mutable()->location_ = const_cast< ::autodrive::workflow::proto::SpLocation*>(
      ::autodrive::workflow::proto::SpLocation::internal_default_instance());
}
void LocalizationMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void LocalizationMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void LocalizationMsg::clear_ndm_header() {
  if (GetArenaNoVirtual() == NULL && ndm_header_ != NULL) {
    delete ndm_header_;
  }
  ndm_header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationMsg::kHeaderFieldNumber;
const int LocalizationMsg::kErrorFieldNumber;
const int LocalizationMsg::kNdmHeaderFieldNumber;
const int LocalizationMsg::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationMsg::LocalizationMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_localization_2eproto::InitDefaultsLocalizationMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LocalizationMsg)
}
LocalizationMsg::LocalizationMsg(const LocalizationMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_ndm_header()) {
    ndm_header_ = new ::autodrive::workflow::proto::ndm_base::NdmSpec(*from.ndm_header_);
  } else {
    ndm_header_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::autodrive::workflow::proto::SpLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LocalizationMsg)
}

void LocalizationMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&header_)) + sizeof(location_));
  _cached_size_ = 0;
}

LocalizationMsg::~LocalizationMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LocalizationMsg)
  SharedDtor();
}

void LocalizationMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete ndm_header_;
  if (this != internal_default_instance()) delete location_;
}

void LocalizationMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationMsg::descriptor() {
  ::protobuf_localization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_localization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalizationMsg& LocalizationMsg::default_instance() {
  ::protobuf_localization_2eproto::InitDefaultsLocalizationMsg();
  return *internal_default_instance();
}

LocalizationMsg* LocalizationMsg::New(::google::protobuf::Arena* arena) const {
  LocalizationMsg* n = new LocalizationMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LocalizationMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && ndm_header_ != NULL) {
    delete ndm_header_;
  }
  ndm_header_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  _internal_metadata_.Clear();
}

bool LocalizationMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LocalizationMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ndm_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.SpLocation location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LocalizationMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LocalizationMsg)
  return false;
#undef DO_
}

void LocalizationMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LocalizationMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 3;
  if (this->has_ndm_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ndm_header_, output);
  }

  // .autodrive.workflow.proto.SpLocation location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LocalizationMsg)
}

::google::protobuf::uint8* LocalizationMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LocalizationMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 3;
  if (this->has_ndm_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->ndm_header_, deterministic, target);
  }

  // .autodrive.workflow.proto.SpLocation location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->location_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LocalizationMsg)
  return target;
}

size_t LocalizationMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LocalizationMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.ndm_base.NdmSpec ndm_header = 3;
  if (this->has_ndm_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ndm_header_);
  }

  // .autodrive.workflow.proto.SpLocation location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LocalizationMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LocalizationMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LocalizationMsg)
    MergeFrom(*source);
  }
}

void LocalizationMsg::MergeFrom(const LocalizationMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LocalizationMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_ndm_header()) {
    mutable_ndm_header()->::autodrive::workflow::proto::ndm_base::NdmSpec::MergeFrom(from.ndm_header());
  }
  if (from.has_location()) {
    mutable_location()->::autodrive::workflow::proto::SpLocation::MergeFrom(from.location());
  }
}

void LocalizationMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LocalizationMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationMsg::CopyFrom(const LocalizationMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LocalizationMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationMsg::IsInitialized() const {
  return true;
}

void LocalizationMsg::Swap(LocalizationMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationMsg::InternalSwap(LocalizationMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(ndm_header_, other->ndm_header_);
  swap(location_, other->location_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationMsg::GetMetadata() const {
  protobuf_localization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_localization_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
