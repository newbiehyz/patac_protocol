// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_system.proto

#include "fusion_system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class FusionSystemMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FusionSystemMsg>
      _instance;
} _FusionSystemMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_fusion_5fsystem_2eproto {
void InitDefaultsFusionSystemMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_system_5ftype_5fbase_2eproto::InitDefaultsApaStateInfo();
  protobuf_system_5ftype_5fbase_2eproto::InitDefaultsUserSelectedParkingSlot();
  {
    void* ptr = &::autodrive::workflow::proto::_FusionSystemMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::FusionSystemMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::FusionSystemMsg::InitAsDefaultInstance();
}

void InitDefaultsFusionSystemMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFusionSystemMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, lock_id_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, lock_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, apa_states_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, parking_out_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, work_mode_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, usr_sel_ps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, enable_backstage_searching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, enable_normal_searching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, enable_peb_prkgperception_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, mirr_fold_sts_at_driver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, mirr_fold_sts_at_pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, vpa_state_detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionSystemMsg, perception_ctrl_status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::FusionSystemMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_FusionSystemMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fusion_system.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023fusion_system.proto\022\030autodrive.workflo"
      "w.proto\032\014common.proto\032\026system_type_base."
      "proto\"\334\006\n\017FusionSystemMsg\0223\n\006header\030\001 \001("
      "\0132#.autodrive.workflow.proto.MsgHeader\022."
      "\n\005error\030\002 \001(\0132\037.autodrive.workflow.proto"
      ".Error\022:\n\014lock_id_type\030\003 \001(\0162$.autodrive"
      ".workflow.proto.LockIdType\022\017\n\007lock_id\030\004 "
      "\001(\005\022:\n\napa_states\030\005 \001(\0132&.autodrive.work"
      "flow.proto.ApaStateInfo\022@\n\017parking_out_d"
      "ir\030\006 \001(\0162\'.autodrive.workflow.proto.Park"
      "ingOutDir\022>\n\016work_mode_type\030\007 \001(\0162&.auto"
      "drive.workflow.proto.WorkModeType\022E\n\nusr"
      "_sel_ps\030\010 \001(\01321.autodrive.workflow.proto"
      ".UserSelectedParkingSlot\022\"\n\032enable_backs"
      "tage_searching\030\t \001(\010\022\037\n\027enable_normal_se"
      "arching\030\n \001(\010\022!\n\031enable_PEB_PrkgPercepti"
      "on\030\013 \001(\010\022I\n\027mirr_fold_sts_at_driver\030\014 \001("
      "\0162(.autodrive.workflow.proto.MirrFoldSts"
      "Typ\022G\n\025mirr_fold_sts_at_pass\030\r \001(\0162(.aut"
      "odrive.workflow.proto.MirrFoldStsTyp\022F\n\020"
      "vpa_state_detail\030\016 \001(\0162,.autodrive.workf"
      "low.proto.VpaStateDetailType\022N\n\026percepti"
      "on_ctrl_status\030\017 \001(\0162..autodrive.workflo"
      "w.proto.PerceptionCtrlStatus*\275\001\n\rParking"
      "OutDir\022\016\n\nKOutUnknow\020\000\022\021\n\rKVerFrontLeft\020"
      "\001\022\023\n\017KVerFrontCenter\020\002\022\022\n\016KVerFrontRight"
      "\020\003\022\020\n\014KVerRearLeft\020\004\022\022\n\016KVerRearCenter\020\005"
      "\022\021\n\rKVerRearRight\020\006\022\022\n\016KHoriFrontLeft\020\007\022"
      "\023\n\017KHoriFrontRight\020\010*v\n\024PerceptionCtrlSt"
      "atus\022 \n\034kPerceptionCtrlStatusUnknown\020\000\022\022"
      "\n\016kSwitchParking\020\001\022\017\n\013kSwitchADAS\020\002\022\014\n\010k"
      "Parking\020\003\022\t\n\005kADAS\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fusion_system.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_system_5ftype_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fusion_5fsystem_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* ParkingOutDir_descriptor() {
  protobuf_fusion_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fsystem_2eproto::file_level_enum_descriptors[0];
}
bool ParkingOutDir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PerceptionCtrlStatus_descriptor() {
  protobuf_fusion_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fsystem_2eproto::file_level_enum_descriptors[1];
}
bool PerceptionCtrlStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FusionSystemMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_FusionSystemMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_FusionSystemMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_FusionSystemMsg_default_instance_._instance.get_mutable()->apa_states_ = const_cast< ::autodrive::workflow::proto::ApaStateInfo*>(
      ::autodrive::workflow::proto::ApaStateInfo::internal_default_instance());
  ::autodrive::workflow::proto::_FusionSystemMsg_default_instance_._instance.get_mutable()->usr_sel_ps_ = const_cast< ::autodrive::workflow::proto::UserSelectedParkingSlot*>(
      ::autodrive::workflow::proto::UserSelectedParkingSlot::internal_default_instance());
}
void FusionSystemMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void FusionSystemMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
void FusionSystemMsg::clear_apa_states() {
  if (GetArenaNoVirtual() == NULL && apa_states_ != NULL) {
    delete apa_states_;
  }
  apa_states_ = NULL;
}
void FusionSystemMsg::clear_usr_sel_ps() {
  if (GetArenaNoVirtual() == NULL && usr_sel_ps_ != NULL) {
    delete usr_sel_ps_;
  }
  usr_sel_ps_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FusionSystemMsg::kHeaderFieldNumber;
const int FusionSystemMsg::kErrorFieldNumber;
const int FusionSystemMsg::kLockIdTypeFieldNumber;
const int FusionSystemMsg::kLockIdFieldNumber;
const int FusionSystemMsg::kApaStatesFieldNumber;
const int FusionSystemMsg::kParkingOutDirFieldNumber;
const int FusionSystemMsg::kWorkModeTypeFieldNumber;
const int FusionSystemMsg::kUsrSelPsFieldNumber;
const int FusionSystemMsg::kEnableBackstageSearchingFieldNumber;
const int FusionSystemMsg::kEnableNormalSearchingFieldNumber;
const int FusionSystemMsg::kEnablePEBPrkgPerceptionFieldNumber;
const int FusionSystemMsg::kMirrFoldStsAtDriverFieldNumber;
const int FusionSystemMsg::kMirrFoldStsAtPassFieldNumber;
const int FusionSystemMsg::kVpaStateDetailFieldNumber;
const int FusionSystemMsg::kPerceptionCtrlStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FusionSystemMsg::FusionSystemMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fusion_5fsystem_2eproto::InitDefaultsFusionSystemMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.FusionSystemMsg)
}
FusionSystemMsg::FusionSystemMsg(const FusionSystemMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_apa_states()) {
    apa_states_ = new ::autodrive::workflow::proto::ApaStateInfo(*from.apa_states_);
  } else {
    apa_states_ = NULL;
  }
  if (from.has_usr_sel_ps()) {
    usr_sel_ps_ = new ::autodrive::workflow::proto::UserSelectedParkingSlot(*from.usr_sel_ps_);
  } else {
    usr_sel_ps_ = NULL;
  }
  ::memcpy(&lock_id_type_, &from.lock_id_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&perception_ctrl_status_) -
    reinterpret_cast<char*>(&lock_id_type_)) + sizeof(perception_ctrl_status_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.FusionSystemMsg)
}

void FusionSystemMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perception_ctrl_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(perception_ctrl_status_));
  _cached_size_ = 0;
}

FusionSystemMsg::~FusionSystemMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.FusionSystemMsg)
  SharedDtor();
}

void FusionSystemMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete apa_states_;
  if (this != internal_default_instance()) delete usr_sel_ps_;
}

void FusionSystemMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FusionSystemMsg::descriptor() {
  ::protobuf_fusion_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fsystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FusionSystemMsg& FusionSystemMsg::default_instance() {
  ::protobuf_fusion_5fsystem_2eproto::InitDefaultsFusionSystemMsg();
  return *internal_default_instance();
}

FusionSystemMsg* FusionSystemMsg::New(::google::protobuf::Arena* arena) const {
  FusionSystemMsg* n = new FusionSystemMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FusionSystemMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.FusionSystemMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && apa_states_ != NULL) {
    delete apa_states_;
  }
  apa_states_ = NULL;
  if (GetArenaNoVirtual() == NULL && usr_sel_ps_ != NULL) {
    delete usr_sel_ps_;
  }
  usr_sel_ps_ = NULL;
  ::memset(&lock_id_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perception_ctrl_status_) -
      reinterpret_cast<char*>(&lock_id_type_)) + sizeof(perception_ctrl_status_));
  _internal_metadata_.Clear();
}

bool FusionSystemMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.FusionSystemMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LockIdType lock_id_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lock_id_type(static_cast< ::autodrive::workflow::proto::LockIdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lock_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ApaStateInfo apa_states = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_apa_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ParkingOutDir parking_out_dir = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parking_out_dir(static_cast< ::autodrive::workflow::proto::ParkingOutDir >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.WorkModeType work_mode_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_work_mode_type(static_cast< ::autodrive::workflow::proto::WorkModeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_usr_sel_ps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_backstage_searching = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_backstage_searching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_normal_searching = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_normal_searching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_PEB_PrkgPerception = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_peb_prkgperception_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mirr_fold_sts_at_driver(static_cast< ::autodrive::workflow::proto::MirrFoldStsTyp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mirr_fold_sts_at_pass(static_cast< ::autodrive::workflow::proto::MirrFoldStsTyp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vpa_state_detail(static_cast< ::autodrive::workflow::proto::VpaStateDetailType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.PerceptionCtrlStatus perception_ctrl_status = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_perception_ctrl_status(static_cast< ::autodrive::workflow::proto::PerceptionCtrlStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.FusionSystemMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.FusionSystemMsg)
  return false;
#undef DO_
}

void FusionSystemMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.FusionSystemMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.LockIdType lock_id_type = 3;
  if (this->lock_id_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->lock_id_type(), output);
  }

  // int32 lock_id = 4;
  if (this->lock_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lock_id(), output);
  }

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 5;
  if (this->has_apa_states()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->apa_states_, output);
  }

  // .autodrive.workflow.proto.ParkingOutDir parking_out_dir = 6;
  if (this->parking_out_dir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->parking_out_dir(), output);
  }

  // .autodrive.workflow.proto.WorkModeType work_mode_type = 7;
  if (this->work_mode_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->work_mode_type(), output);
  }

  // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 8;
  if (this->has_usr_sel_ps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->usr_sel_ps_, output);
  }

  // bool enable_backstage_searching = 9;
  if (this->enable_backstage_searching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_backstage_searching(), output);
  }

  // bool enable_normal_searching = 10;
  if (this->enable_normal_searching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_normal_searching(), output);
  }

  // bool enable_PEB_PrkgPerception = 11;
  if (this->enable_peb_prkgperception() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_peb_prkgperception(), output);
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
  if (this->mirr_fold_sts_at_driver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->mirr_fold_sts_at_driver(), output);
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
  if (this->mirr_fold_sts_at_pass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->mirr_fold_sts_at_pass(), output);
  }

  // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail = 14;
  if (this->vpa_state_detail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->vpa_state_detail(), output);
  }

  // .autodrive.workflow.proto.PerceptionCtrlStatus perception_ctrl_status = 15;
  if (this->perception_ctrl_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->perception_ctrl_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.FusionSystemMsg)
}

::google::protobuf::uint8* FusionSystemMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.FusionSystemMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.LockIdType lock_id_type = 3;
  if (this->lock_id_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->lock_id_type(), target);
  }

  // int32 lock_id = 4;
  if (this->lock_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lock_id(), target);
  }

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 5;
  if (this->has_apa_states()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->apa_states_, deterministic, target);
  }

  // .autodrive.workflow.proto.ParkingOutDir parking_out_dir = 6;
  if (this->parking_out_dir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->parking_out_dir(), target);
  }

  // .autodrive.workflow.proto.WorkModeType work_mode_type = 7;
  if (this->work_mode_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->work_mode_type(), target);
  }

  // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 8;
  if (this->has_usr_sel_ps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->usr_sel_ps_, deterministic, target);
  }

  // bool enable_backstage_searching = 9;
  if (this->enable_backstage_searching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_backstage_searching(), target);
  }

  // bool enable_normal_searching = 10;
  if (this->enable_normal_searching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_normal_searching(), target);
  }

  // bool enable_PEB_PrkgPerception = 11;
  if (this->enable_peb_prkgperception() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enable_peb_prkgperception(), target);
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
  if (this->mirr_fold_sts_at_driver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->mirr_fold_sts_at_driver(), target);
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
  if (this->mirr_fold_sts_at_pass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->mirr_fold_sts_at_pass(), target);
  }

  // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail = 14;
  if (this->vpa_state_detail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->vpa_state_detail(), target);
  }

  // .autodrive.workflow.proto.PerceptionCtrlStatus perception_ctrl_status = 15;
  if (this->perception_ctrl_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->perception_ctrl_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.FusionSystemMsg)
  return target;
}

size_t FusionSystemMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.FusionSystemMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 5;
  if (this->has_apa_states()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->apa_states_);
  }

  // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 8;
  if (this->has_usr_sel_ps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->usr_sel_ps_);
  }

  // .autodrive.workflow.proto.LockIdType lock_id_type = 3;
  if (this->lock_id_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lock_id_type());
  }

  // int32 lock_id = 4;
  if (this->lock_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lock_id());
  }

  // .autodrive.workflow.proto.ParkingOutDir parking_out_dir = 6;
  if (this->parking_out_dir() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parking_out_dir());
  }

  // .autodrive.workflow.proto.WorkModeType work_mode_type = 7;
  if (this->work_mode_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->work_mode_type());
  }

  // bool enable_backstage_searching = 9;
  if (this->enable_backstage_searching() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_normal_searching = 10;
  if (this->enable_normal_searching() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_PEB_PrkgPerception = 11;
  if (this->enable_peb_prkgperception() != 0) {
    total_size += 1 + 1;
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
  if (this->mirr_fold_sts_at_driver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mirr_fold_sts_at_driver());
  }

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
  if (this->mirr_fold_sts_at_pass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mirr_fold_sts_at_pass());
  }

  // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail = 14;
  if (this->vpa_state_detail() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vpa_state_detail());
  }

  // .autodrive.workflow.proto.PerceptionCtrlStatus perception_ctrl_status = 15;
  if (this->perception_ctrl_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->perception_ctrl_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FusionSystemMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.FusionSystemMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FusionSystemMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FusionSystemMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.FusionSystemMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.FusionSystemMsg)
    MergeFrom(*source);
  }
}

void FusionSystemMsg::MergeFrom(const FusionSystemMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.FusionSystemMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_apa_states()) {
    mutable_apa_states()->::autodrive::workflow::proto::ApaStateInfo::MergeFrom(from.apa_states());
  }
  if (from.has_usr_sel_ps()) {
    mutable_usr_sel_ps()->::autodrive::workflow::proto::UserSelectedParkingSlot::MergeFrom(from.usr_sel_ps());
  }
  if (from.lock_id_type() != 0) {
    set_lock_id_type(from.lock_id_type());
  }
  if (from.lock_id() != 0) {
    set_lock_id(from.lock_id());
  }
  if (from.parking_out_dir() != 0) {
    set_parking_out_dir(from.parking_out_dir());
  }
  if (from.work_mode_type() != 0) {
    set_work_mode_type(from.work_mode_type());
  }
  if (from.enable_backstage_searching() != 0) {
    set_enable_backstage_searching(from.enable_backstage_searching());
  }
  if (from.enable_normal_searching() != 0) {
    set_enable_normal_searching(from.enable_normal_searching());
  }
  if (from.enable_peb_prkgperception() != 0) {
    set_enable_peb_prkgperception(from.enable_peb_prkgperception());
  }
  if (from.mirr_fold_sts_at_driver() != 0) {
    set_mirr_fold_sts_at_driver(from.mirr_fold_sts_at_driver());
  }
  if (from.mirr_fold_sts_at_pass() != 0) {
    set_mirr_fold_sts_at_pass(from.mirr_fold_sts_at_pass());
  }
  if (from.vpa_state_detail() != 0) {
    set_vpa_state_detail(from.vpa_state_detail());
  }
  if (from.perception_ctrl_status() != 0) {
    set_perception_ctrl_status(from.perception_ctrl_status());
  }
}

void FusionSystemMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.FusionSystemMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusionSystemMsg::CopyFrom(const FusionSystemMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.FusionSystemMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionSystemMsg::IsInitialized() const {
  return true;
}

void FusionSystemMsg::Swap(FusionSystemMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FusionSystemMsg::InternalSwap(FusionSystemMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(apa_states_, other->apa_states_);
  swap(usr_sel_ps_, other->usr_sel_ps_);
  swap(lock_id_type_, other->lock_id_type_);
  swap(lock_id_, other->lock_id_);
  swap(parking_out_dir_, other->parking_out_dir_);
  swap(work_mode_type_, other->work_mode_type_);
  swap(enable_backstage_searching_, other->enable_backstage_searching_);
  swap(enable_normal_searching_, other->enable_normal_searching_);
  swap(enable_peb_prkgperception_, other->enable_peb_prkgperception_);
  swap(mirr_fold_sts_at_driver_, other->mirr_fold_sts_at_driver_);
  swap(mirr_fold_sts_at_pass_, other->mirr_fold_sts_at_pass_);
  swap(vpa_state_detail_, other->vpa_state_detail_);
  swap(perception_ctrl_status_, other->perception_ctrl_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FusionSystemMsg::GetMetadata() const {
  protobuf_fusion_5fsystem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fsystem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
