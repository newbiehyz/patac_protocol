// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: patac_slot.proto

#include "patac_slot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace patac_hpp {
class Point2fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point2f>
      _instance;
} _Point2f_default_instance_;
class ParkingSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingSlot>
      _instance;
} _ParkingSlot_default_instance_;
class ParkingSlotListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingSlotList>
      _instance;
} _ParkingSlotList_default_instance_;
}  // namespace patac_hpp
namespace protobuf_patac_5fslot_2eproto {
void InitDefaultsPoint2fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::patac_hpp::_Point2f_default_instance_;
    new (ptr) ::patac_hpp::Point2f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patac_hpp::Point2f::InitAsDefaultInstance();
}

void InitDefaultsPoint2f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoint2fImpl);
}

void InitDefaultsParkingSlotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_patac_5fslot_2eproto::InitDefaultsPoint2f();
  {
    void* ptr = &::patac_hpp::_ParkingSlot_default_instance_;
    new (ptr) ::patac_hpp::ParkingSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patac_hpp::ParkingSlot::InitAsDefaultInstance();
}

void InitDefaultsParkingSlot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParkingSlotImpl);
}

void InitDefaultsParkingSlotListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_patac_5fslot_2eproto::InitDefaultsParkingSlot();
  {
    void* ptr = &::patac_hpp::_ParkingSlotList_default_instance_;
    new (ptr) ::patac_hpp::ParkingSlotList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::patac_hpp::ParkingSlotList::InitAsDefaultInstance();
}

void InitDefaultsParkingSlotList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParkingSlotListImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::Point2f, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::Point2f, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, occupancy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, planning_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlot, lock_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlotList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlotList, num_parking_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::patac_hpp::ParkingSlotList, parking_slot_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::patac_hpp::Point2f)},
  { 7, -1, sizeof(::patac_hpp::ParkingSlot)},
  { 21, -1, sizeof(::patac_hpp::ParkingSlotList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::patac_hpp::_Point2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::patac_hpp::_ParkingSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::patac_hpp::_ParkingSlotList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "patac_slot.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020patac_slot.proto\022\tpatac_hpp\"\037\n\007Point2f"
      "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"\250\002\n\013ParkingSlot\022\n"
      "\n\002id\030\001 \001(\005\022\r\n\005valid\030\002 \001(\005\022\014\n\004conf\030\003 \001(\002\022"
      "(\n\004type\030\004 \001(\0162\032.patac_hpp.ParkingSlotTyp"
      "e\022-\n\toccupancy\030\005 \001(\0162\032.patac_hpp.Occupan"
      "cyStatus\022\"\n\006points\030\006 \003(\0132\022.patac_hpp.Poi"
      "nt2f\022\026\n\016planning_score\030\007 \001(\002\022(\n\006source\030\010"
      " \001(\0162\030.patac_hpp.ParkingSource\0221\n\013lock_s"
      "tatus\030\t \001(\0162\034.patac_hpp.ParkingLockStatu"
      "s\"^\n\017ParkingSlotList\022\030\n\020num_parking_slot"
      "\030\001 \001(\r\0221\n\021parking_slot_list\030\002 \003(\0132\026.pata"
      "c_hpp.ParkingSlot*g\n\017ParkingSlotType\022\023\n\017"
      "SlotTypeUnknown\020\000\022\024\n\020SlotTypeVertical\020\001\022"
      "\024\n\020SlotTypeParallel\020\002\022\023\n\017SlotTypeOblique"
      "\020\003*j\n\017OccupancyStatus\022\032\n\026OccupancyStatus"
      "Unknown\020\000\022\033\n\027OccupancyStatusOccupied\020\001\022\036"
      "\n\032OccupancyStatusNotOccupied\020\002*s\n\rParkin"
      "gSource\022\034\n\030ParkingSourceUnspecified\020\000\022\024\n"
      "\020ParkingSourceIpm\020\001\022\024\n\020ParkingSourceUss\020"
      "\002\022\030\n\024ParkingSourceUserSel\020\003*h\n\021ParkingLo"
      "ckStatus\022\034\n\030ParkingLockStatusUnknown\020\000\022\031"
      "\n\025ParkingLockStatusOpen\020\001\022\032\n\026ParkingLock"
      "StatusClose\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 901);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "patac_slot.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_patac_5fslot_2eproto
namespace patac_hpp {
const ::google::protobuf::EnumDescriptor* ParkingSlotType_descriptor() {
  protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_patac_5fslot_2eproto::file_level_enum_descriptors[0];
}
bool ParkingSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OccupancyStatus_descriptor() {
  protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_patac_5fslot_2eproto::file_level_enum_descriptors[1];
}
bool OccupancyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParkingSource_descriptor() {
  protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_patac_5fslot_2eproto::file_level_enum_descriptors[2];
}
bool ParkingSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParkingLockStatus_descriptor() {
  protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_patac_5fslot_2eproto::file_level_enum_descriptors[3];
}
bool ParkingLockStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Point2f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2f::kXFieldNumber;
const int Point2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2f::Point2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_patac_5fslot_2eproto::InitDefaultsPoint2f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:patac_hpp.Point2f)
}
Point2f::Point2f(const Point2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:patac_hpp.Point2f)
}

void Point2f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:patac_hpp.Point2f)
  SharedDtor();
}

void Point2f::SharedDtor() {
}

void Point2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2f::descriptor() {
  ::protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_patac_5fslot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point2f& Point2f::default_instance() {
  ::protobuf_patac_5fslot_2eproto::InitDefaultsPoint2f();
  return *internal_default_instance();
}

Point2f* Point2f::New(::google::protobuf::Arena* arena) const {
  Point2f* n = new Point2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:patac_hpp.Point2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Point2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:patac_hpp.Point2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:patac_hpp.Point2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:patac_hpp.Point2f)
  return false;
#undef DO_
}

void Point2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:patac_hpp.Point2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:patac_hpp.Point2f)
}

::google::protobuf::uint8* Point2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:patac_hpp.Point2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patac_hpp.Point2f)
  return target;
}

size_t Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patac_hpp.Point2f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patac_hpp.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patac_hpp.Point2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patac_hpp.Point2f)
    MergeFrom(*source);
  }
}

void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patac_hpp.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patac_hpp.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patac_hpp.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2f::IsInitialized() const {
  return true;
}

void Point2f::Swap(Point2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2f::InternalSwap(Point2f* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point2f::GetMetadata() const {
  protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_patac_5fslot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkingSlot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingSlot::kIdFieldNumber;
const int ParkingSlot::kValidFieldNumber;
const int ParkingSlot::kConfFieldNumber;
const int ParkingSlot::kTypeFieldNumber;
const int ParkingSlot::kOccupancyFieldNumber;
const int ParkingSlot::kPointsFieldNumber;
const int ParkingSlot::kPlanningScoreFieldNumber;
const int ParkingSlot::kSourceFieldNumber;
const int ParkingSlot::kLockStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingSlot::ParkingSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_patac_5fslot_2eproto::InitDefaultsParkingSlot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:patac_hpp.ParkingSlot)
}
ParkingSlot::ParkingSlot(const ParkingSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(lock_status_));
  // @@protoc_insertion_point(copy_constructor:patac_hpp.ParkingSlot)
}

void ParkingSlot::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lock_status_));
  _cached_size_ = 0;
}

ParkingSlot::~ParkingSlot() {
  // @@protoc_insertion_point(destructor:patac_hpp.ParkingSlot)
  SharedDtor();
}

void ParkingSlot::SharedDtor() {
}

void ParkingSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingSlot::descriptor() {
  ::protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_patac_5fslot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingSlot& ParkingSlot::default_instance() {
  ::protobuf_patac_5fslot_2eproto::InitDefaultsParkingSlot();
  return *internal_default_instance();
}

ParkingSlot* ParkingSlot::New(::google::protobuf::Arena* arena) const {
  ParkingSlot* n = new ParkingSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:patac_hpp.ParkingSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lock_status_));
  _internal_metadata_.Clear();
}

bool ParkingSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:patac_hpp.ParkingSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .patac_hpp.ParkingSlotType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::patac_hpp::ParkingSlotType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .patac_hpp.OccupancyStatus occupancy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_occupancy(static_cast< ::patac_hpp::OccupancyStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .patac_hpp.Point2f points = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float planning_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &planning_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .patac_hpp.ParkingSource source = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source(static_cast< ::patac_hpp::ParkingSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .patac_hpp.ParkingLockStatus lock_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lock_status(static_cast< ::patac_hpp::ParkingLockStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:patac_hpp.ParkingSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:patac_hpp.ParkingSlot)
  return false;
#undef DO_
}

void ParkingSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:patac_hpp.ParkingSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 valid = 2;
  if (this->valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->valid(), output);
  }

  // float conf = 3;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->conf(), output);
  }

  // .patac_hpp.ParkingSlotType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // .patac_hpp.OccupancyStatus occupancy = 5;
  if (this->occupancy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->occupancy(), output);
  }

  // repeated .patac_hpp.Point2f points = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->points(static_cast<int>(i)), output);
  }

  // float planning_score = 7;
  if (this->planning_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->planning_score(), output);
  }

  // .patac_hpp.ParkingSource source = 8;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->source(), output);
  }

  // .patac_hpp.ParkingLockStatus lock_status = 9;
  if (this->lock_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->lock_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:patac_hpp.ParkingSlot)
}

::google::protobuf::uint8* ParkingSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:patac_hpp.ParkingSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 valid = 2;
  if (this->valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->valid(), target);
  }

  // float conf = 3;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->conf(), target);
  }

  // .patac_hpp.ParkingSlotType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // .patac_hpp.OccupancyStatus occupancy = 5;
  if (this->occupancy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->occupancy(), target);
  }

  // repeated .patac_hpp.Point2f points = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->points(static_cast<int>(i)), deterministic, target);
  }

  // float planning_score = 7;
  if (this->planning_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->planning_score(), target);
  }

  // .patac_hpp.ParkingSource source = 8;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->source(), target);
  }

  // .patac_hpp.ParkingLockStatus lock_status = 9;
  if (this->lock_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->lock_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patac_hpp.ParkingSlot)
  return target;
}

size_t ParkingSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patac_hpp.ParkingSlot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .patac_hpp.Point2f points = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 valid = 2;
  if (this->valid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->valid());
  }

  // float conf = 3;
  if (this->conf() != 0) {
    total_size += 1 + 4;
  }

  // .patac_hpp.ParkingSlotType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .patac_hpp.OccupancyStatus occupancy = 5;
  if (this->occupancy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->occupancy());
  }

  // float planning_score = 7;
  if (this->planning_score() != 0) {
    total_size += 1 + 4;
  }

  // .patac_hpp.ParkingSource source = 8;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  // .patac_hpp.ParkingLockStatus lock_status = 9;
  if (this->lock_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lock_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patac_hpp.ParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patac_hpp.ParkingSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patac_hpp.ParkingSlot)
    MergeFrom(*source);
  }
}

void ParkingSlot::MergeFrom(const ParkingSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patac_hpp.ParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.valid() != 0) {
    set_valid(from.valid());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.occupancy() != 0) {
    set_occupancy(from.occupancy());
  }
  if (from.planning_score() != 0) {
    set_planning_score(from.planning_score());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.lock_status() != 0) {
    set_lock_status(from.lock_status());
  }
}

void ParkingSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patac_hpp.ParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSlot::CopyFrom(const ParkingSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patac_hpp.ParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSlot::IsInitialized() const {
  return true;
}

void ParkingSlot::Swap(ParkingSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingSlot::InternalSwap(ParkingSlot* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  swap(id_, other->id_);
  swap(valid_, other->valid_);
  swap(conf_, other->conf_);
  swap(type_, other->type_);
  swap(occupancy_, other->occupancy_);
  swap(planning_score_, other->planning_score_);
  swap(source_, other->source_);
  swap(lock_status_, other->lock_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingSlot::GetMetadata() const {
  protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_patac_5fslot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkingSlotList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingSlotList::kNumParkingSlotFieldNumber;
const int ParkingSlotList::kParkingSlotListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingSlotList::ParkingSlotList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_patac_5fslot_2eproto::InitDefaultsParkingSlotList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:patac_hpp.ParkingSlotList)
}
ParkingSlotList::ParkingSlotList(const ParkingSlotList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parking_slot_list_(from.parking_slot_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_parking_slot_ = from.num_parking_slot_;
  // @@protoc_insertion_point(copy_constructor:patac_hpp.ParkingSlotList)
}

void ParkingSlotList::SharedCtor() {
  num_parking_slot_ = 0u;
  _cached_size_ = 0;
}

ParkingSlotList::~ParkingSlotList() {
  // @@protoc_insertion_point(destructor:patac_hpp.ParkingSlotList)
  SharedDtor();
}

void ParkingSlotList::SharedDtor() {
}

void ParkingSlotList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingSlotList::descriptor() {
  ::protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_patac_5fslot_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingSlotList& ParkingSlotList::default_instance() {
  ::protobuf_patac_5fslot_2eproto::InitDefaultsParkingSlotList();
  return *internal_default_instance();
}

ParkingSlotList* ParkingSlotList::New(::google::protobuf::Arena* arena) const {
  ParkingSlotList* n = new ParkingSlotList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingSlotList::Clear() {
// @@protoc_insertion_point(message_clear_start:patac_hpp.ParkingSlotList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parking_slot_list_.Clear();
  num_parking_slot_ = 0u;
  _internal_metadata_.Clear();
}

bool ParkingSlotList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:patac_hpp.ParkingSlotList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num_parking_slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_parking_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .patac_hpp.ParkingSlot parking_slot_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_parking_slot_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:patac_hpp.ParkingSlotList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:patac_hpp.ParkingSlotList)
  return false;
#undef DO_
}

void ParkingSlotList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:patac_hpp.ParkingSlotList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_parking_slot = 1;
  if (this->num_parking_slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_parking_slot(), output);
  }

  // repeated .patac_hpp.ParkingSlot parking_slot_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parking_slot_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parking_slot_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:patac_hpp.ParkingSlotList)
}

::google::protobuf::uint8* ParkingSlotList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:patac_hpp.ParkingSlotList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_parking_slot = 1;
  if (this->num_parking_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_parking_slot(), target);
  }

  // repeated .patac_hpp.ParkingSlot parking_slot_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parking_slot_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->parking_slot_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patac_hpp.ParkingSlotList)
  return target;
}

size_t ParkingSlotList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:patac_hpp.ParkingSlotList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .patac_hpp.ParkingSlot parking_slot_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->parking_slot_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->parking_slot_list(static_cast<int>(i)));
    }
  }

  // uint32 num_parking_slot = 1;
  if (this->num_parking_slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_parking_slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingSlotList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:patac_hpp.ParkingSlotList)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSlotList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingSlotList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:patac_hpp.ParkingSlotList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:patac_hpp.ParkingSlotList)
    MergeFrom(*source);
  }
}

void ParkingSlotList::MergeFrom(const ParkingSlotList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:patac_hpp.ParkingSlotList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parking_slot_list_.MergeFrom(from.parking_slot_list_);
  if (from.num_parking_slot() != 0) {
    set_num_parking_slot(from.num_parking_slot());
  }
}

void ParkingSlotList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:patac_hpp.ParkingSlotList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSlotList::CopyFrom(const ParkingSlotList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:patac_hpp.ParkingSlotList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSlotList::IsInitialized() const {
  return true;
}

void ParkingSlotList::Swap(ParkingSlotList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingSlotList::InternalSwap(ParkingSlotList* other) {
  using std::swap;
  parking_slot_list_.InternalSwap(&other->parking_slot_list_);
  swap(num_parking_slot_, other->num_parking_slot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingSlotList::GetMetadata() const {
  protobuf_patac_5fslot_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_patac_5fslot_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace patac_hpp

// @@protoc_insertion_point(global_scope)
