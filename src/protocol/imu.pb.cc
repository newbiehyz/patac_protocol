// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imu.proto

#include "imu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class ImuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Imu>
      _instance;
} _Imu_default_instance_;
class ImuMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuMsg>
      _instance;
} _ImuMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_imu_2eproto {
void InitDefaultsImuImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_Imu_default_instance_;
    new (ptr) ::autodrive::workflow::proto::Imu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::Imu::InitAsDefaultInstance();
}

void InitDefaultsImu() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImuImpl);
}

void InitDefaultsImuMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_imu_2eproto::InitDefaultsImu();
  {
    void* ptr = &::autodrive::workflow::proto::_ImuMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ImuMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ImuMsg::InitAsDefaultInstance();
}

void InitDefaultsImuMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImuMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, utc_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, raw_acceleration_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, raw_acceleration_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, raw_acceleration_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, raw_angular_rate_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, raw_angular_rate_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Imu, raw_angular_rate_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImuMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImuMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImuMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ImuMsg, imu_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::Imu)},
  { 15, -1, sizeof(::autodrive::workflow::proto::ImuMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_Imu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ImuMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "imu.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\timu.proto\022\030autodrive.workflow.proto\032\014c"
      "ommon.proto\"\355\001\n\003Imu\022\020\n\010utc_time\030\001 \001(\004\022\017\n"
      "\007heading\030\002 \001(\002\022\r\n\005pitch\030\003 \001(\002\022\014\n\004roll\030\004 "
      "\001(\002\022\032\n\022raw_acceleration_x\030\005 \001(\002\022\032\n\022raw_a"
      "cceleration_y\030\006 \001(\002\022\032\n\022raw_acceleration_"
      "z\030\007 \001(\002\022\032\n\022raw_angular_rate_x\030\010 \001(\002\022\032\n\022r"
      "aw_angular_rate_y\030\t \001(\002\022\032\n\022raw_angular_r"
      "ate_z\030\n \001(\002\"\231\001\n\006ImuMsg\0223\n\006header\030\001 \001(\0132#"
      ".autodrive.workflow.proto.MsgHeader\022.\n\005e"
      "rror\030\002 \001(\0132\037.autodrive.workflow.proto.Er"
      "ror\022*\n\003imu\030\003 \001(\0132\035.autodrive.workflow.pr"
      "oto.Imub\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imu.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_imu_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void Imu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu::kUtcTimeFieldNumber;
const int Imu::kHeadingFieldNumber;
const int Imu::kPitchFieldNumber;
const int Imu::kRollFieldNumber;
const int Imu::kRawAccelerationXFieldNumber;
const int Imu::kRawAccelerationYFieldNumber;
const int Imu::kRawAccelerationZFieldNumber;
const int Imu::kRawAngularRateXFieldNumber;
const int Imu::kRawAngularRateYFieldNumber;
const int Imu::kRawAngularRateZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu::Imu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imu_2eproto::InitDefaultsImu();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.Imu)
}
Imu::Imu(const Imu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&utc_time_, &from.utc_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_angular_rate_z_) -
    reinterpret_cast<char*>(&utc_time_)) + sizeof(raw_angular_rate_z_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.Imu)
}

void Imu::SharedCtor() {
  ::memset(&utc_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_angular_rate_z_) -
      reinterpret_cast<char*>(&utc_time_)) + sizeof(raw_angular_rate_z_));
  _cached_size_ = 0;
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.Imu)
  SharedDtor();
}

void Imu::SharedDtor() {
}

void Imu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu::descriptor() {
  ::protobuf_imu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Imu& Imu::default_instance() {
  ::protobuf_imu_2eproto::InitDefaultsImu();
  return *internal_default_instance();
}

Imu* Imu::New(::google::protobuf::Arena* arena) const {
  Imu* n = new Imu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&utc_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_angular_rate_z_) -
      reinterpret_cast<char*>(&utc_time_)) + sizeof(raw_angular_rate_z_));
  _internal_metadata_.Clear();
}

bool Imu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.Imu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 utc_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float raw_acceleration_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_acceleration_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float raw_acceleration_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_acceleration_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float raw_acceleration_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_acceleration_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float raw_angular_rate_x = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_angular_rate_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float raw_angular_rate_y = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_angular_rate_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float raw_angular_rate_z = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raw_angular_rate_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.Imu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.Imu)
  return false;
#undef DO_
}

void Imu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 utc_time = 1;
  if (this->utc_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utc_time(), output);
  }

  // float heading = 2;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heading(), output);
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  // float roll = 4;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  // float raw_acceleration_x = 5;
  if (this->raw_acceleration_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->raw_acceleration_x(), output);
  }

  // float raw_acceleration_y = 6;
  if (this->raw_acceleration_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->raw_acceleration_y(), output);
  }

  // float raw_acceleration_z = 7;
  if (this->raw_acceleration_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->raw_acceleration_z(), output);
  }

  // float raw_angular_rate_x = 8;
  if (this->raw_angular_rate_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->raw_angular_rate_x(), output);
  }

  // float raw_angular_rate_y = 9;
  if (this->raw_angular_rate_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->raw_angular_rate_y(), output);
  }

  // float raw_angular_rate_z = 10;
  if (this->raw_angular_rate_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->raw_angular_rate_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.Imu)
}

::google::protobuf::uint8* Imu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 utc_time = 1;
  if (this->utc_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utc_time(), target);
  }

  // float heading = 2;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heading(), target);
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch(), target);
  }

  // float roll = 4;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  // float raw_acceleration_x = 5;
  if (this->raw_acceleration_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->raw_acceleration_x(), target);
  }

  // float raw_acceleration_y = 6;
  if (this->raw_acceleration_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->raw_acceleration_y(), target);
  }

  // float raw_acceleration_z = 7;
  if (this->raw_acceleration_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->raw_acceleration_z(), target);
  }

  // float raw_angular_rate_x = 8;
  if (this->raw_angular_rate_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->raw_angular_rate_x(), target);
  }

  // float raw_angular_rate_y = 9;
  if (this->raw_angular_rate_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->raw_angular_rate_y(), target);
  }

  // float raw_angular_rate_z = 10;
  if (this->raw_angular_rate_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->raw_angular_rate_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.Imu)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 utc_time = 1;
  if (this->utc_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->utc_time());
  }

  // float heading = 2;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 3;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 4;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float raw_acceleration_x = 5;
  if (this->raw_acceleration_x() != 0) {
    total_size += 1 + 4;
  }

  // float raw_acceleration_y = 6;
  if (this->raw_acceleration_y() != 0) {
    total_size += 1 + 4;
  }

  // float raw_acceleration_z = 7;
  if (this->raw_acceleration_z() != 0) {
    total_size += 1 + 4;
  }

  // float raw_angular_rate_x = 8;
  if (this->raw_angular_rate_x() != 0) {
    total_size += 1 + 4;
  }

  // float raw_angular_rate_y = 9;
  if (this->raw_angular_rate_y() != 0) {
    total_size += 1 + 4;
  }

  // float raw_angular_rate_z = 10;
  if (this->raw_angular_rate_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  const Imu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.Imu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.utc_time() != 0) {
    set_utc_time(from.utc_time());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.raw_acceleration_x() != 0) {
    set_raw_acceleration_x(from.raw_acceleration_x());
  }
  if (from.raw_acceleration_y() != 0) {
    set_raw_acceleration_y(from.raw_acceleration_y());
  }
  if (from.raw_acceleration_z() != 0) {
    set_raw_acceleration_z(from.raw_acceleration_z());
  }
  if (from.raw_angular_rate_x() != 0) {
    set_raw_angular_rate_x(from.raw_angular_rate_x());
  }
  if (from.raw_angular_rate_y() != 0) {
    set_raw_angular_rate_y(from.raw_angular_rate_y());
  }
  if (from.raw_angular_rate_z() != 0) {
    set_raw_angular_rate_z(from.raw_angular_rate_z());
  }
}

void Imu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::Swap(Imu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu::InternalSwap(Imu* other) {
  using std::swap;
  swap(utc_time_, other->utc_time_);
  swap(heading_, other->heading_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(raw_acceleration_x_, other->raw_acceleration_x_);
  swap(raw_acceleration_y_, other->raw_acceleration_y_);
  swap(raw_acceleration_z_, other->raw_acceleration_z_);
  swap(raw_angular_rate_x_, other->raw_angular_rate_x_);
  swap(raw_angular_rate_y_, other->raw_angular_rate_y_);
  swap(raw_angular_rate_z_, other->raw_angular_rate_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  protobuf_imu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImuMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ImuMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_ImuMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_ImuMsg_default_instance_._instance.get_mutable()->imu_ = const_cast< ::autodrive::workflow::proto::Imu*>(
      ::autodrive::workflow::proto::Imu::internal_default_instance());
}
void ImuMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ImuMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuMsg::kHeaderFieldNumber;
const int ImuMsg::kErrorFieldNumber;
const int ImuMsg::kImuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuMsg::ImuMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_imu_2eproto::InitDefaultsImuMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ImuMsg)
}
ImuMsg::ImuMsg(const ImuMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_imu()) {
    imu_ = new ::autodrive::workflow::proto::Imu(*from.imu_);
  } else {
    imu_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ImuMsg)
}

void ImuMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_) -
      reinterpret_cast<char*>(&header_)) + sizeof(imu_));
  _cached_size_ = 0;
}

ImuMsg::~ImuMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ImuMsg)
  SharedDtor();
}

void ImuMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete imu_;
}

void ImuMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuMsg::descriptor() {
  ::protobuf_imu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuMsg& ImuMsg::default_instance() {
  ::protobuf_imu_2eproto::InitDefaultsImuMsg();
  return *internal_default_instance();
}

ImuMsg* ImuMsg::New(::google::protobuf::Arena* arena) const {
  ImuMsg* n = new ImuMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ImuMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_ != NULL) {
    delete imu_;
  }
  imu_ = NULL;
  _internal_metadata_.Clear();
}

bool ImuMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ImuMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Imu imu = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ImuMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ImuMsg)
  return false;
#undef DO_
}

void ImuMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ImuMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.Imu imu = 3;
  if (this->has_imu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imu_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ImuMsg)
}

::google::protobuf::uint8* ImuMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ImuMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.Imu imu = 3;
  if (this->has_imu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->imu_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ImuMsg)
  return target;
}

size_t ImuMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ImuMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.Imu imu = 3;
  if (this->has_imu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->imu_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ImuMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ImuMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ImuMsg)
    MergeFrom(*source);
  }
}

void ImuMsg::MergeFrom(const ImuMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ImuMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_imu()) {
    mutable_imu()->::autodrive::workflow::proto::Imu::MergeFrom(from.imu());
  }
}

void ImuMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ImuMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuMsg::CopyFrom(const ImuMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ImuMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuMsg::IsInitialized() const {
  return true;
}

void ImuMsg::Swap(ImuMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuMsg::InternalSwap(ImuMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(imu_, other->imu_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuMsg::GetMetadata() const {
  protobuf_imu_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_imu_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
