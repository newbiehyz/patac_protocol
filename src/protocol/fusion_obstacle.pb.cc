// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_obstacle.proto

#include "fusion_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class TwoPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TwoPoints>
      _instance;
} _TwoPoints_default_instance_;
class FusionObstacleOutPutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FusionObstacleOutPut>
      _instance;
} _FusionObstacleOutPut_default_instance_;
class FusionObstaclesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FusionObstacles>
      _instance;
} _FusionObstacles_default_instance_;
class FusionObstacleMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FusionObstacleMsg>
      _instance;
} _FusionObstacleMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_fusion_5fobstacle_2eproto {
void InitDefaultsTwoPointsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::autodrive::workflow::proto::_TwoPoints_default_instance_;
    new (ptr) ::autodrive::workflow::proto::TwoPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::TwoPoints::InitAsDefaultInstance();
}

void InitDefaultsTwoPoints() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTwoPointsImpl);
}

void InitDefaultsFusionObstacleOutPutImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3f();
  protobuf_fusion_5fobstacle_2eproto::InitDefaultsTwoPoints();
  {
    void* ptr = &::autodrive::workflow::proto::_FusionObstacleOutPut_default_instance_;
    new (ptr) ::autodrive::workflow::proto::FusionObstacleOutPut();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::FusionObstacleOutPut::InitAsDefaultInstance();
}

void InitDefaultsFusionObstacleOutPut() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFusionObstacleOutPutImpl);
}

void InitDefaultsFusionObstaclesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_fusion_5fobstacle_2eproto::InitDefaultsFusionObstacleOutPut();
  {
    void* ptr = &::autodrive::workflow::proto::_FusionObstacles_default_instance_;
    new (ptr) ::autodrive::workflow::proto::FusionObstacles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::FusionObstacles::InitAsDefaultInstance();
}

void InitDefaultsFusionObstacles() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFusionObstaclesImpl);
}

void InitDefaultsFusionObstacleMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_fusion_5fobstacle_2eproto::InitDefaultsFusionObstacles();
  {
    void* ptr = &::autodrive::workflow::proto::_FusionObstacleMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::FusionObstacleMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::FusionObstacleMsg::InitAsDefaultInstance();
}

void InitDefaultsFusionObstacleMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFusionObstacleMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TwoPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TwoPoints, pos1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TwoPoints, pos2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, is_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, sensor_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, vision_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, uss_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, mono_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, obstacle_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, veh_sub_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, static_sub_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, motion_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, uss_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, pos_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, angular_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, ttc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, motion_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, motion_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, vel_abs_world_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleOutPut, acc_abs_world_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacles, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacles, obstacle_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::FusionObstacleMsg, fusion_obstacles_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::TwoPoints)},
  { 7, -1, sizeof(::autodrive::workflow::proto::FusionObstacleOutPut)},
  { 39, -1, sizeof(::autodrive::workflow::proto::FusionObstacles)},
  { 46, -1, sizeof(::autodrive::workflow::proto::FusionObstacleMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_TwoPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_FusionObstacleOutPut_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_FusionObstacles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_FusionObstacleMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fusion_obstacle.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025fusion_obstacle.proto\022\030autodrive.workf"
      "low.proto\032\013basic.proto\032\014common.proto\"o\n\t"
      "TwoPoints\0220\n\004pos1\030\001 \001(\0132\".autodrive.work"
      "flow.proto.Vector3f\0220\n\004pos2\030\002 \001(\0132\".auto"
      "drive.workflow.proto.Vector3f\"\253\010\n\024Fusion"
      "ObstacleOutPut\022\022\n\nis_updated\030\001 \001(\010\022\025\n\rse"
      "nsor_source\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\022\021\n\tvision_"
      "id\030\004 \001(\r\022\016\n\006uss_id\030\005 \001(\r\022\017\n\007mono_id\030\006 \001("
      "\r\022/\n\003pos\030\007 \001(\0132\".autodrive.workflow.prot"
      "o.Vector3f\022/\n\003vel\030\010 \001(\0132\".autodrive.work"
      "flow.proto.Vector3f\022/\n\003acc\030\t \001(\0132\".autod"
      "rive.workflow.proto.Vector3f\022\017\n\007heading\030"
      "\n \001(\002\022\025\n\robstacle_conf\030\013 \001(\002\022\r\n\005width\030\014 "
      "\001(\002\022\016\n\006length\030\r \001(\002\022\016\n\006height\030\016 \001(\002\022:\n\004t"
      "ype\030\017 \001(\0162,.autodrive.workflow.proto.Fus"
      "ionObstacleType\022>\n\014veh_sub_type\030\020 \001(\0162(."
      "autodrive.workflow.proto.VehicleSubType\022"
      "N\n\017static_sub_type\030\021 \001(\01625.autodrive.wor"
      "kflow.proto.FusionObstacleStaticSubType\022"
      "D\n\014motion_state\030\022 \001(\0162..autodrive.workfl"
      "ow.proto.ObstacleMotionStatus\0224\n\007uss_pos"
      "\030\023 \001(\0132#.autodrive.workflow.proto.TwoPoi"
      "nts\022\013\n\003age\030\024 \001(\r\0223\n\007pos_std\030\025 \001(\0132\".auto"
      "drive.workflow.proto.Vector3f\022\025\n\rangular"
      "_speed\030\026 \001(\002\022\013\n\003ttc\030\027 \001(\002\022I\n\017motion_cate"
      "gory\030\030 \001(\01620.autodrive.workflow.proto.Ob"
      "stacleMotionCategory\022O\n\022motion_orientati"
      "on\030\031 \001(\01623.autodrive.workflow.proto.Obst"
      "acleMotionOrientation\0229\n\rvel_abs_world\030\032"
      " \001(\0132\".autodrive.workflow.proto.Vector3f"
      "\0229\n\racc_abs_world\030\033 \001(\0132\".autodrive.work"
      "flow.proto.Vector3f\"k\n\017FusionObstacles\022\021"
      "\n\ttimestamp\030\001 \001(\003\022E\n\robstacle_list\030\002 \003(\013"
      "2..autodrive.workflow.proto.FusionObstac"
      "leOutPut\"\275\001\n\021FusionObstacleMsg\0223\n\006header"
      "\030\001 \001(\0132#.autodrive.workflow.proto.MsgHea"
      "der\022.\n\005error\030\002 \001(\0132\037.autodrive.workflow."
      "proto.Error\022C\n\020fusion_obstacles\030\003 \001(\0132)."
      "autodrive.workflow.proto.FusionObstacles"
      "*\343\003\n\022FusionObstacleType\022\036\n\032kFusionObstac"
      "leTypeVehicle\020\000\022!\n\035kFusionObstacleTypePe"
      "destrain\020\001\022\036\n\032kFusionObstacleTypeCyclist"
      "\020\002\022\035\n\031kFusionObstacleTypeAnimal\020\003\022\"\n\036kFu"
      "sionObstacleTypeTrafficCone\0202\022#\n\037kFusion"
      "ObstacleTypeCementColumn\0203\022\"\n\036kFusionObs"
      "tacleTypeParkingLock\0204\022!\n\035kFusionObstacl"
      "eTypeAFrameSign\0205\022\033\n\027kFusionObstacleType"
      "Curb\0206\022\034\n\030kFusionObstacleTypeFence\0207\022#\n\037"
      "kFusionObstacleTypeWaterBarrier\0208\022\036\n\032kFu"
      "sionObstacleTypeTrolley\0209\022\033\n\027kFusionObst"
      "acleTypeWall\020:\022\036\n\032kFusionObstacleTypeUnk"
      "nown\020d*\314\004\n\026ObstacleMotionCategory\022\"\n\036kOb"
      "stacleMotionCategoryInvalid\020\000\022$\n kObstac"
      "leMotionCategoryUndefined\020\001\022\"\n\036kObstacle"
      "MotionCategoryPassing\020\002\022$\n kObstacleMoti"
      "onCategoryPassingIn\020\003\022%\n!kObstacleMotion"
      "CategoryPassingOut\020\004\022%\n!kObstacleMotionC"
      "ategoryCloseCutIn\020\005\022#\n\037kObstacleMotionCa"
      "tegoryMovingIn\020\006\022$\n kObstacleMotionCateg"
      "oryMovingOut\020\007\022#\n\037kObstacleMotionCategor"
      "yCrossing\020\010\022%\n!kObstacleMotionCategoryLe"
      "ftTurnAP\020\t\022&\n\"kObstacleMotionCategoryRig"
      "htTurnAP\020\n\022!\n\035kObstacleMotionCategoryMov"
      "ing\020\013\022$\n kObstacleMotionCategoryPrecedin"
      "g\020\014\022#\n\037kObstacleMotionCategoryOncoming\020\r"
      "\022#\n\037kObstacleMotionCategoryEnumSize\020\016*\252\003"
      "\n\031ObstacleMotionOrientation\022\'\n#kObstacle"
      "MotionOrientationUndefined\020\000\022+\n\'kObstacl"
      "eMotionOrientationDriftingRight\020\001\022+\n\'kOb"
      "stacleMotionOrientationCrossingRight\020\002\0220"
      "\n,kObstacleMotionOrientationOncomingDrif"
      "tRight\020\003\022&\n\"kObstacleMotionOrientationOn"
      "coming\020\004\022/\n+kObstacleMotionOrientationOn"
      "comingDriftLeft\020\005\022*\n&kObstacleMotionOrie"
      "ntationCrossingLeft\020\006\022*\n&kObstacleMotion"
      "OrientationDriftingLeft\020\007\022\'\n#kObstacleMo"
      "tionOrientationPreceding\020\010*\303\001\n\024ObstacleM"
      "otionStatus\022 \n\034kObstacleMotionStatusUnkn"
      "own\020\000\022\037\n\033kObstacleMotionStatusMoving\020\001\022!"
      "\n\035kObstacleMotionStatusOncoming\020\002\022 \n\034kOb"
      "stacleMotionStatusStopped\020\003\022#\n\037kObstacle"
      "MotionStatusStationary\020\004*\362\002\n\016VehicleSubT"
      "ype\022\032\n\026kVehicleSubTypeUnknown\020\000\022\026\n\022kVehi"
      "cleSubTypeCar\020\001\022\026\n\022kVehicleSubTypeSUV\020\002\022"
      "\026\n\022kVehicleSubTypeVan\020\003\022\026\n\022kVehicleSubTy"
      "peBus\020\004\022\030\n\024kVehicleSubTypeTruck\020\005\022\034\n\030kVe"
      "hicleSubTypeAmbulance\020\006\022\034\n\030kVehicleSubTy"
      "pePoliceCar\020\007\022\034\n\030kVehicleSubTypeFireTruc"
      "k\020\010\022\033\n\027kVehicleSubTypeTricycle\020\t\022\035\n\031kVeh"
      "icleSubTypeSpecialCar\020\n\022\032\n\026kVehicleSubTy"
      "peTinyCar\020\013\022\030\n\024kVehicleSubTypeMotor\020\014*\273\001"
      "\n\033FusionObstacleStaticSubType\022\037\n\033kSubTyp"
      "eParkLockTypeUnknown\020\000\022\034\n\030kSubTypeParkLo"
      "ckTypeOpen\020\001\022\035\n\031kSubTypeParkLockTypeClos"
      "e\020\002\022\036\n\032kSubTypeFireHydrantTypeAir\020\003\022\036\n\032k"
      "SubTypeFireHydrantTypeGnd\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3835);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fusion_obstacle.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fusion_5fobstacle_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* FusionObstacleType_descriptor() {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fobstacle_2eproto::file_level_enum_descriptors[0];
}
bool FusionObstacleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ObstacleMotionCategory_descriptor() {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fobstacle_2eproto::file_level_enum_descriptors[1];
}
bool ObstacleMotionCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ObstacleMotionOrientation_descriptor() {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fobstacle_2eproto::file_level_enum_descriptors[2];
}
bool ObstacleMotionOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ObstacleMotionStatus_descriptor() {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fobstacle_2eproto::file_level_enum_descriptors[3];
}
bool ObstacleMotionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VehicleSubType_descriptor() {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fobstacle_2eproto::file_level_enum_descriptors[4];
}
bool VehicleSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FusionObstacleStaticSubType_descriptor() {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fusion_5fobstacle_2eproto::file_level_enum_descriptors[5];
}
bool FusionObstacleStaticSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TwoPoints::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_TwoPoints_default_instance_._instance.get_mutable()->pos1_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_TwoPoints_default_instance_._instance.get_mutable()->pos2_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
}
void TwoPoints::clear_pos1() {
  if (GetArenaNoVirtual() == NULL && pos1_ != NULL) {
    delete pos1_;
  }
  pos1_ = NULL;
}
void TwoPoints::clear_pos2() {
  if (GetArenaNoVirtual() == NULL && pos2_ != NULL) {
    delete pos2_;
  }
  pos2_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwoPoints::kPos1FieldNumber;
const int TwoPoints::kPos2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwoPoints::TwoPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fusion_5fobstacle_2eproto::InitDefaultsTwoPoints();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.TwoPoints)
}
TwoPoints::TwoPoints(const TwoPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos1()) {
    pos1_ = new ::autodrive::workflow::proto::Vector3f(*from.pos1_);
  } else {
    pos1_ = NULL;
  }
  if (from.has_pos2()) {
    pos2_ = new ::autodrive::workflow::proto::Vector3f(*from.pos2_);
  } else {
    pos2_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.TwoPoints)
}

void TwoPoints::SharedCtor() {
  ::memset(&pos1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos2_) -
      reinterpret_cast<char*>(&pos1_)) + sizeof(pos2_));
  _cached_size_ = 0;
}

TwoPoints::~TwoPoints() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.TwoPoints)
  SharedDtor();
}

void TwoPoints::SharedDtor() {
  if (this != internal_default_instance()) delete pos1_;
  if (this != internal_default_instance()) delete pos2_;
}

void TwoPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwoPoints::descriptor() {
  ::protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TwoPoints& TwoPoints::default_instance() {
  ::protobuf_fusion_5fobstacle_2eproto::InitDefaultsTwoPoints();
  return *internal_default_instance();
}

TwoPoints* TwoPoints::New(::google::protobuf::Arena* arena) const {
  TwoPoints* n = new TwoPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TwoPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.TwoPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos1_ != NULL) {
    delete pos1_;
  }
  pos1_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos2_ != NULL) {
    delete pos2_;
  }
  pos2_ = NULL;
  _internal_metadata_.Clear();
}

bool TwoPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.TwoPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.Vector3f pos1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f pos2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.TwoPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.TwoPoints)
  return false;
#undef DO_
}

void TwoPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.TwoPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f pos1 = 1;
  if (this->has_pos1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos1_, output);
  }

  // .autodrive.workflow.proto.Vector3f pos2 = 2;
  if (this->has_pos2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos2_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.TwoPoints)
}

::google::protobuf::uint8* TwoPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.TwoPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f pos1 = 1;
  if (this->has_pos1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->pos1_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f pos2 = 2;
  if (this->has_pos2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->pos2_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.TwoPoints)
  return target;
}

size_t TwoPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.TwoPoints)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector3f pos1 = 1;
  if (this->has_pos1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pos1_);
  }

  // .autodrive.workflow.proto.Vector3f pos2 = 2;
  if (this->has_pos2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pos2_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwoPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.TwoPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const TwoPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwoPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.TwoPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.TwoPoints)
    MergeFrom(*source);
  }
}

void TwoPoints::MergeFrom(const TwoPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.TwoPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos1()) {
    mutable_pos1()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.pos1());
  }
  if (from.has_pos2()) {
    mutable_pos2()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.pos2());
  }
}

void TwoPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.TwoPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoPoints::CopyFrom(const TwoPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.TwoPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoPoints::IsInitialized() const {
  return true;
}

void TwoPoints::Swap(TwoPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwoPoints::InternalSwap(TwoPoints* other) {
  using std::swap;
  swap(pos1_, other->pos1_);
  swap(pos2_, other->pos2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TwoPoints::GetMetadata() const {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FusionObstacleOutPut::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_FusionObstacleOutPut_default_instance_._instance.get_mutable()->pos_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_FusionObstacleOutPut_default_instance_._instance.get_mutable()->vel_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_FusionObstacleOutPut_default_instance_._instance.get_mutable()->acc_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_FusionObstacleOutPut_default_instance_._instance.get_mutable()->uss_pos_ = const_cast< ::autodrive::workflow::proto::TwoPoints*>(
      ::autodrive::workflow::proto::TwoPoints::internal_default_instance());
  ::autodrive::workflow::proto::_FusionObstacleOutPut_default_instance_._instance.get_mutable()->pos_std_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_FusionObstacleOutPut_default_instance_._instance.get_mutable()->vel_abs_world_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
  ::autodrive::workflow::proto::_FusionObstacleOutPut_default_instance_._instance.get_mutable()->acc_abs_world_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
}
void FusionObstacleOutPut::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
void FusionObstacleOutPut::clear_vel() {
  if (GetArenaNoVirtual() == NULL && vel_ != NULL) {
    delete vel_;
  }
  vel_ = NULL;
}
void FusionObstacleOutPut::clear_acc() {
  if (GetArenaNoVirtual() == NULL && acc_ != NULL) {
    delete acc_;
  }
  acc_ = NULL;
}
void FusionObstacleOutPut::clear_pos_std() {
  if (GetArenaNoVirtual() == NULL && pos_std_ != NULL) {
    delete pos_std_;
  }
  pos_std_ = NULL;
}
void FusionObstacleOutPut::clear_vel_abs_world() {
  if (GetArenaNoVirtual() == NULL && vel_abs_world_ != NULL) {
    delete vel_abs_world_;
  }
  vel_abs_world_ = NULL;
}
void FusionObstacleOutPut::clear_acc_abs_world() {
  if (GetArenaNoVirtual() == NULL && acc_abs_world_ != NULL) {
    delete acc_abs_world_;
  }
  acc_abs_world_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FusionObstacleOutPut::kIsUpdatedFieldNumber;
const int FusionObstacleOutPut::kSensorSourceFieldNumber;
const int FusionObstacleOutPut::kIdFieldNumber;
const int FusionObstacleOutPut::kVisionIdFieldNumber;
const int FusionObstacleOutPut::kUssIdFieldNumber;
const int FusionObstacleOutPut::kMonoIdFieldNumber;
const int FusionObstacleOutPut::kPosFieldNumber;
const int FusionObstacleOutPut::kVelFieldNumber;
const int FusionObstacleOutPut::kAccFieldNumber;
const int FusionObstacleOutPut::kHeadingFieldNumber;
const int FusionObstacleOutPut::kObstacleConfFieldNumber;
const int FusionObstacleOutPut::kWidthFieldNumber;
const int FusionObstacleOutPut::kLengthFieldNumber;
const int FusionObstacleOutPut::kHeightFieldNumber;
const int FusionObstacleOutPut::kTypeFieldNumber;
const int FusionObstacleOutPut::kVehSubTypeFieldNumber;
const int FusionObstacleOutPut::kStaticSubTypeFieldNumber;
const int FusionObstacleOutPut::kMotionStateFieldNumber;
const int FusionObstacleOutPut::kUssPosFieldNumber;
const int FusionObstacleOutPut::kAgeFieldNumber;
const int FusionObstacleOutPut::kPosStdFieldNumber;
const int FusionObstacleOutPut::kAngularSpeedFieldNumber;
const int FusionObstacleOutPut::kTtcFieldNumber;
const int FusionObstacleOutPut::kMotionCategoryFieldNumber;
const int FusionObstacleOutPut::kMotionOrientationFieldNumber;
const int FusionObstacleOutPut::kVelAbsWorldFieldNumber;
const int FusionObstacleOutPut::kAccAbsWorldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FusionObstacleOutPut::FusionObstacleOutPut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fusion_5fobstacle_2eproto::InitDefaultsFusionObstacleOutPut();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.FusionObstacleOutPut)
}
FusionObstacleOutPut::FusionObstacleOutPut(const FusionObstacleOutPut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::autodrive::workflow::proto::Vector3f(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_vel()) {
    vel_ = new ::autodrive::workflow::proto::Vector3f(*from.vel_);
  } else {
    vel_ = NULL;
  }
  if (from.has_acc()) {
    acc_ = new ::autodrive::workflow::proto::Vector3f(*from.acc_);
  } else {
    acc_ = NULL;
  }
  if (from.has_uss_pos()) {
    uss_pos_ = new ::autodrive::workflow::proto::TwoPoints(*from.uss_pos_);
  } else {
    uss_pos_ = NULL;
  }
  if (from.has_pos_std()) {
    pos_std_ = new ::autodrive::workflow::proto::Vector3f(*from.pos_std_);
  } else {
    pos_std_ = NULL;
  }
  if (from.has_vel_abs_world()) {
    vel_abs_world_ = new ::autodrive::workflow::proto::Vector3f(*from.vel_abs_world_);
  } else {
    vel_abs_world_ = NULL;
  }
  if (from.has_acc_abs_world()) {
    acc_abs_world_ = new ::autodrive::workflow::proto::Vector3f(*from.acc_abs_world_);
  } else {
    acc_abs_world_ = NULL;
  }
  ::memcpy(&is_updated_, &from.is_updated_,
    static_cast<size_t>(reinterpret_cast<char*>(&motion_orientation_) -
    reinterpret_cast<char*>(&is_updated_)) + sizeof(motion_orientation_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.FusionObstacleOutPut)
}

void FusionObstacleOutPut::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motion_orientation_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(motion_orientation_));
  _cached_size_ = 0;
}

FusionObstacleOutPut::~FusionObstacleOutPut() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.FusionObstacleOutPut)
  SharedDtor();
}

void FusionObstacleOutPut::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete uss_pos_;
  if (this != internal_default_instance()) delete pos_std_;
  if (this != internal_default_instance()) delete vel_abs_world_;
  if (this != internal_default_instance()) delete acc_abs_world_;
}

void FusionObstacleOutPut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FusionObstacleOutPut::descriptor() {
  ::protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FusionObstacleOutPut& FusionObstacleOutPut::default_instance() {
  ::protobuf_fusion_5fobstacle_2eproto::InitDefaultsFusionObstacleOutPut();
  return *internal_default_instance();
}

FusionObstacleOutPut* FusionObstacleOutPut::New(::google::protobuf::Arena* arena) const {
  FusionObstacleOutPut* n = new FusionObstacleOutPut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FusionObstacleOutPut::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.FusionObstacleOutPut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && vel_ != NULL) {
    delete vel_;
  }
  vel_ = NULL;
  if (GetArenaNoVirtual() == NULL && acc_ != NULL) {
    delete acc_;
  }
  acc_ = NULL;
  if (GetArenaNoVirtual() == NULL && uss_pos_ != NULL) {
    delete uss_pos_;
  }
  uss_pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos_std_ != NULL) {
    delete pos_std_;
  }
  pos_std_ = NULL;
  if (GetArenaNoVirtual() == NULL && vel_abs_world_ != NULL) {
    delete vel_abs_world_;
  }
  vel_abs_world_ = NULL;
  if (GetArenaNoVirtual() == NULL && acc_abs_world_ != NULL) {
    delete acc_abs_world_;
  }
  acc_abs_world_ = NULL;
  ::memset(&is_updated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motion_orientation_) -
      reinterpret_cast<char*>(&is_updated_)) + sizeof(motion_orientation_));
  _internal_metadata_.Clear();
}

bool FusionObstacleOutPut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.FusionObstacleOutPut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_updated = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vision_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vision_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uss_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uss_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mono_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mono_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f pos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f vel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f acc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float obstacle_conf = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obstacle_conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.FusionObstacleType type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::autodrive::workflow::proto::FusionObstacleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.VehicleSubType veh_sub_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_veh_sub_type(static_cast< ::autodrive::workflow::proto::VehicleSubType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.FusionObstacleStaticSubType static_sub_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_static_sub_type(static_cast< ::autodrive::workflow::proto::FusionObstacleStaticSubType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ObstacleMotionStatus motion_state = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_state(static_cast< ::autodrive::workflow::proto::ObstacleMotionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.TwoPoints uss_pos = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uss_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 age = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f pos_std = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos_std()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angular_speed = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ttc = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ttc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ObstacleMotionCategory motion_category = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_category(static_cast< ::autodrive::workflow::proto::ObstacleMotionCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.ObstacleMotionOrientation motion_orientation = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_orientation(static_cast< ::autodrive::workflow::proto::ObstacleMotionOrientation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f vel_abs_world = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vel_abs_world()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3f acc_abs_world = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acc_abs_world()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.FusionObstacleOutPut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.FusionObstacleOutPut)
  return false;
#undef DO_
}

void FusionObstacleOutPut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.FusionObstacleOutPut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_updated = 1;
  if (this->is_updated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_updated(), output);
  }

  // uint32 sensor_source = 2;
  if (this->sensor_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sensor_source(), output);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // uint32 vision_id = 4;
  if (this->vision_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vision_id(), output);
  }

  // uint32 uss_id = 5;
  if (this->uss_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uss_id(), output);
  }

  // uint32 mono_id = 6;
  if (this->mono_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mono_id(), output);
  }

  // .autodrive.workflow.proto.Vector3f pos = 7;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->pos_, output);
  }

  // .autodrive.workflow.proto.Vector3f vel = 8;
  if (this->has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->vel_, output);
  }

  // .autodrive.workflow.proto.Vector3f acc = 9;
  if (this->has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->acc_, output);
  }

  // float heading = 10;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->heading(), output);
  }

  // float obstacle_conf = 11;
  if (this->obstacle_conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->obstacle_conf(), output);
  }

  // float width = 12;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->width(), output);
  }

  // float length = 13;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->length(), output);
  }

  // float height = 14;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->height(), output);
  }

  // .autodrive.workflow.proto.FusionObstacleType type = 15;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->type(), output);
  }

  // .autodrive.workflow.proto.VehicleSubType veh_sub_type = 16;
  if (this->veh_sub_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->veh_sub_type(), output);
  }

  // .autodrive.workflow.proto.FusionObstacleStaticSubType static_sub_type = 17;
  if (this->static_sub_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->static_sub_type(), output);
  }

  // .autodrive.workflow.proto.ObstacleMotionStatus motion_state = 18;
  if (this->motion_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->motion_state(), output);
  }

  // .autodrive.workflow.proto.TwoPoints uss_pos = 19;
  if (this->has_uss_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->uss_pos_, output);
  }

  // uint32 age = 20;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->age(), output);
  }

  // .autodrive.workflow.proto.Vector3f pos_std = 21;
  if (this->has_pos_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->pos_std_, output);
  }

  // float angular_speed = 22;
  if (this->angular_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->angular_speed(), output);
  }

  // float ttc = 23;
  if (this->ttc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->ttc(), output);
  }

  // .autodrive.workflow.proto.ObstacleMotionCategory motion_category = 24;
  if (this->motion_category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->motion_category(), output);
  }

  // .autodrive.workflow.proto.ObstacleMotionOrientation motion_orientation = 25;
  if (this->motion_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->motion_orientation(), output);
  }

  // .autodrive.workflow.proto.Vector3f vel_abs_world = 26;
  if (this->has_vel_abs_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->vel_abs_world_, output);
  }

  // .autodrive.workflow.proto.Vector3f acc_abs_world = 27;
  if (this->has_acc_abs_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->acc_abs_world_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.FusionObstacleOutPut)
}

::google::protobuf::uint8* FusionObstacleOutPut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.FusionObstacleOutPut)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_updated = 1;
  if (this->is_updated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_updated(), target);
  }

  // uint32 sensor_source = 2;
  if (this->sensor_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sensor_source(), target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // uint32 vision_id = 4;
  if (this->vision_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vision_id(), target);
  }

  // uint32 uss_id = 5;
  if (this->uss_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uss_id(), target);
  }

  // uint32 mono_id = 6;
  if (this->mono_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mono_id(), target);
  }

  // .autodrive.workflow.proto.Vector3f pos = 7;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->pos_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f vel = 8;
  if (this->has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->vel_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f acc = 9;
  if (this->has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->acc_, deterministic, target);
  }

  // float heading = 10;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->heading(), target);
  }

  // float obstacle_conf = 11;
  if (this->obstacle_conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->obstacle_conf(), target);
  }

  // float width = 12;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->width(), target);
  }

  // float length = 13;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->length(), target);
  }

  // float height = 14;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->height(), target);
  }

  // .autodrive.workflow.proto.FusionObstacleType type = 15;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->type(), target);
  }

  // .autodrive.workflow.proto.VehicleSubType veh_sub_type = 16;
  if (this->veh_sub_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->veh_sub_type(), target);
  }

  // .autodrive.workflow.proto.FusionObstacleStaticSubType static_sub_type = 17;
  if (this->static_sub_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->static_sub_type(), target);
  }

  // .autodrive.workflow.proto.ObstacleMotionStatus motion_state = 18;
  if (this->motion_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->motion_state(), target);
  }

  // .autodrive.workflow.proto.TwoPoints uss_pos = 19;
  if (this->has_uss_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, *this->uss_pos_, deterministic, target);
  }

  // uint32 age = 20;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->age(), target);
  }

  // .autodrive.workflow.proto.Vector3f pos_std = 21;
  if (this->has_pos_std()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, *this->pos_std_, deterministic, target);
  }

  // float angular_speed = 22;
  if (this->angular_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->angular_speed(), target);
  }

  // float ttc = 23;
  if (this->ttc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->ttc(), target);
  }

  // .autodrive.workflow.proto.ObstacleMotionCategory motion_category = 24;
  if (this->motion_category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->motion_category(), target);
  }

  // .autodrive.workflow.proto.ObstacleMotionOrientation motion_orientation = 25;
  if (this->motion_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->motion_orientation(), target);
  }

  // .autodrive.workflow.proto.Vector3f vel_abs_world = 26;
  if (this->has_vel_abs_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, *this->vel_abs_world_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3f acc_abs_world = 27;
  if (this->has_acc_abs_world()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, *this->acc_abs_world_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.FusionObstacleOutPut)
  return target;
}

size_t FusionObstacleOutPut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.FusionObstacleOutPut)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector3f pos = 7;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pos_);
  }

  // .autodrive.workflow.proto.Vector3f vel = 8;
  if (this->has_vel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vel_);
  }

  // .autodrive.workflow.proto.Vector3f acc = 9;
  if (this->has_acc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acc_);
  }

  // .autodrive.workflow.proto.TwoPoints uss_pos = 19;
  if (this->has_uss_pos()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->uss_pos_);
  }

  // .autodrive.workflow.proto.Vector3f pos_std = 21;
  if (this->has_pos_std()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pos_std_);
  }

  // .autodrive.workflow.proto.Vector3f vel_abs_world = 26;
  if (this->has_vel_abs_world()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vel_abs_world_);
  }

  // .autodrive.workflow.proto.Vector3f acc_abs_world = 27;
  if (this->has_acc_abs_world()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acc_abs_world_);
  }

  // bool is_updated = 1;
  if (this->is_updated() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sensor_source = 2;
  if (this->sensor_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_source());
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 vision_id = 4;
  if (this->vision_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vision_id());
  }

  // uint32 uss_id = 5;
  if (this->uss_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uss_id());
  }

  // uint32 mono_id = 6;
  if (this->mono_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mono_id());
  }

  // float heading = 10;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  // float obstacle_conf = 11;
  if (this->obstacle_conf() != 0) {
    total_size += 1 + 4;
  }

  // float width = 12;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float length = 13;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float height = 14;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // .autodrive.workflow.proto.FusionObstacleType type = 15;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .autodrive.workflow.proto.VehicleSubType veh_sub_type = 16;
  if (this->veh_sub_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->veh_sub_type());
  }

  // .autodrive.workflow.proto.FusionObstacleStaticSubType static_sub_type = 17;
  if (this->static_sub_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->static_sub_type());
  }

  // .autodrive.workflow.proto.ObstacleMotionStatus motion_state = 18;
  if (this->motion_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_state());
  }

  // uint32 age = 20;
  if (this->age() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->age());
  }

  // float angular_speed = 22;
  if (this->angular_speed() != 0) {
    total_size += 2 + 4;
  }

  // float ttc = 23;
  if (this->ttc() != 0) {
    total_size += 2 + 4;
  }

  // .autodrive.workflow.proto.ObstacleMotionCategory motion_category = 24;
  if (this->motion_category() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_category());
  }

  // .autodrive.workflow.proto.ObstacleMotionOrientation motion_orientation = 25;
  if (this->motion_orientation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_orientation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FusionObstacleOutPut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.FusionObstacleOutPut)
  GOOGLE_DCHECK_NE(&from, this);
  const FusionObstacleOutPut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FusionObstacleOutPut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.FusionObstacleOutPut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.FusionObstacleOutPut)
    MergeFrom(*source);
  }
}

void FusionObstacleOutPut::MergeFrom(const FusionObstacleOutPut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.FusionObstacleOutPut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.pos());
  }
  if (from.has_vel()) {
    mutable_vel()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.vel());
  }
  if (from.has_acc()) {
    mutable_acc()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.acc());
  }
  if (from.has_uss_pos()) {
    mutable_uss_pos()->::autodrive::workflow::proto::TwoPoints::MergeFrom(from.uss_pos());
  }
  if (from.has_pos_std()) {
    mutable_pos_std()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.pos_std());
  }
  if (from.has_vel_abs_world()) {
    mutable_vel_abs_world()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.vel_abs_world());
  }
  if (from.has_acc_abs_world()) {
    mutable_acc_abs_world()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.acc_abs_world());
  }
  if (from.is_updated() != 0) {
    set_is_updated(from.is_updated());
  }
  if (from.sensor_source() != 0) {
    set_sensor_source(from.sensor_source());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.vision_id() != 0) {
    set_vision_id(from.vision_id());
  }
  if (from.uss_id() != 0) {
    set_uss_id(from.uss_id());
  }
  if (from.mono_id() != 0) {
    set_mono_id(from.mono_id());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.obstacle_conf() != 0) {
    set_obstacle_conf(from.obstacle_conf());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.veh_sub_type() != 0) {
    set_veh_sub_type(from.veh_sub_type());
  }
  if (from.static_sub_type() != 0) {
    set_static_sub_type(from.static_sub_type());
  }
  if (from.motion_state() != 0) {
    set_motion_state(from.motion_state());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.angular_speed() != 0) {
    set_angular_speed(from.angular_speed());
  }
  if (from.ttc() != 0) {
    set_ttc(from.ttc());
  }
  if (from.motion_category() != 0) {
    set_motion_category(from.motion_category());
  }
  if (from.motion_orientation() != 0) {
    set_motion_orientation(from.motion_orientation());
  }
}

void FusionObstacleOutPut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.FusionObstacleOutPut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusionObstacleOutPut::CopyFrom(const FusionObstacleOutPut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.FusionObstacleOutPut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionObstacleOutPut::IsInitialized() const {
  return true;
}

void FusionObstacleOutPut::Swap(FusionObstacleOutPut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FusionObstacleOutPut::InternalSwap(FusionObstacleOutPut* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(vel_, other->vel_);
  swap(acc_, other->acc_);
  swap(uss_pos_, other->uss_pos_);
  swap(pos_std_, other->pos_std_);
  swap(vel_abs_world_, other->vel_abs_world_);
  swap(acc_abs_world_, other->acc_abs_world_);
  swap(is_updated_, other->is_updated_);
  swap(sensor_source_, other->sensor_source_);
  swap(id_, other->id_);
  swap(vision_id_, other->vision_id_);
  swap(uss_id_, other->uss_id_);
  swap(mono_id_, other->mono_id_);
  swap(heading_, other->heading_);
  swap(obstacle_conf_, other->obstacle_conf_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(height_, other->height_);
  swap(type_, other->type_);
  swap(veh_sub_type_, other->veh_sub_type_);
  swap(static_sub_type_, other->static_sub_type_);
  swap(motion_state_, other->motion_state_);
  swap(age_, other->age_);
  swap(angular_speed_, other->angular_speed_);
  swap(ttc_, other->ttc_);
  swap(motion_category_, other->motion_category_);
  swap(motion_orientation_, other->motion_orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FusionObstacleOutPut::GetMetadata() const {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FusionObstacles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FusionObstacles::kTimestampFieldNumber;
const int FusionObstacles::kObstacleListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FusionObstacles::FusionObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fusion_5fobstacle_2eproto::InitDefaultsFusionObstacles();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.FusionObstacles)
}
FusionObstacles::FusionObstacles(const FusionObstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obstacle_list_(from.obstacle_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.FusionObstacles)
}

void FusionObstacles::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

FusionObstacles::~FusionObstacles() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.FusionObstacles)
  SharedDtor();
}

void FusionObstacles::SharedDtor() {
}

void FusionObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FusionObstacles::descriptor() {
  ::protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FusionObstacles& FusionObstacles::default_instance() {
  ::protobuf_fusion_5fobstacle_2eproto::InitDefaultsFusionObstacles();
  return *internal_default_instance();
}

FusionObstacles* FusionObstacles::New(::google::protobuf::Arena* arena) const {
  FusionObstacles* n = new FusionObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FusionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.FusionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_list_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FusionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.FusionObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.FusionObstacleOutPut obstacle_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_obstacle_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.FusionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.FusionObstacles)
  return false;
#undef DO_
}

void FusionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.FusionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // repeated .autodrive.workflow.proto.FusionObstacleOutPut obstacle_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obstacle_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.FusionObstacles)
}

::google::protobuf::uint8* FusionObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.FusionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // repeated .autodrive.workflow.proto.FusionObstacleOutPut obstacle_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->obstacle_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.FusionObstacles)
  return target;
}

size_t FusionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.FusionObstacles)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.FusionObstacleOutPut obstacle_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle_list(static_cast<int>(i)));
    }
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FusionObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.FusionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const FusionObstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FusionObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.FusionObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.FusionObstacles)
    MergeFrom(*source);
  }
}

void FusionObstacles::MergeFrom(const FusionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.FusionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_list_.MergeFrom(from.obstacle_list_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void FusionObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.FusionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusionObstacles::CopyFrom(const FusionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.FusionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionObstacles::IsInitialized() const {
  return true;
}

void FusionObstacles::Swap(FusionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FusionObstacles::InternalSwap(FusionObstacles* other) {
  using std::swap;
  obstacle_list_.InternalSwap(&other->obstacle_list_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FusionObstacles::GetMetadata() const {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FusionObstacleMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_FusionObstacleMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_FusionObstacleMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_FusionObstacleMsg_default_instance_._instance.get_mutable()->fusion_obstacles_ = const_cast< ::autodrive::workflow::proto::FusionObstacles*>(
      ::autodrive::workflow::proto::FusionObstacles::internal_default_instance());
}
void FusionObstacleMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void FusionObstacleMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FusionObstacleMsg::kHeaderFieldNumber;
const int FusionObstacleMsg::kErrorFieldNumber;
const int FusionObstacleMsg::kFusionObstaclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FusionObstacleMsg::FusionObstacleMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fusion_5fobstacle_2eproto::InitDefaultsFusionObstacleMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.FusionObstacleMsg)
}
FusionObstacleMsg::FusionObstacleMsg(const FusionObstacleMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_fusion_obstacles()) {
    fusion_obstacles_ = new ::autodrive::workflow::proto::FusionObstacles(*from.fusion_obstacles_);
  } else {
    fusion_obstacles_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.FusionObstacleMsg)
}

void FusionObstacleMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fusion_obstacles_) -
      reinterpret_cast<char*>(&header_)) + sizeof(fusion_obstacles_));
  _cached_size_ = 0;
}

FusionObstacleMsg::~FusionObstacleMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.FusionObstacleMsg)
  SharedDtor();
}

void FusionObstacleMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete fusion_obstacles_;
}

void FusionObstacleMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FusionObstacleMsg::descriptor() {
  ::protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FusionObstacleMsg& FusionObstacleMsg::default_instance() {
  ::protobuf_fusion_5fobstacle_2eproto::InitDefaultsFusionObstacleMsg();
  return *internal_default_instance();
}

FusionObstacleMsg* FusionObstacleMsg::New(::google::protobuf::Arena* arena) const {
  FusionObstacleMsg* n = new FusionObstacleMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FusionObstacleMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.FusionObstacleMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && fusion_obstacles_ != NULL) {
    delete fusion_obstacles_;
  }
  fusion_obstacles_ = NULL;
  _internal_metadata_.Clear();
}

bool FusionObstacleMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.FusionObstacleMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.FusionObstacles fusion_obstacles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fusion_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.FusionObstacleMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.FusionObstacleMsg)
  return false;
#undef DO_
}

void FusionObstacleMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.FusionObstacleMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.FusionObstacles fusion_obstacles = 3;
  if (this->has_fusion_obstacles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fusion_obstacles_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.FusionObstacleMsg)
}

::google::protobuf::uint8* FusionObstacleMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.FusionObstacleMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.FusionObstacles fusion_obstacles = 3;
  if (this->has_fusion_obstacles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->fusion_obstacles_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.FusionObstacleMsg)
  return target;
}

size_t FusionObstacleMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.FusionObstacleMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.FusionObstacles fusion_obstacles = 3;
  if (this->has_fusion_obstacles()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fusion_obstacles_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FusionObstacleMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.FusionObstacleMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FusionObstacleMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FusionObstacleMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.FusionObstacleMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.FusionObstacleMsg)
    MergeFrom(*source);
  }
}

void FusionObstacleMsg::MergeFrom(const FusionObstacleMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.FusionObstacleMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_fusion_obstacles()) {
    mutable_fusion_obstacles()->::autodrive::workflow::proto::FusionObstacles::MergeFrom(from.fusion_obstacles());
  }
}

void FusionObstacleMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.FusionObstacleMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusionObstacleMsg::CopyFrom(const FusionObstacleMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.FusionObstacleMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionObstacleMsg::IsInitialized() const {
  return true;
}

void FusionObstacleMsg::Swap(FusionObstacleMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FusionObstacleMsg::InternalSwap(FusionObstacleMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(fusion_obstacles_, other->fusion_obstacles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FusionObstacleMsg::GetMetadata() const {
  protobuf_fusion_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fusion_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
