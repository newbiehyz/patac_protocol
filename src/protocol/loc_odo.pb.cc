// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loc_odo.proto

#include "loc_odo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
namespace loc_odo {
class Quaternion4dDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaternion4d>
      _instance;
} _Quaternion4d_default_instance_;
class OdometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odometry>
      _instance;
} _Odometry_default_instance_;
}  // namespace loc_odo
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_loc_5fodo_2eproto {
void InitDefaultsQuaternion4dImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::loc_odo::_Quaternion4d_default_instance_;
    new (ptr) ::autodrive::workflow::proto::loc_odo::Quaternion4d();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::loc_odo::Quaternion4d::InitAsDefaultInstance();
}

void InitDefaultsQuaternion4d() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuaternion4dImpl);
}

void InitDefaultsOdometryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_loc_5fodo_2eproto::InitDefaultsQuaternion4d();
  protobuf_basic_2eproto::InitDefaultsVector3d();
  {
    void* ptr = &::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_;
    new (ptr) ::autodrive::workflow::proto::loc_odo::Odometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::loc_odo::Odometry::InitAsDefaultInstance();
}

void InitDefaultsOdometry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOdometryImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Quaternion4d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Quaternion4d, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Quaternion4d, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Quaternion4d, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Quaternion4d, w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, quaternion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, seq_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, pose_cov_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, twist_cov_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, map_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::loc_odo::Odometry, floor_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::loc_odo::Quaternion4d)},
  { 9, -1, sizeof(::autodrive::workflow::proto::loc_odo::Odometry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::loc_odo::_Quaternion4d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "loc_odo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rloc_odo.proto\022 autodrive.workflow.prot"
      "o.loc_odo\032\013basic.proto\":\n\014Quaternion4d\022\t"
      "\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001"
      "(\001\"\372\003\n\010Odometry\022\r\n\005stamp\030\001 \001(\004\022B\n\nquater"
      "nion\030\002 \001(\0132..autodrive.workflow.proto.lo"
      "c_odo.Quaternion4d\0224\n\010position\030\003 \001(\0132\".a"
      "utodrive.workflow.proto.Vector3d\022\016\n\006seq_"
      "id\030\004 \001(\r\022\020\n\010pose_cov\030\005 \003(\001\022;\n\017linear_vel"
      "ocity\030\006 \001(\0132\".autodrive.workflow.proto.V"
      "ector3d\022<\n\020angular_velocity\030\007 \001(\0132\".auto"
      "drive.workflow.proto.Vector3d\022\021\n\ttwist_c"
      "ov\030\010 \003(\001\0226\n\nmap_offset\030\t \001(\0132\".autodrive"
      ".workflow.proto.Vector3d\0224\n\010velocity\030\n \001"
      "(\0132\".autodrive.workflow.proto.Vector3d\0228"
      "\n\014acceleration\030\013 \001(\0132\".autodrive.workflo"
      "w.proto.Vector3d\022\r\n\005floor\030\014 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 639);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loc_odo.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_loc_5fodo_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
namespace loc_odo {

// ===================================================================

void Quaternion4d::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion4d::kXFieldNumber;
const int Quaternion4d::kYFieldNumber;
const int Quaternion4d::kZFieldNumber;
const int Quaternion4d::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion4d::Quaternion4d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_loc_5fodo_2eproto::InitDefaultsQuaternion4d();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.loc_odo.Quaternion4d)
}
Quaternion4d::Quaternion4d(const Quaternion4d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.loc_odo.Quaternion4d)
}

void Quaternion4d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _cached_size_ = 0;
}

Quaternion4d::~Quaternion4d() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.loc_odo.Quaternion4d)
  SharedDtor();
}

void Quaternion4d::SharedDtor() {
}

void Quaternion4d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternion4d::descriptor() {
  ::protobuf_loc_5fodo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_loc_5fodo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quaternion4d& Quaternion4d::default_instance() {
  ::protobuf_loc_5fodo_2eproto::InitDefaultsQuaternion4d();
  return *internal_default_instance();
}

Quaternion4d* Quaternion4d::New(::google::protobuf::Arena* arena) const {
  Quaternion4d* n = new Quaternion4d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternion4d::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.loc_odo.Quaternion4d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear();
}

bool Quaternion4d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.loc_odo.Quaternion4d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.loc_odo.Quaternion4d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.loc_odo.Quaternion4d)
  return false;
#undef DO_
}

void Quaternion4d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.loc_odo.Quaternion4d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.loc_odo.Quaternion4d)
}

::google::protobuf::uint8* Quaternion4d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.loc_odo.Quaternion4d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.loc_odo.Quaternion4d)
  return target;
}

size_t Quaternion4d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.loc_odo.Quaternion4d)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double w = 4;
  if (this->w() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion4d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.loc_odo.Quaternion4d)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion4d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternion4d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.loc_odo.Quaternion4d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.loc_odo.Quaternion4d)
    MergeFrom(*source);
  }
}

void Quaternion4d::MergeFrom(const Quaternion4d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.loc_odo.Quaternion4d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Quaternion4d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.loc_odo.Quaternion4d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion4d::CopyFrom(const Quaternion4d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.loc_odo.Quaternion4d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion4d::IsInitialized() const {
  return true;
}

void Quaternion4d::Swap(Quaternion4d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion4d::InternalSwap(Quaternion4d* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternion4d::GetMetadata() const {
  protobuf_loc_5fodo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_loc_5fodo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Odometry::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_._instance.get_mutable()->quaternion_ = const_cast< ::autodrive::workflow::proto::loc_odo::Quaternion4d*>(
      ::autodrive::workflow::proto::loc_odo::Quaternion4d::internal_default_instance());
  ::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_._instance.get_mutable()->position_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
  ::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
  ::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
  ::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_._instance.get_mutable()->map_offset_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
  ::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
  ::autodrive::workflow::proto::loc_odo::_Odometry_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::autodrive::workflow::proto::Vector3d*>(
      ::autodrive::workflow::proto::Vector3d::internal_default_instance());
}
void Odometry::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void Odometry::clear_linear_velocity() {
  if (GetArenaNoVirtual() == NULL && linear_velocity_ != NULL) {
    delete linear_velocity_;
  }
  linear_velocity_ = NULL;
}
void Odometry::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
}
void Odometry::clear_map_offset() {
  if (GetArenaNoVirtual() == NULL && map_offset_ != NULL) {
    delete map_offset_;
  }
  map_offset_ = NULL;
}
void Odometry::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
}
void Odometry::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry::kStampFieldNumber;
const int Odometry::kQuaternionFieldNumber;
const int Odometry::kPositionFieldNumber;
const int Odometry::kSeqIdFieldNumber;
const int Odometry::kPoseCovFieldNumber;
const int Odometry::kLinearVelocityFieldNumber;
const int Odometry::kAngularVelocityFieldNumber;
const int Odometry::kTwistCovFieldNumber;
const int Odometry::kMapOffsetFieldNumber;
const int Odometry::kVelocityFieldNumber;
const int Odometry::kAccelerationFieldNumber;
const int Odometry::kFloorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry::Odometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_loc_5fodo_2eproto::InitDefaultsOdometry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.loc_odo.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pose_cov_(from.pose_cov_),
      twist_cov_(from.twist_cov_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_quaternion()) {
    quaternion_ = new ::autodrive::workflow::proto::loc_odo::Quaternion4d(*from.quaternion_);
  } else {
    quaternion_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::autodrive::workflow::proto::Vector3d(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::autodrive::workflow::proto::Vector3d(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::autodrive::workflow::proto::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_map_offset()) {
    map_offset_ = new ::autodrive::workflow::proto::Vector3d(*from.map_offset_);
  } else {
    map_offset_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::autodrive::workflow::proto::Vector3d(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::autodrive::workflow::proto::Vector3d(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&floor_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(floor_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.loc_odo.Odometry)
}

void Odometry::SharedCtor() {
  ::memset(&quaternion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&floor_) -
      reinterpret_cast<char*>(&quaternion_)) + sizeof(floor_));
  _cached_size_ = 0;
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.loc_odo.Odometry)
  SharedDtor();
}

void Odometry::SharedDtor() {
  if (this != internal_default_instance()) delete quaternion_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete map_offset_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void Odometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odometry::descriptor() {
  ::protobuf_loc_5fodo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_loc_5fodo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odometry& Odometry::default_instance() {
  ::protobuf_loc_5fodo_2eproto::InitDefaultsOdometry();
  return *internal_default_instance();
}

Odometry* Odometry::New(::google::protobuf::Arena* arena) const {
  Odometry* n = new Odometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.loc_odo.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_cov_.Clear();
  twist_cov_.Clear();
  if (GetArenaNoVirtual() == NULL && quaternion_ != NULL) {
    delete quaternion_;
  }
  quaternion_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_velocity_ != NULL) {
    delete linear_velocity_;
  }
  linear_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_offset_ != NULL) {
    delete map_offset_;
  }
  map_offset_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&floor_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(floor_));
  _internal_metadata_.Clear();
}

bool Odometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.loc_odo.Odometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.loc_odo.Quaternion4d quaternion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quaternion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seq_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double pose_cov = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose_cov())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_pose_cov())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d linear_velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d angular_velocity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double twist_cov = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_twist_cov())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66u, input, this->mutable_twist_cov())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d map_offset = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d velocity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector3d acceleration = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float floor = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.loc_odo.Odometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.loc_odo.Odometry)
  return false;
#undef DO_
}

void Odometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.loc_odo.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stamp(), output);
  }

  // .autodrive.workflow.proto.loc_odo.Quaternion4d quaternion = 2;
  if (this->has_quaternion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->quaternion_, output);
  }

  // .autodrive.workflow.proto.Vector3d position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // uint32 seq_id = 4;
  if (this->seq_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq_id(), output);
  }

  // repeated double pose_cov = 5;
  if (this->pose_cov_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _pose_cov_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->pose_cov().data(), this->pose_cov_size(), output);
  }

  // .autodrive.workflow.proto.Vector3d linear_velocity = 6;
  if (this->has_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->linear_velocity_, output);
  }

  // .autodrive.workflow.proto.Vector3d angular_velocity = 7;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->angular_velocity_, output);
  }

  // repeated double twist_cov = 8;
  if (this->twist_cov_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _twist_cov_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->twist_cov().data(), this->twist_cov_size(), output);
  }

  // .autodrive.workflow.proto.Vector3d map_offset = 9;
  if (this->has_map_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->map_offset_, output);
  }

  // .autodrive.workflow.proto.Vector3d velocity = 10;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->velocity_, output);
  }

  // .autodrive.workflow.proto.Vector3d acceleration = 11;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->acceleration_, output);
  }

  // float floor = 12;
  if (this->floor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->floor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.loc_odo.Odometry)
}

::google::protobuf::uint8* Odometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.loc_odo.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stamp(), target);
  }

  // .autodrive.workflow.proto.loc_odo.Quaternion4d quaternion = 2;
  if (this->has_quaternion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->quaternion_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3d position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->position_, deterministic, target);
  }

  // uint32 seq_id = 4;
  if (this->seq_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq_id(), target);
  }

  // repeated double pose_cov = 5;
  if (this->pose_cov_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _pose_cov_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pose_cov_, target);
  }

  // .autodrive.workflow.proto.Vector3d linear_velocity = 6;
  if (this->has_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->linear_velocity_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3d angular_velocity = 7;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->angular_velocity_, deterministic, target);
  }

  // repeated double twist_cov = 8;
  if (this->twist_cov_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _twist_cov_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->twist_cov_, target);
  }

  // .autodrive.workflow.proto.Vector3d map_offset = 9;
  if (this->has_map_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->map_offset_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3d velocity = 10;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->velocity_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector3d acceleration = 11;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->acceleration_, deterministic, target);
  }

  // float floor = 12;
  if (this->floor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->floor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.loc_odo.Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.loc_odo.Odometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double pose_cov = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->pose_cov_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_cov_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double twist_cov = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->twist_cov_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _twist_cov_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .autodrive.workflow.proto.loc_odo.Quaternion4d quaternion = 2;
  if (this->has_quaternion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->quaternion_);
  }

  // .autodrive.workflow.proto.Vector3d position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->position_);
  }

  // .autodrive.workflow.proto.Vector3d linear_velocity = 6;
  if (this->has_linear_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->linear_velocity_);
  }

  // .autodrive.workflow.proto.Vector3d angular_velocity = 7;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->angular_velocity_);
  }

  // .autodrive.workflow.proto.Vector3d map_offset = 9;
  if (this->has_map_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->map_offset_);
  }

  // .autodrive.workflow.proto.Vector3d velocity = 10;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->velocity_);
  }

  // .autodrive.workflow.proto.Vector3d acceleration = 11;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acceleration_);
  }

  // uint64 stamp = 1;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stamp());
  }

  // uint32 seq_id = 4;
  if (this->seq_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq_id());
  }

  // float floor = 12;
  if (this->floor() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.loc_odo.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.loc_odo.Odometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.loc_odo.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.loc_odo.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pose_cov_.MergeFrom(from.pose_cov_);
  twist_cov_.MergeFrom(from.twist_cov_);
  if (from.has_quaternion()) {
    mutable_quaternion()->::autodrive::workflow::proto::loc_odo::Quaternion4d::MergeFrom(from.quaternion());
  }
  if (from.has_position()) {
    mutable_position()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.position());
  }
  if (from.has_linear_velocity()) {
    mutable_linear_velocity()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.linear_velocity());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.angular_velocity());
  }
  if (from.has_map_offset()) {
    mutable_map_offset()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.map_offset());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.velocity());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::autodrive::workflow::proto::Vector3d::MergeFrom(from.acceleration());
  }
  if (from.stamp() != 0) {
    set_stamp(from.stamp());
  }
  if (from.seq_id() != 0) {
    set_seq_id(from.seq_id());
  }
  if (from.floor() != 0) {
    set_floor(from.floor());
  }
}

void Odometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.loc_odo.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.loc_odo.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  return true;
}

void Odometry::Swap(Odometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  pose_cov_.InternalSwap(&other->pose_cov_);
  twist_cov_.InternalSwap(&other->twist_cov_);
  swap(quaternion_, other->quaternion_);
  swap(position_, other->position_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(map_offset_, other->map_offset_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(stamp_, other->stamp_);
  swap(seq_id_, other->seq_id_);
  swap(floor_, other->floor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  protobuf_loc_5fodo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_loc_5fodo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace loc_odo
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
