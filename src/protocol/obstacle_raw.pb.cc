// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_raw.proto

#include "obstacle_raw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class PropertyPerceptionBBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropertyPerceptionBBox>
      _instance;
} _PropertyPerceptionBBox_default_instance_;
class ObstacleRawKeyPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleRawKeyPoint>
      _instance;
} _ObstacleRawKeyPoint_default_instance_;
class TrackingFeatureRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrackingFeatureRaw>
      _instance;
} _TrackingFeatureRaw_default_instance_;
class PoseNetRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseNetRaw>
      _instance;
} _PoseNetRaw_default_instance_;
class KpsClsRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KpsClsRaw>
      _instance;
} _KpsClsRaw_default_instance_;
class KeyPointsRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyPointsRaw>
      _instance;
} _KeyPointsRaw_default_instance_;
class PRFromGroundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PRFromGround>
      _instance;
} _PRFromGround_default_instance_;
class KeyPointsRawDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyPointsRawData>
      _instance;
} _KeyPointsRawData_default_instance_;
class ObstacleRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleRaw>
      _instance;
} _ObstacleRaw_default_instance_;
class ObstacleRawsDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleRawsData>
      _instance;
} _ObstacleRawsData_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_obstacle_5fraw_2eproto {
void InitDefaultsPropertyPerceptionBBoxImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  protobuf_perception_5fbase_2eproto::InitDefaultsCategory();
  {
    void* ptr = &::autodrive::workflow::proto::_PropertyPerceptionBBox_default_instance_;
    new (ptr) ::autodrive::workflow::proto::PropertyPerceptionBBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::PropertyPerceptionBBox::InitAsDefaultInstance();
}

void InitDefaultsPropertyPerceptionBBox() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPropertyPerceptionBBoxImpl);
}

void InitDefaultsObstacleRawKeyPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::autodrive::workflow::proto::_ObstacleRawKeyPoint_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ObstacleRawKeyPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ObstacleRawKeyPoint::InitAsDefaultInstance();
}

void InitDefaultsObstacleRawKeyPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObstacleRawKeyPointImpl);
}

void InitDefaultsTrackingFeatureRawImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_TrackingFeatureRaw_default_instance_;
    new (ptr) ::autodrive::workflow::proto::TrackingFeatureRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::TrackingFeatureRaw::InitAsDefaultInstance();
}

void InitDefaultsTrackingFeatureRaw() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrackingFeatureRawImpl);
}

void InitDefaultsPoseNetRawImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_PoseNetRaw_default_instance_;
    new (ptr) ::autodrive::workflow::proto::PoseNetRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::PoseNetRaw::InitAsDefaultInstance();
}

void InitDefaultsPoseNetRaw() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoseNetRawImpl);
}

void InitDefaultsKpsClsRawImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_KpsClsRaw_default_instance_;
    new (ptr) ::autodrive::workflow::proto::KpsClsRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::KpsClsRaw::InitAsDefaultInstance();
}

void InitDefaultsKpsClsRaw() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKpsClsRawImpl);
}

void InitDefaultsKeyPointsRawImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRawKeyPoint();
  {
    void* ptr = &::autodrive::workflow::proto::_KeyPointsRaw_default_instance_;
    new (ptr) ::autodrive::workflow::proto::KeyPointsRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::KeyPointsRaw::InitAsDefaultInstance();
}

void InitDefaultsKeyPointsRaw() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyPointsRawImpl);
}

void InitDefaultsPRFromGroundImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_PRFromGround_default_instance_;
    new (ptr) ::autodrive::workflow::proto::PRFromGround();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::PRFromGround::InitAsDefaultInstance();
}

void InitDefaultsPRFromGround() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPRFromGroundImpl);
}

void InitDefaultsKeyPointsRawDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRawKeyPoint();
  {
    void* ptr = &::autodrive::workflow::proto::_KeyPointsRawData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::KeyPointsRawData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::KeyPointsRawData::InitAsDefaultInstance();
}

void InitDefaultsKeyPointsRawData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyPointsRawDataImpl);
}

void InitDefaultsObstacleRawImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsRect();
  protobuf_perception_5fbase_2eproto::InitDefaultsCategory();
  protobuf_obstacle_5fraw_2eproto::InitDefaultsPropertyPerceptionBBox();
  protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRawKeyPoint();
  {
    void* ptr = &::autodrive::workflow::proto::_ObstacleRaw_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ObstacleRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ObstacleRaw::InitAsDefaultInstance();
}

void InitDefaultsObstacleRaw() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObstacleRawImpl);
}

void InitDefaultsObstacleRawsDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fbase_2eproto::InitDefaultsHeader();
  protobuf_perception_5fbase_2eproto::InitDefaultsCategory();
  protobuf_obstacle_5fraw_2eproto::InitDefaultsKeyPointsRawData();
  protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRaw();
  {
    void* ptr = &::autodrive::workflow::proto::_ObstacleRawsData_default_instance_;
    new (ptr) ::autodrive::workflow::proto::ObstacleRawsData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::ObstacleRawsData::InitAsDefaultInstance();
}

void InitDefaultsObstacleRawsData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObstacleRawsDataImpl);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PropertyPerceptionBBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PropertyPerceptionBBox, rect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PropertyPerceptionBBox, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PropertyPerceptionBBox, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PropertyPerceptionBBox, category_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawKeyPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawKeyPoint, pt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawKeyPoint, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawKeyPoint, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawKeyPoint, boundary_conf_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawKeyPoint, boundary_conf_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TrackingFeatureRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TrackingFeatureRaw, model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::TrackingFeatureRaw, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PoseNetRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PoseNetRaw, roll_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PoseNetRaw, roll_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PoseNetRaw, pitch_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PoseNetRaw, pitch_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PoseNetRaw, yaw_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PoseNetRaw, yaw_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PoseNetRaw, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PoseNetRaw, conf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KpsClsRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KpsClsRaw, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KpsClsRaw, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KpsClsRaw, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KpsClsRaw, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KeyPointsRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KeyPointsRaw, task_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KeyPointsRaw, key_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PRFromGround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PRFromGround, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PRFromGround, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::PRFromGround, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KeyPointsRawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KeyPointsRawData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::KeyPointsRawData, key_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, rect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, property_bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, key_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, expand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRaw, input_roi_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawsData, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawsData, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawsData, conf_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawsData, key_points_raws_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::ObstacleRawsData, obstacle_raws_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::PropertyPerceptionBBox)},
  { 9, -1, sizeof(::autodrive::workflow::proto::ObstacleRawKeyPoint)},
  { 19, -1, sizeof(::autodrive::workflow::proto::TrackingFeatureRaw)},
  { 26, -1, sizeof(::autodrive::workflow::proto::PoseNetRaw)},
  { 39, -1, sizeof(::autodrive::workflow::proto::KpsClsRaw)},
  { 48, -1, sizeof(::autodrive::workflow::proto::KeyPointsRaw)},
  { 55, -1, sizeof(::autodrive::workflow::proto::PRFromGround)},
  { 63, -1, sizeof(::autodrive::workflow::proto::KeyPointsRawData)},
  { 70, -1, sizeof(::autodrive::workflow::proto::ObstacleRaw)},
  { 85, -1, sizeof(::autodrive::workflow::proto::ObstacleRawsData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_PropertyPerceptionBBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ObstacleRawKeyPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_TrackingFeatureRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_PoseNetRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_KpsClsRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_KeyPointsRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_PRFromGround_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_KeyPointsRawData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ObstacleRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_ObstacleRawsData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "obstacle_raw.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022obstacle_raw.proto\022\030autodrive.workflow"
      ".proto\032\013basic.proto\032\025perception_base.pro"
      "to\"\270\001\n\026PropertyPerceptionBBox\022<\n\004rect\030\001 "
      "\001(\0132..autodrive.workflow.proto.perceptio"
      "n_base.Rect\022\014\n\004conf\030\002 \001(\002\022\014\n\004type\030\003 \001(\005\022"
      "D\n\010category\030\004 \003(\01322.autodrive.workflow.p"
      "roto.perception_base.Category\"\223\001\n\023Obstac"
      "leRawKeyPoint\022.\n\002pt\030\001 \001(\0132\".autodrive.wo"
      "rkflow.proto.Vector3f\022\014\n\004type\030\002 \001(\002\022\014\n\004c"
      "onf\030\003 \001(\002\022\027\n\017boundary_conf_x\030\004 \001(\002\022\027\n\017bo"
      "undary_conf_y\030\005 \001(\002\"4\n\022TrackingFeatureRa"
      "w\022\020\n\010model_id\030\001 \001(\005\022\014\n\004data\030\002 \003(\005\"\235\001\n\nPo"
      "seNetRaw\022\020\n\010roll_raw\030\001 \001(\002\022\023\n\013roll_filte"
      "r\030\002 \001(\002\022\021\n\tpitch_raw\030\003 \001(\002\022\024\n\014pitch_filt"
      "er\030\004 \001(\002\022\017\n\007yaw_raw\030\005 \001(\002\022\022\n\nyaw_filter\030"
      "\006 \001(\002\022\014\n\004type\030\007 \001(\005\022\014\n\004conf\030\010 \001(\002\"A\n\tKps"
      "ClsRaw\022\n\n\002id\030\001 \003(\005\022\014\n\004conf\030\002 \003(\002\022\014\n\004name"
      "\030\003 \003(\t\022\014\n\004type\030\004 \001(\005\"d\n\014KeyPointsRaw\022\021\n\t"
      "task_type\030\001 \001(\005\022A\n\nkey_points\030\002 \003(\0132-.au"
      "todrive.workflow.proto.ObstacleRawKeyPoi"
      "nt\"h\n\014PRFromGround\022\014\n\004roll\030\001 \001(\002\022\r\n\005pitc"
      "h\030\002 \001(\002\022;\n\004type\030\003 \001(\0162-.autodrive.workfl"
      "ow.proto.Global2peResultType\"\213\001\n\020KeyPoin"
      "tsRawData\0224\n\004type\030\001 \001(\0162&.autodrive.work"
      "flow.proto.KeyPointType\022A\n\nkey_points\030\002 "
      "\003(\0132-.autodrive.workflow.proto.ObstacleR"
      "awKeyPoint\"\254\003\n\013ObstacleRaw\022<\n\004rect\030\001 \001(\013"
      "2..autodrive.workflow.proto.perception_b"
      "ase.Rect\022\014\n\004conf\030\002 \001(\002\022\r\n\005model\030\003 \001(\005\022\016\n"
      "\006source\030\004 \001(\005\022D\n\010category\030\005 \003(\01322.autodr"
      "ive.workflow.proto.perception_base.Categ"
      "ory\022G\n\rproperty_bbox\030\006 \003(\01320.autodrive.w"
      "orkflow.proto.PropertyPerceptionBBox\022A\n\n"
      "key_points\030\007 \003(\0132-.autodrive.workflow.pr"
      "oto.ObstacleRawKeyPoint\022\r\n\005depth\030\010 \001(\002\022\016"
      "\n\006expand\030\t \001(\005\022A\n\tinput_roi\030\n \001(\0132..auto"
      "drive.workflow.proto.perception_base.Rec"
      "t\"\261\002\n\020ObstacleRawsData\022@\n\006header\030\001 \001(\01320"
      ".autodrive.workflow.proto.perception_bas"
      "e.Header\022D\n\010category\030\002 \001(\01322.autodrive.w"
      "orkflow.proto.perception_base.Category\022\022"
      "\n\nconf_scale\030\003 \001(\002\022C\n\017key_points_raws\030\004 "
      "\003(\0132*.autodrive.workflow.proto.KeyPoints"
      "RawData\022<\n\robstacle_raws\030\005 \003(\0132%.autodri"
      "ve.workflow.proto.ObstacleRaw*w\n\031VehProp"
      "ertyPerceptionType\022\"\n\036kVehPerceptionType"
      "LicensePlate\020\000\022\033\n\027kVehPerceptionTypeWhee"
      "l\020\001\022\031\n\025kVehPerceptionTypeCnt\020\002*\224\010\n\024Obsta"
      "cleRawModelType\022\030\n\024kObstacleRawModelCar\020"
      "\000\022\034\n\030kObstacleRawModelFullCar\020\001\022\030\n\024kObst"
      "acleRawModelPed\020\002\022\031\n\025kObstacleRawModelHe"
      "ad\020\003\022\031\n\025kObstacleRawModelRare\020\004\022 \n\034kObst"
      "acleRawModelTrafficSign\020\005\022!\n\035kObstacleRa"
      "wModelTrafficLight\020\006\022\031\n\025kObstacleRawMode"
      "lLane\020\007\022\035\n\031kObstacleRawModelRoadSign\020\n\022!"
      "\n\035kObstacleRawModelTrafficArrow\020\013\022\036\n\032kOb"
      "stacleRawModelYieldMark\020\014\022 \n\034kObstacleRa"
      "wModelTrafficCone\020\r\022\033\n\027kObstacleRawModel"
      "Barrel\020\016\022\036\n\032kObstacleRawModelSpeedMark\020\017"
      "\022\034\n\030kObstacleRawModelCyclist\020\020\022 \n\034kObsta"
      "cleRawModelParkingLock\020\021\022 \n\034kObstacleRaw"
      "ModelSpeedCamera\020\022\022%\n!kObstacleRawModelT"
      "rafficLightLens\020\023\022 \n\034kObstacleRawModelPa"
      "rkingSlot\020\026\022\031\n\025kObstacleRawModelFace\020\"\022 "
      "\n\034kObstacleRawModelVehiclePlat\020#\022$\n kObs"
      "tacleRawModelLaneCrossPoints\020%\022\'\n#kObsta"
      "cleRawModelVerticalPolePoints\020&\022\035\n\031kObst"
      "acleRawModelTollgate\020\'\022%\n!kObstacleRawMo"
      "delParkingLockClose\020(\022$\n kObstacleRawMod"
      "elParkingLockOpen\020)\022\"\n\036kObstacleRawModel"
      "ParkingColumn\020*\022&\n\"kObstacleRawModelPark"
      "ingAFrameSign\020+\022#\n\037kObstacleRawModelTraf"
      "ficBollard\020,\022%\n!kObstacleRawModelParking"
      "Obstacles\020-\022\030\n\024kObstacleRawModelHpp\020.*\342\002"
      "\n\023Global2peResultType\022\037\n\033kGlobal2PeResul"
      "tTypeWeather\020\000\022\035\n\031kGlobal2PeResultTypeLi"
      "ght\020\001\022\035\n\031kGlobal2PeResultTypeScene\020\002\022\034\n\030"
      "kGlobal2PeResultTypeTime\020\003\022#\n\037kGlobal2Pe"
      "ResultTypeVanishPoint\020\004\022\037\n\033kGlobal2PeRes"
      "ultTypePosenet\020\005\022 \n\034kGlobal2PeResultType"
      "Blockcls\020\006\022\037\n\033kGlobal2PeResultTypeBlurcl"
      "s\020\007\022 \n\034kGlobal2PeResultTypeGlarecls\020\010\022#\n"
      "\037kGlobal2PeResultTypePrFromDepth\020\t*\?\n\014Ke"
      "yPointType\022\016\n\nkColumnKps\020\000\022\020\n\014kSmallSodK"
      "ps\020\001\022\r\n\tkWheelKps\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "obstacle_raw.proto", &protobuf_RegisterTypes);
  ::protobuf_basic_2eproto::AddDescriptors();
  ::protobuf_perception_5fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_obstacle_5fraw_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* VehPropertyPerceptionType_descriptor() {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fraw_2eproto::file_level_enum_descriptors[0];
}
bool VehPropertyPerceptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ObstacleRawModelType_descriptor() {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fraw_2eproto::file_level_enum_descriptors[1];
}
bool ObstacleRawModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 22:
    case 34:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Global2peResultType_descriptor() {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fraw_2eproto::file_level_enum_descriptors[2];
}
bool Global2peResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KeyPointType_descriptor() {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fraw_2eproto::file_level_enum_descriptors[3];
}
bool KeyPointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PropertyPerceptionBBox::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_PropertyPerceptionBBox_default_instance_._instance.get_mutable()->rect_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
void PropertyPerceptionBBox::clear_rect() {
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) {
    delete rect_;
  }
  rect_ = NULL;
}
void PropertyPerceptionBBox::clear_category() {
  category_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyPerceptionBBox::kRectFieldNumber;
const int PropertyPerceptionBBox::kConfFieldNumber;
const int PropertyPerceptionBBox::kTypeFieldNumber;
const int PropertyPerceptionBBox::kCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyPerceptionBBox::PropertyPerceptionBBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsPropertyPerceptionBBox();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.PropertyPerceptionBBox)
}
PropertyPerceptionBBox::PropertyPerceptionBBox(const PropertyPerceptionBBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      category_(from.category_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rect()) {
    rect_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.rect_);
  } else {
    rect_ = NULL;
  }
  ::memcpy(&conf_, &from.conf_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&conf_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.PropertyPerceptionBBox)
}

void PropertyPerceptionBBox::SharedCtor() {
  ::memset(&rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&rect_)) + sizeof(type_));
  _cached_size_ = 0;
}

PropertyPerceptionBBox::~PropertyPerceptionBBox() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.PropertyPerceptionBBox)
  SharedDtor();
}

void PropertyPerceptionBBox::SharedDtor() {
  if (this != internal_default_instance()) delete rect_;
}

void PropertyPerceptionBBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyPerceptionBBox::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyPerceptionBBox& PropertyPerceptionBBox::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsPropertyPerceptionBBox();
  return *internal_default_instance();
}

PropertyPerceptionBBox* PropertyPerceptionBBox::New(::google::protobuf::Arena* arena) const {
  PropertyPerceptionBBox* n = new PropertyPerceptionBBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyPerceptionBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.PropertyPerceptionBBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) {
    delete rect_;
  }
  rect_ = NULL;
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool PropertyPerceptionBBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.PropertyPerceptionBBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.Rect rect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.perception_base.Category category = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.PropertyPerceptionBBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.PropertyPerceptionBBox)
  return false;
#undef DO_
}

void PropertyPerceptionBBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.PropertyPerceptionBBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Rect rect = 1;
  if (this->has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rect_, output);
  }

  // float conf = 2;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->conf(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated .autodrive.workflow.proto.perception_base.Category category = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->category(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.PropertyPerceptionBBox)
}

::google::protobuf::uint8* PropertyPerceptionBBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.PropertyPerceptionBBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Rect rect = 1;
  if (this->has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->rect_, deterministic, target);
  }

  // float conf = 2;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->conf(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // repeated .autodrive.workflow.proto.perception_base.Category category = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->category(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.PropertyPerceptionBBox)
  return target;
}

size_t PropertyPerceptionBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.PropertyPerceptionBBox)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.perception_base.Category category = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->category_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->category(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.perception_base.Rect rect = 1;
  if (this->has_rect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rect_);
  }

  // float conf = 2;
  if (this->conf() != 0) {
    total_size += 1 + 4;
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyPerceptionBBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.PropertyPerceptionBBox)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyPerceptionBBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyPerceptionBBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.PropertyPerceptionBBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.PropertyPerceptionBBox)
    MergeFrom(*source);
  }
}

void PropertyPerceptionBBox::MergeFrom(const PropertyPerceptionBBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.PropertyPerceptionBBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  if (from.has_rect()) {
    mutable_rect()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.rect());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PropertyPerceptionBBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.PropertyPerceptionBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyPerceptionBBox::CopyFrom(const PropertyPerceptionBBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.PropertyPerceptionBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyPerceptionBBox::IsInitialized() const {
  return true;
}

void PropertyPerceptionBBox::Swap(PropertyPerceptionBBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyPerceptionBBox::InternalSwap(PropertyPerceptionBBox* other) {
  using std::swap;
  category_.InternalSwap(&other->category_);
  swap(rect_, other->rect_);
  swap(conf_, other->conf_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyPerceptionBBox::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleRawKeyPoint::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ObstacleRawKeyPoint_default_instance_._instance.get_mutable()->pt_ = const_cast< ::autodrive::workflow::proto::Vector3f*>(
      ::autodrive::workflow::proto::Vector3f::internal_default_instance());
}
void ObstacleRawKeyPoint::clear_pt() {
  if (GetArenaNoVirtual() == NULL && pt_ != NULL) {
    delete pt_;
  }
  pt_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleRawKeyPoint::kPtFieldNumber;
const int ObstacleRawKeyPoint::kTypeFieldNumber;
const int ObstacleRawKeyPoint::kConfFieldNumber;
const int ObstacleRawKeyPoint::kBoundaryConfXFieldNumber;
const int ObstacleRawKeyPoint::kBoundaryConfYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleRawKeyPoint::ObstacleRawKeyPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRawKeyPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ObstacleRawKeyPoint)
}
ObstacleRawKeyPoint::ObstacleRawKeyPoint(const ObstacleRawKeyPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pt()) {
    pt_ = new ::autodrive::workflow::proto::Vector3f(*from.pt_);
  } else {
    pt_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&boundary_conf_y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(boundary_conf_y_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ObstacleRawKeyPoint)
}

void ObstacleRawKeyPoint::SharedCtor() {
  ::memset(&pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boundary_conf_y_) -
      reinterpret_cast<char*>(&pt_)) + sizeof(boundary_conf_y_));
  _cached_size_ = 0;
}

ObstacleRawKeyPoint::~ObstacleRawKeyPoint() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ObstacleRawKeyPoint)
  SharedDtor();
}

void ObstacleRawKeyPoint::SharedDtor() {
  if (this != internal_default_instance()) delete pt_;
}

void ObstacleRawKeyPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleRawKeyPoint::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleRawKeyPoint& ObstacleRawKeyPoint::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRawKeyPoint();
  return *internal_default_instance();
}

ObstacleRawKeyPoint* ObstacleRawKeyPoint::New(::google::protobuf::Arena* arena) const {
  ObstacleRawKeyPoint* n = new ObstacleRawKeyPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleRawKeyPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ObstacleRawKeyPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pt_ != NULL) {
    delete pt_;
  }
  pt_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boundary_conf_y_) -
      reinterpret_cast<char*>(&type_)) + sizeof(boundary_conf_y_));
  _internal_metadata_.Clear();
}

bool ObstacleRawKeyPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ObstacleRawKeyPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.Vector3f pt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float boundary_conf_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boundary_conf_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float boundary_conf_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boundary_conf_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ObstacleRawKeyPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ObstacleRawKeyPoint)
  return false;
#undef DO_
}

void ObstacleRawKeyPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ObstacleRawKeyPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f pt = 1;
  if (this->has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pt_, output);
  }

  // float type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->type(), output);
  }

  // float conf = 3;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->conf(), output);
  }

  // float boundary_conf_x = 4;
  if (this->boundary_conf_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->boundary_conf_x(), output);
  }

  // float boundary_conf_y = 5;
  if (this->boundary_conf_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->boundary_conf_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ObstacleRawKeyPoint)
}

::google::protobuf::uint8* ObstacleRawKeyPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ObstacleRawKeyPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector3f pt = 1;
  if (this->has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->pt_, deterministic, target);
  }

  // float type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->type(), target);
  }

  // float conf = 3;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->conf(), target);
  }

  // float boundary_conf_x = 4;
  if (this->boundary_conf_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->boundary_conf_x(), target);
  }

  // float boundary_conf_y = 5;
  if (this->boundary_conf_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->boundary_conf_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ObstacleRawKeyPoint)
  return target;
}

size_t ObstacleRawKeyPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ObstacleRawKeyPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector3f pt = 1;
  if (this->has_pt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pt_);
  }

  // float type = 2;
  if (this->type() != 0) {
    total_size += 1 + 4;
  }

  // float conf = 3;
  if (this->conf() != 0) {
    total_size += 1 + 4;
  }

  // float boundary_conf_x = 4;
  if (this->boundary_conf_x() != 0) {
    total_size += 1 + 4;
  }

  // float boundary_conf_y = 5;
  if (this->boundary_conf_y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleRawKeyPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ObstacleRawKeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleRawKeyPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleRawKeyPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ObstacleRawKeyPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ObstacleRawKeyPoint)
    MergeFrom(*source);
  }
}

void ObstacleRawKeyPoint::MergeFrom(const ObstacleRawKeyPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ObstacleRawKeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pt()) {
    mutable_pt()->::autodrive::workflow::proto::Vector3f::MergeFrom(from.pt());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
  if (from.boundary_conf_x() != 0) {
    set_boundary_conf_x(from.boundary_conf_x());
  }
  if (from.boundary_conf_y() != 0) {
    set_boundary_conf_y(from.boundary_conf_y());
  }
}

void ObstacleRawKeyPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ObstacleRawKeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleRawKeyPoint::CopyFrom(const ObstacleRawKeyPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ObstacleRawKeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleRawKeyPoint::IsInitialized() const {
  return true;
}

void ObstacleRawKeyPoint::Swap(ObstacleRawKeyPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleRawKeyPoint::InternalSwap(ObstacleRawKeyPoint* other) {
  using std::swap;
  swap(pt_, other->pt_);
  swap(type_, other->type_);
  swap(conf_, other->conf_);
  swap(boundary_conf_x_, other->boundary_conf_x_);
  swap(boundary_conf_y_, other->boundary_conf_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleRawKeyPoint::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrackingFeatureRaw::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackingFeatureRaw::kModelIdFieldNumber;
const int TrackingFeatureRaw::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackingFeatureRaw::TrackingFeatureRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsTrackingFeatureRaw();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.TrackingFeatureRaw)
}
TrackingFeatureRaw::TrackingFeatureRaw(const TrackingFeatureRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_id_ = from.model_id_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.TrackingFeatureRaw)
}

void TrackingFeatureRaw::SharedCtor() {
  model_id_ = 0;
  _cached_size_ = 0;
}

TrackingFeatureRaw::~TrackingFeatureRaw() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.TrackingFeatureRaw)
  SharedDtor();
}

void TrackingFeatureRaw::SharedDtor() {
}

void TrackingFeatureRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackingFeatureRaw::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackingFeatureRaw& TrackingFeatureRaw::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsTrackingFeatureRaw();
  return *internal_default_instance();
}

TrackingFeatureRaw* TrackingFeatureRaw::New(::google::protobuf::Arena* arena) const {
  TrackingFeatureRaw* n = new TrackingFeatureRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackingFeatureRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.TrackingFeatureRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  model_id_ = 0;
  _internal_metadata_.Clear();
}

bool TrackingFeatureRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.TrackingFeatureRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 model_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.TrackingFeatureRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.TrackingFeatureRaw)
  return false;
#undef DO_
}

void TrackingFeatureRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.TrackingFeatureRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model_id = 1;
  if (this->model_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->model_id(), output);
  }

  // repeated int32 data = 2;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
  }
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.TrackingFeatureRaw)
}

::google::protobuf::uint8* TrackingFeatureRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.TrackingFeatureRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model_id = 1;
  if (this->model_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->model_id(), target);
  }

  // repeated int32 data = 2;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.TrackingFeatureRaw)
  return target;
}

size_t TrackingFeatureRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.TrackingFeatureRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 data = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 model_id = 1;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackingFeatureRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.TrackingFeatureRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingFeatureRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackingFeatureRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.TrackingFeatureRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.TrackingFeatureRaw)
    MergeFrom(*source);
  }
}

void TrackingFeatureRaw::MergeFrom(const TrackingFeatureRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.TrackingFeatureRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.model_id() != 0) {
    set_model_id(from.model_id());
  }
}

void TrackingFeatureRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.TrackingFeatureRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingFeatureRaw::CopyFrom(const TrackingFeatureRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.TrackingFeatureRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingFeatureRaw::IsInitialized() const {
  return true;
}

void TrackingFeatureRaw::Swap(TrackingFeatureRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackingFeatureRaw::InternalSwap(TrackingFeatureRaw* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(model_id_, other->model_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackingFeatureRaw::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoseNetRaw::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseNetRaw::kRollRawFieldNumber;
const int PoseNetRaw::kRollFilterFieldNumber;
const int PoseNetRaw::kPitchRawFieldNumber;
const int PoseNetRaw::kPitchFilterFieldNumber;
const int PoseNetRaw::kYawRawFieldNumber;
const int PoseNetRaw::kYawFilterFieldNumber;
const int PoseNetRaw::kTypeFieldNumber;
const int PoseNetRaw::kConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseNetRaw::PoseNetRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsPoseNetRaw();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.PoseNetRaw)
}
PoseNetRaw::PoseNetRaw(const PoseNetRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_raw_, &from.roll_raw_,
    static_cast<size_t>(reinterpret_cast<char*>(&conf_) -
    reinterpret_cast<char*>(&roll_raw_)) + sizeof(conf_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.PoseNetRaw)
}

void PoseNetRaw::SharedCtor() {
  ::memset(&roll_raw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&roll_raw_)) + sizeof(conf_));
  _cached_size_ = 0;
}

PoseNetRaw::~PoseNetRaw() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.PoseNetRaw)
  SharedDtor();
}

void PoseNetRaw::SharedDtor() {
}

void PoseNetRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseNetRaw::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseNetRaw& PoseNetRaw::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsPoseNetRaw();
  return *internal_default_instance();
}

PoseNetRaw* PoseNetRaw::New(::google::protobuf::Arena* arena) const {
  PoseNetRaw* n = new PoseNetRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoseNetRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.PoseNetRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_raw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_) -
      reinterpret_cast<char*>(&roll_raw_)) + sizeof(conf_));
  _internal_metadata_.Clear();
}

bool PoseNetRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.PoseNetRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float roll_raw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll_filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch_raw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_raw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_filter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_filter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.PoseNetRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.PoseNetRaw)
  return false;
#undef DO_
}

void PoseNetRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.PoseNetRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_raw = 1;
  if (this->roll_raw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->roll_raw(), output);
  }

  // float roll_filter = 2;
  if (this->roll_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roll_filter(), output);
  }

  // float pitch_raw = 3;
  if (this->pitch_raw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch_raw(), output);
  }

  // float pitch_filter = 4;
  if (this->pitch_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pitch_filter(), output);
  }

  // float yaw_raw = 5;
  if (this->yaw_raw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->yaw_raw(), output);
  }

  // float yaw_filter = 6;
  if (this->yaw_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw_filter(), output);
  }

  // int32 type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  // float conf = 8;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->conf(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.PoseNetRaw)
}

::google::protobuf::uint8* PoseNetRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.PoseNetRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_raw = 1;
  if (this->roll_raw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->roll_raw(), target);
  }

  // float roll_filter = 2;
  if (this->roll_filter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roll_filter(), target);
  }

  // float pitch_raw = 3;
  if (this->pitch_raw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch_raw(), target);
  }

  // float pitch_filter = 4;
  if (this->pitch_filter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pitch_filter(), target);
  }

  // float yaw_raw = 5;
  if (this->yaw_raw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->yaw_raw(), target);
  }

  // float yaw_filter = 6;
  if (this->yaw_filter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw_filter(), target);
  }

  // int32 type = 7;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  // float conf = 8;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->conf(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.PoseNetRaw)
  return target;
}

size_t PoseNetRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.PoseNetRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float roll_raw = 1;
  if (this->roll_raw() != 0) {
    total_size += 1 + 4;
  }

  // float roll_filter = 2;
  if (this->roll_filter() != 0) {
    total_size += 1 + 4;
  }

  // float pitch_raw = 3;
  if (this->pitch_raw() != 0) {
    total_size += 1 + 4;
  }

  // float pitch_filter = 4;
  if (this->pitch_filter() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_raw = 5;
  if (this->yaw_raw() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_filter = 6;
  if (this->yaw_filter() != 0) {
    total_size += 1 + 4;
  }

  // int32 type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // float conf = 8;
  if (this->conf() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseNetRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.PoseNetRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseNetRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseNetRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.PoseNetRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.PoseNetRaw)
    MergeFrom(*source);
  }
}

void PoseNetRaw::MergeFrom(const PoseNetRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.PoseNetRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roll_raw() != 0) {
    set_roll_raw(from.roll_raw());
  }
  if (from.roll_filter() != 0) {
    set_roll_filter(from.roll_filter());
  }
  if (from.pitch_raw() != 0) {
    set_pitch_raw(from.pitch_raw());
  }
  if (from.pitch_filter() != 0) {
    set_pitch_filter(from.pitch_filter());
  }
  if (from.yaw_raw() != 0) {
    set_yaw_raw(from.yaw_raw());
  }
  if (from.yaw_filter() != 0) {
    set_yaw_filter(from.yaw_filter());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
}

void PoseNetRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.PoseNetRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseNetRaw::CopyFrom(const PoseNetRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.PoseNetRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseNetRaw::IsInitialized() const {
  return true;
}

void PoseNetRaw::Swap(PoseNetRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseNetRaw::InternalSwap(PoseNetRaw* other) {
  using std::swap;
  swap(roll_raw_, other->roll_raw_);
  swap(roll_filter_, other->roll_filter_);
  swap(pitch_raw_, other->pitch_raw_);
  swap(pitch_filter_, other->pitch_filter_);
  swap(yaw_raw_, other->yaw_raw_);
  swap(yaw_filter_, other->yaw_filter_);
  swap(type_, other->type_);
  swap(conf_, other->conf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoseNetRaw::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KpsClsRaw::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KpsClsRaw::kIdFieldNumber;
const int KpsClsRaw::kConfFieldNumber;
const int KpsClsRaw::kNameFieldNumber;
const int KpsClsRaw::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KpsClsRaw::KpsClsRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsKpsClsRaw();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.KpsClsRaw)
}
KpsClsRaw::KpsClsRaw(const KpsClsRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      id_(from.id_),
      conf_(from.conf_),
      name_(from.name_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.KpsClsRaw)
}

void KpsClsRaw::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

KpsClsRaw::~KpsClsRaw() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.KpsClsRaw)
  SharedDtor();
}

void KpsClsRaw::SharedDtor() {
}

void KpsClsRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KpsClsRaw::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KpsClsRaw& KpsClsRaw::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsKpsClsRaw();
  return *internal_default_instance();
}

KpsClsRaw* KpsClsRaw::New(::google::protobuf::Arena* arena) const {
  KpsClsRaw* n = new KpsClsRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KpsClsRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.KpsClsRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  conf_.Clear();
  name_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

bool KpsClsRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.KpsClsRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float conf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_conf())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_conf())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name(this->name_size() - 1).data(),
            static_cast<int>(this->name(this->name_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autodrive.workflow.proto.KpsClsRaw.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.KpsClsRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.KpsClsRaw)
  return false;
#undef DO_
}

void KpsClsRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.KpsClsRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 id = 1;
  if (this->id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _id_cached_byte_size_));
  }
  for (int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->id(i), output);
  }

  // repeated float conf = 2;
  if (this->conf_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _conf_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->conf().data(), this->conf_size(), output);
  }

  // repeated string name = 3;
  for (int i = 0, n = this->name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name(i).data(), static_cast<int>(this->name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.KpsClsRaw.name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(i), output);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.KpsClsRaw)
}

::google::protobuf::uint8* KpsClsRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.KpsClsRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 id = 1;
  if (this->id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->id_, target);
  }

  // repeated float conf = 2;
  if (this->conf_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _conf_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->conf_, target);
  }

  // repeated string name = 3;
  for (int i = 0, n = this->name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name(i).data(), static_cast<int>(this->name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autodrive.workflow.proto.KpsClsRaw.name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->name(i), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.KpsClsRaw)
  return target;
}

size_t KpsClsRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.KpsClsRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float conf = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->conf_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _conf_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string name = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->name_size());
  for (int i = 0, n = this->name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KpsClsRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.KpsClsRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const KpsClsRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KpsClsRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.KpsClsRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.KpsClsRaw)
    MergeFrom(*source);
  }
}

void KpsClsRaw::MergeFrom(const KpsClsRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.KpsClsRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  conf_.MergeFrom(from.conf_);
  name_.MergeFrom(from.name_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void KpsClsRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.KpsClsRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KpsClsRaw::CopyFrom(const KpsClsRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.KpsClsRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KpsClsRaw::IsInitialized() const {
  return true;
}

void KpsClsRaw::Swap(KpsClsRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KpsClsRaw::InternalSwap(KpsClsRaw* other) {
  using std::swap;
  id_.InternalSwap(&other->id_);
  conf_.InternalSwap(&other->conf_);
  name_.InternalSwap(&other->name_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KpsClsRaw::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyPointsRaw::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyPointsRaw::kTaskTypeFieldNumber;
const int KeyPointsRaw::kKeyPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyPointsRaw::KeyPointsRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsKeyPointsRaw();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.KeyPointsRaw)
}
KeyPointsRaw::KeyPointsRaw(const KeyPointsRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_points_(from.key_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_type_ = from.task_type_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.KeyPointsRaw)
}

void KeyPointsRaw::SharedCtor() {
  task_type_ = 0;
  _cached_size_ = 0;
}

KeyPointsRaw::~KeyPointsRaw() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.KeyPointsRaw)
  SharedDtor();
}

void KeyPointsRaw::SharedDtor() {
}

void KeyPointsRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyPointsRaw::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyPointsRaw& KeyPointsRaw::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsKeyPointsRaw();
  return *internal_default_instance();
}

KeyPointsRaw* KeyPointsRaw::New(::google::protobuf::Arena* arena) const {
  KeyPointsRaw* n = new KeyPointsRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyPointsRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.KeyPointsRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_points_.Clear();
  task_type_ = 0;
  _internal_metadata_.Clear();
}

bool KeyPointsRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.KeyPointsRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 task_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_key_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.KeyPointsRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.KeyPointsRaw)
  return false;
#undef DO_
}

void KeyPointsRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.KeyPointsRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_type = 1;
  if (this->task_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_type(), output);
  }

  // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.KeyPointsRaw)
}

::google::protobuf::uint8* KeyPointsRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.KeyPointsRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 task_type = 1;
  if (this->task_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_type(), target);
  }

  // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->key_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.KeyPointsRaw)
  return target;
}

size_t KeyPointsRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.KeyPointsRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->key_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->key_points(static_cast<int>(i)));
    }
  }

  // int32 task_type = 1;
  if (this->task_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyPointsRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.KeyPointsRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPointsRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyPointsRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.KeyPointsRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.KeyPointsRaw)
    MergeFrom(*source);
  }
}

void KeyPointsRaw::MergeFrom(const KeyPointsRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.KeyPointsRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_points_.MergeFrom(from.key_points_);
  if (from.task_type() != 0) {
    set_task_type(from.task_type());
  }
}

void KeyPointsRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.KeyPointsRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPointsRaw::CopyFrom(const KeyPointsRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.KeyPointsRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPointsRaw::IsInitialized() const {
  return true;
}

void KeyPointsRaw::Swap(KeyPointsRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyPointsRaw::InternalSwap(KeyPointsRaw* other) {
  using std::swap;
  key_points_.InternalSwap(&other->key_points_);
  swap(task_type_, other->task_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyPointsRaw::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PRFromGround::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PRFromGround::kRollFieldNumber;
const int PRFromGround::kPitchFieldNumber;
const int PRFromGround::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PRFromGround::PRFromGround()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsPRFromGround();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.PRFromGround)
}
PRFromGround::PRFromGround(const PRFromGround& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.PRFromGround)
}

void PRFromGround::SharedCtor() {
  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(type_));
  _cached_size_ = 0;
}

PRFromGround::~PRFromGround() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.PRFromGround)
  SharedDtor();
}

void PRFromGround::SharedDtor() {
}

void PRFromGround::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRFromGround::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PRFromGround& PRFromGround::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsPRFromGround();
  return *internal_default_instance();
}

PRFromGround* PRFromGround::New(::google::protobuf::Arena* arena) const {
  PRFromGround* n = new PRFromGround;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PRFromGround::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.PRFromGround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool PRFromGround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.PRFromGround)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float roll = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Global2peResultType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::autodrive::workflow::proto::Global2peResultType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.PRFromGround)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.PRFromGround)
  return false;
#undef DO_
}

void PRFromGround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.PRFromGround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll = 1;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->roll(), output);
  }

  // float pitch = 2;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }

  // .autodrive.workflow.proto.Global2peResultType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.PRFromGround)
}

::google::protobuf::uint8* PRFromGround::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.PRFromGround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll = 1;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->roll(), target);
  }

  // float pitch = 2;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pitch(), target);
  }

  // .autodrive.workflow.proto.Global2peResultType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.PRFromGround)
  return target;
}

size_t PRFromGround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.PRFromGround)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float roll = 1;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 2;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // .autodrive.workflow.proto.Global2peResultType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRFromGround::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.PRFromGround)
  GOOGLE_DCHECK_NE(&from, this);
  const PRFromGround* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PRFromGround>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.PRFromGround)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.PRFromGround)
    MergeFrom(*source);
  }
}

void PRFromGround::MergeFrom(const PRFromGround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.PRFromGround)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PRFromGround::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.PRFromGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRFromGround::CopyFrom(const PRFromGround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.PRFromGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRFromGround::IsInitialized() const {
  return true;
}

void PRFromGround::Swap(PRFromGround* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PRFromGround::InternalSwap(PRFromGround* other) {
  using std::swap;
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PRFromGround::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyPointsRawData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyPointsRawData::kTypeFieldNumber;
const int KeyPointsRawData::kKeyPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyPointsRawData::KeyPointsRawData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsKeyPointsRawData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.KeyPointsRawData)
}
KeyPointsRawData::KeyPointsRawData(const KeyPointsRawData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_points_(from.key_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.KeyPointsRawData)
}

void KeyPointsRawData::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

KeyPointsRawData::~KeyPointsRawData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.KeyPointsRawData)
  SharedDtor();
}

void KeyPointsRawData::SharedDtor() {
}

void KeyPointsRawData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyPointsRawData::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyPointsRawData& KeyPointsRawData::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsKeyPointsRawData();
  return *internal_default_instance();
}

KeyPointsRawData* KeyPointsRawData::New(::google::protobuf::Arena* arena) const {
  KeyPointsRawData* n = new KeyPointsRawData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyPointsRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.KeyPointsRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_points_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

bool KeyPointsRawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.KeyPointsRawData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.KeyPointType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::autodrive::workflow::proto::KeyPointType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_key_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.KeyPointsRawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.KeyPointsRawData)
  return false;
#undef DO_
}

void KeyPointsRawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.KeyPointsRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.KeyPointType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.KeyPointsRawData)
}

::google::protobuf::uint8* KeyPointsRawData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.KeyPointsRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.KeyPointType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->key_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.KeyPointsRawData)
  return target;
}

size_t KeyPointsRawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.KeyPointsRawData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->key_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->key_points(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.KeyPointType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyPointsRawData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.KeyPointsRawData)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPointsRawData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyPointsRawData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.KeyPointsRawData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.KeyPointsRawData)
    MergeFrom(*source);
  }
}

void KeyPointsRawData::MergeFrom(const KeyPointsRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.KeyPointsRawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_points_.MergeFrom(from.key_points_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void KeyPointsRawData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.KeyPointsRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPointsRawData::CopyFrom(const KeyPointsRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.KeyPointsRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPointsRawData::IsInitialized() const {
  return true;
}

void KeyPointsRawData::Swap(KeyPointsRawData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyPointsRawData::InternalSwap(KeyPointsRawData* other) {
  using std::swap;
  key_points_.InternalSwap(&other->key_points_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyPointsRawData::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleRaw::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ObstacleRaw_default_instance_._instance.get_mutable()->rect_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
  ::autodrive::workflow::proto::_ObstacleRaw_default_instance_._instance.get_mutable()->input_roi_ = const_cast< ::autodrive::workflow::proto::perception_base::Rect*>(
      ::autodrive::workflow::proto::perception_base::Rect::internal_default_instance());
}
void ObstacleRaw::clear_rect() {
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) {
    delete rect_;
  }
  rect_ = NULL;
}
void ObstacleRaw::clear_category() {
  category_.Clear();
}
void ObstacleRaw::clear_input_roi() {
  if (GetArenaNoVirtual() == NULL && input_roi_ != NULL) {
    delete input_roi_;
  }
  input_roi_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleRaw::kRectFieldNumber;
const int ObstacleRaw::kConfFieldNumber;
const int ObstacleRaw::kModelFieldNumber;
const int ObstacleRaw::kSourceFieldNumber;
const int ObstacleRaw::kCategoryFieldNumber;
const int ObstacleRaw::kPropertyBboxFieldNumber;
const int ObstacleRaw::kKeyPointsFieldNumber;
const int ObstacleRaw::kDepthFieldNumber;
const int ObstacleRaw::kExpandFieldNumber;
const int ObstacleRaw::kInputRoiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleRaw::ObstacleRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRaw();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ObstacleRaw)
}
ObstacleRaw::ObstacleRaw(const ObstacleRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      category_(from.category_),
      property_bbox_(from.property_bbox_),
      key_points_(from.key_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rect()) {
    rect_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.rect_);
  } else {
    rect_ = NULL;
  }
  if (from.has_input_roi()) {
    input_roi_ = new ::autodrive::workflow::proto::perception_base::Rect(*from.input_roi_);
  } else {
    input_roi_ = NULL;
  }
  ::memcpy(&conf_, &from.conf_,
    static_cast<size_t>(reinterpret_cast<char*>(&expand_) -
    reinterpret_cast<char*>(&conf_)) + sizeof(expand_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ObstacleRaw)
}

void ObstacleRaw::SharedCtor() {
  ::memset(&rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expand_) -
      reinterpret_cast<char*>(&rect_)) + sizeof(expand_));
  _cached_size_ = 0;
}

ObstacleRaw::~ObstacleRaw() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ObstacleRaw)
  SharedDtor();
}

void ObstacleRaw::SharedDtor() {
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete input_roi_;
}

void ObstacleRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleRaw::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleRaw& ObstacleRaw::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRaw();
  return *internal_default_instance();
}

ObstacleRaw* ObstacleRaw::New(::google::protobuf::Arena* arena) const {
  ObstacleRaw* n = new ObstacleRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ObstacleRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  property_bbox_.Clear();
  key_points_.Clear();
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) {
    delete rect_;
  }
  rect_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_roi_ != NULL) {
    delete input_roi_;
  }
  input_roi_ = NULL;
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expand_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(expand_));
  _internal_metadata_.Clear();
}

bool ObstacleRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ObstacleRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.Rect rect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.perception_base.Category category = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.PropertyPerceptionBBox property_bbox = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_property_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_key_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float depth = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 expand = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Rect input_roi = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_input_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ObstacleRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ObstacleRaw)
  return false;
#undef DO_
}

void ObstacleRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ObstacleRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Rect rect = 1;
  if (this->has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rect_, output);
  }

  // float conf = 2;
  if (this->conf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->conf(), output);
  }

  // int32 model = 3;
  if (this->model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model(), output);
  }

  // int32 source = 4;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->source(), output);
  }

  // repeated .autodrive.workflow.proto.perception_base.Category category = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->category(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.PropertyPerceptionBBox property_bbox = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_bbox_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->property_bbox(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->key_points(static_cast<int>(i)), output);
  }

  // float depth = 8;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->depth(), output);
  }

  // int32 expand = 9;
  if (this->expand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->expand(), output);
  }

  // .autodrive.workflow.proto.perception_base.Rect input_roi = 10;
  if (this->has_input_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->input_roi_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ObstacleRaw)
}

::google::protobuf::uint8* ObstacleRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ObstacleRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Rect rect = 1;
  if (this->has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->rect_, deterministic, target);
  }

  // float conf = 2;
  if (this->conf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->conf(), target);
  }

  // int32 model = 3;
  if (this->model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model(), target);
  }

  // int32 source = 4;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->source(), target);
  }

  // repeated .autodrive.workflow.proto.perception_base.Category category = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->category_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->category(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.PropertyPerceptionBBox property_bbox = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_bbox_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->property_bbox(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->key_points(static_cast<int>(i)), deterministic, target);
  }

  // float depth = 8;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->depth(), target);
  }

  // int32 expand = 9;
  if (this->expand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->expand(), target);
  }

  // .autodrive.workflow.proto.perception_base.Rect input_roi = 10;
  if (this->has_input_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->input_roi_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ObstacleRaw)
  return target;
}

size_t ObstacleRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ObstacleRaw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.perception_base.Category category = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->category_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->category(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.PropertyPerceptionBBox property_bbox = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->property_bbox_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->property_bbox(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.ObstacleRawKeyPoint key_points = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->key_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->key_points(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.perception_base.Rect rect = 1;
  if (this->has_rect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rect_);
  }

  // .autodrive.workflow.proto.perception_base.Rect input_roi = 10;
  if (this->has_input_roi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->input_roi_);
  }

  // float conf = 2;
  if (this->conf() != 0) {
    total_size += 1 + 4;
  }

  // int32 model = 3;
  if (this->model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->model());
  }

  // int32 source = 4;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  // float depth = 8;
  if (this->depth() != 0) {
    total_size += 1 + 4;
  }

  // int32 expand = 9;
  if (this->expand() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->expand());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ObstacleRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ObstacleRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ObstacleRaw)
    MergeFrom(*source);
  }
}

void ObstacleRaw::MergeFrom(const ObstacleRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ObstacleRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  property_bbox_.MergeFrom(from.property_bbox_);
  key_points_.MergeFrom(from.key_points_);
  if (from.has_rect()) {
    mutable_rect()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.rect());
  }
  if (from.has_input_roi()) {
    mutable_input_roi()->::autodrive::workflow::proto::perception_base::Rect::MergeFrom(from.input_roi());
  }
  if (from.conf() != 0) {
    set_conf(from.conf());
  }
  if (from.model() != 0) {
    set_model(from.model());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
  if (from.expand() != 0) {
    set_expand(from.expand());
  }
}

void ObstacleRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ObstacleRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleRaw::CopyFrom(const ObstacleRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ObstacleRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleRaw::IsInitialized() const {
  return true;
}

void ObstacleRaw::Swap(ObstacleRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleRaw::InternalSwap(ObstacleRaw* other) {
  using std::swap;
  category_.InternalSwap(&other->category_);
  property_bbox_.InternalSwap(&other->property_bbox_);
  key_points_.InternalSwap(&other->key_points_);
  swap(rect_, other->rect_);
  swap(input_roi_, other->input_roi_);
  swap(conf_, other->conf_);
  swap(model_, other->model_);
  swap(source_, other->source_);
  swap(depth_, other->depth_);
  swap(expand_, other->expand_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleRaw::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleRawsData::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_ObstacleRawsData_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::perception_base::Header*>(
      ::autodrive::workflow::proto::perception_base::Header::internal_default_instance());
  ::autodrive::workflow::proto::_ObstacleRawsData_default_instance_._instance.get_mutable()->category_ = const_cast< ::autodrive::workflow::proto::perception_base::Category*>(
      ::autodrive::workflow::proto::perception_base::Category::internal_default_instance());
}
void ObstacleRawsData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ObstacleRawsData::clear_category() {
  if (GetArenaNoVirtual() == NULL && category_ != NULL) {
    delete category_;
  }
  category_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleRawsData::kHeaderFieldNumber;
const int ObstacleRawsData::kCategoryFieldNumber;
const int ObstacleRawsData::kConfScaleFieldNumber;
const int ObstacleRawsData::kKeyPointsRawsFieldNumber;
const int ObstacleRawsData::kObstacleRawsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleRawsData::ObstacleRawsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRawsData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.ObstacleRawsData)
}
ObstacleRawsData::ObstacleRawsData(const ObstacleRawsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_points_raws_(from.key_points_raws_),
      obstacle_raws_(from.obstacle_raws_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::perception_base::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_category()) {
    category_ = new ::autodrive::workflow::proto::perception_base::Category(*from.category_);
  } else {
    category_ = NULL;
  }
  conf_scale_ = from.conf_scale_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.ObstacleRawsData)
}

void ObstacleRawsData::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conf_scale_) -
      reinterpret_cast<char*>(&header_)) + sizeof(conf_scale_));
  _cached_size_ = 0;
}

ObstacleRawsData::~ObstacleRawsData() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.ObstacleRawsData)
  SharedDtor();
}

void ObstacleRawsData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete category_;
}

void ObstacleRawsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleRawsData::descriptor() {
  ::protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleRawsData& ObstacleRawsData::default_instance() {
  ::protobuf_obstacle_5fraw_2eproto::InitDefaultsObstacleRawsData();
  return *internal_default_instance();
}

ObstacleRawsData* ObstacleRawsData::New(::google::protobuf::Arena* arena) const {
  ObstacleRawsData* n = new ObstacleRawsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObstacleRawsData::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.ObstacleRawsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_points_raws_.Clear();
  obstacle_raws_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && category_ != NULL) {
    delete category_;
  }
  category_ = NULL;
  conf_scale_ = 0;
  _internal_metadata_.Clear();
}

bool ObstacleRawsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.ObstacleRawsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.perception_base.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.perception_base.Category category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conf_scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conf_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.KeyPointsRawData key_points_raws = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_key_points_raws()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.ObstacleRaw obstacle_raws = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_obstacle_raws()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.ObstacleRawsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.ObstacleRawsData)
  return false;
#undef DO_
}

void ObstacleRawsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.ObstacleRawsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.perception_base.Category category = 2;
  if (this->has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->category_, output);
  }

  // float conf_scale = 3;
  if (this->conf_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->conf_scale(), output);
  }

  // repeated .autodrive.workflow.proto.KeyPointsRawData key_points_raws = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_raws_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->key_points_raws(static_cast<int>(i)), output);
  }

  // repeated .autodrive.workflow.proto.ObstacleRaw obstacle_raws = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_raws_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->obstacle_raws(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.ObstacleRawsData)
}

::google::protobuf::uint8* ObstacleRawsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.ObstacleRawsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.perception_base.Category category = 2;
  if (this->has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->category_, deterministic, target);
  }

  // float conf_scale = 3;
  if (this->conf_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->conf_scale(), target);
  }

  // repeated .autodrive.workflow.proto.KeyPointsRawData key_points_raws = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_raws_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->key_points_raws(static_cast<int>(i)), deterministic, target);
  }

  // repeated .autodrive.workflow.proto.ObstacleRaw obstacle_raws = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_raws_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->obstacle_raws(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.ObstacleRawsData)
  return target;
}

size_t ObstacleRawsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.ObstacleRawsData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.KeyPointsRawData key_points_raws = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->key_points_raws_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->key_points_raws(static_cast<int>(i)));
    }
  }

  // repeated .autodrive.workflow.proto.ObstacleRaw obstacle_raws = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_raws_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle_raws(static_cast<int>(i)));
    }
  }

  // .autodrive.workflow.proto.perception_base.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.perception_base.Category category = 2;
  if (this->has_category()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->category_);
  }

  // float conf_scale = 3;
  if (this->conf_scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleRawsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.ObstacleRawsData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleRawsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleRawsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.ObstacleRawsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.ObstacleRawsData)
    MergeFrom(*source);
  }
}

void ObstacleRawsData::MergeFrom(const ObstacleRawsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.ObstacleRawsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_points_raws_.MergeFrom(from.key_points_raws_);
  obstacle_raws_.MergeFrom(from.obstacle_raws_);
  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::perception_base::Header::MergeFrom(from.header());
  }
  if (from.has_category()) {
    mutable_category()->::autodrive::workflow::proto::perception_base::Category::MergeFrom(from.category());
  }
  if (from.conf_scale() != 0) {
    set_conf_scale(from.conf_scale());
  }
}

void ObstacleRawsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.ObstacleRawsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleRawsData::CopyFrom(const ObstacleRawsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.ObstacleRawsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleRawsData::IsInitialized() const {
  return true;
}

void ObstacleRawsData::Swap(ObstacleRawsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleRawsData::InternalSwap(ObstacleRawsData* other) {
  using std::swap;
  key_points_raws_.InternalSwap(&other->key_points_raws_);
  obstacle_raws_.InternalSwap(&other->obstacle_raws_);
  swap(header_, other->header_);
  swap(category_, other->category_);
  swap(conf_scale_, other->conf_scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObstacleRawsData::GetMetadata() const {
  protobuf_obstacle_5fraw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_obstacle_5fraw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
