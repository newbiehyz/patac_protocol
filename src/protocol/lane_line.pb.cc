// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_line.proto

#include "lane_line.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class LaneLinePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneLinePoint>
      _instance;
} _LaneLinePoint_default_instance_;
class LaneLinePointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneLinePoints>
      _instance;
} _LaneLinePoints_default_instance_;
class LaneLinePointsMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneLinePointsMsg>
      _instance;
} _LaneLinePointsMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_lane_5fline_2eproto {
void InitDefaultsLaneLinePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_basic_2eproto::InitDefaultsVector2f();
  {
    void* ptr = &::autodrive::workflow::proto::_LaneLinePoint_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LaneLinePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LaneLinePoint::InitAsDefaultInstance();
}

void InitDefaultsLaneLinePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneLinePointImpl);
}

void InitDefaultsLaneLinePointsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePoint();
  {
    void* ptr = &::autodrive::workflow::proto::_LaneLinePoints_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LaneLinePoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LaneLinePoints::InitAsDefaultInstance();
}

void InitDefaultsLaneLinePoints() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneLinePointsImpl);
}

void InitDefaultsLaneLinePointsMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePoints();
  {
    void* ptr = &::autodrive::workflow::proto::_LaneLinePointsMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::LaneLinePointsMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::LaneLinePointsMsg::InitAsDefaultInstance();
}

void InitDefaultsLaneLinePointsMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneLinePointsMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePoint, line_start_point_vcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePoint, line_end_point_vcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePoint, flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePoints, near_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePoints, far_line_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePointsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePointsMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePointsMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::LaneLinePointsMsg, lane_line_points_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::LaneLinePoint)},
  { 8, -1, sizeof(::autodrive::workflow::proto::LaneLinePoints)},
  { 15, -1, sizeof(::autodrive::workflow::proto::LaneLinePointsMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LaneLinePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LaneLinePoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_LaneLinePointsMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "lane_line.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017lane_line.proto\022\030autodrive.workflow.pr"
      "oto\032\014common.proto\032\013basic.proto\"\237\001\n\rLaneL"
      "inePoint\022@\n\024line_start_point_vcs\030\001 \001(\0132\""
      ".autodrive.workflow.proto.Vector2f\022>\n\022li"
      "ne_end_point_vcs\030\002 \001(\0132\".autodrive.workf"
      "low.proto.Vector2f\022\014\n\004flag\030\003 \001(\r\"\207\001\n\016Lan"
      "eLinePoints\022:\n\tnear_line\030\001 \001(\0132\'.autodri"
      "ve.workflow.proto.LaneLinePoint\0229\n\010far_l"
      "ine\030\002 \001(\0132\'.autodrive.workflow.proto.Lan"
      "eLinePoint\"\274\001\n\021LaneLinePointsMsg\0223\n\006head"
      "er\030\001 \001(\0132#.autodrive.workflow.proto.MsgH"
      "eader\022.\n\005error\030\002 \001(\0132\037.autodrive.workflo"
      "w.proto.Error\022B\n\020lane_line_points\030\003 \001(\0132"
      "(.autodrive.workflow.proto.LaneLinePoint"
      "sb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lane_line.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_basic_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_lane_5fline_2eproto
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

void LaneLinePoint::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_LaneLinePoint_default_instance_._instance.get_mutable()->line_start_point_vcs_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
  ::autodrive::workflow::proto::_LaneLinePoint_default_instance_._instance.get_mutable()->line_end_point_vcs_ = const_cast< ::autodrive::workflow::proto::Vector2f*>(
      ::autodrive::workflow::proto::Vector2f::internal_default_instance());
}
void LaneLinePoint::clear_line_start_point_vcs() {
  if (GetArenaNoVirtual() == NULL && line_start_point_vcs_ != NULL) {
    delete line_start_point_vcs_;
  }
  line_start_point_vcs_ = NULL;
}
void LaneLinePoint::clear_line_end_point_vcs() {
  if (GetArenaNoVirtual() == NULL && line_end_point_vcs_ != NULL) {
    delete line_end_point_vcs_;
  }
  line_end_point_vcs_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneLinePoint::kLineStartPointVcsFieldNumber;
const int LaneLinePoint::kLineEndPointVcsFieldNumber;
const int LaneLinePoint::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneLinePoint::LaneLinePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LaneLinePoint)
}
LaneLinePoint::LaneLinePoint(const LaneLinePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_line_start_point_vcs()) {
    line_start_point_vcs_ = new ::autodrive::workflow::proto::Vector2f(*from.line_start_point_vcs_);
  } else {
    line_start_point_vcs_ = NULL;
  }
  if (from.has_line_end_point_vcs()) {
    line_end_point_vcs_ = new ::autodrive::workflow::proto::Vector2f(*from.line_end_point_vcs_);
  } else {
    line_end_point_vcs_ = NULL;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LaneLinePoint)
}

void LaneLinePoint::SharedCtor() {
  ::memset(&line_start_point_vcs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&line_start_point_vcs_)) + sizeof(flag_));
  _cached_size_ = 0;
}

LaneLinePoint::~LaneLinePoint() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LaneLinePoint)
  SharedDtor();
}

void LaneLinePoint::SharedDtor() {
  if (this != internal_default_instance()) delete line_start_point_vcs_;
  if (this != internal_default_instance()) delete line_end_point_vcs_;
}

void LaneLinePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneLinePoint::descriptor() {
  ::protobuf_lane_5fline_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fline_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneLinePoint& LaneLinePoint::default_instance() {
  ::protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePoint();
  return *internal_default_instance();
}

LaneLinePoint* LaneLinePoint::New(::google::protobuf::Arena* arena) const {
  LaneLinePoint* n = new LaneLinePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneLinePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LaneLinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && line_start_point_vcs_ != NULL) {
    delete line_start_point_vcs_;
  }
  line_start_point_vcs_ = NULL;
  if (GetArenaNoVirtual() == NULL && line_end_point_vcs_ != NULL) {
    delete line_end_point_vcs_;
  }
  line_end_point_vcs_ = NULL;
  flag_ = 0u;
  _internal_metadata_.Clear();
}

bool LaneLinePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LaneLinePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.Vector2f line_start_point_vcs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line_start_point_vcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Vector2f line_end_point_vcs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line_end_point_vcs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LaneLinePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LaneLinePoint)
  return false;
#undef DO_
}

void LaneLinePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LaneLinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector2f line_start_point_vcs = 1;
  if (this->has_line_start_point_vcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->line_start_point_vcs_, output);
  }

  // .autodrive.workflow.proto.Vector2f line_end_point_vcs = 2;
  if (this->has_line_end_point_vcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->line_end_point_vcs_, output);
  }

  // uint32 flag = 3;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LaneLinePoint)
}

::google::protobuf::uint8* LaneLinePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LaneLinePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.Vector2f line_start_point_vcs = 1;
  if (this->has_line_start_point_vcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->line_start_point_vcs_, deterministic, target);
  }

  // .autodrive.workflow.proto.Vector2f line_end_point_vcs = 2;
  if (this->has_line_end_point_vcs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->line_end_point_vcs_, deterministic, target);
  }

  // uint32 flag = 3;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LaneLinePoint)
  return target;
}

size_t LaneLinePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LaneLinePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.Vector2f line_start_point_vcs = 1;
  if (this->has_line_start_point_vcs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->line_start_point_vcs_);
  }

  // .autodrive.workflow.proto.Vector2f line_end_point_vcs = 2;
  if (this->has_line_end_point_vcs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->line_end_point_vcs_);
  }

  // uint32 flag = 3;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneLinePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LaneLinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneLinePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneLinePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LaneLinePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LaneLinePoint)
    MergeFrom(*source);
  }
}

void LaneLinePoint::MergeFrom(const LaneLinePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LaneLinePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_line_start_point_vcs()) {
    mutable_line_start_point_vcs()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.line_start_point_vcs());
  }
  if (from.has_line_end_point_vcs()) {
    mutable_line_end_point_vcs()->::autodrive::workflow::proto::Vector2f::MergeFrom(from.line_end_point_vcs());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void LaneLinePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LaneLinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneLinePoint::CopyFrom(const LaneLinePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LaneLinePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLinePoint::IsInitialized() const {
  return true;
}

void LaneLinePoint::Swap(LaneLinePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneLinePoint::InternalSwap(LaneLinePoint* other) {
  using std::swap;
  swap(line_start_point_vcs_, other->line_start_point_vcs_);
  swap(line_end_point_vcs_, other->line_end_point_vcs_);
  swap(flag_, other->flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneLinePoint::GetMetadata() const {
  protobuf_lane_5fline_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fline_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneLinePoints::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_LaneLinePoints_default_instance_._instance.get_mutable()->near_line_ = const_cast< ::autodrive::workflow::proto::LaneLinePoint*>(
      ::autodrive::workflow::proto::LaneLinePoint::internal_default_instance());
  ::autodrive::workflow::proto::_LaneLinePoints_default_instance_._instance.get_mutable()->far_line_ = const_cast< ::autodrive::workflow::proto::LaneLinePoint*>(
      ::autodrive::workflow::proto::LaneLinePoint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneLinePoints::kNearLineFieldNumber;
const int LaneLinePoints::kFarLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneLinePoints::LaneLinePoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePoints();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LaneLinePoints)
}
LaneLinePoints::LaneLinePoints(const LaneLinePoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_near_line()) {
    near_line_ = new ::autodrive::workflow::proto::LaneLinePoint(*from.near_line_);
  } else {
    near_line_ = NULL;
  }
  if (from.has_far_line()) {
    far_line_ = new ::autodrive::workflow::proto::LaneLinePoint(*from.far_line_);
  } else {
    far_line_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LaneLinePoints)
}

void LaneLinePoints::SharedCtor() {
  ::memset(&near_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&far_line_) -
      reinterpret_cast<char*>(&near_line_)) + sizeof(far_line_));
  _cached_size_ = 0;
}

LaneLinePoints::~LaneLinePoints() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LaneLinePoints)
  SharedDtor();
}

void LaneLinePoints::SharedDtor() {
  if (this != internal_default_instance()) delete near_line_;
  if (this != internal_default_instance()) delete far_line_;
}

void LaneLinePoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneLinePoints::descriptor() {
  ::protobuf_lane_5fline_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fline_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneLinePoints& LaneLinePoints::default_instance() {
  ::protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePoints();
  return *internal_default_instance();
}

LaneLinePoints* LaneLinePoints::New(::google::protobuf::Arena* arena) const {
  LaneLinePoints* n = new LaneLinePoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneLinePoints::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LaneLinePoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && near_line_ != NULL) {
    delete near_line_;
  }
  near_line_ = NULL;
  if (GetArenaNoVirtual() == NULL && far_line_ != NULL) {
    delete far_line_;
  }
  far_line_ = NULL;
  _internal_metadata_.Clear();
}

bool LaneLinePoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LaneLinePoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.LaneLinePoint near_line = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_near_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LaneLinePoint far_line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_far_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LaneLinePoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LaneLinePoints)
  return false;
#undef DO_
}

void LaneLinePoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LaneLinePoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.LaneLinePoint near_line = 1;
  if (this->has_near_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->near_line_, output);
  }

  // .autodrive.workflow.proto.LaneLinePoint far_line = 2;
  if (this->has_far_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->far_line_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LaneLinePoints)
}

::google::protobuf::uint8* LaneLinePoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LaneLinePoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.LaneLinePoint near_line = 1;
  if (this->has_near_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->near_line_, deterministic, target);
  }

  // .autodrive.workflow.proto.LaneLinePoint far_line = 2;
  if (this->has_far_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->far_line_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LaneLinePoints)
  return target;
}

size_t LaneLinePoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LaneLinePoints)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.LaneLinePoint near_line = 1;
  if (this->has_near_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->near_line_);
  }

  // .autodrive.workflow.proto.LaneLinePoint far_line = 2;
  if (this->has_far_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->far_line_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneLinePoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LaneLinePoints)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneLinePoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneLinePoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LaneLinePoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LaneLinePoints)
    MergeFrom(*source);
  }
}

void LaneLinePoints::MergeFrom(const LaneLinePoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LaneLinePoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_near_line()) {
    mutable_near_line()->::autodrive::workflow::proto::LaneLinePoint::MergeFrom(from.near_line());
  }
  if (from.has_far_line()) {
    mutable_far_line()->::autodrive::workflow::proto::LaneLinePoint::MergeFrom(from.far_line());
  }
}

void LaneLinePoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LaneLinePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneLinePoints::CopyFrom(const LaneLinePoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LaneLinePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLinePoints::IsInitialized() const {
  return true;
}

void LaneLinePoints::Swap(LaneLinePoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneLinePoints::InternalSwap(LaneLinePoints* other) {
  using std::swap;
  swap(near_line_, other->near_line_);
  swap(far_line_, other->far_line_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneLinePoints::GetMetadata() const {
  protobuf_lane_5fline_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fline_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneLinePointsMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_LaneLinePointsMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_LaneLinePointsMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_LaneLinePointsMsg_default_instance_._instance.get_mutable()->lane_line_points_ = const_cast< ::autodrive::workflow::proto::LaneLinePoints*>(
      ::autodrive::workflow::proto::LaneLinePoints::internal_default_instance());
}
void LaneLinePointsMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void LaneLinePointsMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneLinePointsMsg::kHeaderFieldNumber;
const int LaneLinePointsMsg::kErrorFieldNumber;
const int LaneLinePointsMsg::kLaneLinePointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneLinePointsMsg::LaneLinePointsMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePointsMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.LaneLinePointsMsg)
}
LaneLinePointsMsg::LaneLinePointsMsg(const LaneLinePointsMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_lane_line_points()) {
    lane_line_points_ = new ::autodrive::workflow::proto::LaneLinePoints(*from.lane_line_points_);
  } else {
    lane_line_points_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.LaneLinePointsMsg)
}

void LaneLinePointsMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_line_points_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lane_line_points_));
  _cached_size_ = 0;
}

LaneLinePointsMsg::~LaneLinePointsMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.LaneLinePointsMsg)
  SharedDtor();
}

void LaneLinePointsMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete lane_line_points_;
}

void LaneLinePointsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneLinePointsMsg::descriptor() {
  ::protobuf_lane_5fline_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fline_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneLinePointsMsg& LaneLinePointsMsg::default_instance() {
  ::protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePointsMsg();
  return *internal_default_instance();
}

LaneLinePointsMsg* LaneLinePointsMsg::New(::google::protobuf::Arena* arena) const {
  LaneLinePointsMsg* n = new LaneLinePointsMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneLinePointsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.LaneLinePointsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_line_points_ != NULL) {
    delete lane_line_points_;
  }
  lane_line_points_ = NULL;
  _internal_metadata_.Clear();
}

bool LaneLinePointsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.LaneLinePointsMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.LaneLinePoints lane_line_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_line_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.LaneLinePointsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.LaneLinePointsMsg)
  return false;
#undef DO_
}

void LaneLinePointsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.LaneLinePointsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.LaneLinePoints lane_line_points = 3;
  if (this->has_lane_line_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lane_line_points_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.LaneLinePointsMsg)
}

::google::protobuf::uint8* LaneLinePointsMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.LaneLinePointsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.LaneLinePoints lane_line_points = 3;
  if (this->has_lane_line_points()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->lane_line_points_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.LaneLinePointsMsg)
  return target;
}

size_t LaneLinePointsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.LaneLinePointsMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.LaneLinePoints lane_line_points = 3;
  if (this->has_lane_line_points()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lane_line_points_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneLinePointsMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.LaneLinePointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneLinePointsMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneLinePointsMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.LaneLinePointsMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.LaneLinePointsMsg)
    MergeFrom(*source);
  }
}

void LaneLinePointsMsg::MergeFrom(const LaneLinePointsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.LaneLinePointsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_lane_line_points()) {
    mutable_lane_line_points()->::autodrive::workflow::proto::LaneLinePoints::MergeFrom(from.lane_line_points());
  }
}

void LaneLinePointsMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.LaneLinePointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneLinePointsMsg::CopyFrom(const LaneLinePointsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.LaneLinePointsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLinePointsMsg::IsInitialized() const {
  return true;
}

void LaneLinePointsMsg::Swap(LaneLinePointsMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneLinePointsMsg::InternalSwap(LaneLinePointsMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(lane_line_points_, other->lane_line_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneLinePointsMsg::GetMetadata() const {
  protobuf_lane_5fline_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lane_5fline_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
