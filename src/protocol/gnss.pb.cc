// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnss.proto

#include "gnss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace autodrive {
namespace workflow {
namespace proto {
class SatelliteInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SatelliteInfo>
      _instance;
} _SatelliteInfo_default_instance_;
class GnssDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gnss>
      _instance;
} _Gnss_default_instance_;
class GnssMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GnssMsg>
      _instance;
} _GnssMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace protobuf_gnss_2eproto {
void InitDefaultsSatelliteInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::autodrive::workflow::proto::_SatelliteInfo_default_instance_;
    new (ptr) ::autodrive::workflow::proto::SatelliteInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::SatelliteInfo::InitAsDefaultInstance();
}

void InitDefaultsSatelliteInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSatelliteInfoImpl);
}

void InitDefaultsGnssImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gnss_2eproto::InitDefaultsSatelliteInfo();
  {
    void* ptr = &::autodrive::workflow::proto::_Gnss_default_instance_;
    new (ptr) ::autodrive::workflow::proto::Gnss();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::Gnss::InitAsDefaultInstance();
}

void InitDefaultsGnss() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGnssImpl);
}

void InitDefaultsGnssMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_2eproto::InitDefaultsMsgHeader();
  protobuf_common_2eproto::InitDefaultsError();
  protobuf_gnss_2eproto::InitDefaultsGnss();
  {
    void* ptr = &::autodrive::workflow::proto::_GnssMsg_default_instance_;
    new (ptr) ::autodrive::workflow::proto::GnssMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autodrive::workflow::proto::GnssMsg::InitAsDefaultInstance();
}

void InitDefaultsGnssMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGnssMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SatelliteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SatelliteInfo, num_in_view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SatelliteInfo, no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SatelliteInfo, snr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SatelliteInfo, elevation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SatelliteInfo, azimuth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::SatelliteInfo, positing_system_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, utc_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, ellipsoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, pose_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, position_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, num_satellites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, gnss_vel_north_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, gnss_vel_east_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, gnss_vel_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, course_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, heading_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, course_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, horizon_position_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, vertical_position_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, horizon_velocity_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, vertical_velocity_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, tdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, vdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, sat_seq_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, num_gnss_satellite_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::Gnss, statelline_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::GnssMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::GnssMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::GnssMsg, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::autodrive::workflow::proto::GnssMsg, gnss_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::autodrive::workflow::proto::SatelliteInfo)},
  { 11, -1, sizeof(::autodrive::workflow::proto::Gnss)},
  { 41, -1, sizeof(::autodrive::workflow::proto::GnssMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_SatelliteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_Gnss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::autodrive::workflow::proto::_GnssMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gnss.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ngnss.proto\022\030autodrive.workflow.proto\032\014"
      "common.proto\"\244\001\n\rSatelliteInfo\022\023\n\013num_in"
      "_view\030\001 \001(\r\022\n\n\002no\030\002 \001(\r\022\013\n\003snr\030\003 \001(\r\022\021\n\t"
      "elevation\030\004 \001(\r\022\017\n\007azimuth\030\005 \001(\r\022A\n\017posi"
      "ting_system\030\006 \001(\0162(.autodrive.workflow.p"
      "roto.PositingSystem\"\253\005\n\004Gnss\022\020\n\010utc_time"
      "\030\001 \001(\004\022\020\n\010latitude\030\002 \001(\005\022\021\n\tlongitude\030\003 "
      "\001(\005\022\020\n\010altitude\030\004 \001(\002\022\021\n\tellipsoid\030\005 \001(\002"
      "\0225\n\tpose_type\030\006 \001(\0162\".autodrive.workflow"
      ".proto.PoseType\022A\n\017position_status\030\007 \001(\016"
      "2(.autodrive.workflow.proto.PositionStat"
      "us\022\026\n\016num_satellites\030\010 \001(\r\022\026\n\016gnss_vel_n"
      "orth\030\t \001(\002\022\025\n\rgnss_vel_east\030\n \001(\002\022\025\n\rgns"
      "s_vel_down\030\013 \001(\002\022\017\n\007heading\030\014 \001(\002\022\016\n\006cou"
      "rse\030\r \001(\002\022\025\n\rheading_error\030\016 \001(\002\022\024\n\014cour"
      "se_error\030\017 \001(\002\022\036\n\026horizon_position_error"
      "\030\020 \001(\002\022\037\n\027vertical_position_error\030\021 \001(\002\022"
      "\036\n\026horizon_velocity_error\030\022 \001(\002\022\037\n\027verti"
      "cal_velocity_error\030\023 \001(\002\022\014\n\004tdop\030\024 \001(\002\022\014"
      "\n\004hdop\030\025 \001(\002\022\014\n\004vdop\030\026 \001(\002\022\022\n\nsat_seq_no"
      "\030\027 \001(\r\022\037\n\027num_gnss_satellite_info\030\030 \001(\r\022"
      "@\n\017statelline_info\030\031 \003(\0132\'.autodrive.wor"
      "kflow.proto.SatelliteInfo\"\234\001\n\007GnssMsg\0223\n"
      "\006header\030\001 \001(\0132#.autodrive.workflow.proto"
      ".MsgHeader\022.\n\005error\030\002 \001(\0132\037.autodrive.wo"
      "rkflow.proto.Error\022,\n\004gnss\030\003 \001(\0132\036.autod"
      "rive.workflow.proto.Gnss*\215\001\n\016PositionSta"
      "tus\022\022\n\016POS_ST_INVALID\020\000\022\r\n\tPOS_ST_DR\020\001\022\023"
      "\n\017POS_ST_FIXED_2D\020\002\022\023\n\017POS_ST_FIXED_3D\020\003"
      "\022\022\n\016POS_ST_GNSS_DR\020\004\022\032\n\026POS_ST_ONLY_TIME"
      "_VALID\020\005*\222\001\n\016PositingSystem\022\016\n\nPOS_SM_GP"
      "S\020\000\022\022\n\016POS_SM_BEI_DOU\020\001\022\022\n\016POS_SM_GLONAS"
      "S\020\002\022\022\n\016POS_SM_GALILEO\020\003\022\017\n\013POS_SM_QZSS\020\004"
      "\022\017\n\013POS_SM_SBAS\020\005\022\022\n\016POS_SM_UNKNOWN\020\006*\257\001"
      "\n\010PoseType\022\024\n\020POS_TYPE_INVALID\020\000\022\023\n\017POS_"
      "TYPE_SINGLE\020\001\022\021\n\rPOS_TYPE_DGPS\020\002\022\030\n\024POS_"
      "TYPE_INVALID_PPS\020\003\022\026\n\022POS_TYPE_RTK_FIXED"
      "\020\004\022\026\n\022POS_TYPE_RTK_FLOAT\020\005\022\033\n\027POS_TYPE_D"
      "EAD_RECKONING\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gnss.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gnss_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
const ::google::protobuf::EnumDescriptor* PositionStatus_descriptor() {
  protobuf_gnss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_2eproto::file_level_enum_descriptors[0];
}
bool PositionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PositingSystem_descriptor() {
  protobuf_gnss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_2eproto::file_level_enum_descriptors[1];
}
bool PositingSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PoseType_descriptor() {
  protobuf_gnss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_2eproto::file_level_enum_descriptors[2];
}
bool PoseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SatelliteInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SatelliteInfo::kNumInViewFieldNumber;
const int SatelliteInfo::kNoFieldNumber;
const int SatelliteInfo::kSnrFieldNumber;
const int SatelliteInfo::kElevationFieldNumber;
const int SatelliteInfo::kAzimuthFieldNumber;
const int SatelliteInfo::kPositingSystemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SatelliteInfo::SatelliteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gnss_2eproto::InitDefaultsSatelliteInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.SatelliteInfo)
}
SatelliteInfo::SatelliteInfo(const SatelliteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_in_view_, &from.num_in_view_,
    static_cast<size_t>(reinterpret_cast<char*>(&positing_system_) -
    reinterpret_cast<char*>(&num_in_view_)) + sizeof(positing_system_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.SatelliteInfo)
}

void SatelliteInfo::SharedCtor() {
  ::memset(&num_in_view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positing_system_) -
      reinterpret_cast<char*>(&num_in_view_)) + sizeof(positing_system_));
  _cached_size_ = 0;
}

SatelliteInfo::~SatelliteInfo() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.SatelliteInfo)
  SharedDtor();
}

void SatelliteInfo::SharedDtor() {
}

void SatelliteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SatelliteInfo::descriptor() {
  ::protobuf_gnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SatelliteInfo& SatelliteInfo::default_instance() {
  ::protobuf_gnss_2eproto::InitDefaultsSatelliteInfo();
  return *internal_default_instance();
}

SatelliteInfo* SatelliteInfo::New(::google::protobuf::Arena* arena) const {
  SatelliteInfo* n = new SatelliteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SatelliteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.SatelliteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_in_view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positing_system_) -
      reinterpret_cast<char*>(&num_in_view_)) + sizeof(positing_system_));
  _internal_metadata_.Clear();
}

bool SatelliteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.SatelliteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num_in_view = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_in_view_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 no = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 snr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 elevation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elevation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 azimuth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &azimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.PositingSystem positing_system = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_positing_system(static_cast< ::autodrive::workflow::proto::PositingSystem >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.SatelliteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.SatelliteInfo)
  return false;
#undef DO_
}

void SatelliteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.SatelliteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_in_view = 1;
  if (this->num_in_view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_in_view(), output);
  }

  // uint32 no = 2;
  if (this->no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->no(), output);
  }

  // uint32 snr = 3;
  if (this->snr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->snr(), output);
  }

  // uint32 elevation = 4;
  if (this->elevation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->elevation(), output);
  }

  // uint32 azimuth = 5;
  if (this->azimuth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->azimuth(), output);
  }

  // .autodrive.workflow.proto.PositingSystem positing_system = 6;
  if (this->positing_system() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->positing_system(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.SatelliteInfo)
}

::google::protobuf::uint8* SatelliteInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.SatelliteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_in_view = 1;
  if (this->num_in_view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_in_view(), target);
  }

  // uint32 no = 2;
  if (this->no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->no(), target);
  }

  // uint32 snr = 3;
  if (this->snr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->snr(), target);
  }

  // uint32 elevation = 4;
  if (this->elevation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->elevation(), target);
  }

  // uint32 azimuth = 5;
  if (this->azimuth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->azimuth(), target);
  }

  // .autodrive.workflow.proto.PositingSystem positing_system = 6;
  if (this->positing_system() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->positing_system(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.SatelliteInfo)
  return target;
}

size_t SatelliteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.SatelliteInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 num_in_view = 1;
  if (this->num_in_view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_in_view());
  }

  // uint32 no = 2;
  if (this->no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->no());
  }

  // uint32 snr = 3;
  if (this->snr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->snr());
  }

  // uint32 elevation = 4;
  if (this->elevation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->elevation());
  }

  // uint32 azimuth = 5;
  if (this->azimuth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->azimuth());
  }

  // .autodrive.workflow.proto.PositingSystem positing_system = 6;
  if (this->positing_system() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->positing_system());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SatelliteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.SatelliteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SatelliteInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SatelliteInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.SatelliteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.SatelliteInfo)
    MergeFrom(*source);
  }
}

void SatelliteInfo::MergeFrom(const SatelliteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.SatelliteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_in_view() != 0) {
    set_num_in_view(from.num_in_view());
  }
  if (from.no() != 0) {
    set_no(from.no());
  }
  if (from.snr() != 0) {
    set_snr(from.snr());
  }
  if (from.elevation() != 0) {
    set_elevation(from.elevation());
  }
  if (from.azimuth() != 0) {
    set_azimuth(from.azimuth());
  }
  if (from.positing_system() != 0) {
    set_positing_system(from.positing_system());
  }
}

void SatelliteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.SatelliteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatelliteInfo::CopyFrom(const SatelliteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.SatelliteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatelliteInfo::IsInitialized() const {
  return true;
}

void SatelliteInfo::Swap(SatelliteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SatelliteInfo::InternalSwap(SatelliteInfo* other) {
  using std::swap;
  swap(num_in_view_, other->num_in_view_);
  swap(no_, other->no_);
  swap(snr_, other->snr_);
  swap(elevation_, other->elevation_);
  swap(azimuth_, other->azimuth_);
  swap(positing_system_, other->positing_system_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SatelliteInfo::GetMetadata() const {
  protobuf_gnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gnss::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gnss::kUtcTimeFieldNumber;
const int Gnss::kLatitudeFieldNumber;
const int Gnss::kLongitudeFieldNumber;
const int Gnss::kAltitudeFieldNumber;
const int Gnss::kEllipsoidFieldNumber;
const int Gnss::kPoseTypeFieldNumber;
const int Gnss::kPositionStatusFieldNumber;
const int Gnss::kNumSatellitesFieldNumber;
const int Gnss::kGnssVelNorthFieldNumber;
const int Gnss::kGnssVelEastFieldNumber;
const int Gnss::kGnssVelDownFieldNumber;
const int Gnss::kHeadingFieldNumber;
const int Gnss::kCourseFieldNumber;
const int Gnss::kHeadingErrorFieldNumber;
const int Gnss::kCourseErrorFieldNumber;
const int Gnss::kHorizonPositionErrorFieldNumber;
const int Gnss::kVerticalPositionErrorFieldNumber;
const int Gnss::kHorizonVelocityErrorFieldNumber;
const int Gnss::kVerticalVelocityErrorFieldNumber;
const int Gnss::kTdopFieldNumber;
const int Gnss::kHdopFieldNumber;
const int Gnss::kVdopFieldNumber;
const int Gnss::kSatSeqNoFieldNumber;
const int Gnss::kNumGnssSatelliteInfoFieldNumber;
const int Gnss::kStatellineInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gnss::Gnss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gnss_2eproto::InitDefaultsGnss();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.Gnss)
}
Gnss::Gnss(const Gnss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statelline_info_(from.statelline_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&utc_time_, &from.utc_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_gnss_satellite_info_) -
    reinterpret_cast<char*>(&utc_time_)) + sizeof(num_gnss_satellite_info_));
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.Gnss)
}

void Gnss::SharedCtor() {
  ::memset(&utc_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_gnss_satellite_info_) -
      reinterpret_cast<char*>(&utc_time_)) + sizeof(num_gnss_satellite_info_));
  _cached_size_ = 0;
}

Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.Gnss)
  SharedDtor();
}

void Gnss::SharedDtor() {
}

void Gnss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gnss::descriptor() {
  ::protobuf_gnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gnss& Gnss::default_instance() {
  ::protobuf_gnss_2eproto::InitDefaultsGnss();
  return *internal_default_instance();
}

Gnss* Gnss::New(::google::protobuf::Arena* arena) const {
  Gnss* n = new Gnss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.Gnss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statelline_info_.Clear();
  ::memset(&utc_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_gnss_satellite_info_) -
      reinterpret_cast<char*>(&utc_time_)) + sizeof(num_gnss_satellite_info_));
  _internal_metadata_.Clear();
}

bool Gnss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.Gnss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 utc_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ellipsoid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ellipsoid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.PoseType pose_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pose_type(static_cast< ::autodrive::workflow::proto::PoseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.PositionStatus position_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position_status(static_cast< ::autodrive::workflow::proto::PositionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_satellites = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_satellites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gnss_vel_north = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gnss_vel_north_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gnss_vel_east = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gnss_vel_east_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gnss_vel_down = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gnss_vel_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float course = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &course_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading_error = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float course_error = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &course_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float horizon_position_error = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizon_position_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vertical_position_error = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertical_position_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float horizon_velocity_error = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizon_velocity_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vertical_velocity_error = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertical_velocity_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tdop = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hdop = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vdop = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sat_seq_no = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_seq_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_gnss_satellite_info = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_gnss_satellite_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autodrive.workflow.proto.SatelliteInfo statelline_info = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_statelline_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.Gnss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.Gnss)
  return false;
#undef DO_
}

void Gnss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.Gnss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 utc_time = 1;
  if (this->utc_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utc_time(), output);
  }

  // int32 latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->latitude(), output);
  }

  // int32 longitude = 3;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->longitude(), output);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->altitude(), output);
  }

  // float ellipsoid = 5;
  if (this->ellipsoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ellipsoid(), output);
  }

  // .autodrive.workflow.proto.PoseType pose_type = 6;
  if (this->pose_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->pose_type(), output);
  }

  // .autodrive.workflow.proto.PositionStatus position_status = 7;
  if (this->position_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->position_status(), output);
  }

  // uint32 num_satellites = 8;
  if (this->num_satellites() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_satellites(), output);
  }

  // float gnss_vel_north = 9;
  if (this->gnss_vel_north() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gnss_vel_north(), output);
  }

  // float gnss_vel_east = 10;
  if (this->gnss_vel_east() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gnss_vel_east(), output);
  }

  // float gnss_vel_down = 11;
  if (this->gnss_vel_down() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->gnss_vel_down(), output);
  }

  // float heading = 12;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->heading(), output);
  }

  // float course = 13;
  if (this->course() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->course(), output);
  }

  // float heading_error = 14;
  if (this->heading_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->heading_error(), output);
  }

  // float course_error = 15;
  if (this->course_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->course_error(), output);
  }

  // float horizon_position_error = 16;
  if (this->horizon_position_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->horizon_position_error(), output);
  }

  // float vertical_position_error = 17;
  if (this->vertical_position_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->vertical_position_error(), output);
  }

  // float horizon_velocity_error = 18;
  if (this->horizon_velocity_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->horizon_velocity_error(), output);
  }

  // float vertical_velocity_error = 19;
  if (this->vertical_velocity_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->vertical_velocity_error(), output);
  }

  // float tdop = 20;
  if (this->tdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->tdop(), output);
  }

  // float hdop = 21;
  if (this->hdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->hdop(), output);
  }

  // float vdop = 22;
  if (this->vdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->vdop(), output);
  }

  // uint32 sat_seq_no = 23;
  if (this->sat_seq_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->sat_seq_no(), output);
  }

  // uint32 num_gnss_satellite_info = 24;
  if (this->num_gnss_satellite_info() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->num_gnss_satellite_info(), output);
  }

  // repeated .autodrive.workflow.proto.SatelliteInfo statelline_info = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statelline_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->statelline_info(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.Gnss)
}

::google::protobuf::uint8* Gnss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.Gnss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 utc_time = 1;
  if (this->utc_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utc_time(), target);
  }

  // int32 latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->latitude(), target);
  }

  // int32 longitude = 3;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->longitude(), target);
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->altitude(), target);
  }

  // float ellipsoid = 5;
  if (this->ellipsoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ellipsoid(), target);
  }

  // .autodrive.workflow.proto.PoseType pose_type = 6;
  if (this->pose_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->pose_type(), target);
  }

  // .autodrive.workflow.proto.PositionStatus position_status = 7;
  if (this->position_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->position_status(), target);
  }

  // uint32 num_satellites = 8;
  if (this->num_satellites() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_satellites(), target);
  }

  // float gnss_vel_north = 9;
  if (this->gnss_vel_north() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gnss_vel_north(), target);
  }

  // float gnss_vel_east = 10;
  if (this->gnss_vel_east() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->gnss_vel_east(), target);
  }

  // float gnss_vel_down = 11;
  if (this->gnss_vel_down() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->gnss_vel_down(), target);
  }

  // float heading = 12;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->heading(), target);
  }

  // float course = 13;
  if (this->course() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->course(), target);
  }

  // float heading_error = 14;
  if (this->heading_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->heading_error(), target);
  }

  // float course_error = 15;
  if (this->course_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->course_error(), target);
  }

  // float horizon_position_error = 16;
  if (this->horizon_position_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->horizon_position_error(), target);
  }

  // float vertical_position_error = 17;
  if (this->vertical_position_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->vertical_position_error(), target);
  }

  // float horizon_velocity_error = 18;
  if (this->horizon_velocity_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->horizon_velocity_error(), target);
  }

  // float vertical_velocity_error = 19;
  if (this->vertical_velocity_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->vertical_velocity_error(), target);
  }

  // float tdop = 20;
  if (this->tdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->tdop(), target);
  }

  // float hdop = 21;
  if (this->hdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->hdop(), target);
  }

  // float vdop = 22;
  if (this->vdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->vdop(), target);
  }

  // uint32 sat_seq_no = 23;
  if (this->sat_seq_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->sat_seq_no(), target);
  }

  // uint32 num_gnss_satellite_info = 24;
  if (this->num_gnss_satellite_info() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->num_gnss_satellite_info(), target);
  }

  // repeated .autodrive.workflow.proto.SatelliteInfo statelline_info = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statelline_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->statelline_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.Gnss)
  return target;
}

size_t Gnss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.Gnss)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .autodrive.workflow.proto.SatelliteInfo statelline_info = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->statelline_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->statelline_info(static_cast<int>(i)));
    }
  }

  // uint64 utc_time = 1;
  if (this->utc_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->utc_time());
  }

  // int32 latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latitude());
  }

  // int32 longitude = 3;
  if (this->longitude() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->longitude());
  }

  // float altitude = 4;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  // float ellipsoid = 5;
  if (this->ellipsoid() != 0) {
    total_size += 1 + 4;
  }

  // .autodrive.workflow.proto.PoseType pose_type = 6;
  if (this->pose_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pose_type());
  }

  // .autodrive.workflow.proto.PositionStatus position_status = 7;
  if (this->position_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_status());
  }

  // uint32 num_satellites = 8;
  if (this->num_satellites() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_satellites());
  }

  // float gnss_vel_north = 9;
  if (this->gnss_vel_north() != 0) {
    total_size += 1 + 4;
  }

  // float gnss_vel_east = 10;
  if (this->gnss_vel_east() != 0) {
    total_size += 1 + 4;
  }

  // float gnss_vel_down = 11;
  if (this->gnss_vel_down() != 0) {
    total_size += 1 + 4;
  }

  // float heading = 12;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  // float course = 13;
  if (this->course() != 0) {
    total_size += 1 + 4;
  }

  // float heading_error = 14;
  if (this->heading_error() != 0) {
    total_size += 1 + 4;
  }

  // float course_error = 15;
  if (this->course_error() != 0) {
    total_size += 1 + 4;
  }

  // float horizon_position_error = 16;
  if (this->horizon_position_error() != 0) {
    total_size += 2 + 4;
  }

  // float vertical_position_error = 17;
  if (this->vertical_position_error() != 0) {
    total_size += 2 + 4;
  }

  // float horizon_velocity_error = 18;
  if (this->horizon_velocity_error() != 0) {
    total_size += 2 + 4;
  }

  // float vertical_velocity_error = 19;
  if (this->vertical_velocity_error() != 0) {
    total_size += 2 + 4;
  }

  // float tdop = 20;
  if (this->tdop() != 0) {
    total_size += 2 + 4;
  }

  // float hdop = 21;
  if (this->hdop() != 0) {
    total_size += 2 + 4;
  }

  // float vdop = 22;
  if (this->vdop() != 0) {
    total_size += 2 + 4;
  }

  // uint32 sat_seq_no = 23;
  if (this->sat_seq_no() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sat_seq_no());
  }

  // uint32 num_gnss_satellite_info = 24;
  if (this->num_gnss_satellite_info() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_gnss_satellite_info());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gnss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gnss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.Gnss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.Gnss)
    MergeFrom(*source);
  }
}

void Gnss::MergeFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statelline_info_.MergeFrom(from.statelline_info_);
  if (from.utc_time() != 0) {
    set_utc_time(from.utc_time());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.ellipsoid() != 0) {
    set_ellipsoid(from.ellipsoid());
  }
  if (from.pose_type() != 0) {
    set_pose_type(from.pose_type());
  }
  if (from.position_status() != 0) {
    set_position_status(from.position_status());
  }
  if (from.num_satellites() != 0) {
    set_num_satellites(from.num_satellites());
  }
  if (from.gnss_vel_north() != 0) {
    set_gnss_vel_north(from.gnss_vel_north());
  }
  if (from.gnss_vel_east() != 0) {
    set_gnss_vel_east(from.gnss_vel_east());
  }
  if (from.gnss_vel_down() != 0) {
    set_gnss_vel_down(from.gnss_vel_down());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.course() != 0) {
    set_course(from.course());
  }
  if (from.heading_error() != 0) {
    set_heading_error(from.heading_error());
  }
  if (from.course_error() != 0) {
    set_course_error(from.course_error());
  }
  if (from.horizon_position_error() != 0) {
    set_horizon_position_error(from.horizon_position_error());
  }
  if (from.vertical_position_error() != 0) {
    set_vertical_position_error(from.vertical_position_error());
  }
  if (from.horizon_velocity_error() != 0) {
    set_horizon_velocity_error(from.horizon_velocity_error());
  }
  if (from.vertical_velocity_error() != 0) {
    set_vertical_velocity_error(from.vertical_velocity_error());
  }
  if (from.tdop() != 0) {
    set_tdop(from.tdop());
  }
  if (from.hdop() != 0) {
    set_hdop(from.hdop());
  }
  if (from.vdop() != 0) {
    set_vdop(from.vdop());
  }
  if (from.sat_seq_no() != 0) {
    set_sat_seq_no(from.sat_seq_no());
  }
  if (from.num_gnss_satellite_info() != 0) {
    set_num_gnss_satellite_info(from.num_gnss_satellite_info());
  }
}

void Gnss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss::IsInitialized() const {
  return true;
}

void Gnss::Swap(Gnss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gnss::InternalSwap(Gnss* other) {
  using std::swap;
  statelline_info_.InternalSwap(&other->statelline_info_);
  swap(utc_time_, other->utc_time_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(ellipsoid_, other->ellipsoid_);
  swap(pose_type_, other->pose_type_);
  swap(position_status_, other->position_status_);
  swap(num_satellites_, other->num_satellites_);
  swap(gnss_vel_north_, other->gnss_vel_north_);
  swap(gnss_vel_east_, other->gnss_vel_east_);
  swap(gnss_vel_down_, other->gnss_vel_down_);
  swap(heading_, other->heading_);
  swap(course_, other->course_);
  swap(heading_error_, other->heading_error_);
  swap(course_error_, other->course_error_);
  swap(horizon_position_error_, other->horizon_position_error_);
  swap(vertical_position_error_, other->vertical_position_error_);
  swap(horizon_velocity_error_, other->horizon_velocity_error_);
  swap(vertical_velocity_error_, other->vertical_velocity_error_);
  swap(tdop_, other->tdop_);
  swap(hdop_, other->hdop_);
  swap(vdop_, other->vdop_);
  swap(sat_seq_no_, other->sat_seq_no_);
  swap(num_gnss_satellite_info_, other->num_gnss_satellite_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gnss::GetMetadata() const {
  protobuf_gnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GnssMsg::InitAsDefaultInstance() {
  ::autodrive::workflow::proto::_GnssMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::autodrive::workflow::proto::MsgHeader*>(
      ::autodrive::workflow::proto::MsgHeader::internal_default_instance());
  ::autodrive::workflow::proto::_GnssMsg_default_instance_._instance.get_mutable()->error_ = const_cast< ::autodrive::workflow::proto::Error*>(
      ::autodrive::workflow::proto::Error::internal_default_instance());
  ::autodrive::workflow::proto::_GnssMsg_default_instance_._instance.get_mutable()->gnss_ = const_cast< ::autodrive::workflow::proto::Gnss*>(
      ::autodrive::workflow::proto::Gnss::internal_default_instance());
}
void GnssMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void GnssMsg::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssMsg::kHeaderFieldNumber;
const int GnssMsg::kErrorFieldNumber;
const int GnssMsg::kGnssFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssMsg::GnssMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gnss_2eproto::InitDefaultsGnssMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autodrive.workflow.proto.GnssMsg)
}
GnssMsg::GnssMsg(const GnssMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::autodrive::workflow::proto::MsgHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::autodrive::workflow::proto::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_gnss()) {
    gnss_ = new ::autodrive::workflow::proto::Gnss(*from.gnss_);
  } else {
    gnss_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autodrive.workflow.proto.GnssMsg)
}

void GnssMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gnss_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gnss_));
  _cached_size_ = 0;
}

GnssMsg::~GnssMsg() {
  // @@protoc_insertion_point(destructor:autodrive.workflow.proto.GnssMsg)
  SharedDtor();
}

void GnssMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete gnss_;
}

void GnssMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GnssMsg::descriptor() {
  ::protobuf_gnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GnssMsg& GnssMsg::default_instance() {
  ::protobuf_gnss_2eproto::InitDefaultsGnssMsg();
  return *internal_default_instance();
}

GnssMsg* GnssMsg::New(::google::protobuf::Arena* arena) const {
  GnssMsg* n = new GnssMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GnssMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:autodrive.workflow.proto.GnssMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && gnss_ != NULL) {
    delete gnss_;
  }
  gnss_ = NULL;
  _internal_metadata_.Clear();
}

bool GnssMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autodrive.workflow.proto.GnssMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .autodrive.workflow.proto.MsgHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autodrive.workflow.proto.Gnss gnss = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gnss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autodrive.workflow.proto.GnssMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autodrive.workflow.proto.GnssMsg)
  return false;
#undef DO_
}

void GnssMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autodrive.workflow.proto.GnssMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // .autodrive.workflow.proto.Gnss gnss = 3;
  if (this->has_gnss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->gnss_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:autodrive.workflow.proto.GnssMsg)
}

::google::protobuf::uint8* GnssMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autodrive.workflow.proto.GnssMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->error_, deterministic, target);
  }

  // .autodrive.workflow.proto.Gnss gnss = 3;
  if (this->has_gnss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->gnss_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autodrive.workflow.proto.GnssMsg)
  return target;
}

size_t GnssMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autodrive.workflow.proto.GnssMsg)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .autodrive.workflow.proto.MsgHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .autodrive.workflow.proto.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->error_);
  }

  // .autodrive.workflow.proto.Gnss gnss = 3;
  if (this->has_gnss()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->gnss_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GnssMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autodrive.workflow.proto.GnssMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autodrive.workflow.proto.GnssMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autodrive.workflow.proto.GnssMsg)
    MergeFrom(*source);
  }
}

void GnssMsg::MergeFrom(const GnssMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autodrive.workflow.proto.GnssMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::autodrive::workflow::proto::MsgHeader::MergeFrom(from.header());
  }
  if (from.has_error()) {
    mutable_error()->::autodrive::workflow::proto::Error::MergeFrom(from.error());
  }
  if (from.has_gnss()) {
    mutable_gnss()->::autodrive::workflow::proto::Gnss::MergeFrom(from.gnss());
  }
}

void GnssMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autodrive.workflow.proto.GnssMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssMsg::CopyFrom(const GnssMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autodrive.workflow.proto.GnssMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssMsg::IsInitialized() const {
  return true;
}

void GnssMsg::Swap(GnssMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssMsg::InternalSwap(GnssMsg* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(error_, other->error_);
  swap(gnss_, other->gnss_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GnssMsg::GetMetadata() const {
  protobuf_gnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gnss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)
