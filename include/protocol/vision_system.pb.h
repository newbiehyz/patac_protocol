// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision_system.proto

#ifndef PROTOBUF_vision_5fsystem_2eproto__INCLUDED
#define PROTOBUF_vision_5fsystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "system_type_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_vision_5fsystem_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsVisionSystemMsgImpl();
void InitDefaultsVisionSystemMsg();
inline void InitDefaults() {
  InitDefaultsVisionSystemMsg();
}
}  // namespace protobuf_vision_5fsystem_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class VisionSystemMsg;
class VisionSystemMsgDefaultTypeInternal;
extern VisionSystemMsgDefaultTypeInternal _VisionSystemMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum VisionSystemStatus {
  kVisionSystemStatusDriving = 0,
  kVisionSystemStatusParking = 1,
  VisionSystemStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VisionSystemStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VisionSystemStatus_IsValid(int value);
const VisionSystemStatus VisionSystemStatus_MIN = kVisionSystemStatusDriving;
const VisionSystemStatus VisionSystemStatus_MAX = kVisionSystemStatusParking;
const int VisionSystemStatus_ARRAYSIZE = VisionSystemStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* VisionSystemStatus_descriptor();
inline const ::std::string& VisionSystemStatus_Name(VisionSystemStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    VisionSystemStatus_descriptor(), value);
}
inline bool VisionSystemStatus_Parse(
    const ::std::string& name, VisionSystemStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisionSystemStatus>(
    VisionSystemStatus_descriptor(), name, value);
}
enum VisionCalibrationStatus {
  kCalibrationStatusNone = 0,
  kCalibrationStatusStartEol = 1,
  kCalibrationStatusStartOnl = 2,
  kCalibrationStatusPauseOnl = 3,
  kCalibrationStatusResumeOnl = 4,
  kCalibrationStatusStopOnl = 5,
  kStopEol = 6,
  kAcceptParams = 7,
  VisionCalibrationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VisionCalibrationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VisionCalibrationStatus_IsValid(int value);
const VisionCalibrationStatus VisionCalibrationStatus_MIN = kCalibrationStatusNone;
const VisionCalibrationStatus VisionCalibrationStatus_MAX = kAcceptParams;
const int VisionCalibrationStatus_ARRAYSIZE = VisionCalibrationStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* VisionCalibrationStatus_descriptor();
inline const ::std::string& VisionCalibrationStatus_Name(VisionCalibrationStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    VisionCalibrationStatus_descriptor(), value);
}
inline bool VisionCalibrationStatus_Parse(
    const ::std::string& name, VisionCalibrationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisionCalibrationStatus>(
    VisionCalibrationStatus_descriptor(), name, value);
}
enum VisionCalibrationType {
  kNone = 0,
  kUDS = 1,
  kDHU = 2,
  VisionCalibrationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VisionCalibrationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VisionCalibrationType_IsValid(int value);
const VisionCalibrationType VisionCalibrationType_MIN = kNone;
const VisionCalibrationType VisionCalibrationType_MAX = kDHU;
const int VisionCalibrationType_ARRAYSIZE = VisionCalibrationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VisionCalibrationType_descriptor();
inline const ::std::string& VisionCalibrationType_Name(VisionCalibrationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VisionCalibrationType_descriptor(), value);
}
inline bool VisionCalibrationType_Parse(
    const ::std::string& name, VisionCalibrationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisionCalibrationType>(
    VisionCalibrationType_descriptor(), name, value);
}
enum CalibrationMode {
  kCalibrationModeNone = 0,
  kCalibrationModeSVC = 1,
  kCalibrationModeRLC = 2,
  kCalibrationModeFLC = 3,
  CalibrationMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CalibrationMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CalibrationMode_IsValid(int value);
const CalibrationMode CalibrationMode_MIN = kCalibrationModeNone;
const CalibrationMode CalibrationMode_MAX = kCalibrationModeFLC;
const int CalibrationMode_ARRAYSIZE = CalibrationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CalibrationMode_descriptor();
inline const ::std::string& CalibrationMode_Name(CalibrationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CalibrationMode_descriptor(), value);
}
inline bool CalibrationMode_Parse(
    const ::std::string& name, CalibrationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CalibrationMode>(
    CalibrationMode_descriptor(), name, value);
}
enum EolCalibPattern {
  kEOLCalibPatternNone = 0,
  kEOLCalibPatternPattern1 = 1,
  kEOLCalibPatternPattern2 = 2,
  EolCalibPattern_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EolCalibPattern_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EolCalibPattern_IsValid(int value);
const EolCalibPattern EolCalibPattern_MIN = kEOLCalibPatternNone;
const EolCalibPattern EolCalibPattern_MAX = kEOLCalibPatternPattern2;
const int EolCalibPattern_ARRAYSIZE = EolCalibPattern_MAX + 1;

const ::google::protobuf::EnumDescriptor* EolCalibPattern_descriptor();
inline const ::std::string& EolCalibPattern_Name(EolCalibPattern value) {
  return ::google::protobuf::internal::NameOfEnum(
    EolCalibPattern_descriptor(), value);
}
inline bool EolCalibPattern_Parse(
    const ::std::string& name, EolCalibPattern* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EolCalibPattern>(
    EolCalibPattern_descriptor(), name, value);
}
// ===================================================================

class VisionSystemMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.VisionSystemMsg) */ {
 public:
  VisionSystemMsg();
  virtual ~VisionSystemMsg();

  VisionSystemMsg(const VisionSystemMsg& from);

  inline VisionSystemMsg& operator=(const VisionSystemMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisionSystemMsg(VisionSystemMsg&& from) noexcept
    : VisionSystemMsg() {
    *this = ::std::move(from);
  }

  inline VisionSystemMsg& operator=(VisionSystemMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisionSystemMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisionSystemMsg* internal_default_instance() {
    return reinterpret_cast<const VisionSystemMsg*>(
               &_VisionSystemMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VisionSystemMsg* other);
  friend void swap(VisionSystemMsg& a, VisionSystemMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisionSystemMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  VisionSystemMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VisionSystemMsg& from);
  void MergeFrom(const VisionSystemMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VisionSystemMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 14;
  bool has_apa_states() const;
  void clear_apa_states();
  static const int kApaStatesFieldNumber = 14;
  const ::autodrive::workflow::proto::ApaStateInfo& apa_states() const;
  ::autodrive::workflow::proto::ApaStateInfo* release_apa_states();
  ::autodrive::workflow::proto::ApaStateInfo* mutable_apa_states();
  void set_allocated_apa_states(::autodrive::workflow::proto::ApaStateInfo* apa_states);

  // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 15;
  bool has_usr_sel_ps() const;
  void clear_usr_sel_ps();
  static const int kUsrSelPsFieldNumber = 15;
  const ::autodrive::workflow::proto::UserSelectedParkingSlot& usr_sel_ps() const;
  ::autodrive::workflow::proto::UserSelectedParkingSlot* release_usr_sel_ps();
  ::autodrive::workflow::proto::UserSelectedParkingSlot* mutable_usr_sel_ps();
  void set_allocated_usr_sel_ps(::autodrive::workflow::proto::UserSelectedParkingSlot* usr_sel_ps);

  // int32 parking_in_id = 3;
  void clear_parking_in_id();
  static const int kParkingInIdFieldNumber = 3;
  ::google::protobuf::int32 parking_in_id() const;
  void set_parking_in_id(::google::protobuf::int32 value);

  // int32 parking_out_id = 4;
  void clear_parking_out_id();
  static const int kParkingOutIdFieldNumber = 4;
  ::google::protobuf::int32 parking_out_id() const;
  void set_parking_out_id(::google::protobuf::int32 value);

  // .autodrive.workflow.proto.VisionSystemStatus system_status = 5;
  void clear_system_status();
  static const int kSystemStatusFieldNumber = 5;
  ::autodrive::workflow::proto::VisionSystemStatus system_status() const;
  void set_system_status(::autodrive::workflow::proto::VisionSystemStatus value);

  // .autodrive.workflow.proto.VisionCalibrationStatus calibration_status = 6;
  void clear_calibration_status();
  static const int kCalibrationStatusFieldNumber = 6;
  ::autodrive::workflow::proto::VisionCalibrationStatus calibration_status() const;
  void set_calibration_status(::autodrive::workflow::proto::VisionCalibrationStatus value);

  // .autodrive.workflow.proto.CalibrationMode calib_mode = 7;
  void clear_calib_mode();
  static const int kCalibModeFieldNumber = 7;
  ::autodrive::workflow::proto::CalibrationMode calib_mode() const;
  void set_calib_mode(::autodrive::workflow::proto::CalibrationMode value);

  // .autodrive.workflow.proto.EolCalibPattern calib_pattern = 8;
  void clear_calib_pattern();
  static const int kCalibPatternFieldNumber = 8;
  ::autodrive::workflow::proto::EolCalibPattern calib_pattern() const;
  void set_calib_pattern(::autodrive::workflow::proto::EolCalibPattern value);

  // bool enable_backstage_searching = 9;
  void clear_enable_backstage_searching();
  static const int kEnableBackstageSearchingFieldNumber = 9;
  bool enable_backstage_searching() const;
  void set_enable_backstage_searching(bool value);

  // bool enable_normal_searching = 10;
  void clear_enable_normal_searching();
  static const int kEnableNormalSearchingFieldNumber = 10;
  bool enable_normal_searching() const;
  void set_enable_normal_searching(bool value);

  // bool enable_PEB_PrkgPerception = 11;
  void clear_enable_peb_prkgperception();
  static const int kEnablePEBPrkgPerceptionFieldNumber = 11;
  bool enable_peb_prkgperception() const;
  void set_enable_peb_prkgperception(bool value);

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
  void clear_mirr_fold_sts_at_driver();
  static const int kMirrFoldStsAtDriverFieldNumber = 12;
  ::autodrive::workflow::proto::MirrFoldStsTyp mirr_fold_sts_at_driver() const;
  void set_mirr_fold_sts_at_driver(::autodrive::workflow::proto::MirrFoldStsTyp value);

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
  void clear_mirr_fold_sts_at_pass();
  static const int kMirrFoldStsAtPassFieldNumber = 13;
  ::autodrive::workflow::proto::MirrFoldStsTyp mirr_fold_sts_at_pass() const;
  void set_mirr_fold_sts_at_pass(::autodrive::workflow::proto::MirrFoldStsTyp value);

  // .autodrive.workflow.proto.LockIdType lock_id_type = 16;
  void clear_lock_id_type();
  static const int kLockIdTypeFieldNumber = 16;
  ::autodrive::workflow::proto::LockIdType lock_id_type() const;
  void set_lock_id_type(::autodrive::workflow::proto::LockIdType value);

  // .autodrive.workflow.proto.VisionCalibrationType calib_type = 17;
  void clear_calib_type();
  static const int kCalibTypeFieldNumber = 17;
  ::autodrive::workflow::proto::VisionCalibrationType calib_type() const;
  void set_calib_type(::autodrive::workflow::proto::VisionCalibrationType value);

  // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail_type = 18;
  void clear_vpa_state_detail_type();
  static const int kVpaStateDetailTypeFieldNumber = 18;
  ::autodrive::workflow::proto::VpaStateDetailType vpa_state_detail_type() const;
  void set_vpa_state_detail_type(::autodrive::workflow::proto::VpaStateDetailType value);

  // .autodrive.workflow.proto.WorkModeType work_mode_type = 19;
  void clear_work_mode_type();
  static const int kWorkModeTypeFieldNumber = 19;
  ::autodrive::workflow::proto::WorkModeType work_mode_type() const;
  void set_work_mode_type(::autodrive::workflow::proto::WorkModeType value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.VisionSystemMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::ApaStateInfo* apa_states_;
  ::autodrive::workflow::proto::UserSelectedParkingSlot* usr_sel_ps_;
  ::google::protobuf::int32 parking_in_id_;
  ::google::protobuf::int32 parking_out_id_;
  int system_status_;
  int calibration_status_;
  int calib_mode_;
  int calib_pattern_;
  bool enable_backstage_searching_;
  bool enable_normal_searching_;
  bool enable_peb_prkgperception_;
  int mirr_fold_sts_at_driver_;
  int mirr_fold_sts_at_pass_;
  int lock_id_type_;
  int calib_type_;
  int vpa_state_detail_type_;
  int work_mode_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_vision_5fsystem_2eproto::TableStruct;
  friend void ::protobuf_vision_5fsystem_2eproto::InitDefaultsVisionSystemMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VisionSystemMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool VisionSystemMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& VisionSystemMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* VisionSystemMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.VisionSystemMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* VisionSystemMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.VisionSystemMsg.header)
  return header_;
}
inline void VisionSystemMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.VisionSystemMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool VisionSystemMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& VisionSystemMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* VisionSystemMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.VisionSystemMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* VisionSystemMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.VisionSystemMsg.error)
  return error_;
}
inline void VisionSystemMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.VisionSystemMsg.error)
}

// int32 parking_in_id = 3;
inline void VisionSystemMsg::clear_parking_in_id() {
  parking_in_id_ = 0;
}
inline ::google::protobuf::int32 VisionSystemMsg::parking_in_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.parking_in_id)
  return parking_in_id_;
}
inline void VisionSystemMsg::set_parking_in_id(::google::protobuf::int32 value) {
  
  parking_in_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.parking_in_id)
}

// int32 parking_out_id = 4;
inline void VisionSystemMsg::clear_parking_out_id() {
  parking_out_id_ = 0;
}
inline ::google::protobuf::int32 VisionSystemMsg::parking_out_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.parking_out_id)
  return parking_out_id_;
}
inline void VisionSystemMsg::set_parking_out_id(::google::protobuf::int32 value) {
  
  parking_out_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.parking_out_id)
}

// .autodrive.workflow.proto.VisionSystemStatus system_status = 5;
inline void VisionSystemMsg::clear_system_status() {
  system_status_ = 0;
}
inline ::autodrive::workflow::proto::VisionSystemStatus VisionSystemMsg::system_status() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.system_status)
  return static_cast< ::autodrive::workflow::proto::VisionSystemStatus >(system_status_);
}
inline void VisionSystemMsg::set_system_status(::autodrive::workflow::proto::VisionSystemStatus value) {
  
  system_status_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.system_status)
}

// .autodrive.workflow.proto.VisionCalibrationStatus calibration_status = 6;
inline void VisionSystemMsg::clear_calibration_status() {
  calibration_status_ = 0;
}
inline ::autodrive::workflow::proto::VisionCalibrationStatus VisionSystemMsg::calibration_status() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.calibration_status)
  return static_cast< ::autodrive::workflow::proto::VisionCalibrationStatus >(calibration_status_);
}
inline void VisionSystemMsg::set_calibration_status(::autodrive::workflow::proto::VisionCalibrationStatus value) {
  
  calibration_status_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.calibration_status)
}

// .autodrive.workflow.proto.CalibrationMode calib_mode = 7;
inline void VisionSystemMsg::clear_calib_mode() {
  calib_mode_ = 0;
}
inline ::autodrive::workflow::proto::CalibrationMode VisionSystemMsg::calib_mode() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.calib_mode)
  return static_cast< ::autodrive::workflow::proto::CalibrationMode >(calib_mode_);
}
inline void VisionSystemMsg::set_calib_mode(::autodrive::workflow::proto::CalibrationMode value) {
  
  calib_mode_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.calib_mode)
}

// .autodrive.workflow.proto.EolCalibPattern calib_pattern = 8;
inline void VisionSystemMsg::clear_calib_pattern() {
  calib_pattern_ = 0;
}
inline ::autodrive::workflow::proto::EolCalibPattern VisionSystemMsg::calib_pattern() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.calib_pattern)
  return static_cast< ::autodrive::workflow::proto::EolCalibPattern >(calib_pattern_);
}
inline void VisionSystemMsg::set_calib_pattern(::autodrive::workflow::proto::EolCalibPattern value) {
  
  calib_pattern_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.calib_pattern)
}

// bool enable_backstage_searching = 9;
inline void VisionSystemMsg::clear_enable_backstage_searching() {
  enable_backstage_searching_ = false;
}
inline bool VisionSystemMsg::enable_backstage_searching() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.enable_backstage_searching)
  return enable_backstage_searching_;
}
inline void VisionSystemMsg::set_enable_backstage_searching(bool value) {
  
  enable_backstage_searching_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.enable_backstage_searching)
}

// bool enable_normal_searching = 10;
inline void VisionSystemMsg::clear_enable_normal_searching() {
  enable_normal_searching_ = false;
}
inline bool VisionSystemMsg::enable_normal_searching() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.enable_normal_searching)
  return enable_normal_searching_;
}
inline void VisionSystemMsg::set_enable_normal_searching(bool value) {
  
  enable_normal_searching_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.enable_normal_searching)
}

// bool enable_PEB_PrkgPerception = 11;
inline void VisionSystemMsg::clear_enable_peb_prkgperception() {
  enable_peb_prkgperception_ = false;
}
inline bool VisionSystemMsg::enable_peb_prkgperception() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.enable_PEB_PrkgPerception)
  return enable_peb_prkgperception_;
}
inline void VisionSystemMsg::set_enable_peb_prkgperception(bool value) {
  
  enable_peb_prkgperception_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.enable_PEB_PrkgPerception)
}

// .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
inline void VisionSystemMsg::clear_mirr_fold_sts_at_driver() {
  mirr_fold_sts_at_driver_ = 0;
}
inline ::autodrive::workflow::proto::MirrFoldStsTyp VisionSystemMsg::mirr_fold_sts_at_driver() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.mirr_fold_sts_at_driver)
  return static_cast< ::autodrive::workflow::proto::MirrFoldStsTyp >(mirr_fold_sts_at_driver_);
}
inline void VisionSystemMsg::set_mirr_fold_sts_at_driver(::autodrive::workflow::proto::MirrFoldStsTyp value) {
  
  mirr_fold_sts_at_driver_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.mirr_fold_sts_at_driver)
}

// .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
inline void VisionSystemMsg::clear_mirr_fold_sts_at_pass() {
  mirr_fold_sts_at_pass_ = 0;
}
inline ::autodrive::workflow::proto::MirrFoldStsTyp VisionSystemMsg::mirr_fold_sts_at_pass() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.mirr_fold_sts_at_pass)
  return static_cast< ::autodrive::workflow::proto::MirrFoldStsTyp >(mirr_fold_sts_at_pass_);
}
inline void VisionSystemMsg::set_mirr_fold_sts_at_pass(::autodrive::workflow::proto::MirrFoldStsTyp value) {
  
  mirr_fold_sts_at_pass_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.mirr_fold_sts_at_pass)
}

// .autodrive.workflow.proto.ApaStateInfo apa_states = 14;
inline bool VisionSystemMsg::has_apa_states() const {
  return this != internal_default_instance() && apa_states_ != NULL;
}
inline const ::autodrive::workflow::proto::ApaStateInfo& VisionSystemMsg::apa_states() const {
  const ::autodrive::workflow::proto::ApaStateInfo* p = apa_states_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.apa_states)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::ApaStateInfo*>(
      &::autodrive::workflow::proto::_ApaStateInfo_default_instance_);
}
inline ::autodrive::workflow::proto::ApaStateInfo* VisionSystemMsg::release_apa_states() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.VisionSystemMsg.apa_states)
  
  ::autodrive::workflow::proto::ApaStateInfo* temp = apa_states_;
  apa_states_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::ApaStateInfo* VisionSystemMsg::mutable_apa_states() {
  
  if (apa_states_ == NULL) {
    apa_states_ = new ::autodrive::workflow::proto::ApaStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.VisionSystemMsg.apa_states)
  return apa_states_;
}
inline void VisionSystemMsg::set_allocated_apa_states(::autodrive::workflow::proto::ApaStateInfo* apa_states) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(apa_states_);
  }
  if (apa_states) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apa_states = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apa_states, submessage_arena);
    }
    
  } else {
    
  }
  apa_states_ = apa_states;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.VisionSystemMsg.apa_states)
}

// .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 15;
inline bool VisionSystemMsg::has_usr_sel_ps() const {
  return this != internal_default_instance() && usr_sel_ps_ != NULL;
}
inline const ::autodrive::workflow::proto::UserSelectedParkingSlot& VisionSystemMsg::usr_sel_ps() const {
  const ::autodrive::workflow::proto::UserSelectedParkingSlot* p = usr_sel_ps_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.usr_sel_ps)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::UserSelectedParkingSlot*>(
      &::autodrive::workflow::proto::_UserSelectedParkingSlot_default_instance_);
}
inline ::autodrive::workflow::proto::UserSelectedParkingSlot* VisionSystemMsg::release_usr_sel_ps() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.VisionSystemMsg.usr_sel_ps)
  
  ::autodrive::workflow::proto::UserSelectedParkingSlot* temp = usr_sel_ps_;
  usr_sel_ps_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::UserSelectedParkingSlot* VisionSystemMsg::mutable_usr_sel_ps() {
  
  if (usr_sel_ps_ == NULL) {
    usr_sel_ps_ = new ::autodrive::workflow::proto::UserSelectedParkingSlot;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.VisionSystemMsg.usr_sel_ps)
  return usr_sel_ps_;
}
inline void VisionSystemMsg::set_allocated_usr_sel_ps(::autodrive::workflow::proto::UserSelectedParkingSlot* usr_sel_ps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(usr_sel_ps_);
  }
  if (usr_sel_ps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      usr_sel_ps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, usr_sel_ps, submessage_arena);
    }
    
  } else {
    
  }
  usr_sel_ps_ = usr_sel_ps;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.VisionSystemMsg.usr_sel_ps)
}

// .autodrive.workflow.proto.LockIdType lock_id_type = 16;
inline void VisionSystemMsg::clear_lock_id_type() {
  lock_id_type_ = 0;
}
inline ::autodrive::workflow::proto::LockIdType VisionSystemMsg::lock_id_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.lock_id_type)
  return static_cast< ::autodrive::workflow::proto::LockIdType >(lock_id_type_);
}
inline void VisionSystemMsg::set_lock_id_type(::autodrive::workflow::proto::LockIdType value) {
  
  lock_id_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.lock_id_type)
}

// .autodrive.workflow.proto.VisionCalibrationType calib_type = 17;
inline void VisionSystemMsg::clear_calib_type() {
  calib_type_ = 0;
}
inline ::autodrive::workflow::proto::VisionCalibrationType VisionSystemMsg::calib_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.calib_type)
  return static_cast< ::autodrive::workflow::proto::VisionCalibrationType >(calib_type_);
}
inline void VisionSystemMsg::set_calib_type(::autodrive::workflow::proto::VisionCalibrationType value) {
  
  calib_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.calib_type)
}

// .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail_type = 18;
inline void VisionSystemMsg::clear_vpa_state_detail_type() {
  vpa_state_detail_type_ = 0;
}
inline ::autodrive::workflow::proto::VpaStateDetailType VisionSystemMsg::vpa_state_detail_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.vpa_state_detail_type)
  return static_cast< ::autodrive::workflow::proto::VpaStateDetailType >(vpa_state_detail_type_);
}
inline void VisionSystemMsg::set_vpa_state_detail_type(::autodrive::workflow::proto::VpaStateDetailType value) {
  
  vpa_state_detail_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.vpa_state_detail_type)
}

// .autodrive.workflow.proto.WorkModeType work_mode_type = 19;
inline void VisionSystemMsg::clear_work_mode_type() {
  work_mode_type_ = 0;
}
inline ::autodrive::workflow::proto::WorkModeType VisionSystemMsg::work_mode_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.VisionSystemMsg.work_mode_type)
  return static_cast< ::autodrive::workflow::proto::WorkModeType >(work_mode_type_);
}
inline void VisionSystemMsg::set_work_mode_type(::autodrive::workflow::proto::WorkModeType value) {
  
  work_mode_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.VisionSystemMsg.work_mode_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::VisionSystemStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::VisionSystemStatus>() {
  return ::autodrive::workflow::proto::VisionSystemStatus_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::VisionCalibrationStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::VisionCalibrationStatus>() {
  return ::autodrive::workflow::proto::VisionCalibrationStatus_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::VisionCalibrationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::VisionCalibrationType>() {
  return ::autodrive::workflow::proto::VisionCalibrationType_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::CalibrationMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::CalibrationMode>() {
  return ::autodrive::workflow::proto::CalibrationMode_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::EolCalibPattern> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::EolCalibPattern>() {
  return ::autodrive::workflow::proto::EolCalibPattern_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vision_5fsystem_2eproto__INCLUDED
