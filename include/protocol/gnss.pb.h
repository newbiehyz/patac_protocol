// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnss.proto

#ifndef PROTOBUF_gnss_2eproto__INCLUDED
#define PROTOBUF_gnss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_gnss_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSatelliteInfoImpl();
void InitDefaultsSatelliteInfo();
void InitDefaultsGnssImpl();
void InitDefaultsGnss();
void InitDefaultsGnssMsgImpl();
void InitDefaultsGnssMsg();
inline void InitDefaults() {
  InitDefaultsSatelliteInfo();
  InitDefaultsGnss();
  InitDefaultsGnssMsg();
}
}  // namespace protobuf_gnss_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class Gnss;
class GnssDefaultTypeInternal;
extern GnssDefaultTypeInternal _Gnss_default_instance_;
class GnssMsg;
class GnssMsgDefaultTypeInternal;
extern GnssMsgDefaultTypeInternal _GnssMsg_default_instance_;
class SatelliteInfo;
class SatelliteInfoDefaultTypeInternal;
extern SatelliteInfoDefaultTypeInternal _SatelliteInfo_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum PositionStatus {
  POS_ST_INVALID = 0,
  POS_ST_DR = 1,
  POS_ST_FIXED_2D = 2,
  POS_ST_FIXED_3D = 3,
  POS_ST_GNSS_DR = 4,
  POS_ST_ONLY_TIME_VALID = 5,
  PositionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PositionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PositionStatus_IsValid(int value);
const PositionStatus PositionStatus_MIN = POS_ST_INVALID;
const PositionStatus PositionStatus_MAX = POS_ST_ONLY_TIME_VALID;
const int PositionStatus_ARRAYSIZE = PositionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* PositionStatus_descriptor();
inline const ::std::string& PositionStatus_Name(PositionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PositionStatus_descriptor(), value);
}
inline bool PositionStatus_Parse(
    const ::std::string& name, PositionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PositionStatus>(
    PositionStatus_descriptor(), name, value);
}
enum PositingSystem {
  POS_SM_GPS = 0,
  POS_SM_BEI_DOU = 1,
  POS_SM_GLONASS = 2,
  POS_SM_GALILEO = 3,
  POS_SM_QZSS = 4,
  POS_SM_SBAS = 5,
  POS_SM_UNKNOWN = 6,
  PositingSystem_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PositingSystem_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PositingSystem_IsValid(int value);
const PositingSystem PositingSystem_MIN = POS_SM_GPS;
const PositingSystem PositingSystem_MAX = POS_SM_UNKNOWN;
const int PositingSystem_ARRAYSIZE = PositingSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* PositingSystem_descriptor();
inline const ::std::string& PositingSystem_Name(PositingSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    PositingSystem_descriptor(), value);
}
inline bool PositingSystem_Parse(
    const ::std::string& name, PositingSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PositingSystem>(
    PositingSystem_descriptor(), name, value);
}
enum PoseType {
  POS_TYPE_INVALID = 0,
  POS_TYPE_SINGLE = 1,
  POS_TYPE_DGPS = 2,
  POS_TYPE_INVALID_PPS = 3,
  POS_TYPE_RTK_FIXED = 4,
  POS_TYPE_RTK_FLOAT = 5,
  POS_TYPE_DEAD_RECKONING = 6,
  PoseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PoseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PoseType_IsValid(int value);
const PoseType PoseType_MIN = POS_TYPE_INVALID;
const PoseType PoseType_MAX = POS_TYPE_DEAD_RECKONING;
const int PoseType_ARRAYSIZE = PoseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoseType_descriptor();
inline const ::std::string& PoseType_Name(PoseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoseType_descriptor(), value);
}
inline bool PoseType_Parse(
    const ::std::string& name, PoseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoseType>(
    PoseType_descriptor(), name, value);
}
// ===================================================================

class SatelliteInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.SatelliteInfo) */ {
 public:
  SatelliteInfo();
  virtual ~SatelliteInfo();

  SatelliteInfo(const SatelliteInfo& from);

  inline SatelliteInfo& operator=(const SatelliteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SatelliteInfo(SatelliteInfo&& from) noexcept
    : SatelliteInfo() {
    *this = ::std::move(from);
  }

  inline SatelliteInfo& operator=(SatelliteInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SatelliteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SatelliteInfo* internal_default_instance() {
    return reinterpret_cast<const SatelliteInfo*>(
               &_SatelliteInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SatelliteInfo* other);
  friend void swap(SatelliteInfo& a, SatelliteInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SatelliteInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SatelliteInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SatelliteInfo& from);
  void MergeFrom(const SatelliteInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SatelliteInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 num_in_view = 1;
  void clear_num_in_view();
  static const int kNumInViewFieldNumber = 1;
  ::google::protobuf::uint32 num_in_view() const;
  void set_num_in_view(::google::protobuf::uint32 value);

  // uint32 no = 2;
  void clear_no();
  static const int kNoFieldNumber = 2;
  ::google::protobuf::uint32 no() const;
  void set_no(::google::protobuf::uint32 value);

  // uint32 snr = 3;
  void clear_snr();
  static const int kSnrFieldNumber = 3;
  ::google::protobuf::uint32 snr() const;
  void set_snr(::google::protobuf::uint32 value);

  // uint32 elevation = 4;
  void clear_elevation();
  static const int kElevationFieldNumber = 4;
  ::google::protobuf::uint32 elevation() const;
  void set_elevation(::google::protobuf::uint32 value);

  // uint32 azimuth = 5;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 5;
  ::google::protobuf::uint32 azimuth() const;
  void set_azimuth(::google::protobuf::uint32 value);

  // .autodrive.workflow.proto.PositingSystem positing_system = 6;
  void clear_positing_system();
  static const int kPositingSystemFieldNumber = 6;
  ::autodrive::workflow::proto::PositingSystem positing_system() const;
  void set_positing_system(::autodrive::workflow::proto::PositingSystem value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.SatelliteInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 num_in_view_;
  ::google::protobuf::uint32 no_;
  ::google::protobuf::uint32 snr_;
  ::google::protobuf::uint32 elevation_;
  ::google::protobuf::uint32 azimuth_;
  int positing_system_;
  mutable int _cached_size_;
  friend struct ::protobuf_gnss_2eproto::TableStruct;
  friend void ::protobuf_gnss_2eproto::InitDefaultsSatelliteInfoImpl();
};
// -------------------------------------------------------------------

class Gnss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Gnss) */ {
 public:
  Gnss();
  virtual ~Gnss();

  Gnss(const Gnss& from);

  inline Gnss& operator=(const Gnss& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gnss(Gnss&& from) noexcept
    : Gnss() {
    *this = ::std::move(from);
  }

  inline Gnss& operator=(Gnss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gnss& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gnss* internal_default_instance() {
    return reinterpret_cast<const Gnss*>(
               &_Gnss_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Gnss* other);
  friend void swap(Gnss& a, Gnss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gnss* New() const PROTOBUF_FINAL { return New(NULL); }

  Gnss* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gnss& from);
  void MergeFrom(const Gnss& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gnss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.SatelliteInfo statelline_info = 25;
  int statelline_info_size() const;
  void clear_statelline_info();
  static const int kStatellineInfoFieldNumber = 25;
  const ::autodrive::workflow::proto::SatelliteInfo& statelline_info(int index) const;
  ::autodrive::workflow::proto::SatelliteInfo* mutable_statelline_info(int index);
  ::autodrive::workflow::proto::SatelliteInfo* add_statelline_info();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SatelliteInfo >*
      mutable_statelline_info();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SatelliteInfo >&
      statelline_info() const;

  // uint64 utc_time = 1;
  void clear_utc_time();
  static const int kUtcTimeFieldNumber = 1;
  ::google::protobuf::uint64 utc_time() const;
  void set_utc_time(::google::protobuf::uint64 value);

  // int32 latitude = 2;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  ::google::protobuf::int32 latitude() const;
  void set_latitude(::google::protobuf::int32 value);

  // int32 longitude = 3;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  ::google::protobuf::int32 longitude() const;
  void set_longitude(::google::protobuf::int32 value);

  // float altitude = 4;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 4;
  float altitude() const;
  void set_altitude(float value);

  // float ellipsoid = 5;
  void clear_ellipsoid();
  static const int kEllipsoidFieldNumber = 5;
  float ellipsoid() const;
  void set_ellipsoid(float value);

  // .autodrive.workflow.proto.PoseType pose_type = 6;
  void clear_pose_type();
  static const int kPoseTypeFieldNumber = 6;
  ::autodrive::workflow::proto::PoseType pose_type() const;
  void set_pose_type(::autodrive::workflow::proto::PoseType value);

  // .autodrive.workflow.proto.PositionStatus position_status = 7;
  void clear_position_status();
  static const int kPositionStatusFieldNumber = 7;
  ::autodrive::workflow::proto::PositionStatus position_status() const;
  void set_position_status(::autodrive::workflow::proto::PositionStatus value);

  // uint32 num_satellites = 8;
  void clear_num_satellites();
  static const int kNumSatellitesFieldNumber = 8;
  ::google::protobuf::uint32 num_satellites() const;
  void set_num_satellites(::google::protobuf::uint32 value);

  // float gnss_vel_north = 9;
  void clear_gnss_vel_north();
  static const int kGnssVelNorthFieldNumber = 9;
  float gnss_vel_north() const;
  void set_gnss_vel_north(float value);

  // float gnss_vel_east = 10;
  void clear_gnss_vel_east();
  static const int kGnssVelEastFieldNumber = 10;
  float gnss_vel_east() const;
  void set_gnss_vel_east(float value);

  // float gnss_vel_down = 11;
  void clear_gnss_vel_down();
  static const int kGnssVelDownFieldNumber = 11;
  float gnss_vel_down() const;
  void set_gnss_vel_down(float value);

  // float heading = 12;
  void clear_heading();
  static const int kHeadingFieldNumber = 12;
  float heading() const;
  void set_heading(float value);

  // float course = 13;
  void clear_course();
  static const int kCourseFieldNumber = 13;
  float course() const;
  void set_course(float value);

  // float heading_error = 14;
  void clear_heading_error();
  static const int kHeadingErrorFieldNumber = 14;
  float heading_error() const;
  void set_heading_error(float value);

  // float course_error = 15;
  void clear_course_error();
  static const int kCourseErrorFieldNumber = 15;
  float course_error() const;
  void set_course_error(float value);

  // float horizon_position_error = 16;
  void clear_horizon_position_error();
  static const int kHorizonPositionErrorFieldNumber = 16;
  float horizon_position_error() const;
  void set_horizon_position_error(float value);

  // float vertical_position_error = 17;
  void clear_vertical_position_error();
  static const int kVerticalPositionErrorFieldNumber = 17;
  float vertical_position_error() const;
  void set_vertical_position_error(float value);

  // float horizon_velocity_error = 18;
  void clear_horizon_velocity_error();
  static const int kHorizonVelocityErrorFieldNumber = 18;
  float horizon_velocity_error() const;
  void set_horizon_velocity_error(float value);

  // float vertical_velocity_error = 19;
  void clear_vertical_velocity_error();
  static const int kVerticalVelocityErrorFieldNumber = 19;
  float vertical_velocity_error() const;
  void set_vertical_velocity_error(float value);

  // float tdop = 20;
  void clear_tdop();
  static const int kTdopFieldNumber = 20;
  float tdop() const;
  void set_tdop(float value);

  // float hdop = 21;
  void clear_hdop();
  static const int kHdopFieldNumber = 21;
  float hdop() const;
  void set_hdop(float value);

  // float vdop = 22;
  void clear_vdop();
  static const int kVdopFieldNumber = 22;
  float vdop() const;
  void set_vdop(float value);

  // uint32 sat_seq_no = 23;
  void clear_sat_seq_no();
  static const int kSatSeqNoFieldNumber = 23;
  ::google::protobuf::uint32 sat_seq_no() const;
  void set_sat_seq_no(::google::protobuf::uint32 value);

  // uint32 num_gnss_satellite_info = 24;
  void clear_num_gnss_satellite_info();
  static const int kNumGnssSatelliteInfoFieldNumber = 24;
  ::google::protobuf::uint32 num_gnss_satellite_info() const;
  void set_num_gnss_satellite_info(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Gnss)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SatelliteInfo > statelline_info_;
  ::google::protobuf::uint64 utc_time_;
  ::google::protobuf::int32 latitude_;
  ::google::protobuf::int32 longitude_;
  float altitude_;
  float ellipsoid_;
  int pose_type_;
  int position_status_;
  ::google::protobuf::uint32 num_satellites_;
  float gnss_vel_north_;
  float gnss_vel_east_;
  float gnss_vel_down_;
  float heading_;
  float course_;
  float heading_error_;
  float course_error_;
  float horizon_position_error_;
  float vertical_position_error_;
  float horizon_velocity_error_;
  float vertical_velocity_error_;
  float tdop_;
  float hdop_;
  float vdop_;
  ::google::protobuf::uint32 sat_seq_no_;
  ::google::protobuf::uint32 num_gnss_satellite_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_gnss_2eproto::TableStruct;
  friend void ::protobuf_gnss_2eproto::InitDefaultsGnssImpl();
};
// -------------------------------------------------------------------

class GnssMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.GnssMsg) */ {
 public:
  GnssMsg();
  virtual ~GnssMsg();

  GnssMsg(const GnssMsg& from);

  inline GnssMsg& operator=(const GnssMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GnssMsg(GnssMsg&& from) noexcept
    : GnssMsg() {
    *this = ::std::move(from);
  }

  inline GnssMsg& operator=(GnssMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GnssMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssMsg* internal_default_instance() {
    return reinterpret_cast<const GnssMsg*>(
               &_GnssMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GnssMsg* other);
  friend void swap(GnssMsg& a, GnssMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GnssMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  GnssMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GnssMsg& from);
  void MergeFrom(const GnssMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GnssMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.Gnss gnss = 3;
  bool has_gnss() const;
  void clear_gnss();
  static const int kGnssFieldNumber = 3;
  const ::autodrive::workflow::proto::Gnss& gnss() const;
  ::autodrive::workflow::proto::Gnss* release_gnss();
  ::autodrive::workflow::proto::Gnss* mutable_gnss();
  void set_allocated_gnss(::autodrive::workflow::proto::Gnss* gnss);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.GnssMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::Gnss* gnss_;
  mutable int _cached_size_;
  friend struct ::protobuf_gnss_2eproto::TableStruct;
  friend void ::protobuf_gnss_2eproto::InitDefaultsGnssMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SatelliteInfo

// uint32 num_in_view = 1;
inline void SatelliteInfo::clear_num_in_view() {
  num_in_view_ = 0u;
}
inline ::google::protobuf::uint32 SatelliteInfo::num_in_view() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SatelliteInfo.num_in_view)
  return num_in_view_;
}
inline void SatelliteInfo::set_num_in_view(::google::protobuf::uint32 value) {
  
  num_in_view_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SatelliteInfo.num_in_view)
}

// uint32 no = 2;
inline void SatelliteInfo::clear_no() {
  no_ = 0u;
}
inline ::google::protobuf::uint32 SatelliteInfo::no() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SatelliteInfo.no)
  return no_;
}
inline void SatelliteInfo::set_no(::google::protobuf::uint32 value) {
  
  no_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SatelliteInfo.no)
}

// uint32 snr = 3;
inline void SatelliteInfo::clear_snr() {
  snr_ = 0u;
}
inline ::google::protobuf::uint32 SatelliteInfo::snr() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SatelliteInfo.snr)
  return snr_;
}
inline void SatelliteInfo::set_snr(::google::protobuf::uint32 value) {
  
  snr_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SatelliteInfo.snr)
}

// uint32 elevation = 4;
inline void SatelliteInfo::clear_elevation() {
  elevation_ = 0u;
}
inline ::google::protobuf::uint32 SatelliteInfo::elevation() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SatelliteInfo.elevation)
  return elevation_;
}
inline void SatelliteInfo::set_elevation(::google::protobuf::uint32 value) {
  
  elevation_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SatelliteInfo.elevation)
}

// uint32 azimuth = 5;
inline void SatelliteInfo::clear_azimuth() {
  azimuth_ = 0u;
}
inline ::google::protobuf::uint32 SatelliteInfo::azimuth() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SatelliteInfo.azimuth)
  return azimuth_;
}
inline void SatelliteInfo::set_azimuth(::google::protobuf::uint32 value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SatelliteInfo.azimuth)
}

// .autodrive.workflow.proto.PositingSystem positing_system = 6;
inline void SatelliteInfo::clear_positing_system() {
  positing_system_ = 0;
}
inline ::autodrive::workflow::proto::PositingSystem SatelliteInfo::positing_system() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SatelliteInfo.positing_system)
  return static_cast< ::autodrive::workflow::proto::PositingSystem >(positing_system_);
}
inline void SatelliteInfo::set_positing_system(::autodrive::workflow::proto::PositingSystem value) {
  
  positing_system_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SatelliteInfo.positing_system)
}

// -------------------------------------------------------------------

// Gnss

// uint64 utc_time = 1;
inline void Gnss::clear_utc_time() {
  utc_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Gnss::utc_time() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.utc_time)
  return utc_time_;
}
inline void Gnss::set_utc_time(::google::protobuf::uint64 value) {
  
  utc_time_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.utc_time)
}

// int32 latitude = 2;
inline void Gnss::clear_latitude() {
  latitude_ = 0;
}
inline ::google::protobuf::int32 Gnss::latitude() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.latitude)
  return latitude_;
}
inline void Gnss::set_latitude(::google::protobuf::int32 value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.latitude)
}

// int32 longitude = 3;
inline void Gnss::clear_longitude() {
  longitude_ = 0;
}
inline ::google::protobuf::int32 Gnss::longitude() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.longitude)
  return longitude_;
}
inline void Gnss::set_longitude(::google::protobuf::int32 value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.longitude)
}

// float altitude = 4;
inline void Gnss::clear_altitude() {
  altitude_ = 0;
}
inline float Gnss::altitude() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.altitude)
  return altitude_;
}
inline void Gnss::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.altitude)
}

// float ellipsoid = 5;
inline void Gnss::clear_ellipsoid() {
  ellipsoid_ = 0;
}
inline float Gnss::ellipsoid() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.ellipsoid)
  return ellipsoid_;
}
inline void Gnss::set_ellipsoid(float value) {
  
  ellipsoid_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.ellipsoid)
}

// .autodrive.workflow.proto.PoseType pose_type = 6;
inline void Gnss::clear_pose_type() {
  pose_type_ = 0;
}
inline ::autodrive::workflow::proto::PoseType Gnss::pose_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.pose_type)
  return static_cast< ::autodrive::workflow::proto::PoseType >(pose_type_);
}
inline void Gnss::set_pose_type(::autodrive::workflow::proto::PoseType value) {
  
  pose_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.pose_type)
}

// .autodrive.workflow.proto.PositionStatus position_status = 7;
inline void Gnss::clear_position_status() {
  position_status_ = 0;
}
inline ::autodrive::workflow::proto::PositionStatus Gnss::position_status() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.position_status)
  return static_cast< ::autodrive::workflow::proto::PositionStatus >(position_status_);
}
inline void Gnss::set_position_status(::autodrive::workflow::proto::PositionStatus value) {
  
  position_status_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.position_status)
}

// uint32 num_satellites = 8;
inline void Gnss::clear_num_satellites() {
  num_satellites_ = 0u;
}
inline ::google::protobuf::uint32 Gnss::num_satellites() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.num_satellites)
  return num_satellites_;
}
inline void Gnss::set_num_satellites(::google::protobuf::uint32 value) {
  
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.num_satellites)
}

// float gnss_vel_north = 9;
inline void Gnss::clear_gnss_vel_north() {
  gnss_vel_north_ = 0;
}
inline float Gnss::gnss_vel_north() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.gnss_vel_north)
  return gnss_vel_north_;
}
inline void Gnss::set_gnss_vel_north(float value) {
  
  gnss_vel_north_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.gnss_vel_north)
}

// float gnss_vel_east = 10;
inline void Gnss::clear_gnss_vel_east() {
  gnss_vel_east_ = 0;
}
inline float Gnss::gnss_vel_east() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.gnss_vel_east)
  return gnss_vel_east_;
}
inline void Gnss::set_gnss_vel_east(float value) {
  
  gnss_vel_east_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.gnss_vel_east)
}

// float gnss_vel_down = 11;
inline void Gnss::clear_gnss_vel_down() {
  gnss_vel_down_ = 0;
}
inline float Gnss::gnss_vel_down() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.gnss_vel_down)
  return gnss_vel_down_;
}
inline void Gnss::set_gnss_vel_down(float value) {
  
  gnss_vel_down_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.gnss_vel_down)
}

// float heading = 12;
inline void Gnss::clear_heading() {
  heading_ = 0;
}
inline float Gnss::heading() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.heading)
  return heading_;
}
inline void Gnss::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.heading)
}

// float course = 13;
inline void Gnss::clear_course() {
  course_ = 0;
}
inline float Gnss::course() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.course)
  return course_;
}
inline void Gnss::set_course(float value) {
  
  course_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.course)
}

// float heading_error = 14;
inline void Gnss::clear_heading_error() {
  heading_error_ = 0;
}
inline float Gnss::heading_error() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.heading_error)
  return heading_error_;
}
inline void Gnss::set_heading_error(float value) {
  
  heading_error_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.heading_error)
}

// float course_error = 15;
inline void Gnss::clear_course_error() {
  course_error_ = 0;
}
inline float Gnss::course_error() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.course_error)
  return course_error_;
}
inline void Gnss::set_course_error(float value) {
  
  course_error_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.course_error)
}

// float horizon_position_error = 16;
inline void Gnss::clear_horizon_position_error() {
  horizon_position_error_ = 0;
}
inline float Gnss::horizon_position_error() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.horizon_position_error)
  return horizon_position_error_;
}
inline void Gnss::set_horizon_position_error(float value) {
  
  horizon_position_error_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.horizon_position_error)
}

// float vertical_position_error = 17;
inline void Gnss::clear_vertical_position_error() {
  vertical_position_error_ = 0;
}
inline float Gnss::vertical_position_error() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.vertical_position_error)
  return vertical_position_error_;
}
inline void Gnss::set_vertical_position_error(float value) {
  
  vertical_position_error_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.vertical_position_error)
}

// float horizon_velocity_error = 18;
inline void Gnss::clear_horizon_velocity_error() {
  horizon_velocity_error_ = 0;
}
inline float Gnss::horizon_velocity_error() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.horizon_velocity_error)
  return horizon_velocity_error_;
}
inline void Gnss::set_horizon_velocity_error(float value) {
  
  horizon_velocity_error_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.horizon_velocity_error)
}

// float vertical_velocity_error = 19;
inline void Gnss::clear_vertical_velocity_error() {
  vertical_velocity_error_ = 0;
}
inline float Gnss::vertical_velocity_error() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.vertical_velocity_error)
  return vertical_velocity_error_;
}
inline void Gnss::set_vertical_velocity_error(float value) {
  
  vertical_velocity_error_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.vertical_velocity_error)
}

// float tdop = 20;
inline void Gnss::clear_tdop() {
  tdop_ = 0;
}
inline float Gnss::tdop() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.tdop)
  return tdop_;
}
inline void Gnss::set_tdop(float value) {
  
  tdop_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.tdop)
}

// float hdop = 21;
inline void Gnss::clear_hdop() {
  hdop_ = 0;
}
inline float Gnss::hdop() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.hdop)
  return hdop_;
}
inline void Gnss::set_hdop(float value) {
  
  hdop_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.hdop)
}

// float vdop = 22;
inline void Gnss::clear_vdop() {
  vdop_ = 0;
}
inline float Gnss::vdop() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.vdop)
  return vdop_;
}
inline void Gnss::set_vdop(float value) {
  
  vdop_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.vdop)
}

// uint32 sat_seq_no = 23;
inline void Gnss::clear_sat_seq_no() {
  sat_seq_no_ = 0u;
}
inline ::google::protobuf::uint32 Gnss::sat_seq_no() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.sat_seq_no)
  return sat_seq_no_;
}
inline void Gnss::set_sat_seq_no(::google::protobuf::uint32 value) {
  
  sat_seq_no_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.sat_seq_no)
}

// uint32 num_gnss_satellite_info = 24;
inline void Gnss::clear_num_gnss_satellite_info() {
  num_gnss_satellite_info_ = 0u;
}
inline ::google::protobuf::uint32 Gnss::num_gnss_satellite_info() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.num_gnss_satellite_info)
  return num_gnss_satellite_info_;
}
inline void Gnss::set_num_gnss_satellite_info(::google::protobuf::uint32 value) {
  
  num_gnss_satellite_info_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Gnss.num_gnss_satellite_info)
}

// repeated .autodrive.workflow.proto.SatelliteInfo statelline_info = 25;
inline int Gnss::statelline_info_size() const {
  return statelline_info_.size();
}
inline void Gnss::clear_statelline_info() {
  statelline_info_.Clear();
}
inline const ::autodrive::workflow::proto::SatelliteInfo& Gnss::statelline_info(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Gnss.statelline_info)
  return statelline_info_.Get(index);
}
inline ::autodrive::workflow::proto::SatelliteInfo* Gnss::mutable_statelline_info(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.Gnss.statelline_info)
  return statelline_info_.Mutable(index);
}
inline ::autodrive::workflow::proto::SatelliteInfo* Gnss::add_statelline_info() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.Gnss.statelline_info)
  return statelline_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SatelliteInfo >*
Gnss::mutable_statelline_info() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.Gnss.statelline_info)
  return &statelline_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SatelliteInfo >&
Gnss::statelline_info() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.Gnss.statelline_info)
  return statelline_info_;
}

// -------------------------------------------------------------------

// GnssMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool GnssMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& GnssMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GnssMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* GnssMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.GnssMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* GnssMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GnssMsg.header)
  return header_;
}
inline void GnssMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.GnssMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool GnssMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& GnssMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GnssMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* GnssMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.GnssMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* GnssMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GnssMsg.error)
  return error_;
}
inline void GnssMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.GnssMsg.error)
}

// .autodrive.workflow.proto.Gnss gnss = 3;
inline bool GnssMsg::has_gnss() const {
  return this != internal_default_instance() && gnss_ != NULL;
}
inline void GnssMsg::clear_gnss() {
  if (GetArenaNoVirtual() == NULL && gnss_ != NULL) {
    delete gnss_;
  }
  gnss_ = NULL;
}
inline const ::autodrive::workflow::proto::Gnss& GnssMsg::gnss() const {
  const ::autodrive::workflow::proto::Gnss* p = gnss_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.GnssMsg.gnss)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Gnss*>(
      &::autodrive::workflow::proto::_Gnss_default_instance_);
}
inline ::autodrive::workflow::proto::Gnss* GnssMsg::release_gnss() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.GnssMsg.gnss)
  
  ::autodrive::workflow::proto::Gnss* temp = gnss_;
  gnss_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Gnss* GnssMsg::mutable_gnss() {
  
  if (gnss_ == NULL) {
    gnss_ = new ::autodrive::workflow::proto::Gnss;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.GnssMsg.gnss)
  return gnss_;
}
inline void GnssMsg::set_allocated_gnss(::autodrive::workflow::proto::Gnss* gnss) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gnss_;
  }
  if (gnss) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gnss = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gnss, submessage_arena);
    }
    
  } else {
    
  }
  gnss_ = gnss;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.GnssMsg.gnss)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::PositionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::PositionStatus>() {
  return ::autodrive::workflow::proto::PositionStatus_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::PositingSystem> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::PositingSystem>() {
  return ::autodrive::workflow::proto::PositingSystem_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::PoseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::PoseType>() {
  return ::autodrive::workflow::proto::PoseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gnss_2eproto__INCLUDED
