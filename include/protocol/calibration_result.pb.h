// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration_result.proto

#ifndef PROTOBUF_calibration_5fresult_2eproto__INCLUDED
#define PROTOBUF_calibration_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "camera_extrinsics.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_calibration_5fresult_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCalibrationResultImpl();
void InitDefaultsCalibrationResult();
void InitDefaultsCalibrationResultMsgImpl();
void InitDefaultsCalibrationResultMsg();
inline void InitDefaults() {
  InitDefaultsCalibrationResult();
  InitDefaultsCalibrationResultMsg();
}
}  // namespace protobuf_calibration_5fresult_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class CalibrationResult;
class CalibrationResultDefaultTypeInternal;
extern CalibrationResultDefaultTypeInternal _CalibrationResult_default_instance_;
class CalibrationResultMsg;
class CalibrationResultMsgDefaultTypeInternal;
extern CalibrationResultMsgDefaultTypeInternal _CalibrationResultMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum CalibStatus {
  CALIB_STATE_NONE = 0,
  CALIB_STATE_RUN = 1,
  CALIB_STATE_SUCCESS = 2,
  CALIB_STATE_MODE_ERRROR = 3,
  CALIB_STATE_PATTERN_ERROR = 4,
  CALIB_STATE_INTERNAL_PARAM_ERROR = 5,
  CALIB_STATE_IMG_ERRROR = 6,
  CALIB_STATE_FIND_CORNERS_ERROR = 7,
  CALIB_STATE_REPROJECTION_ERROR = 8,
  CALIB_STATE_PITCH_OUTOF_RANGE = 9,
  CALIB_STATE_ROLL_OUTOF_RANGE = 10,
  CALIB_STATE_YAW_OUTOF_RANGE = 11,
  CALIB_STATE_TIMEOUT_ERROR = 12,
  CALIB_STATE_RESULT_SAVE_ERROR = 13,
  CALIB_STATE_ALGORITHM_CANCEL = 14,
  CalibStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CalibStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CalibStatus_IsValid(int value);
const CalibStatus CalibStatus_MIN = CALIB_STATE_NONE;
const CalibStatus CalibStatus_MAX = CALIB_STATE_ALGORITHM_CANCEL;
const int CalibStatus_ARRAYSIZE = CalibStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CalibStatus_descriptor();
inline const ::std::string& CalibStatus_Name(CalibStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CalibStatus_descriptor(), value);
}
inline bool CalibStatus_Parse(
    const ::std::string& name, CalibStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CalibStatus>(
    CalibStatus_descriptor(), name, value);
}
// ===================================================================

class CalibrationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.CalibrationResult) */ {
 public:
  CalibrationResult();
  virtual ~CalibrationResult();

  CalibrationResult(const CalibrationResult& from);

  inline CalibrationResult& operator=(const CalibrationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalibrationResult(CalibrationResult&& from) noexcept
    : CalibrationResult() {
    *this = ::std::move(from);
  }

  inline CalibrationResult& operator=(CalibrationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalibrationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibrationResult* internal_default_instance() {
    return reinterpret_cast<const CalibrationResult*>(
               &_CalibrationResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CalibrationResult* other);
  friend void swap(CalibrationResult& a, CalibrationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalibrationResult* New() const PROTOBUF_FINAL { return New(NULL); }

  CalibrationResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CalibrationResult& from);
  void MergeFrom(const CalibrationResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CalibrationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Extrinsic extrinsic = 3;
  bool has_extrinsic() const;
  void clear_extrinsic();
  static const int kExtrinsicFieldNumber = 3;
  const ::autodrive::workflow::proto::Extrinsic& extrinsic() const;
  ::autodrive::workflow::proto::Extrinsic* release_extrinsic();
  ::autodrive::workflow::proto::Extrinsic* mutable_extrinsic();
  void set_allocated_extrinsic(::autodrive::workflow::proto::Extrinsic* extrinsic);

  // .autodrive.workflow.proto.CameraID cam_id = 1;
  void clear_cam_id();
  static const int kCamIdFieldNumber = 1;
  ::autodrive::workflow::proto::CameraID cam_id() const;
  void set_cam_id(::autodrive::workflow::proto::CameraID value);

  // .autodrive.workflow.proto.CalibStatus calib_status = 2;
  void clear_calib_status();
  static const int kCalibStatusFieldNumber = 2;
  ::autodrive::workflow::proto::CalibStatus calib_status() const;
  void set_calib_status(::autodrive::workflow::proto::CalibStatus value);

  // float progress_rate = 4;
  void clear_progress_rate();
  static const int kProgressRateFieldNumber = 4;
  float progress_rate() const;
  void set_progress_rate(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.CalibrationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Extrinsic* extrinsic_;
  int cam_id_;
  int calib_status_;
  float progress_rate_;
  mutable int _cached_size_;
  friend struct ::protobuf_calibration_5fresult_2eproto::TableStruct;
  friend void ::protobuf_calibration_5fresult_2eproto::InitDefaultsCalibrationResultImpl();
};
// -------------------------------------------------------------------

class CalibrationResultMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.CalibrationResultMsg) */ {
 public:
  CalibrationResultMsg();
  virtual ~CalibrationResultMsg();

  CalibrationResultMsg(const CalibrationResultMsg& from);

  inline CalibrationResultMsg& operator=(const CalibrationResultMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalibrationResultMsg(CalibrationResultMsg&& from) noexcept
    : CalibrationResultMsg() {
    *this = ::std::move(from);
  }

  inline CalibrationResultMsg& operator=(CalibrationResultMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalibrationResultMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibrationResultMsg* internal_default_instance() {
    return reinterpret_cast<const CalibrationResultMsg*>(
               &_CalibrationResultMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CalibrationResultMsg* other);
  friend void swap(CalibrationResultMsg& a, CalibrationResultMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalibrationResultMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  CalibrationResultMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CalibrationResultMsg& from);
  void MergeFrom(const CalibrationResultMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CalibrationResultMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.CalibrationResult results = 4;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 4;
  const ::autodrive::workflow::proto::CalibrationResult& results(int index) const;
  ::autodrive::workflow::proto::CalibrationResult* mutable_results(int index);
  ::autodrive::workflow::proto::CalibrationResult* add_results();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CalibrationResult >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CalibrationResult >&
      results() const;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // uint32 real_camera_amount = 3;
  void clear_real_camera_amount();
  static const int kRealCameraAmountFieldNumber = 3;
  ::google::protobuf::uint32 real_camera_amount() const;
  void set_real_camera_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.CalibrationResultMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CalibrationResult > results_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::google::protobuf::uint32 real_camera_amount_;
  mutable int _cached_size_;
  friend struct ::protobuf_calibration_5fresult_2eproto::TableStruct;
  friend void ::protobuf_calibration_5fresult_2eproto::InitDefaultsCalibrationResultMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalibrationResult

// .autodrive.workflow.proto.CameraID cam_id = 1;
inline void CalibrationResult::clear_cam_id() {
  cam_id_ = 0;
}
inline ::autodrive::workflow::proto::CameraID CalibrationResult::cam_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CalibrationResult.cam_id)
  return static_cast< ::autodrive::workflow::proto::CameraID >(cam_id_);
}
inline void CalibrationResult::set_cam_id(::autodrive::workflow::proto::CameraID value) {
  
  cam_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CalibrationResult.cam_id)
}

// .autodrive.workflow.proto.CalibStatus calib_status = 2;
inline void CalibrationResult::clear_calib_status() {
  calib_status_ = 0;
}
inline ::autodrive::workflow::proto::CalibStatus CalibrationResult::calib_status() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CalibrationResult.calib_status)
  return static_cast< ::autodrive::workflow::proto::CalibStatus >(calib_status_);
}
inline void CalibrationResult::set_calib_status(::autodrive::workflow::proto::CalibStatus value) {
  
  calib_status_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CalibrationResult.calib_status)
}

// .autodrive.workflow.proto.Extrinsic extrinsic = 3;
inline bool CalibrationResult::has_extrinsic() const {
  return this != internal_default_instance() && extrinsic_ != NULL;
}
inline const ::autodrive::workflow::proto::Extrinsic& CalibrationResult::extrinsic() const {
  const ::autodrive::workflow::proto::Extrinsic* p = extrinsic_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CalibrationResult.extrinsic)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Extrinsic*>(
      &::autodrive::workflow::proto::_Extrinsic_default_instance_);
}
inline ::autodrive::workflow::proto::Extrinsic* CalibrationResult::release_extrinsic() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CalibrationResult.extrinsic)
  
  ::autodrive::workflow::proto::Extrinsic* temp = extrinsic_;
  extrinsic_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Extrinsic* CalibrationResult::mutable_extrinsic() {
  
  if (extrinsic_ == NULL) {
    extrinsic_ = new ::autodrive::workflow::proto::Extrinsic;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CalibrationResult.extrinsic)
  return extrinsic_;
}
inline void CalibrationResult::set_allocated_extrinsic(::autodrive::workflow::proto::Extrinsic* extrinsic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(extrinsic_);
  }
  if (extrinsic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      extrinsic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extrinsic, submessage_arena);
    }
    
  } else {
    
  }
  extrinsic_ = extrinsic;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CalibrationResult.extrinsic)
}

// float progress_rate = 4;
inline void CalibrationResult::clear_progress_rate() {
  progress_rate_ = 0;
}
inline float CalibrationResult::progress_rate() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CalibrationResult.progress_rate)
  return progress_rate_;
}
inline void CalibrationResult::set_progress_rate(float value) {
  
  progress_rate_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CalibrationResult.progress_rate)
}

// -------------------------------------------------------------------

// CalibrationResultMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool CalibrationResultMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& CalibrationResultMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CalibrationResultMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* CalibrationResultMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CalibrationResultMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* CalibrationResultMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CalibrationResultMsg.header)
  return header_;
}
inline void CalibrationResultMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CalibrationResultMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool CalibrationResultMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& CalibrationResultMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CalibrationResultMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* CalibrationResultMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CalibrationResultMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* CalibrationResultMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CalibrationResultMsg.error)
  return error_;
}
inline void CalibrationResultMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CalibrationResultMsg.error)
}

// uint32 real_camera_amount = 3;
inline void CalibrationResultMsg::clear_real_camera_amount() {
  real_camera_amount_ = 0u;
}
inline ::google::protobuf::uint32 CalibrationResultMsg::real_camera_amount() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CalibrationResultMsg.real_camera_amount)
  return real_camera_amount_;
}
inline void CalibrationResultMsg::set_real_camera_amount(::google::protobuf::uint32 value) {
  
  real_camera_amount_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CalibrationResultMsg.real_camera_amount)
}

// repeated .autodrive.workflow.proto.CalibrationResult results = 4;
inline int CalibrationResultMsg::results_size() const {
  return results_.size();
}
inline void CalibrationResultMsg::clear_results() {
  results_.Clear();
}
inline const ::autodrive::workflow::proto::CalibrationResult& CalibrationResultMsg::results(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CalibrationResultMsg.results)
  return results_.Get(index);
}
inline ::autodrive::workflow::proto::CalibrationResult* CalibrationResultMsg::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CalibrationResultMsg.results)
  return results_.Mutable(index);
}
inline ::autodrive::workflow::proto::CalibrationResult* CalibrationResultMsg::add_results() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.CalibrationResultMsg.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CalibrationResult >*
CalibrationResultMsg::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.CalibrationResultMsg.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CalibrationResult >&
CalibrationResultMsg::results() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.CalibrationResultMsg.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::CalibStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::CalibStatus>() {
  return ::autodrive::workflow::proto::CalibStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_calibration_5fresult_2eproto__INCLUDED
