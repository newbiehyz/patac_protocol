// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uss_tracking_mode.proto

#ifndef PROTOBUF_uss_5ftracking_5fmode_2eproto__INCLUDED
#define PROTOBUF_uss_5ftracking_5fmode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "uss_base.pb.h"
#include "uss_parking_slots.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_uss_5ftracking_5fmode_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUssTrackingModeMsgImpl();
void InitDefaultsUssTrackingModeMsg();
inline void InitDefaults() {
  InitDefaultsUssTrackingModeMsg();
}
}  // namespace protobuf_uss_5ftracking_5fmode_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class UssTrackingModeMsg;
class UssTrackingModeMsgDefaultTypeInternal;
extern UssTrackingModeMsgDefaultTypeInternal _UssTrackingModeMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class UssTrackingModeMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.UssTrackingModeMsg) */ {
 public:
  UssTrackingModeMsg();
  virtual ~UssTrackingModeMsg();

  UssTrackingModeMsg(const UssTrackingModeMsg& from);

  inline UssTrackingModeMsg& operator=(const UssTrackingModeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UssTrackingModeMsg(UssTrackingModeMsg&& from) noexcept
    : UssTrackingModeMsg() {
    *this = ::std::move(from);
  }

  inline UssTrackingModeMsg& operator=(UssTrackingModeMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UssTrackingModeMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UssTrackingModeMsg* internal_default_instance() {
    return reinterpret_cast<const UssTrackingModeMsg*>(
               &_UssTrackingModeMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UssTrackingModeMsg* other);
  friend void swap(UssTrackingModeMsg& a, UssTrackingModeMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UssTrackingModeMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  UssTrackingModeMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UssTrackingModeMsg& from);
  void MergeFrom(const UssTrackingModeMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UssTrackingModeMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.PerFusUssPs ps_correct = 7;
  bool has_ps_correct() const;
  void clear_ps_correct();
  static const int kPsCorrectFieldNumber = 7;
  const ::autodrive::workflow::proto::PerFusUssPs& ps_correct() const;
  ::autodrive::workflow::proto::PerFusUssPs* release_ps_correct();
  ::autodrive::workflow::proto::PerFusUssPs* mutable_ps_correct();
  void set_allocated_ps_correct(::autodrive::workflow::proto::PerFusUssPs* ps_correct);

  // .autodrive.workflow.proto.PlvState plv_mode = 3;
  void clear_plv_mode();
  static const int kPlvModeFieldNumber = 3;
  ::autodrive::workflow::proto::PlvState plv_mode() const;
  void set_plv_mode(::autodrive::workflow::proto::PlvState value);

  // .autodrive.workflow.proto.PsuState psu_mode = 4;
  void clear_psu_mode();
  static const int kPsuModeFieldNumber = 4;
  ::autodrive::workflow::proto::PsuState psu_mode() const;
  void set_psu_mode(::autodrive::workflow::proto::PsuState value);

  // uint32 uss_ps_clear_distance = 5;
  void clear_uss_ps_clear_distance();
  static const int kUssPsClearDistanceFieldNumber = 5;
  ::google::protobuf::uint32 uss_ps_clear_distance() const;
  void set_uss_ps_clear_distance(::google::protobuf::uint32 value);

  // .autodrive.workflow.proto.OdoState odo_mode = 6;
  void clear_odo_mode();
  static const int kOdoModeFieldNumber = 6;
  ::autodrive::workflow::proto::OdoState odo_mode() const;
  void set_odo_mode(::autodrive::workflow::proto::OdoState value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.UssTrackingModeMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::PerFusUssPs* ps_correct_;
  int plv_mode_;
  int psu_mode_;
  ::google::protobuf::uint32 uss_ps_clear_distance_;
  int odo_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_uss_5ftracking_5fmode_2eproto::TableStruct;
  friend void ::protobuf_uss_5ftracking_5fmode_2eproto::InitDefaultsUssTrackingModeMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UssTrackingModeMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool UssTrackingModeMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& UssTrackingModeMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.UssTrackingModeMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* UssTrackingModeMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.UssTrackingModeMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* UssTrackingModeMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.UssTrackingModeMsg.header)
  return header_;
}
inline void UssTrackingModeMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.UssTrackingModeMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool UssTrackingModeMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& UssTrackingModeMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.UssTrackingModeMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* UssTrackingModeMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.UssTrackingModeMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* UssTrackingModeMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.UssTrackingModeMsg.error)
  return error_;
}
inline void UssTrackingModeMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.UssTrackingModeMsg.error)
}

// .autodrive.workflow.proto.PlvState plv_mode = 3;
inline void UssTrackingModeMsg::clear_plv_mode() {
  plv_mode_ = 0;
}
inline ::autodrive::workflow::proto::PlvState UssTrackingModeMsg::plv_mode() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.UssTrackingModeMsg.plv_mode)
  return static_cast< ::autodrive::workflow::proto::PlvState >(plv_mode_);
}
inline void UssTrackingModeMsg::set_plv_mode(::autodrive::workflow::proto::PlvState value) {
  
  plv_mode_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.UssTrackingModeMsg.plv_mode)
}

// .autodrive.workflow.proto.PsuState psu_mode = 4;
inline void UssTrackingModeMsg::clear_psu_mode() {
  psu_mode_ = 0;
}
inline ::autodrive::workflow::proto::PsuState UssTrackingModeMsg::psu_mode() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.UssTrackingModeMsg.psu_mode)
  return static_cast< ::autodrive::workflow::proto::PsuState >(psu_mode_);
}
inline void UssTrackingModeMsg::set_psu_mode(::autodrive::workflow::proto::PsuState value) {
  
  psu_mode_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.UssTrackingModeMsg.psu_mode)
}

// uint32 uss_ps_clear_distance = 5;
inline void UssTrackingModeMsg::clear_uss_ps_clear_distance() {
  uss_ps_clear_distance_ = 0u;
}
inline ::google::protobuf::uint32 UssTrackingModeMsg::uss_ps_clear_distance() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.UssTrackingModeMsg.uss_ps_clear_distance)
  return uss_ps_clear_distance_;
}
inline void UssTrackingModeMsg::set_uss_ps_clear_distance(::google::protobuf::uint32 value) {
  
  uss_ps_clear_distance_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.UssTrackingModeMsg.uss_ps_clear_distance)
}

// .autodrive.workflow.proto.OdoState odo_mode = 6;
inline void UssTrackingModeMsg::clear_odo_mode() {
  odo_mode_ = 0;
}
inline ::autodrive::workflow::proto::OdoState UssTrackingModeMsg::odo_mode() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.UssTrackingModeMsg.odo_mode)
  return static_cast< ::autodrive::workflow::proto::OdoState >(odo_mode_);
}
inline void UssTrackingModeMsg::set_odo_mode(::autodrive::workflow::proto::OdoState value) {
  
  odo_mode_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.UssTrackingModeMsg.odo_mode)
}

// .autodrive.workflow.proto.PerFusUssPs ps_correct = 7;
inline bool UssTrackingModeMsg::has_ps_correct() const {
  return this != internal_default_instance() && ps_correct_ != NULL;
}
inline const ::autodrive::workflow::proto::PerFusUssPs& UssTrackingModeMsg::ps_correct() const {
  const ::autodrive::workflow::proto::PerFusUssPs* p = ps_correct_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.UssTrackingModeMsg.ps_correct)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::PerFusUssPs*>(
      &::autodrive::workflow::proto::_PerFusUssPs_default_instance_);
}
inline ::autodrive::workflow::proto::PerFusUssPs* UssTrackingModeMsg::release_ps_correct() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.UssTrackingModeMsg.ps_correct)
  
  ::autodrive::workflow::proto::PerFusUssPs* temp = ps_correct_;
  ps_correct_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::PerFusUssPs* UssTrackingModeMsg::mutable_ps_correct() {
  
  if (ps_correct_ == NULL) {
    ps_correct_ = new ::autodrive::workflow::proto::PerFusUssPs;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.UssTrackingModeMsg.ps_correct)
  return ps_correct_;
}
inline void UssTrackingModeMsg::set_allocated_ps_correct(::autodrive::workflow::proto::PerFusUssPs* ps_correct) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ps_correct_);
  }
  if (ps_correct) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ps_correct = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ps_correct, submessage_arena);
    }
    
  } else {
    
  }
  ps_correct_ = ps_correct;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.UssTrackingModeMsg.ps_correct)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uss_5ftracking_5fmode_2eproto__INCLUDED
