// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_obstacle_debug_info.proto

#ifndef PROTOBUF_dynamic_5fobstacle_5fdebug_5finfo_2eproto__INCLUDED
#define PROTOBUF_dynamic_5fobstacle_5fdebug_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPositionResultImpl();
void InitDefaultsPositionResult();
void InitDefaultsPositionDebugInfoImpl();
void InitDefaultsPositionDebugInfo();
void InitDefaultsSpeedResultImpl();
void InitDefaultsSpeedResult();
void InitDefaultsSpeedDebugInfoImpl();
void InitDefaultsSpeedDebugInfo();
void InitDefaultsSizeDebugInfoImpl();
void InitDefaultsSizeDebugInfo();
void InitDefaultsYawDebugInfoImpl();
void InitDefaultsYawDebugInfo();
void InitDefaultsDynamicObstacleDebugInfoImpl();
void InitDefaultsDynamicObstacleDebugInfo();
inline void InitDefaults() {
  InitDefaultsPositionResult();
  InitDefaultsPositionDebugInfo();
  InitDefaultsSpeedResult();
  InitDefaultsSpeedDebugInfo();
  InitDefaultsSizeDebugInfo();
  InitDefaultsYawDebugInfo();
  InitDefaultsDynamicObstacleDebugInfo();
}
}  // namespace protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class DynamicObstacleDebugInfo;
class DynamicObstacleDebugInfoDefaultTypeInternal;
extern DynamicObstacleDebugInfoDefaultTypeInternal _DynamicObstacleDebugInfo_default_instance_;
class PositionDebugInfo;
class PositionDebugInfoDefaultTypeInternal;
extern PositionDebugInfoDefaultTypeInternal _PositionDebugInfo_default_instance_;
class PositionResult;
class PositionResultDefaultTypeInternal;
extern PositionResultDefaultTypeInternal _PositionResult_default_instance_;
class SizeDebugInfo;
class SizeDebugInfoDefaultTypeInternal;
extern SizeDebugInfoDefaultTypeInternal _SizeDebugInfo_default_instance_;
class SpeedDebugInfo;
class SpeedDebugInfoDefaultTypeInternal;
extern SpeedDebugInfoDefaultTypeInternal _SpeedDebugInfo_default_instance_;
class SpeedResult;
class SpeedResultDefaultTypeInternal;
extern SpeedResultDefaultTypeInternal _SpeedResult_default_instance_;
class YawDebugInfo;
class YawDebugInfoDefaultTypeInternal;
extern YawDebugInfoDefaultTypeInternal _YawDebugInfo_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class PositionResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.PositionResult) */ {
 public:
  PositionResult();
  virtual ~PositionResult();

  PositionResult(const PositionResult& from);

  inline PositionResult& operator=(const PositionResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PositionResult(PositionResult&& from) noexcept
    : PositionResult() {
    *this = ::std::move(from);
  }

  inline PositionResult& operator=(PositionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionResult* internal_default_instance() {
    return reinterpret_cast<const PositionResult*>(
               &_PositionResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PositionResult* other);
  friend void swap(PositionResult& a, PositionResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PositionResult* New() const PROTOBUF_FINAL { return New(NULL); }

  PositionResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PositionResult& from);
  void MergeFrom(const PositionResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PositionResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector3f position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::autodrive::workflow::proto::Vector3f& position() const;
  ::autodrive::workflow::proto::Vector3f* release_position();
  ::autodrive::workflow::proto::Vector3f* mutable_position();
  void set_allocated_position(::autodrive::workflow::proto::Vector3f* position);

  // .autodrive.workflow.proto.Vector3f var = 2;
  bool has_var() const;
  void clear_var();
  static const int kVarFieldNumber = 2;
  const ::autodrive::workflow::proto::Vector3f& var() const;
  ::autodrive::workflow::proto::Vector3f* release_var();
  ::autodrive::workflow::proto::Vector3f* mutable_var();
  void set_allocated_var(::autodrive::workflow::proto::Vector3f* var);

  // uint32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.PositionResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector3f* position_;
  ::autodrive::workflow::proto::Vector3f* var_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::TableStruct;
  friend void ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsPositionResultImpl();
};
// -------------------------------------------------------------------

class PositionDebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.PositionDebugInfo) */ {
 public:
  PositionDebugInfo();
  virtual ~PositionDebugInfo();

  PositionDebugInfo(const PositionDebugInfo& from);

  inline PositionDebugInfo& operator=(const PositionDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PositionDebugInfo(PositionDebugInfo&& from) noexcept
    : PositionDebugInfo() {
    *this = ::std::move(from);
  }

  inline PositionDebugInfo& operator=(PositionDebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionDebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionDebugInfo* internal_default_instance() {
    return reinterpret_cast<const PositionDebugInfo*>(
               &_PositionDebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PositionDebugInfo* other);
  friend void swap(PositionDebugInfo& a, PositionDebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PositionDebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PositionDebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PositionDebugInfo& from);
  void MergeFrom(const PositionDebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PositionDebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.PositionResult position_results = 3;
  int position_results_size() const;
  void clear_position_results();
  static const int kPositionResultsFieldNumber = 3;
  const ::autodrive::workflow::proto::PositionResult& position_results(int index) const;
  ::autodrive::workflow::proto::PositionResult* mutable_position_results(int index);
  ::autodrive::workflow::proto::PositionResult* add_position_results();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::PositionResult >*
      mutable_position_results();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::PositionResult >&
      position_results() const;

  // .autodrive.workflow.proto.PositionResult fusion_pos = 5;
  bool has_fusion_pos() const;
  void clear_fusion_pos();
  static const int kFusionPosFieldNumber = 5;
  const ::autodrive::workflow::proto::PositionResult& fusion_pos() const;
  ::autodrive::workflow::proto::PositionResult* release_fusion_pos();
  ::autodrive::workflow::proto::PositionResult* mutable_fusion_pos();
  void set_allocated_fusion_pos(::autodrive::workflow::proto::PositionResult* fusion_pos);

  // .autodrive.workflow.proto.PositionResult pre_pos = 6;
  bool has_pre_pos() const;
  void clear_pre_pos();
  static const int kPrePosFieldNumber = 6;
  const ::autodrive::workflow::proto::PositionResult& pre_pos() const;
  ::autodrive::workflow::proto::PositionResult* release_pre_pos();
  ::autodrive::workflow::proto::PositionResult* mutable_pre_pos();
  void set_allocated_pre_pos(::autodrive::workflow::proto::PositionResult* pre_pos);

  // .autodrive.workflow.proto.PositionResult post_pos = 7;
  bool has_post_pos() const;
  void clear_post_pos();
  static const int kPostPosFieldNumber = 7;
  const ::autodrive::workflow::proto::PositionResult& post_pos() const;
  ::autodrive::workflow::proto::PositionResult* release_post_pos();
  ::autodrive::workflow::proto::PositionResult* mutable_post_pos();
  void set_allocated_post_pos(::autodrive::workflow::proto::PositionResult* post_pos);

  // int32 in_sensors = 1;
  void clear_in_sensors();
  static const int kInSensorsFieldNumber = 1;
  ::google::protobuf::int32 in_sensors() const;
  void set_in_sensors(::google::protobuf::int32 value);

  // int32 use_measures = 2;
  void clear_use_measures();
  static const int kUseMeasuresFieldNumber = 2;
  ::google::protobuf::int32 use_measures() const;
  void set_use_measures(::google::protobuf::int32 value);

  // int64 time_gap = 8;
  void clear_time_gap();
  static const int kTimeGapFieldNumber = 8;
  ::google::protobuf::int64 time_gap() const;
  void set_time_gap(::google::protobuf::int64 value);

  // float speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.PositionDebugInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::PositionResult > position_results_;
  ::autodrive::workflow::proto::PositionResult* fusion_pos_;
  ::autodrive::workflow::proto::PositionResult* pre_pos_;
  ::autodrive::workflow::proto::PositionResult* post_pos_;
  ::google::protobuf::int32 in_sensors_;
  ::google::protobuf::int32 use_measures_;
  ::google::protobuf::int64 time_gap_;
  float speed_;
  mutable int _cached_size_;
  friend struct ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::TableStruct;
  friend void ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsPositionDebugInfoImpl();
};
// -------------------------------------------------------------------

class SpeedResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.SpeedResult) */ {
 public:
  SpeedResult();
  virtual ~SpeedResult();

  SpeedResult(const SpeedResult& from);

  inline SpeedResult& operator=(const SpeedResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedResult(SpeedResult&& from) noexcept
    : SpeedResult() {
    *this = ::std::move(from);
  }

  inline SpeedResult& operator=(SpeedResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedResult* internal_default_instance() {
    return reinterpret_cast<const SpeedResult*>(
               &_SpeedResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SpeedResult* other);
  friend void swap(SpeedResult& a, SpeedResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedResult* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedResult& from);
  void MergeFrom(const SpeedResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector2f raw_position = 8;
  bool has_raw_position() const;
  void clear_raw_position();
  static const int kRawPositionFieldNumber = 8;
  const ::autodrive::workflow::proto::Vector2f& raw_position() const;
  ::autodrive::workflow::proto::Vector2f* release_raw_position();
  ::autodrive::workflow::proto::Vector2f* mutable_raw_position();
  void set_allocated_raw_position(::autodrive::workflow::proto::Vector2f* raw_position);

  // .autodrive.workflow.proto.Vector2f world_position = 9;
  bool has_world_position() const;
  void clear_world_position();
  static const int kWorldPositionFieldNumber = 9;
  const ::autodrive::workflow::proto::Vector2f& world_position() const;
  ::autodrive::workflow::proto::Vector2f* release_world_position();
  ::autodrive::workflow::proto::Vector2f* mutable_world_position();
  void set_allocated_world_position(::autodrive::workflow::proto::Vector2f* world_position);

  // .autodrive.workflow.proto.Vector2f pos_noise = 10;
  bool has_pos_noise() const;
  void clear_pos_noise();
  static const int kPosNoiseFieldNumber = 10;
  const ::autodrive::workflow::proto::Vector2f& pos_noise() const;
  ::autodrive::workflow::proto::Vector2f* release_pos_noise();
  ::autodrive::workflow::proto::Vector2f* mutable_pos_noise();
  void set_allocated_pos_noise(::autodrive::workflow::proto::Vector2f* pos_noise);

  // .autodrive.workflow.proto.Vector2f state_pos = 11;
  bool has_state_pos() const;
  void clear_state_pos();
  static const int kStatePosFieldNumber = 11;
  const ::autodrive::workflow::proto::Vector2f& state_pos() const;
  ::autodrive::workflow::proto::Vector2f* release_state_pos();
  ::autodrive::workflow::proto::Vector2f* mutable_state_pos();
  void set_allocated_state_pos(::autodrive::workflow::proto::Vector2f* state_pos);

  // .autodrive.workflow.proto.Vector2f state_pos_noise = 12;
  bool has_state_pos_noise() const;
  void clear_state_pos_noise();
  static const int kStatePosNoiseFieldNumber = 12;
  const ::autodrive::workflow::proto::Vector2f& state_pos_noise() const;
  ::autodrive::workflow::proto::Vector2f* release_state_pos_noise();
  ::autodrive::workflow::proto::Vector2f* mutable_state_pos_noise();
  void set_allocated_state_pos_noise(::autodrive::workflow::proto::Vector2f* state_pos_noise);

  // .autodrive.workflow.proto.Vector2f state_speed = 13;
  bool has_state_speed() const;
  void clear_state_speed();
  static const int kStateSpeedFieldNumber = 13;
  const ::autodrive::workflow::proto::Vector2f& state_speed() const;
  ::autodrive::workflow::proto::Vector2f* release_state_speed();
  ::autodrive::workflow::proto::Vector2f* mutable_state_speed();
  void set_allocated_state_speed(::autodrive::workflow::proto::Vector2f* state_speed);

  // .autodrive.workflow.proto.Vector2f state_speed_noise = 14;
  bool has_state_speed_noise() const;
  void clear_state_speed_noise();
  static const int kStateSpeedNoiseFieldNumber = 14;
  const ::autodrive::workflow::proto::Vector2f& state_speed_noise() const;
  ::autodrive::workflow::proto::Vector2f* release_state_speed_noise();
  ::autodrive::workflow::proto::Vector2f* mutable_state_speed_noise();
  void set_allocated_state_speed_noise(::autodrive::workflow::proto::Vector2f* state_speed_noise);

  // uint32 speed_type = 1;
  void clear_speed_type();
  static const int kSpeedTypeFieldNumber = 1;
  ::google::protobuf::uint32 speed_type() const;
  void set_speed_type(::google::protobuf::uint32 value);

  // uint32 measure_type = 2;
  void clear_measure_type();
  static const int kMeasureTypeFieldNumber = 2;
  ::google::protobuf::uint32 measure_type() const;
  void set_measure_type(::google::protobuf::uint32 value);

  // bool measure_isvalid = 3;
  void clear_measure_isvalid();
  static const int kMeasureIsvalidFieldNumber = 3;
  bool measure_isvalid() const;
  void set_measure_isvalid(bool value);

  // float real_size = 4;
  void clear_real_size();
  static const int kRealSizeFieldNumber = 4;
  float real_size() const;
  void set_real_size(float value);

  // float img_x = 5;
  void clear_img_x();
  static const int kImgXFieldNumber = 5;
  float img_x() const;
  void set_img_x(float value);

  // float h = 6;
  void clear_h();
  static const int kHFieldNumber = 6;
  float h() const;
  void set_h(float value);

  // float w = 7;
  void clear_w();
  static const int kWFieldNumber = 7;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.SpeedResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector2f* raw_position_;
  ::autodrive::workflow::proto::Vector2f* world_position_;
  ::autodrive::workflow::proto::Vector2f* pos_noise_;
  ::autodrive::workflow::proto::Vector2f* state_pos_;
  ::autodrive::workflow::proto::Vector2f* state_pos_noise_;
  ::autodrive::workflow::proto::Vector2f* state_speed_;
  ::autodrive::workflow::proto::Vector2f* state_speed_noise_;
  ::google::protobuf::uint32 speed_type_;
  ::google::protobuf::uint32 measure_type_;
  bool measure_isvalid_;
  float real_size_;
  float img_x_;
  float h_;
  float w_;
  mutable int _cached_size_;
  friend struct ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::TableStruct;
  friend void ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSpeedResultImpl();
};
// -------------------------------------------------------------------

class SpeedDebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.SpeedDebugInfo) */ {
 public:
  SpeedDebugInfo();
  virtual ~SpeedDebugInfo();

  SpeedDebugInfo(const SpeedDebugInfo& from);

  inline SpeedDebugInfo& operator=(const SpeedDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedDebugInfo(SpeedDebugInfo&& from) noexcept
    : SpeedDebugInfo() {
    *this = ::std::move(from);
  }

  inline SpeedDebugInfo& operator=(SpeedDebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedDebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedDebugInfo* internal_default_instance() {
    return reinterpret_cast<const SpeedDebugInfo*>(
               &_SpeedDebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SpeedDebugInfo* other);
  friend void swap(SpeedDebugInfo& a, SpeedDebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedDebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedDebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedDebugInfo& from);
  void MergeFrom(const SpeedDebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedDebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.SpeedResult speed_results = 1;
  int speed_results_size() const;
  void clear_speed_results();
  static const int kSpeedResultsFieldNumber = 1;
  const ::autodrive::workflow::proto::SpeedResult& speed_results(int index) const;
  ::autodrive::workflow::proto::SpeedResult* mutable_speed_results(int index);
  ::autodrive::workflow::proto::SpeedResult* add_speed_results();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedResult >*
      mutable_speed_results();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedResult >&
      speed_results() const;

  // .autodrive.workflow.proto.Vector2f speed = 2;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  const ::autodrive::workflow::proto::Vector2f& speed() const;
  ::autodrive::workflow::proto::Vector2f* release_speed();
  ::autodrive::workflow::proto::Vector2f* mutable_speed();
  void set_allocated_speed(::autodrive::workflow::proto::Vector2f* speed);

  // .autodrive.workflow.proto.Vector2f speed_noise = 3;
  bool has_speed_noise() const;
  void clear_speed_noise();
  static const int kSpeedNoiseFieldNumber = 3;
  const ::autodrive::workflow::proto::Vector2f& speed_noise() const;
  ::autodrive::workflow::proto::Vector2f* release_speed_noise();
  ::autodrive::workflow::proto::Vector2f* mutable_speed_noise();
  void set_allocated_speed_noise(::autodrive::workflow::proto::Vector2f* speed_noise);

  // .autodrive.workflow.proto.Vector2f acc = 4;
  bool has_acc() const;
  void clear_acc();
  static const int kAccFieldNumber = 4;
  const ::autodrive::workflow::proto::Vector2f& acc() const;
  ::autodrive::workflow::proto::Vector2f* release_acc();
  ::autodrive::workflow::proto::Vector2f* mutable_acc();
  void set_allocated_acc(::autodrive::workflow::proto::Vector2f* acc);

  // .autodrive.workflow.proto.Vector2f acc_noise = 5;
  bool has_acc_noise() const;
  void clear_acc_noise();
  static const int kAccNoiseFieldNumber = 5;
  const ::autodrive::workflow::proto::Vector2f& acc_noise() const;
  ::autodrive::workflow::proto::Vector2f* release_acc_noise();
  ::autodrive::workflow::proto::Vector2f* mutable_acc_noise();
  void set_allocated_acc_noise(::autodrive::workflow::proto::Vector2f* acc_noise);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.SpeedDebugInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedResult > speed_results_;
  ::autodrive::workflow::proto::Vector2f* speed_;
  ::autodrive::workflow::proto::Vector2f* speed_noise_;
  ::autodrive::workflow::proto::Vector2f* acc_;
  ::autodrive::workflow::proto::Vector2f* acc_noise_;
  mutable int _cached_size_;
  friend struct ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::TableStruct;
  friend void ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSpeedDebugInfoImpl();
};
// -------------------------------------------------------------------

class SizeDebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.SizeDebugInfo) */ {
 public:
  SizeDebugInfo();
  virtual ~SizeDebugInfo();

  SizeDebugInfo(const SizeDebugInfo& from);

  inline SizeDebugInfo& operator=(const SizeDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SizeDebugInfo(SizeDebugInfo&& from) noexcept
    : SizeDebugInfo() {
    *this = ::std::move(from);
  }

  inline SizeDebugInfo& operator=(SizeDebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SizeDebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SizeDebugInfo* internal_default_instance() {
    return reinterpret_cast<const SizeDebugInfo*>(
               &_SizeDebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SizeDebugInfo* other);
  friend void swap(SizeDebugInfo& a, SizeDebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SizeDebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SizeDebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SizeDebugInfo& from);
  void MergeFrom(const SizeDebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SizeDebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 veh_type = 1;
  void clear_veh_type();
  static const int kVehTypeFieldNumber = 1;
  ::google::protobuf::uint32 veh_type() const;
  void set_veh_type(::google::protobuf::uint32 value);

  // float veh_type_conf = 2;
  void clear_veh_type_conf();
  static const int kVehTypeConfFieldNumber = 2;
  float veh_type_conf() const;
  void set_veh_type_conf(float value);

  // float H_measure_raw = 3;
  void clear_h_measure_raw();
  static const int kHMeasureRawFieldNumber = 3;
  float h_measure_raw() const;
  void set_h_measure_raw(float value);

  // float H_measure = 4;
  void clear_h_measure();
  static const int kHMeasureFieldNumber = 4;
  float h_measure() const;
  void set_h_measure(float value);

  // float H_measure_noise = 5;
  void clear_h_measure_noise();
  static const int kHMeasureNoiseFieldNumber = 5;
  float h_measure_noise() const;
  void set_h_measure_noise(float value);

  // float H_wh_measure_raw = 6;
  void clear_h_wh_measure_raw();
  static const int kHWhMeasureRawFieldNumber = 6;
  float h_wh_measure_raw() const;
  void set_h_wh_measure_raw(float value);

  // float H_wh_measure = 7;
  void clear_h_wh_measure();
  static const int kHWhMeasureFieldNumber = 7;
  float h_wh_measure() const;
  void set_h_wh_measure(float value);

  // float H_wh_measure_noise = 8;
  void clear_h_wh_measure_noise();
  static const int kHWhMeasureNoiseFieldNumber = 8;
  float h_wh_measure_noise() const;
  void set_h_wh_measure_noise(float value);

  // float H_3d_measure = 9;
  void clear_h_3d_measure();
  static const int kH3DMeasureFieldNumber = 9;
  float h_3d_measure() const;
  void set_h_3d_measure(float value);

  // float H_3d_measure_noise = 10;
  void clear_h_3d_measure_noise();
  static const int kH3DMeasureNoiseFieldNumber = 10;
  float h_3d_measure_noise() const;
  void set_h_3d_measure_noise(float value);

  // float W_3d_measure = 11;
  void clear_w_3d_measure();
  static const int kW3DMeasureFieldNumber = 11;
  float w_3d_measure() const;
  void set_w_3d_measure(float value);

  // float W_3d_measure_noise = 12;
  void clear_w_3d_measure_noise();
  static const int kW3DMeasureNoiseFieldNumber = 12;
  float w_3d_measure_noise() const;
  void set_w_3d_measure_noise(float value);

  // float L_3d_measure = 13;
  void clear_l_3d_measure();
  static const int kL3DMeasureFieldNumber = 13;
  float l_3d_measure() const;
  void set_l_3d_measure(float value);

  // float L_3d_measure_noise = 14;
  void clear_l_3d_measure_noise();
  static const int kL3DMeasureNoiseFieldNumber = 14;
  float l_3d_measure_noise() const;
  void set_l_3d_measure_noise(float value);

  // float W = 15;
  void clear_w();
  static const int kWFieldNumber = 15;
  float w() const;
  void set_w(float value);

  // float H = 16;
  void clear_h();
  static const int kHFieldNumber = 16;
  float h() const;
  void set_h(float value);

  // float L = 17;
  void clear_l();
  static const int kLFieldNumber = 17;
  float l() const;
  void set_l(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.SizeDebugInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 veh_type_;
  float veh_type_conf_;
  float h_measure_raw_;
  float h_measure_;
  float h_measure_noise_;
  float h_wh_measure_raw_;
  float h_wh_measure_;
  float h_wh_measure_noise_;
  float h_3d_measure_;
  float h_3d_measure_noise_;
  float w_3d_measure_;
  float w_3d_measure_noise_;
  float l_3d_measure_;
  float l_3d_measure_noise_;
  float w_;
  float h_;
  float l_;
  mutable int _cached_size_;
  friend struct ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::TableStruct;
  friend void ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsSizeDebugInfoImpl();
};
// -------------------------------------------------------------------

class YawDebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.YawDebugInfo) */ {
 public:
  YawDebugInfo();
  virtual ~YawDebugInfo();

  YawDebugInfo(const YawDebugInfo& from);

  inline YawDebugInfo& operator=(const YawDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YawDebugInfo(YawDebugInfo&& from) noexcept
    : YawDebugInfo() {
    *this = ::std::move(from);
  }

  inline YawDebugInfo& operator=(YawDebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const YawDebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YawDebugInfo* internal_default_instance() {
    return reinterpret_cast<const YawDebugInfo*>(
               &_YawDebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(YawDebugInfo* other);
  friend void swap(YawDebugInfo& a, YawDebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YawDebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  YawDebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YawDebugInfo& from);
  void MergeFrom(const YawDebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YawDebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 yaw_type = 1;
  void clear_yaw_type();
  static const int kYawTypeFieldNumber = 1;
  ::google::protobuf::uint32 yaw_type() const;
  void set_yaw_type(::google::protobuf::uint32 value);

  // float vcs_pi_measure_yaw = 2;
  void clear_vcs_pi_measure_yaw();
  static const int kVcsPiMeasureYawFieldNumber = 2;
  float vcs_pi_measure_yaw() const;
  void set_vcs_pi_measure_yaw(float value);

  // float world_pi_measure_yaw = 3;
  void clear_world_pi_measure_yaw();
  static const int kWorldPiMeasureYawFieldNumber = 3;
  float world_pi_measure_yaw() const;
  void set_world_pi_measure_yaw(float value);

  // float yaw_measure_var = 4;
  void clear_yaw_measure_var();
  static const int kYawMeasureVarFieldNumber = 4;
  float yaw_measure_var() const;
  void set_yaw_measure_var(float value);

  // float vcs_pi_yaw = 5;
  void clear_vcs_pi_yaw();
  static const int kVcsPiYawFieldNumber = 5;
  float vcs_pi_yaw() const;
  void set_vcs_pi_yaw(float value);

  // float world_pi_yaw = 6;
  void clear_world_pi_yaw();
  static const int kWorldPiYawFieldNumber = 6;
  float world_pi_yaw() const;
  void set_world_pi_yaw(float value);

  // float yaw_rate = 7;
  void clear_yaw_rate();
  static const int kYawRateFieldNumber = 7;
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // float yaw_var = 8;
  void clear_yaw_var();
  static const int kYawVarFieldNumber = 8;
  float yaw_var() const;
  void set_yaw_var(float value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.YawDebugInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 yaw_type_;
  float vcs_pi_measure_yaw_;
  float world_pi_measure_yaw_;
  float yaw_measure_var_;
  float vcs_pi_yaw_;
  float world_pi_yaw_;
  float yaw_rate_;
  float yaw_var_;
  mutable int _cached_size_;
  friend struct ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::TableStruct;
  friend void ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsYawDebugInfoImpl();
};
// -------------------------------------------------------------------

class DynamicObstacleDebugInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.DynamicObstacleDebugInfo) */ {
 public:
  DynamicObstacleDebugInfo();
  virtual ~DynamicObstacleDebugInfo();

  DynamicObstacleDebugInfo(const DynamicObstacleDebugInfo& from);

  inline DynamicObstacleDebugInfo& operator=(const DynamicObstacleDebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DynamicObstacleDebugInfo(DynamicObstacleDebugInfo&& from) noexcept
    : DynamicObstacleDebugInfo() {
    *this = ::std::move(from);
  }

  inline DynamicObstacleDebugInfo& operator=(DynamicObstacleDebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DynamicObstacleDebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicObstacleDebugInfo* internal_default_instance() {
    return reinterpret_cast<const DynamicObstacleDebugInfo*>(
               &_DynamicObstacleDebugInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DynamicObstacleDebugInfo* other);
  friend void swap(DynamicObstacleDebugInfo& a, DynamicObstacleDebugInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DynamicObstacleDebugInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DynamicObstacleDebugInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DynamicObstacleDebugInfo& from);
  void MergeFrom(const DynamicObstacleDebugInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DynamicObstacleDebugInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.PositionDebugInfo pos_debug_info = 4;
  bool has_pos_debug_info() const;
  void clear_pos_debug_info();
  static const int kPosDebugInfoFieldNumber = 4;
  const ::autodrive::workflow::proto::PositionDebugInfo& pos_debug_info() const;
  ::autodrive::workflow::proto::PositionDebugInfo* release_pos_debug_info();
  ::autodrive::workflow::proto::PositionDebugInfo* mutable_pos_debug_info();
  void set_allocated_pos_debug_info(::autodrive::workflow::proto::PositionDebugInfo* pos_debug_info);

  // .autodrive.workflow.proto.SpeedDebugInfo speed_debug_info = 5;
  bool has_speed_debug_info() const;
  void clear_speed_debug_info();
  static const int kSpeedDebugInfoFieldNumber = 5;
  const ::autodrive::workflow::proto::SpeedDebugInfo& speed_debug_info() const;
  ::autodrive::workflow::proto::SpeedDebugInfo* release_speed_debug_info();
  ::autodrive::workflow::proto::SpeedDebugInfo* mutable_speed_debug_info();
  void set_allocated_speed_debug_info(::autodrive::workflow::proto::SpeedDebugInfo* speed_debug_info);

  // .autodrive.workflow.proto.SizeDebugInfo size_debug_info = 6;
  bool has_size_debug_info() const;
  void clear_size_debug_info();
  static const int kSizeDebugInfoFieldNumber = 6;
  const ::autodrive::workflow::proto::SizeDebugInfo& size_debug_info() const;
  ::autodrive::workflow::proto::SizeDebugInfo* release_size_debug_info();
  ::autodrive::workflow::proto::SizeDebugInfo* mutable_size_debug_info();
  void set_allocated_size_debug_info(::autodrive::workflow::proto::SizeDebugInfo* size_debug_info);

  // .autodrive.workflow.proto.YawDebugInfo yaw_debug_info = 7;
  bool has_yaw_debug_info() const;
  void clear_yaw_debug_info();
  static const int kYawDebugInfoFieldNumber = 7;
  const ::autodrive::workflow::proto::YawDebugInfo& yaw_debug_info() const;
  ::autodrive::workflow::proto::YawDebugInfo* release_yaw_debug_info();
  ::autodrive::workflow::proto::YawDebugInfo* mutable_yaw_debug_info();
  void set_allocated_yaw_debug_info(::autodrive::workflow::proto::YawDebugInfo* yaw_debug_info);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 frame_id = 2;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  ::google::protobuf::int32 frame_id() const;
  void set_frame_id(::google::protobuf::int32 value);

  // int32 sensor_id = 3;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 3;
  ::google::protobuf::int32 sensor_id() const;
  void set_sensor_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.DynamicObstacleDebugInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::PositionDebugInfo* pos_debug_info_;
  ::autodrive::workflow::proto::SpeedDebugInfo* speed_debug_info_;
  ::autodrive::workflow::proto::SizeDebugInfo* size_debug_info_;
  ::autodrive::workflow::proto::YawDebugInfo* yaw_debug_info_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 frame_id_;
  ::google::protobuf::int32 sensor_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::TableStruct;
  friend void ::protobuf_dynamic_5fobstacle_5fdebug_5finfo_2eproto::InitDefaultsDynamicObstacleDebugInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionResult

// .autodrive.workflow.proto.Vector3f position = 1;
inline bool PositionResult::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& PositionResult::position() const {
  const ::autodrive::workflow::proto::Vector3f* p = position_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionResult.position)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* PositionResult::release_position() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.PositionResult.position)
  
  ::autodrive::workflow::proto::Vector3f* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* PositionResult::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.PositionResult.position)
  return position_;
}
inline void PositionResult::set_allocated_position(::autodrive::workflow::proto::Vector3f* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.PositionResult.position)
}

// .autodrive.workflow.proto.Vector3f var = 2;
inline bool PositionResult::has_var() const {
  return this != internal_default_instance() && var_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector3f& PositionResult::var() const {
  const ::autodrive::workflow::proto::Vector3f* p = var_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionResult.var)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector3f*>(
      &::autodrive::workflow::proto::_Vector3f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector3f* PositionResult::release_var() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.PositionResult.var)
  
  ::autodrive::workflow::proto::Vector3f* temp = var_;
  var_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector3f* PositionResult::mutable_var() {
  
  if (var_ == NULL) {
    var_ = new ::autodrive::workflow::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.PositionResult.var)
  return var_;
}
inline void PositionResult::set_allocated_var(::autodrive::workflow::proto::Vector3f* var) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(var_);
  }
  if (var) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      var = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, var, submessage_arena);
    }
    
  } else {
    
  }
  var_ = var;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.PositionResult.var)
}

// uint32 type = 3;
inline void PositionResult::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 PositionResult::type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionResult.type)
  return type_;
}
inline void PositionResult::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.PositionResult.type)
}

// -------------------------------------------------------------------

// PositionDebugInfo

// int32 in_sensors = 1;
inline void PositionDebugInfo::clear_in_sensors() {
  in_sensors_ = 0;
}
inline ::google::protobuf::int32 PositionDebugInfo::in_sensors() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionDebugInfo.in_sensors)
  return in_sensors_;
}
inline void PositionDebugInfo::set_in_sensors(::google::protobuf::int32 value) {
  
  in_sensors_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.PositionDebugInfo.in_sensors)
}

// int32 use_measures = 2;
inline void PositionDebugInfo::clear_use_measures() {
  use_measures_ = 0;
}
inline ::google::protobuf::int32 PositionDebugInfo::use_measures() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionDebugInfo.use_measures)
  return use_measures_;
}
inline void PositionDebugInfo::set_use_measures(::google::protobuf::int32 value) {
  
  use_measures_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.PositionDebugInfo.use_measures)
}

// repeated .autodrive.workflow.proto.PositionResult position_results = 3;
inline int PositionDebugInfo::position_results_size() const {
  return position_results_.size();
}
inline void PositionDebugInfo::clear_position_results() {
  position_results_.Clear();
}
inline const ::autodrive::workflow::proto::PositionResult& PositionDebugInfo::position_results(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionDebugInfo.position_results)
  return position_results_.Get(index);
}
inline ::autodrive::workflow::proto::PositionResult* PositionDebugInfo::mutable_position_results(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.PositionDebugInfo.position_results)
  return position_results_.Mutable(index);
}
inline ::autodrive::workflow::proto::PositionResult* PositionDebugInfo::add_position_results() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.PositionDebugInfo.position_results)
  return position_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::PositionResult >*
PositionDebugInfo::mutable_position_results() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.PositionDebugInfo.position_results)
  return &position_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::PositionResult >&
PositionDebugInfo::position_results() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.PositionDebugInfo.position_results)
  return position_results_;
}

// float speed = 4;
inline void PositionDebugInfo::clear_speed() {
  speed_ = 0;
}
inline float PositionDebugInfo::speed() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionDebugInfo.speed)
  return speed_;
}
inline void PositionDebugInfo::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.PositionDebugInfo.speed)
}

// .autodrive.workflow.proto.PositionResult fusion_pos = 5;
inline bool PositionDebugInfo::has_fusion_pos() const {
  return this != internal_default_instance() && fusion_pos_ != NULL;
}
inline void PositionDebugInfo::clear_fusion_pos() {
  if (GetArenaNoVirtual() == NULL && fusion_pos_ != NULL) {
    delete fusion_pos_;
  }
  fusion_pos_ = NULL;
}
inline const ::autodrive::workflow::proto::PositionResult& PositionDebugInfo::fusion_pos() const {
  const ::autodrive::workflow::proto::PositionResult* p = fusion_pos_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionDebugInfo.fusion_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::PositionResult*>(
      &::autodrive::workflow::proto::_PositionResult_default_instance_);
}
inline ::autodrive::workflow::proto::PositionResult* PositionDebugInfo::release_fusion_pos() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.PositionDebugInfo.fusion_pos)
  
  ::autodrive::workflow::proto::PositionResult* temp = fusion_pos_;
  fusion_pos_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::PositionResult* PositionDebugInfo::mutable_fusion_pos() {
  
  if (fusion_pos_ == NULL) {
    fusion_pos_ = new ::autodrive::workflow::proto::PositionResult;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.PositionDebugInfo.fusion_pos)
  return fusion_pos_;
}
inline void PositionDebugInfo::set_allocated_fusion_pos(::autodrive::workflow::proto::PositionResult* fusion_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fusion_pos_;
  }
  if (fusion_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fusion_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fusion_pos, submessage_arena);
    }
    
  } else {
    
  }
  fusion_pos_ = fusion_pos;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.PositionDebugInfo.fusion_pos)
}

// .autodrive.workflow.proto.PositionResult pre_pos = 6;
inline bool PositionDebugInfo::has_pre_pos() const {
  return this != internal_default_instance() && pre_pos_ != NULL;
}
inline void PositionDebugInfo::clear_pre_pos() {
  if (GetArenaNoVirtual() == NULL && pre_pos_ != NULL) {
    delete pre_pos_;
  }
  pre_pos_ = NULL;
}
inline const ::autodrive::workflow::proto::PositionResult& PositionDebugInfo::pre_pos() const {
  const ::autodrive::workflow::proto::PositionResult* p = pre_pos_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionDebugInfo.pre_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::PositionResult*>(
      &::autodrive::workflow::proto::_PositionResult_default_instance_);
}
inline ::autodrive::workflow::proto::PositionResult* PositionDebugInfo::release_pre_pos() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.PositionDebugInfo.pre_pos)
  
  ::autodrive::workflow::proto::PositionResult* temp = pre_pos_;
  pre_pos_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::PositionResult* PositionDebugInfo::mutable_pre_pos() {
  
  if (pre_pos_ == NULL) {
    pre_pos_ = new ::autodrive::workflow::proto::PositionResult;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.PositionDebugInfo.pre_pos)
  return pre_pos_;
}
inline void PositionDebugInfo::set_allocated_pre_pos(::autodrive::workflow::proto::PositionResult* pre_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pre_pos_;
  }
  if (pre_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pre_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pre_pos, submessage_arena);
    }
    
  } else {
    
  }
  pre_pos_ = pre_pos;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.PositionDebugInfo.pre_pos)
}

// .autodrive.workflow.proto.PositionResult post_pos = 7;
inline bool PositionDebugInfo::has_post_pos() const {
  return this != internal_default_instance() && post_pos_ != NULL;
}
inline void PositionDebugInfo::clear_post_pos() {
  if (GetArenaNoVirtual() == NULL && post_pos_ != NULL) {
    delete post_pos_;
  }
  post_pos_ = NULL;
}
inline const ::autodrive::workflow::proto::PositionResult& PositionDebugInfo::post_pos() const {
  const ::autodrive::workflow::proto::PositionResult* p = post_pos_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionDebugInfo.post_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::PositionResult*>(
      &::autodrive::workflow::proto::_PositionResult_default_instance_);
}
inline ::autodrive::workflow::proto::PositionResult* PositionDebugInfo::release_post_pos() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.PositionDebugInfo.post_pos)
  
  ::autodrive::workflow::proto::PositionResult* temp = post_pos_;
  post_pos_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::PositionResult* PositionDebugInfo::mutable_post_pos() {
  
  if (post_pos_ == NULL) {
    post_pos_ = new ::autodrive::workflow::proto::PositionResult;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.PositionDebugInfo.post_pos)
  return post_pos_;
}
inline void PositionDebugInfo::set_allocated_post_pos(::autodrive::workflow::proto::PositionResult* post_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete post_pos_;
  }
  if (post_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      post_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, post_pos, submessage_arena);
    }
    
  } else {
    
  }
  post_pos_ = post_pos;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.PositionDebugInfo.post_pos)
}

// int64 time_gap = 8;
inline void PositionDebugInfo::clear_time_gap() {
  time_gap_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PositionDebugInfo::time_gap() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.PositionDebugInfo.time_gap)
  return time_gap_;
}
inline void PositionDebugInfo::set_time_gap(::google::protobuf::int64 value) {
  
  time_gap_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.PositionDebugInfo.time_gap)
}

// -------------------------------------------------------------------

// SpeedResult

// uint32 speed_type = 1;
inline void SpeedResult::clear_speed_type() {
  speed_type_ = 0u;
}
inline ::google::protobuf::uint32 SpeedResult::speed_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.speed_type)
  return speed_type_;
}
inline void SpeedResult::set_speed_type(::google::protobuf::uint32 value) {
  
  speed_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpeedResult.speed_type)
}

// uint32 measure_type = 2;
inline void SpeedResult::clear_measure_type() {
  measure_type_ = 0u;
}
inline ::google::protobuf::uint32 SpeedResult::measure_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.measure_type)
  return measure_type_;
}
inline void SpeedResult::set_measure_type(::google::protobuf::uint32 value) {
  
  measure_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpeedResult.measure_type)
}

// bool measure_isvalid = 3;
inline void SpeedResult::clear_measure_isvalid() {
  measure_isvalid_ = false;
}
inline bool SpeedResult::measure_isvalid() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.measure_isvalid)
  return measure_isvalid_;
}
inline void SpeedResult::set_measure_isvalid(bool value) {
  
  measure_isvalid_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpeedResult.measure_isvalid)
}

// float real_size = 4;
inline void SpeedResult::clear_real_size() {
  real_size_ = 0;
}
inline float SpeedResult::real_size() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.real_size)
  return real_size_;
}
inline void SpeedResult::set_real_size(float value) {
  
  real_size_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpeedResult.real_size)
}

// float img_x = 5;
inline void SpeedResult::clear_img_x() {
  img_x_ = 0;
}
inline float SpeedResult::img_x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.img_x)
  return img_x_;
}
inline void SpeedResult::set_img_x(float value) {
  
  img_x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpeedResult.img_x)
}

// float h = 6;
inline void SpeedResult::clear_h() {
  h_ = 0;
}
inline float SpeedResult::h() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.h)
  return h_;
}
inline void SpeedResult::set_h(float value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpeedResult.h)
}

// float w = 7;
inline void SpeedResult::clear_w() {
  w_ = 0;
}
inline float SpeedResult::w() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.w)
  return w_;
}
inline void SpeedResult::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpeedResult.w)
}

// .autodrive.workflow.proto.Vector2f raw_position = 8;
inline bool SpeedResult::has_raw_position() const {
  return this != internal_default_instance() && raw_position_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedResult::raw_position() const {
  const ::autodrive::workflow::proto::Vector2f* p = raw_position_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.raw_position)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::release_raw_position() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedResult.raw_position)
  
  ::autodrive::workflow::proto::Vector2f* temp = raw_position_;
  raw_position_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::mutable_raw_position() {
  
  if (raw_position_ == NULL) {
    raw_position_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedResult.raw_position)
  return raw_position_;
}
inline void SpeedResult::set_allocated_raw_position(::autodrive::workflow::proto::Vector2f* raw_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(raw_position_);
  }
  if (raw_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      raw_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raw_position, submessage_arena);
    }
    
  } else {
    
  }
  raw_position_ = raw_position;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedResult.raw_position)
}

// .autodrive.workflow.proto.Vector2f world_position = 9;
inline bool SpeedResult::has_world_position() const {
  return this != internal_default_instance() && world_position_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedResult::world_position() const {
  const ::autodrive::workflow::proto::Vector2f* p = world_position_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.world_position)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::release_world_position() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedResult.world_position)
  
  ::autodrive::workflow::proto::Vector2f* temp = world_position_;
  world_position_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::mutable_world_position() {
  
  if (world_position_ == NULL) {
    world_position_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedResult.world_position)
  return world_position_;
}
inline void SpeedResult::set_allocated_world_position(::autodrive::workflow::proto::Vector2f* world_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(world_position_);
  }
  if (world_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      world_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, world_position, submessage_arena);
    }
    
  } else {
    
  }
  world_position_ = world_position;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedResult.world_position)
}

// .autodrive.workflow.proto.Vector2f pos_noise = 10;
inline bool SpeedResult::has_pos_noise() const {
  return this != internal_default_instance() && pos_noise_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedResult::pos_noise() const {
  const ::autodrive::workflow::proto::Vector2f* p = pos_noise_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.pos_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::release_pos_noise() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedResult.pos_noise)
  
  ::autodrive::workflow::proto::Vector2f* temp = pos_noise_;
  pos_noise_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::mutable_pos_noise() {
  
  if (pos_noise_ == NULL) {
    pos_noise_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedResult.pos_noise)
  return pos_noise_;
}
inline void SpeedResult::set_allocated_pos_noise(::autodrive::workflow::proto::Vector2f* pos_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_noise_);
  }
  if (pos_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos_noise, submessage_arena);
    }
    
  } else {
    
  }
  pos_noise_ = pos_noise;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedResult.pos_noise)
}

// .autodrive.workflow.proto.Vector2f state_pos = 11;
inline bool SpeedResult::has_state_pos() const {
  return this != internal_default_instance() && state_pos_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedResult::state_pos() const {
  const ::autodrive::workflow::proto::Vector2f* p = state_pos_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.state_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::release_state_pos() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedResult.state_pos)
  
  ::autodrive::workflow::proto::Vector2f* temp = state_pos_;
  state_pos_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::mutable_state_pos() {
  
  if (state_pos_ == NULL) {
    state_pos_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedResult.state_pos)
  return state_pos_;
}
inline void SpeedResult::set_allocated_state_pos(::autodrive::workflow::proto::Vector2f* state_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_pos_);
  }
  if (state_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_pos, submessage_arena);
    }
    
  } else {
    
  }
  state_pos_ = state_pos;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedResult.state_pos)
}

// .autodrive.workflow.proto.Vector2f state_pos_noise = 12;
inline bool SpeedResult::has_state_pos_noise() const {
  return this != internal_default_instance() && state_pos_noise_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedResult::state_pos_noise() const {
  const ::autodrive::workflow::proto::Vector2f* p = state_pos_noise_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.state_pos_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::release_state_pos_noise() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedResult.state_pos_noise)
  
  ::autodrive::workflow::proto::Vector2f* temp = state_pos_noise_;
  state_pos_noise_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::mutable_state_pos_noise() {
  
  if (state_pos_noise_ == NULL) {
    state_pos_noise_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedResult.state_pos_noise)
  return state_pos_noise_;
}
inline void SpeedResult::set_allocated_state_pos_noise(::autodrive::workflow::proto::Vector2f* state_pos_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_pos_noise_);
  }
  if (state_pos_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state_pos_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_pos_noise, submessage_arena);
    }
    
  } else {
    
  }
  state_pos_noise_ = state_pos_noise;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedResult.state_pos_noise)
}

// .autodrive.workflow.proto.Vector2f state_speed = 13;
inline bool SpeedResult::has_state_speed() const {
  return this != internal_default_instance() && state_speed_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedResult::state_speed() const {
  const ::autodrive::workflow::proto::Vector2f* p = state_speed_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.state_speed)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::release_state_speed() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedResult.state_speed)
  
  ::autodrive::workflow::proto::Vector2f* temp = state_speed_;
  state_speed_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::mutable_state_speed() {
  
  if (state_speed_ == NULL) {
    state_speed_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedResult.state_speed)
  return state_speed_;
}
inline void SpeedResult::set_allocated_state_speed(::autodrive::workflow::proto::Vector2f* state_speed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_speed_);
  }
  if (state_speed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state_speed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_speed, submessage_arena);
    }
    
  } else {
    
  }
  state_speed_ = state_speed;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedResult.state_speed)
}

// .autodrive.workflow.proto.Vector2f state_speed_noise = 14;
inline bool SpeedResult::has_state_speed_noise() const {
  return this != internal_default_instance() && state_speed_noise_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedResult::state_speed_noise() const {
  const ::autodrive::workflow::proto::Vector2f* p = state_speed_noise_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedResult.state_speed_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::release_state_speed_noise() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedResult.state_speed_noise)
  
  ::autodrive::workflow::proto::Vector2f* temp = state_speed_noise_;
  state_speed_noise_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedResult::mutable_state_speed_noise() {
  
  if (state_speed_noise_ == NULL) {
    state_speed_noise_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedResult.state_speed_noise)
  return state_speed_noise_;
}
inline void SpeedResult::set_allocated_state_speed_noise(::autodrive::workflow::proto::Vector2f* state_speed_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_speed_noise_);
  }
  if (state_speed_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state_speed_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state_speed_noise, submessage_arena);
    }
    
  } else {
    
  }
  state_speed_noise_ = state_speed_noise;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedResult.state_speed_noise)
}

// -------------------------------------------------------------------

// SpeedDebugInfo

// repeated .autodrive.workflow.proto.SpeedResult speed_results = 1;
inline int SpeedDebugInfo::speed_results_size() const {
  return speed_results_.size();
}
inline void SpeedDebugInfo::clear_speed_results() {
  speed_results_.Clear();
}
inline const ::autodrive::workflow::proto::SpeedResult& SpeedDebugInfo::speed_results(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedDebugInfo.speed_results)
  return speed_results_.Get(index);
}
inline ::autodrive::workflow::proto::SpeedResult* SpeedDebugInfo::mutable_speed_results(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedDebugInfo.speed_results)
  return speed_results_.Mutable(index);
}
inline ::autodrive::workflow::proto::SpeedResult* SpeedDebugInfo::add_speed_results() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.SpeedDebugInfo.speed_results)
  return speed_results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedResult >*
SpeedDebugInfo::mutable_speed_results() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.SpeedDebugInfo.speed_results)
  return &speed_results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedResult >&
SpeedDebugInfo::speed_results() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.SpeedDebugInfo.speed_results)
  return speed_results_;
}

// .autodrive.workflow.proto.Vector2f speed = 2;
inline bool SpeedDebugInfo::has_speed() const {
  return this != internal_default_instance() && speed_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedDebugInfo::speed() const {
  const ::autodrive::workflow::proto::Vector2f* p = speed_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedDebugInfo.speed)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedDebugInfo::release_speed() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedDebugInfo.speed)
  
  ::autodrive::workflow::proto::Vector2f* temp = speed_;
  speed_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedDebugInfo::mutable_speed() {
  
  if (speed_ == NULL) {
    speed_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedDebugInfo.speed)
  return speed_;
}
inline void SpeedDebugInfo::set_allocated_speed(::autodrive::workflow::proto::Vector2f* speed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(speed_);
  }
  if (speed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedDebugInfo.speed)
}

// .autodrive.workflow.proto.Vector2f speed_noise = 3;
inline bool SpeedDebugInfo::has_speed_noise() const {
  return this != internal_default_instance() && speed_noise_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedDebugInfo::speed_noise() const {
  const ::autodrive::workflow::proto::Vector2f* p = speed_noise_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedDebugInfo.speed_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedDebugInfo::release_speed_noise() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedDebugInfo.speed_noise)
  
  ::autodrive::workflow::proto::Vector2f* temp = speed_noise_;
  speed_noise_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedDebugInfo::mutable_speed_noise() {
  
  if (speed_noise_ == NULL) {
    speed_noise_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedDebugInfo.speed_noise)
  return speed_noise_;
}
inline void SpeedDebugInfo::set_allocated_speed_noise(::autodrive::workflow::proto::Vector2f* speed_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(speed_noise_);
  }
  if (speed_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_noise, submessage_arena);
    }
    
  } else {
    
  }
  speed_noise_ = speed_noise;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedDebugInfo.speed_noise)
}

// .autodrive.workflow.proto.Vector2f acc = 4;
inline bool SpeedDebugInfo::has_acc() const {
  return this != internal_default_instance() && acc_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedDebugInfo::acc() const {
  const ::autodrive::workflow::proto::Vector2f* p = acc_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedDebugInfo.acc)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedDebugInfo::release_acc() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedDebugInfo.acc)
  
  ::autodrive::workflow::proto::Vector2f* temp = acc_;
  acc_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedDebugInfo::mutable_acc() {
  
  if (acc_ == NULL) {
    acc_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedDebugInfo.acc)
  return acc_;
}
inline void SpeedDebugInfo::set_allocated_acc(::autodrive::workflow::proto::Vector2f* acc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acc_);
  }
  if (acc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    
  } else {
    
  }
  acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedDebugInfo.acc)
}

// .autodrive.workflow.proto.Vector2f acc_noise = 5;
inline bool SpeedDebugInfo::has_acc_noise() const {
  return this != internal_default_instance() && acc_noise_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedDebugInfo::acc_noise() const {
  const ::autodrive::workflow::proto::Vector2f* p = acc_noise_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedDebugInfo.acc_noise)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedDebugInfo::release_acc_noise() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedDebugInfo.acc_noise)
  
  ::autodrive::workflow::proto::Vector2f* temp = acc_noise_;
  acc_noise_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedDebugInfo::mutable_acc_noise() {
  
  if (acc_noise_ == NULL) {
    acc_noise_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedDebugInfo.acc_noise)
  return acc_noise_;
}
inline void SpeedDebugInfo::set_allocated_acc_noise(::autodrive::workflow::proto::Vector2f* acc_noise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acc_noise_);
  }
  if (acc_noise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acc_noise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acc_noise, submessage_arena);
    }
    
  } else {
    
  }
  acc_noise_ = acc_noise;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedDebugInfo.acc_noise)
}

// -------------------------------------------------------------------

// SizeDebugInfo

// uint32 veh_type = 1;
inline void SizeDebugInfo::clear_veh_type() {
  veh_type_ = 0u;
}
inline ::google::protobuf::uint32 SizeDebugInfo::veh_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.veh_type)
  return veh_type_;
}
inline void SizeDebugInfo::set_veh_type(::google::protobuf::uint32 value) {
  
  veh_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.veh_type)
}

// float veh_type_conf = 2;
inline void SizeDebugInfo::clear_veh_type_conf() {
  veh_type_conf_ = 0;
}
inline float SizeDebugInfo::veh_type_conf() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.veh_type_conf)
  return veh_type_conf_;
}
inline void SizeDebugInfo::set_veh_type_conf(float value) {
  
  veh_type_conf_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.veh_type_conf)
}

// float H_measure_raw = 3;
inline void SizeDebugInfo::clear_h_measure_raw() {
  h_measure_raw_ = 0;
}
inline float SizeDebugInfo::h_measure_raw() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.H_measure_raw)
  return h_measure_raw_;
}
inline void SizeDebugInfo::set_h_measure_raw(float value) {
  
  h_measure_raw_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.H_measure_raw)
}

// float H_measure = 4;
inline void SizeDebugInfo::clear_h_measure() {
  h_measure_ = 0;
}
inline float SizeDebugInfo::h_measure() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.H_measure)
  return h_measure_;
}
inline void SizeDebugInfo::set_h_measure(float value) {
  
  h_measure_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.H_measure)
}

// float H_measure_noise = 5;
inline void SizeDebugInfo::clear_h_measure_noise() {
  h_measure_noise_ = 0;
}
inline float SizeDebugInfo::h_measure_noise() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.H_measure_noise)
  return h_measure_noise_;
}
inline void SizeDebugInfo::set_h_measure_noise(float value) {
  
  h_measure_noise_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.H_measure_noise)
}

// float H_wh_measure_raw = 6;
inline void SizeDebugInfo::clear_h_wh_measure_raw() {
  h_wh_measure_raw_ = 0;
}
inline float SizeDebugInfo::h_wh_measure_raw() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.H_wh_measure_raw)
  return h_wh_measure_raw_;
}
inline void SizeDebugInfo::set_h_wh_measure_raw(float value) {
  
  h_wh_measure_raw_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.H_wh_measure_raw)
}

// float H_wh_measure = 7;
inline void SizeDebugInfo::clear_h_wh_measure() {
  h_wh_measure_ = 0;
}
inline float SizeDebugInfo::h_wh_measure() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.H_wh_measure)
  return h_wh_measure_;
}
inline void SizeDebugInfo::set_h_wh_measure(float value) {
  
  h_wh_measure_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.H_wh_measure)
}

// float H_wh_measure_noise = 8;
inline void SizeDebugInfo::clear_h_wh_measure_noise() {
  h_wh_measure_noise_ = 0;
}
inline float SizeDebugInfo::h_wh_measure_noise() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.H_wh_measure_noise)
  return h_wh_measure_noise_;
}
inline void SizeDebugInfo::set_h_wh_measure_noise(float value) {
  
  h_wh_measure_noise_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.H_wh_measure_noise)
}

// float H_3d_measure = 9;
inline void SizeDebugInfo::clear_h_3d_measure() {
  h_3d_measure_ = 0;
}
inline float SizeDebugInfo::h_3d_measure() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.H_3d_measure)
  return h_3d_measure_;
}
inline void SizeDebugInfo::set_h_3d_measure(float value) {
  
  h_3d_measure_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.H_3d_measure)
}

// float H_3d_measure_noise = 10;
inline void SizeDebugInfo::clear_h_3d_measure_noise() {
  h_3d_measure_noise_ = 0;
}
inline float SizeDebugInfo::h_3d_measure_noise() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.H_3d_measure_noise)
  return h_3d_measure_noise_;
}
inline void SizeDebugInfo::set_h_3d_measure_noise(float value) {
  
  h_3d_measure_noise_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.H_3d_measure_noise)
}

// float W_3d_measure = 11;
inline void SizeDebugInfo::clear_w_3d_measure() {
  w_3d_measure_ = 0;
}
inline float SizeDebugInfo::w_3d_measure() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.W_3d_measure)
  return w_3d_measure_;
}
inline void SizeDebugInfo::set_w_3d_measure(float value) {
  
  w_3d_measure_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.W_3d_measure)
}

// float W_3d_measure_noise = 12;
inline void SizeDebugInfo::clear_w_3d_measure_noise() {
  w_3d_measure_noise_ = 0;
}
inline float SizeDebugInfo::w_3d_measure_noise() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.W_3d_measure_noise)
  return w_3d_measure_noise_;
}
inline void SizeDebugInfo::set_w_3d_measure_noise(float value) {
  
  w_3d_measure_noise_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.W_3d_measure_noise)
}

// float L_3d_measure = 13;
inline void SizeDebugInfo::clear_l_3d_measure() {
  l_3d_measure_ = 0;
}
inline float SizeDebugInfo::l_3d_measure() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.L_3d_measure)
  return l_3d_measure_;
}
inline void SizeDebugInfo::set_l_3d_measure(float value) {
  
  l_3d_measure_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.L_3d_measure)
}

// float L_3d_measure_noise = 14;
inline void SizeDebugInfo::clear_l_3d_measure_noise() {
  l_3d_measure_noise_ = 0;
}
inline float SizeDebugInfo::l_3d_measure_noise() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.L_3d_measure_noise)
  return l_3d_measure_noise_;
}
inline void SizeDebugInfo::set_l_3d_measure_noise(float value) {
  
  l_3d_measure_noise_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.L_3d_measure_noise)
}

// float W = 15;
inline void SizeDebugInfo::clear_w() {
  w_ = 0;
}
inline float SizeDebugInfo::w() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.W)
  return w_;
}
inline void SizeDebugInfo::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.W)
}

// float H = 16;
inline void SizeDebugInfo::clear_h() {
  h_ = 0;
}
inline float SizeDebugInfo::h() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.H)
  return h_;
}
inline void SizeDebugInfo::set_h(float value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.H)
}

// float L = 17;
inline void SizeDebugInfo::clear_l() {
  l_ = 0;
}
inline float SizeDebugInfo::l() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SizeDebugInfo.L)
  return l_;
}
inline void SizeDebugInfo::set_l(float value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SizeDebugInfo.L)
}

// -------------------------------------------------------------------

// YawDebugInfo

// uint32 yaw_type = 1;
inline void YawDebugInfo::clear_yaw_type() {
  yaw_type_ = 0u;
}
inline ::google::protobuf::uint32 YawDebugInfo::yaw_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.YawDebugInfo.yaw_type)
  return yaw_type_;
}
inline void YawDebugInfo::set_yaw_type(::google::protobuf::uint32 value) {
  
  yaw_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.YawDebugInfo.yaw_type)
}

// float vcs_pi_measure_yaw = 2;
inline void YawDebugInfo::clear_vcs_pi_measure_yaw() {
  vcs_pi_measure_yaw_ = 0;
}
inline float YawDebugInfo::vcs_pi_measure_yaw() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.YawDebugInfo.vcs_pi_measure_yaw)
  return vcs_pi_measure_yaw_;
}
inline void YawDebugInfo::set_vcs_pi_measure_yaw(float value) {
  
  vcs_pi_measure_yaw_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.YawDebugInfo.vcs_pi_measure_yaw)
}

// float world_pi_measure_yaw = 3;
inline void YawDebugInfo::clear_world_pi_measure_yaw() {
  world_pi_measure_yaw_ = 0;
}
inline float YawDebugInfo::world_pi_measure_yaw() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.YawDebugInfo.world_pi_measure_yaw)
  return world_pi_measure_yaw_;
}
inline void YawDebugInfo::set_world_pi_measure_yaw(float value) {
  
  world_pi_measure_yaw_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.YawDebugInfo.world_pi_measure_yaw)
}

// float yaw_measure_var = 4;
inline void YawDebugInfo::clear_yaw_measure_var() {
  yaw_measure_var_ = 0;
}
inline float YawDebugInfo::yaw_measure_var() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.YawDebugInfo.yaw_measure_var)
  return yaw_measure_var_;
}
inline void YawDebugInfo::set_yaw_measure_var(float value) {
  
  yaw_measure_var_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.YawDebugInfo.yaw_measure_var)
}

// float vcs_pi_yaw = 5;
inline void YawDebugInfo::clear_vcs_pi_yaw() {
  vcs_pi_yaw_ = 0;
}
inline float YawDebugInfo::vcs_pi_yaw() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.YawDebugInfo.vcs_pi_yaw)
  return vcs_pi_yaw_;
}
inline void YawDebugInfo::set_vcs_pi_yaw(float value) {
  
  vcs_pi_yaw_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.YawDebugInfo.vcs_pi_yaw)
}

// float world_pi_yaw = 6;
inline void YawDebugInfo::clear_world_pi_yaw() {
  world_pi_yaw_ = 0;
}
inline float YawDebugInfo::world_pi_yaw() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.YawDebugInfo.world_pi_yaw)
  return world_pi_yaw_;
}
inline void YawDebugInfo::set_world_pi_yaw(float value) {
  
  world_pi_yaw_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.YawDebugInfo.world_pi_yaw)
}

// float yaw_rate = 7;
inline void YawDebugInfo::clear_yaw_rate() {
  yaw_rate_ = 0;
}
inline float YawDebugInfo::yaw_rate() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.YawDebugInfo.yaw_rate)
  return yaw_rate_;
}
inline void YawDebugInfo::set_yaw_rate(float value) {
  
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.YawDebugInfo.yaw_rate)
}

// float yaw_var = 8;
inline void YawDebugInfo::clear_yaw_var() {
  yaw_var_ = 0;
}
inline float YawDebugInfo::yaw_var() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.YawDebugInfo.yaw_var)
  return yaw_var_;
}
inline void YawDebugInfo::set_yaw_var(float value) {
  
  yaw_var_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.YawDebugInfo.yaw_var)
}

// -------------------------------------------------------------------

// DynamicObstacleDebugInfo

// int32 id = 1;
inline void DynamicObstacleDebugInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 DynamicObstacleDebugInfo::id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.DynamicObstacleDebugInfo.id)
  return id_;
}
inline void DynamicObstacleDebugInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.DynamicObstacleDebugInfo.id)
}

// int32 frame_id = 2;
inline void DynamicObstacleDebugInfo::clear_frame_id() {
  frame_id_ = 0;
}
inline ::google::protobuf::int32 DynamicObstacleDebugInfo::frame_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.DynamicObstacleDebugInfo.frame_id)
  return frame_id_;
}
inline void DynamicObstacleDebugInfo::set_frame_id(::google::protobuf::int32 value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.DynamicObstacleDebugInfo.frame_id)
}

// int32 sensor_id = 3;
inline void DynamicObstacleDebugInfo::clear_sensor_id() {
  sensor_id_ = 0;
}
inline ::google::protobuf::int32 DynamicObstacleDebugInfo::sensor_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.DynamicObstacleDebugInfo.sensor_id)
  return sensor_id_;
}
inline void DynamicObstacleDebugInfo::set_sensor_id(::google::protobuf::int32 value) {
  
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.DynamicObstacleDebugInfo.sensor_id)
}

// .autodrive.workflow.proto.PositionDebugInfo pos_debug_info = 4;
inline bool DynamicObstacleDebugInfo::has_pos_debug_info() const {
  return this != internal_default_instance() && pos_debug_info_ != NULL;
}
inline void DynamicObstacleDebugInfo::clear_pos_debug_info() {
  if (GetArenaNoVirtual() == NULL && pos_debug_info_ != NULL) {
    delete pos_debug_info_;
  }
  pos_debug_info_ = NULL;
}
inline const ::autodrive::workflow::proto::PositionDebugInfo& DynamicObstacleDebugInfo::pos_debug_info() const {
  const ::autodrive::workflow::proto::PositionDebugInfo* p = pos_debug_info_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.DynamicObstacleDebugInfo.pos_debug_info)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::PositionDebugInfo*>(
      &::autodrive::workflow::proto::_PositionDebugInfo_default_instance_);
}
inline ::autodrive::workflow::proto::PositionDebugInfo* DynamicObstacleDebugInfo::release_pos_debug_info() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.DynamicObstacleDebugInfo.pos_debug_info)
  
  ::autodrive::workflow::proto::PositionDebugInfo* temp = pos_debug_info_;
  pos_debug_info_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::PositionDebugInfo* DynamicObstacleDebugInfo::mutable_pos_debug_info() {
  
  if (pos_debug_info_ == NULL) {
    pos_debug_info_ = new ::autodrive::workflow::proto::PositionDebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.DynamicObstacleDebugInfo.pos_debug_info)
  return pos_debug_info_;
}
inline void DynamicObstacleDebugInfo::set_allocated_pos_debug_info(::autodrive::workflow::proto::PositionDebugInfo* pos_debug_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_debug_info_;
  }
  if (pos_debug_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos_debug_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos_debug_info, submessage_arena);
    }
    
  } else {
    
  }
  pos_debug_info_ = pos_debug_info;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.DynamicObstacleDebugInfo.pos_debug_info)
}

// .autodrive.workflow.proto.SpeedDebugInfo speed_debug_info = 5;
inline bool DynamicObstacleDebugInfo::has_speed_debug_info() const {
  return this != internal_default_instance() && speed_debug_info_ != NULL;
}
inline void DynamicObstacleDebugInfo::clear_speed_debug_info() {
  if (GetArenaNoVirtual() == NULL && speed_debug_info_ != NULL) {
    delete speed_debug_info_;
  }
  speed_debug_info_ = NULL;
}
inline const ::autodrive::workflow::proto::SpeedDebugInfo& DynamicObstacleDebugInfo::speed_debug_info() const {
  const ::autodrive::workflow::proto::SpeedDebugInfo* p = speed_debug_info_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.DynamicObstacleDebugInfo.speed_debug_info)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::SpeedDebugInfo*>(
      &::autodrive::workflow::proto::_SpeedDebugInfo_default_instance_);
}
inline ::autodrive::workflow::proto::SpeedDebugInfo* DynamicObstacleDebugInfo::release_speed_debug_info() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.DynamicObstacleDebugInfo.speed_debug_info)
  
  ::autodrive::workflow::proto::SpeedDebugInfo* temp = speed_debug_info_;
  speed_debug_info_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::SpeedDebugInfo* DynamicObstacleDebugInfo::mutable_speed_debug_info() {
  
  if (speed_debug_info_ == NULL) {
    speed_debug_info_ = new ::autodrive::workflow::proto::SpeedDebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.DynamicObstacleDebugInfo.speed_debug_info)
  return speed_debug_info_;
}
inline void DynamicObstacleDebugInfo::set_allocated_speed_debug_info(::autodrive::workflow::proto::SpeedDebugInfo* speed_debug_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete speed_debug_info_;
  }
  if (speed_debug_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed_debug_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_debug_info, submessage_arena);
    }
    
  } else {
    
  }
  speed_debug_info_ = speed_debug_info;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.DynamicObstacleDebugInfo.speed_debug_info)
}

// .autodrive.workflow.proto.SizeDebugInfo size_debug_info = 6;
inline bool DynamicObstacleDebugInfo::has_size_debug_info() const {
  return this != internal_default_instance() && size_debug_info_ != NULL;
}
inline void DynamicObstacleDebugInfo::clear_size_debug_info() {
  if (GetArenaNoVirtual() == NULL && size_debug_info_ != NULL) {
    delete size_debug_info_;
  }
  size_debug_info_ = NULL;
}
inline const ::autodrive::workflow::proto::SizeDebugInfo& DynamicObstacleDebugInfo::size_debug_info() const {
  const ::autodrive::workflow::proto::SizeDebugInfo* p = size_debug_info_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.DynamicObstacleDebugInfo.size_debug_info)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::SizeDebugInfo*>(
      &::autodrive::workflow::proto::_SizeDebugInfo_default_instance_);
}
inline ::autodrive::workflow::proto::SizeDebugInfo* DynamicObstacleDebugInfo::release_size_debug_info() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.DynamicObstacleDebugInfo.size_debug_info)
  
  ::autodrive::workflow::proto::SizeDebugInfo* temp = size_debug_info_;
  size_debug_info_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::SizeDebugInfo* DynamicObstacleDebugInfo::mutable_size_debug_info() {
  
  if (size_debug_info_ == NULL) {
    size_debug_info_ = new ::autodrive::workflow::proto::SizeDebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.DynamicObstacleDebugInfo.size_debug_info)
  return size_debug_info_;
}
inline void DynamicObstacleDebugInfo::set_allocated_size_debug_info(::autodrive::workflow::proto::SizeDebugInfo* size_debug_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete size_debug_info_;
  }
  if (size_debug_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      size_debug_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, size_debug_info, submessage_arena);
    }
    
  } else {
    
  }
  size_debug_info_ = size_debug_info;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.DynamicObstacleDebugInfo.size_debug_info)
}

// .autodrive.workflow.proto.YawDebugInfo yaw_debug_info = 7;
inline bool DynamicObstacleDebugInfo::has_yaw_debug_info() const {
  return this != internal_default_instance() && yaw_debug_info_ != NULL;
}
inline void DynamicObstacleDebugInfo::clear_yaw_debug_info() {
  if (GetArenaNoVirtual() == NULL && yaw_debug_info_ != NULL) {
    delete yaw_debug_info_;
  }
  yaw_debug_info_ = NULL;
}
inline const ::autodrive::workflow::proto::YawDebugInfo& DynamicObstacleDebugInfo::yaw_debug_info() const {
  const ::autodrive::workflow::proto::YawDebugInfo* p = yaw_debug_info_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.DynamicObstacleDebugInfo.yaw_debug_info)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::YawDebugInfo*>(
      &::autodrive::workflow::proto::_YawDebugInfo_default_instance_);
}
inline ::autodrive::workflow::proto::YawDebugInfo* DynamicObstacleDebugInfo::release_yaw_debug_info() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.DynamicObstacleDebugInfo.yaw_debug_info)
  
  ::autodrive::workflow::proto::YawDebugInfo* temp = yaw_debug_info_;
  yaw_debug_info_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::YawDebugInfo* DynamicObstacleDebugInfo::mutable_yaw_debug_info() {
  
  if (yaw_debug_info_ == NULL) {
    yaw_debug_info_ = new ::autodrive::workflow::proto::YawDebugInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.DynamicObstacleDebugInfo.yaw_debug_info)
  return yaw_debug_info_;
}
inline void DynamicObstacleDebugInfo::set_allocated_yaw_debug_info(::autodrive::workflow::proto::YawDebugInfo* yaw_debug_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete yaw_debug_info_;
  }
  if (yaw_debug_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yaw_debug_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yaw_debug_info, submessage_arena);
    }
    
  } else {
    
  }
  yaw_debug_info_ = yaw_debug_info;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.DynamicObstacleDebugInfo.yaw_debug_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dynamic_5fobstacle_5fdebug_5finfo_2eproto__INCLUDED
