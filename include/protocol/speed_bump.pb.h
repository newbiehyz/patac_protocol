// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speed_bump.proto

#ifndef PROTOBUF_speed_5fbump_2eproto__INCLUDED
#define PROTOBUF_speed_5fbump_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_speed_5fbump_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSpeedBumpsImpl();
void InitDefaultsSpeedBumps();
void InitDefaultsSpeedBumpsMsgImpl();
void InitDefaultsSpeedBumpsMsg();
inline void InitDefaults() {
  InitDefaultsSpeedBumps();
  InitDefaultsSpeedBumpsMsg();
}
}  // namespace protobuf_speed_5fbump_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class SpeedBumps;
class SpeedBumpsDefaultTypeInternal;
extern SpeedBumpsDefaultTypeInternal _SpeedBumps_default_instance_;
class SpeedBumpsMsg;
class SpeedBumpsMsgDefaultTypeInternal;
extern SpeedBumpsMsgDefaultTypeInternal _SpeedBumpsMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class SpeedBumps : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.SpeedBumps) */ {
 public:
  SpeedBumps();
  virtual ~SpeedBumps();

  SpeedBumps(const SpeedBumps& from);

  inline SpeedBumps& operator=(const SpeedBumps& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedBumps(SpeedBumps&& from) noexcept
    : SpeedBumps() {
    *this = ::std::move(from);
  }

  inline SpeedBumps& operator=(SpeedBumps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedBumps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedBumps* internal_default_instance() {
    return reinterpret_cast<const SpeedBumps*>(
               &_SpeedBumps_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SpeedBumps* other);
  friend void swap(SpeedBumps& a, SpeedBumps& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedBumps* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedBumps* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedBumps& from);
  void MergeFrom(const SpeedBumps& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedBumps* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector2f p_0_vcs = 2;
  bool has_p_0_vcs() const;
  void clear_p_0_vcs();
  static const int kP0VcsFieldNumber = 2;
  const ::autodrive::workflow::proto::Vector2f& p_0_vcs() const;
  ::autodrive::workflow::proto::Vector2f* release_p_0_vcs();
  ::autodrive::workflow::proto::Vector2f* mutable_p_0_vcs();
  void set_allocated_p_0_vcs(::autodrive::workflow::proto::Vector2f* p_0_vcs);

  // .autodrive.workflow.proto.Vector2f p_1_vcs = 3;
  bool has_p_1_vcs() const;
  void clear_p_1_vcs();
  static const int kP1VcsFieldNumber = 3;
  const ::autodrive::workflow::proto::Vector2f& p_1_vcs() const;
  ::autodrive::workflow::proto::Vector2f* release_p_1_vcs();
  ::autodrive::workflow::proto::Vector2f* mutable_p_1_vcs();
  void set_allocated_p_1_vcs(::autodrive::workflow::proto::Vector2f* p_1_vcs);

  // .autodrive.workflow.proto.Vector2f p_2_vcs = 4;
  bool has_p_2_vcs() const;
  void clear_p_2_vcs();
  static const int kP2VcsFieldNumber = 4;
  const ::autodrive::workflow::proto::Vector2f& p_2_vcs() const;
  ::autodrive::workflow::proto::Vector2f* release_p_2_vcs();
  ::autodrive::workflow::proto::Vector2f* mutable_p_2_vcs();
  void set_allocated_p_2_vcs(::autodrive::workflow::proto::Vector2f* p_2_vcs);

  // .autodrive.workflow.proto.Vector2f p_3_vcs = 5;
  bool has_p_3_vcs() const;
  void clear_p_3_vcs();
  static const int kP3VcsFieldNumber = 5;
  const ::autodrive::workflow::proto::Vector2f& p_3_vcs() const;
  ::autodrive::workflow::proto::Vector2f* release_p_3_vcs();
  ::autodrive::workflow::proto::Vector2f* mutable_p_3_vcs();
  void set_allocated_p_3_vcs(::autodrive::workflow::proto::Vector2f* p_3_vcs);

  // uint32 speed_bump_id = 1;
  void clear_speed_bump_id();
  static const int kSpeedBumpIdFieldNumber = 1;
  ::google::protobuf::uint32 speed_bump_id() const;
  void set_speed_bump_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.SpeedBumps)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector2f* p_0_vcs_;
  ::autodrive::workflow::proto::Vector2f* p_1_vcs_;
  ::autodrive::workflow::proto::Vector2f* p_2_vcs_;
  ::autodrive::workflow::proto::Vector2f* p_3_vcs_;
  ::google::protobuf::uint32 speed_bump_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_speed_5fbump_2eproto::TableStruct;
  friend void ::protobuf_speed_5fbump_2eproto::InitDefaultsSpeedBumpsImpl();
};
// -------------------------------------------------------------------

class SpeedBumpsMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.SpeedBumpsMsg) */ {
 public:
  SpeedBumpsMsg();
  virtual ~SpeedBumpsMsg();

  SpeedBumpsMsg(const SpeedBumpsMsg& from);

  inline SpeedBumpsMsg& operator=(const SpeedBumpsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedBumpsMsg(SpeedBumpsMsg&& from) noexcept
    : SpeedBumpsMsg() {
    *this = ::std::move(from);
  }

  inline SpeedBumpsMsg& operator=(SpeedBumpsMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedBumpsMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedBumpsMsg* internal_default_instance() {
    return reinterpret_cast<const SpeedBumpsMsg*>(
               &_SpeedBumpsMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SpeedBumpsMsg* other);
  friend void swap(SpeedBumpsMsg& a, SpeedBumpsMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedBumpsMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedBumpsMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedBumpsMsg& from);
  void MergeFrom(const SpeedBumpsMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedBumpsMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.SpeedBumps speed_bump_list = 4;
  int speed_bump_list_size() const;
  void clear_speed_bump_list();
  static const int kSpeedBumpListFieldNumber = 4;
  const ::autodrive::workflow::proto::SpeedBumps& speed_bump_list(int index) const;
  ::autodrive::workflow::proto::SpeedBumps* mutable_speed_bump_list(int index);
  ::autodrive::workflow::proto::SpeedBumps* add_speed_bump_list();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedBumps >*
      mutable_speed_bump_list();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedBumps >&
      speed_bump_list() const;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // uint32 speed_bump_nums = 3;
  void clear_speed_bump_nums();
  static const int kSpeedBumpNumsFieldNumber = 3;
  ::google::protobuf::uint32 speed_bump_nums() const;
  void set_speed_bump_nums(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.SpeedBumpsMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedBumps > speed_bump_list_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::google::protobuf::uint32 speed_bump_nums_;
  mutable int _cached_size_;
  friend struct ::protobuf_speed_5fbump_2eproto::TableStruct;
  friend void ::protobuf_speed_5fbump_2eproto::InitDefaultsSpeedBumpsMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeedBumps

// uint32 speed_bump_id = 1;
inline void SpeedBumps::clear_speed_bump_id() {
  speed_bump_id_ = 0u;
}
inline ::google::protobuf::uint32 SpeedBumps::speed_bump_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedBumps.speed_bump_id)
  return speed_bump_id_;
}
inline void SpeedBumps::set_speed_bump_id(::google::protobuf::uint32 value) {
  
  speed_bump_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpeedBumps.speed_bump_id)
}

// .autodrive.workflow.proto.Vector2f p_0_vcs = 2;
inline bool SpeedBumps::has_p_0_vcs() const {
  return this != internal_default_instance() && p_0_vcs_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedBumps::p_0_vcs() const {
  const ::autodrive::workflow::proto::Vector2f* p = p_0_vcs_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedBumps.p_0_vcs)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedBumps::release_p_0_vcs() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedBumps.p_0_vcs)
  
  ::autodrive::workflow::proto::Vector2f* temp = p_0_vcs_;
  p_0_vcs_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedBumps::mutable_p_0_vcs() {
  
  if (p_0_vcs_ == NULL) {
    p_0_vcs_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedBumps.p_0_vcs)
  return p_0_vcs_;
}
inline void SpeedBumps::set_allocated_p_0_vcs(::autodrive::workflow::proto::Vector2f* p_0_vcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(p_0_vcs_);
  }
  if (p_0_vcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p_0_vcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_0_vcs, submessage_arena);
    }
    
  } else {
    
  }
  p_0_vcs_ = p_0_vcs;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedBumps.p_0_vcs)
}

// .autodrive.workflow.proto.Vector2f p_1_vcs = 3;
inline bool SpeedBumps::has_p_1_vcs() const {
  return this != internal_default_instance() && p_1_vcs_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedBumps::p_1_vcs() const {
  const ::autodrive::workflow::proto::Vector2f* p = p_1_vcs_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedBumps.p_1_vcs)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedBumps::release_p_1_vcs() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedBumps.p_1_vcs)
  
  ::autodrive::workflow::proto::Vector2f* temp = p_1_vcs_;
  p_1_vcs_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedBumps::mutable_p_1_vcs() {
  
  if (p_1_vcs_ == NULL) {
    p_1_vcs_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedBumps.p_1_vcs)
  return p_1_vcs_;
}
inline void SpeedBumps::set_allocated_p_1_vcs(::autodrive::workflow::proto::Vector2f* p_1_vcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(p_1_vcs_);
  }
  if (p_1_vcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p_1_vcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_1_vcs, submessage_arena);
    }
    
  } else {
    
  }
  p_1_vcs_ = p_1_vcs;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedBumps.p_1_vcs)
}

// .autodrive.workflow.proto.Vector2f p_2_vcs = 4;
inline bool SpeedBumps::has_p_2_vcs() const {
  return this != internal_default_instance() && p_2_vcs_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedBumps::p_2_vcs() const {
  const ::autodrive::workflow::proto::Vector2f* p = p_2_vcs_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedBumps.p_2_vcs)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedBumps::release_p_2_vcs() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedBumps.p_2_vcs)
  
  ::autodrive::workflow::proto::Vector2f* temp = p_2_vcs_;
  p_2_vcs_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedBumps::mutable_p_2_vcs() {
  
  if (p_2_vcs_ == NULL) {
    p_2_vcs_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedBumps.p_2_vcs)
  return p_2_vcs_;
}
inline void SpeedBumps::set_allocated_p_2_vcs(::autodrive::workflow::proto::Vector2f* p_2_vcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(p_2_vcs_);
  }
  if (p_2_vcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p_2_vcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_2_vcs, submessage_arena);
    }
    
  } else {
    
  }
  p_2_vcs_ = p_2_vcs;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedBumps.p_2_vcs)
}

// .autodrive.workflow.proto.Vector2f p_3_vcs = 5;
inline bool SpeedBumps::has_p_3_vcs() const {
  return this != internal_default_instance() && p_3_vcs_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& SpeedBumps::p_3_vcs() const {
  const ::autodrive::workflow::proto::Vector2f* p = p_3_vcs_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedBumps.p_3_vcs)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* SpeedBumps::release_p_3_vcs() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedBumps.p_3_vcs)
  
  ::autodrive::workflow::proto::Vector2f* temp = p_3_vcs_;
  p_3_vcs_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* SpeedBumps::mutable_p_3_vcs() {
  
  if (p_3_vcs_ == NULL) {
    p_3_vcs_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedBumps.p_3_vcs)
  return p_3_vcs_;
}
inline void SpeedBumps::set_allocated_p_3_vcs(::autodrive::workflow::proto::Vector2f* p_3_vcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(p_3_vcs_);
  }
  if (p_3_vcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      p_3_vcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, p_3_vcs, submessage_arena);
    }
    
  } else {
    
  }
  p_3_vcs_ = p_3_vcs;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedBumps.p_3_vcs)
}

// -------------------------------------------------------------------

// SpeedBumpsMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool SpeedBumpsMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& SpeedBumpsMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedBumpsMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* SpeedBumpsMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedBumpsMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* SpeedBumpsMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedBumpsMsg.header)
  return header_;
}
inline void SpeedBumpsMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedBumpsMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool SpeedBumpsMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& SpeedBumpsMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedBumpsMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* SpeedBumpsMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.SpeedBumpsMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* SpeedBumpsMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedBumpsMsg.error)
  return error_;
}
inline void SpeedBumpsMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.SpeedBumpsMsg.error)
}

// uint32 speed_bump_nums = 3;
inline void SpeedBumpsMsg::clear_speed_bump_nums() {
  speed_bump_nums_ = 0u;
}
inline ::google::protobuf::uint32 SpeedBumpsMsg::speed_bump_nums() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedBumpsMsg.speed_bump_nums)
  return speed_bump_nums_;
}
inline void SpeedBumpsMsg::set_speed_bump_nums(::google::protobuf::uint32 value) {
  
  speed_bump_nums_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.SpeedBumpsMsg.speed_bump_nums)
}

// repeated .autodrive.workflow.proto.SpeedBumps speed_bump_list = 4;
inline int SpeedBumpsMsg::speed_bump_list_size() const {
  return speed_bump_list_.size();
}
inline void SpeedBumpsMsg::clear_speed_bump_list() {
  speed_bump_list_.Clear();
}
inline const ::autodrive::workflow::proto::SpeedBumps& SpeedBumpsMsg::speed_bump_list(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.SpeedBumpsMsg.speed_bump_list)
  return speed_bump_list_.Get(index);
}
inline ::autodrive::workflow::proto::SpeedBumps* SpeedBumpsMsg::mutable_speed_bump_list(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.SpeedBumpsMsg.speed_bump_list)
  return speed_bump_list_.Mutable(index);
}
inline ::autodrive::workflow::proto::SpeedBumps* SpeedBumpsMsg::add_speed_bump_list() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.SpeedBumpsMsg.speed_bump_list)
  return speed_bump_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedBumps >*
SpeedBumpsMsg::mutable_speed_bump_list() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.SpeedBumpsMsg.speed_bump_list)
  return &speed_bump_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::SpeedBumps >&
SpeedBumpsMsg::speed_bump_list() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.SpeedBumpsMsg.speed_bump_list)
  return speed_bump_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_speed_5fbump_2eproto__INCLUDED
