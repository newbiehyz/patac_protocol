// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_system.proto

#ifndef PROTOBUF_fusion_5fsystem_2eproto__INCLUDED
#define PROTOBUF_fusion_5fsystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "system_type_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_fusion_5fsystem_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFusionSystemMsgImpl();
void InitDefaultsFusionSystemMsg();
inline void InitDefaults() {
  InitDefaultsFusionSystemMsg();
}
}  // namespace protobuf_fusion_5fsystem_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class FusionSystemMsg;
class FusionSystemMsgDefaultTypeInternal;
extern FusionSystemMsgDefaultTypeInternal _FusionSystemMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum ParkingOutDir {
  KOutUnknow = 0,
  KVerFrontLeft = 1,
  KVerFrontCenter = 2,
  KVerFrontRight = 3,
  KVerRearLeft = 4,
  KVerRearCenter = 5,
  KVerRearRight = 6,
  KHoriFrontLeft = 7,
  KHoriFrontRight = 8,
  ParkingOutDir_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParkingOutDir_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParkingOutDir_IsValid(int value);
const ParkingOutDir ParkingOutDir_MIN = KOutUnknow;
const ParkingOutDir ParkingOutDir_MAX = KHoriFrontRight;
const int ParkingOutDir_ARRAYSIZE = ParkingOutDir_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParkingOutDir_descriptor();
inline const ::std::string& ParkingOutDir_Name(ParkingOutDir value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParkingOutDir_descriptor(), value);
}
inline bool ParkingOutDir_Parse(
    const ::std::string& name, ParkingOutDir* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParkingOutDir>(
    ParkingOutDir_descriptor(), name, value);
}
enum PerceptionCtrlStatus {
  kPerceptionCtrlStatusUnknown = 0,
  kSwitchParking = 1,
  kSwitchADAS = 2,
  kParking = 3,
  kADAS = 4,
  PerceptionCtrlStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PerceptionCtrlStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PerceptionCtrlStatus_IsValid(int value);
const PerceptionCtrlStatus PerceptionCtrlStatus_MIN = kPerceptionCtrlStatusUnknown;
const PerceptionCtrlStatus PerceptionCtrlStatus_MAX = kADAS;
const int PerceptionCtrlStatus_ARRAYSIZE = PerceptionCtrlStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionCtrlStatus_descriptor();
inline const ::std::string& PerceptionCtrlStatus_Name(PerceptionCtrlStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionCtrlStatus_descriptor(), value);
}
inline bool PerceptionCtrlStatus_Parse(
    const ::std::string& name, PerceptionCtrlStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionCtrlStatus>(
    PerceptionCtrlStatus_descriptor(), name, value);
}
// ===================================================================

class FusionSystemMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.FusionSystemMsg) */ {
 public:
  FusionSystemMsg();
  virtual ~FusionSystemMsg();

  FusionSystemMsg(const FusionSystemMsg& from);

  inline FusionSystemMsg& operator=(const FusionSystemMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FusionSystemMsg(FusionSystemMsg&& from) noexcept
    : FusionSystemMsg() {
    *this = ::std::move(from);
  }

  inline FusionSystemMsg& operator=(FusionSystemMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FusionSystemMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FusionSystemMsg* internal_default_instance() {
    return reinterpret_cast<const FusionSystemMsg*>(
               &_FusionSystemMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FusionSystemMsg* other);
  friend void swap(FusionSystemMsg& a, FusionSystemMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FusionSystemMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  FusionSystemMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FusionSystemMsg& from);
  void MergeFrom(const FusionSystemMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FusionSystemMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.ApaStateInfo apa_states = 5;
  bool has_apa_states() const;
  void clear_apa_states();
  static const int kApaStatesFieldNumber = 5;
  const ::autodrive::workflow::proto::ApaStateInfo& apa_states() const;
  ::autodrive::workflow::proto::ApaStateInfo* release_apa_states();
  ::autodrive::workflow::proto::ApaStateInfo* mutable_apa_states();
  void set_allocated_apa_states(::autodrive::workflow::proto::ApaStateInfo* apa_states);

  // .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 8;
  bool has_usr_sel_ps() const;
  void clear_usr_sel_ps();
  static const int kUsrSelPsFieldNumber = 8;
  const ::autodrive::workflow::proto::UserSelectedParkingSlot& usr_sel_ps() const;
  ::autodrive::workflow::proto::UserSelectedParkingSlot* release_usr_sel_ps();
  ::autodrive::workflow::proto::UserSelectedParkingSlot* mutable_usr_sel_ps();
  void set_allocated_usr_sel_ps(::autodrive::workflow::proto::UserSelectedParkingSlot* usr_sel_ps);

  // .autodrive.workflow.proto.LockIdType lock_id_type = 3;
  void clear_lock_id_type();
  static const int kLockIdTypeFieldNumber = 3;
  ::autodrive::workflow::proto::LockIdType lock_id_type() const;
  void set_lock_id_type(::autodrive::workflow::proto::LockIdType value);

  // int32 lock_id = 4;
  void clear_lock_id();
  static const int kLockIdFieldNumber = 4;
  ::google::protobuf::int32 lock_id() const;
  void set_lock_id(::google::protobuf::int32 value);

  // .autodrive.workflow.proto.ParkingOutDir parking_out_dir = 6;
  void clear_parking_out_dir();
  static const int kParkingOutDirFieldNumber = 6;
  ::autodrive::workflow::proto::ParkingOutDir parking_out_dir() const;
  void set_parking_out_dir(::autodrive::workflow::proto::ParkingOutDir value);

  // .autodrive.workflow.proto.WorkModeType work_mode_type = 7;
  void clear_work_mode_type();
  static const int kWorkModeTypeFieldNumber = 7;
  ::autodrive::workflow::proto::WorkModeType work_mode_type() const;
  void set_work_mode_type(::autodrive::workflow::proto::WorkModeType value);

  // bool enable_backstage_searching = 9;
  void clear_enable_backstage_searching();
  static const int kEnableBackstageSearchingFieldNumber = 9;
  bool enable_backstage_searching() const;
  void set_enable_backstage_searching(bool value);

  // bool enable_normal_searching = 10;
  void clear_enable_normal_searching();
  static const int kEnableNormalSearchingFieldNumber = 10;
  bool enable_normal_searching() const;
  void set_enable_normal_searching(bool value);

  // bool enable_PEB_PrkgPerception = 11;
  void clear_enable_peb_prkgperception();
  static const int kEnablePEBPrkgPerceptionFieldNumber = 11;
  bool enable_peb_prkgperception() const;
  void set_enable_peb_prkgperception(bool value);

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
  void clear_mirr_fold_sts_at_driver();
  static const int kMirrFoldStsAtDriverFieldNumber = 12;
  ::autodrive::workflow::proto::MirrFoldStsTyp mirr_fold_sts_at_driver() const;
  void set_mirr_fold_sts_at_driver(::autodrive::workflow::proto::MirrFoldStsTyp value);

  // .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
  void clear_mirr_fold_sts_at_pass();
  static const int kMirrFoldStsAtPassFieldNumber = 13;
  ::autodrive::workflow::proto::MirrFoldStsTyp mirr_fold_sts_at_pass() const;
  void set_mirr_fold_sts_at_pass(::autodrive::workflow::proto::MirrFoldStsTyp value);

  // .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail = 14;
  void clear_vpa_state_detail();
  static const int kVpaStateDetailFieldNumber = 14;
  ::autodrive::workflow::proto::VpaStateDetailType vpa_state_detail() const;
  void set_vpa_state_detail(::autodrive::workflow::proto::VpaStateDetailType value);

  // .autodrive.workflow.proto.PerceptionCtrlStatus perception_ctrl_status = 15;
  void clear_perception_ctrl_status();
  static const int kPerceptionCtrlStatusFieldNumber = 15;
  ::autodrive::workflow::proto::PerceptionCtrlStatus perception_ctrl_status() const;
  void set_perception_ctrl_status(::autodrive::workflow::proto::PerceptionCtrlStatus value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.FusionSystemMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::ApaStateInfo* apa_states_;
  ::autodrive::workflow::proto::UserSelectedParkingSlot* usr_sel_ps_;
  int lock_id_type_;
  ::google::protobuf::int32 lock_id_;
  int parking_out_dir_;
  int work_mode_type_;
  bool enable_backstage_searching_;
  bool enable_normal_searching_;
  bool enable_peb_prkgperception_;
  int mirr_fold_sts_at_driver_;
  int mirr_fold_sts_at_pass_;
  int vpa_state_detail_;
  int perception_ctrl_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_fusion_5fsystem_2eproto::TableStruct;
  friend void ::protobuf_fusion_5fsystem_2eproto::InitDefaultsFusionSystemMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FusionSystemMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool FusionSystemMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& FusionSystemMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* FusionSystemMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FusionSystemMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* FusionSystemMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FusionSystemMsg.header)
  return header_;
}
inline void FusionSystemMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FusionSystemMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool FusionSystemMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& FusionSystemMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* FusionSystemMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FusionSystemMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* FusionSystemMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FusionSystemMsg.error)
  return error_;
}
inline void FusionSystemMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FusionSystemMsg.error)
}

// .autodrive.workflow.proto.LockIdType lock_id_type = 3;
inline void FusionSystemMsg::clear_lock_id_type() {
  lock_id_type_ = 0;
}
inline ::autodrive::workflow::proto::LockIdType FusionSystemMsg::lock_id_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.lock_id_type)
  return static_cast< ::autodrive::workflow::proto::LockIdType >(lock_id_type_);
}
inline void FusionSystemMsg::set_lock_id_type(::autodrive::workflow::proto::LockIdType value) {
  
  lock_id_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.lock_id_type)
}

// int32 lock_id = 4;
inline void FusionSystemMsg::clear_lock_id() {
  lock_id_ = 0;
}
inline ::google::protobuf::int32 FusionSystemMsg::lock_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.lock_id)
  return lock_id_;
}
inline void FusionSystemMsg::set_lock_id(::google::protobuf::int32 value) {
  
  lock_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.lock_id)
}

// .autodrive.workflow.proto.ApaStateInfo apa_states = 5;
inline bool FusionSystemMsg::has_apa_states() const {
  return this != internal_default_instance() && apa_states_ != NULL;
}
inline const ::autodrive::workflow::proto::ApaStateInfo& FusionSystemMsg::apa_states() const {
  const ::autodrive::workflow::proto::ApaStateInfo* p = apa_states_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.apa_states)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::ApaStateInfo*>(
      &::autodrive::workflow::proto::_ApaStateInfo_default_instance_);
}
inline ::autodrive::workflow::proto::ApaStateInfo* FusionSystemMsg::release_apa_states() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FusionSystemMsg.apa_states)
  
  ::autodrive::workflow::proto::ApaStateInfo* temp = apa_states_;
  apa_states_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::ApaStateInfo* FusionSystemMsg::mutable_apa_states() {
  
  if (apa_states_ == NULL) {
    apa_states_ = new ::autodrive::workflow::proto::ApaStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FusionSystemMsg.apa_states)
  return apa_states_;
}
inline void FusionSystemMsg::set_allocated_apa_states(::autodrive::workflow::proto::ApaStateInfo* apa_states) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(apa_states_);
  }
  if (apa_states) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      apa_states = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, apa_states, submessage_arena);
    }
    
  } else {
    
  }
  apa_states_ = apa_states;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FusionSystemMsg.apa_states)
}

// .autodrive.workflow.proto.ParkingOutDir parking_out_dir = 6;
inline void FusionSystemMsg::clear_parking_out_dir() {
  parking_out_dir_ = 0;
}
inline ::autodrive::workflow::proto::ParkingOutDir FusionSystemMsg::parking_out_dir() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.parking_out_dir)
  return static_cast< ::autodrive::workflow::proto::ParkingOutDir >(parking_out_dir_);
}
inline void FusionSystemMsg::set_parking_out_dir(::autodrive::workflow::proto::ParkingOutDir value) {
  
  parking_out_dir_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.parking_out_dir)
}

// .autodrive.workflow.proto.WorkModeType work_mode_type = 7;
inline void FusionSystemMsg::clear_work_mode_type() {
  work_mode_type_ = 0;
}
inline ::autodrive::workflow::proto::WorkModeType FusionSystemMsg::work_mode_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.work_mode_type)
  return static_cast< ::autodrive::workflow::proto::WorkModeType >(work_mode_type_);
}
inline void FusionSystemMsg::set_work_mode_type(::autodrive::workflow::proto::WorkModeType value) {
  
  work_mode_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.work_mode_type)
}

// .autodrive.workflow.proto.UserSelectedParkingSlot usr_sel_ps = 8;
inline bool FusionSystemMsg::has_usr_sel_ps() const {
  return this != internal_default_instance() && usr_sel_ps_ != NULL;
}
inline const ::autodrive::workflow::proto::UserSelectedParkingSlot& FusionSystemMsg::usr_sel_ps() const {
  const ::autodrive::workflow::proto::UserSelectedParkingSlot* p = usr_sel_ps_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.usr_sel_ps)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::UserSelectedParkingSlot*>(
      &::autodrive::workflow::proto::_UserSelectedParkingSlot_default_instance_);
}
inline ::autodrive::workflow::proto::UserSelectedParkingSlot* FusionSystemMsg::release_usr_sel_ps() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FusionSystemMsg.usr_sel_ps)
  
  ::autodrive::workflow::proto::UserSelectedParkingSlot* temp = usr_sel_ps_;
  usr_sel_ps_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::UserSelectedParkingSlot* FusionSystemMsg::mutable_usr_sel_ps() {
  
  if (usr_sel_ps_ == NULL) {
    usr_sel_ps_ = new ::autodrive::workflow::proto::UserSelectedParkingSlot;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FusionSystemMsg.usr_sel_ps)
  return usr_sel_ps_;
}
inline void FusionSystemMsg::set_allocated_usr_sel_ps(::autodrive::workflow::proto::UserSelectedParkingSlot* usr_sel_ps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(usr_sel_ps_);
  }
  if (usr_sel_ps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      usr_sel_ps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, usr_sel_ps, submessage_arena);
    }
    
  } else {
    
  }
  usr_sel_ps_ = usr_sel_ps;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FusionSystemMsg.usr_sel_ps)
}

// bool enable_backstage_searching = 9;
inline void FusionSystemMsg::clear_enable_backstage_searching() {
  enable_backstage_searching_ = false;
}
inline bool FusionSystemMsg::enable_backstage_searching() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.enable_backstage_searching)
  return enable_backstage_searching_;
}
inline void FusionSystemMsg::set_enable_backstage_searching(bool value) {
  
  enable_backstage_searching_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.enable_backstage_searching)
}

// bool enable_normal_searching = 10;
inline void FusionSystemMsg::clear_enable_normal_searching() {
  enable_normal_searching_ = false;
}
inline bool FusionSystemMsg::enable_normal_searching() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.enable_normal_searching)
  return enable_normal_searching_;
}
inline void FusionSystemMsg::set_enable_normal_searching(bool value) {
  
  enable_normal_searching_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.enable_normal_searching)
}

// bool enable_PEB_PrkgPerception = 11;
inline void FusionSystemMsg::clear_enable_peb_prkgperception() {
  enable_peb_prkgperception_ = false;
}
inline bool FusionSystemMsg::enable_peb_prkgperception() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.enable_PEB_PrkgPerception)
  return enable_peb_prkgperception_;
}
inline void FusionSystemMsg::set_enable_peb_prkgperception(bool value) {
  
  enable_peb_prkgperception_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.enable_PEB_PrkgPerception)
}

// .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_driver = 12;
inline void FusionSystemMsg::clear_mirr_fold_sts_at_driver() {
  mirr_fold_sts_at_driver_ = 0;
}
inline ::autodrive::workflow::proto::MirrFoldStsTyp FusionSystemMsg::mirr_fold_sts_at_driver() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.mirr_fold_sts_at_driver)
  return static_cast< ::autodrive::workflow::proto::MirrFoldStsTyp >(mirr_fold_sts_at_driver_);
}
inline void FusionSystemMsg::set_mirr_fold_sts_at_driver(::autodrive::workflow::proto::MirrFoldStsTyp value) {
  
  mirr_fold_sts_at_driver_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.mirr_fold_sts_at_driver)
}

// .autodrive.workflow.proto.MirrFoldStsTyp mirr_fold_sts_at_pass = 13;
inline void FusionSystemMsg::clear_mirr_fold_sts_at_pass() {
  mirr_fold_sts_at_pass_ = 0;
}
inline ::autodrive::workflow::proto::MirrFoldStsTyp FusionSystemMsg::mirr_fold_sts_at_pass() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.mirr_fold_sts_at_pass)
  return static_cast< ::autodrive::workflow::proto::MirrFoldStsTyp >(mirr_fold_sts_at_pass_);
}
inline void FusionSystemMsg::set_mirr_fold_sts_at_pass(::autodrive::workflow::proto::MirrFoldStsTyp value) {
  
  mirr_fold_sts_at_pass_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.mirr_fold_sts_at_pass)
}

// .autodrive.workflow.proto.VpaStateDetailType vpa_state_detail = 14;
inline void FusionSystemMsg::clear_vpa_state_detail() {
  vpa_state_detail_ = 0;
}
inline ::autodrive::workflow::proto::VpaStateDetailType FusionSystemMsg::vpa_state_detail() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.vpa_state_detail)
  return static_cast< ::autodrive::workflow::proto::VpaStateDetailType >(vpa_state_detail_);
}
inline void FusionSystemMsg::set_vpa_state_detail(::autodrive::workflow::proto::VpaStateDetailType value) {
  
  vpa_state_detail_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.vpa_state_detail)
}

// .autodrive.workflow.proto.PerceptionCtrlStatus perception_ctrl_status = 15;
inline void FusionSystemMsg::clear_perception_ctrl_status() {
  perception_ctrl_status_ = 0;
}
inline ::autodrive::workflow::proto::PerceptionCtrlStatus FusionSystemMsg::perception_ctrl_status() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FusionSystemMsg.perception_ctrl_status)
  return static_cast< ::autodrive::workflow::proto::PerceptionCtrlStatus >(perception_ctrl_status_);
}
inline void FusionSystemMsg::set_perception_ctrl_status(::autodrive::workflow::proto::PerceptionCtrlStatus value) {
  
  perception_ctrl_status_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FusionSystemMsg.perception_ctrl_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::ParkingOutDir> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::ParkingOutDir>() {
  return ::autodrive::workflow::proto::ParkingOutDir_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::PerceptionCtrlStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::PerceptionCtrlStatus>() {
  return ::autodrive::workflow::proto::PerceptionCtrlStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fusion_5fsystem_2eproto__INCLUDED
