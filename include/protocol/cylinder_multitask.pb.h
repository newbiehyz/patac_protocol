// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cylinder_multitask.proto

#ifndef PROTOBUF_cylinder_5fmultitask_2eproto__INCLUDED
#define PROTOBUF_cylinder_5fmultitask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "obstacle_raw.pb.h"
#include "real3d.pb.h"
#include "sync_cylinder_parsing.pb.h"
#include "perception_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_cylinder_5fmultitask_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCameraValidFlagImpl();
void InitDefaultsCameraValidFlag();
void InitDefaultsCylinderMultiTaskImpl();
void InitDefaultsCylinderMultiTask();
inline void InitDefaults() {
  InitDefaultsCameraValidFlag();
  InitDefaultsCylinderMultiTask();
}
}  // namespace protobuf_cylinder_5fmultitask_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class CameraValidFlag;
class CameraValidFlagDefaultTypeInternal;
extern CameraValidFlagDefaultTypeInternal _CameraValidFlag_default_instance_;
class CylinderMultiTask;
class CylinderMultiTaskDefaultTypeInternal;
extern CylinderMultiTaskDefaultTypeInternal _CylinderMultiTask_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class CameraValidFlag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.CameraValidFlag) */ {
 public:
  CameraValidFlag();
  virtual ~CameraValidFlag();

  CameraValidFlag(const CameraValidFlag& from);

  inline CameraValidFlag& operator=(const CameraValidFlag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraValidFlag(CameraValidFlag&& from) noexcept
    : CameraValidFlag() {
    *this = ::std::move(from);
  }

  inline CameraValidFlag& operator=(CameraValidFlag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraValidFlag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraValidFlag* internal_default_instance() {
    return reinterpret_cast<const CameraValidFlag*>(
               &_CameraValidFlag_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CameraValidFlag* other);
  friend void swap(CameraValidFlag& a, CameraValidFlag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraValidFlag* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraValidFlag* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraValidFlag& from);
  void MergeFrom(const CameraValidFlag& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraValidFlag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.perception_base.ImageId sensor_id = 1;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  ::autodrive::workflow::proto::perception_base::ImageId sensor_id() const;
  void set_sensor_id(::autodrive::workflow::proto::perception_base::ImageId value);

  // bool obstacle_raw_data_valid = 2;
  void clear_obstacle_raw_data_valid();
  static const int kObstacleRawDataValidFieldNumber = 2;
  bool obstacle_raw_data_valid() const;
  void set_obstacle_raw_data_valid(bool value);

  // bool real3d_data_valid = 3;
  void clear_real3d_data_valid();
  static const int kReal3DDataValidFieldNumber = 3;
  bool real3d_data_valid() const;
  void set_real3d_data_valid(bool value);

  // bool parsing_data_valid = 4;
  void clear_parsing_data_valid();
  static const int kParsingDataValidFieldNumber = 4;
  bool parsing_data_valid() const;
  void set_parsing_data_valid(bool value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.CameraValidFlag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int sensor_id_;
  bool obstacle_raw_data_valid_;
  bool real3d_data_valid_;
  bool parsing_data_valid_;
  mutable int _cached_size_;
  friend struct ::protobuf_cylinder_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_cylinder_5fmultitask_2eproto::InitDefaultsCameraValidFlagImpl();
};
// -------------------------------------------------------------------

class CylinderMultiTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.CylinderMultiTask) */ {
 public:
  CylinderMultiTask();
  virtual ~CylinderMultiTask();

  CylinderMultiTask(const CylinderMultiTask& from);

  inline CylinderMultiTask& operator=(const CylinderMultiTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CylinderMultiTask(CylinderMultiTask&& from) noexcept
    : CylinderMultiTask() {
    *this = ::std::move(from);
  }

  inline CylinderMultiTask& operator=(CylinderMultiTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CylinderMultiTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CylinderMultiTask* internal_default_instance() {
    return reinterpret_cast<const CylinderMultiTask*>(
               &_CylinderMultiTask_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CylinderMultiTask* other);
  friend void swap(CylinderMultiTask& a, CylinderMultiTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CylinderMultiTask* New() const PROTOBUF_FINAL { return New(NULL); }

  CylinderMultiTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CylinderMultiTask& from);
  void MergeFrom(const CylinderMultiTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CylinderMultiTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.CameraValidFlag camera_flag_data = 3;
  int camera_flag_data_size() const;
  void clear_camera_flag_data();
  static const int kCameraFlagDataFieldNumber = 3;
  const ::autodrive::workflow::proto::CameraValidFlag& camera_flag_data(int index) const;
  ::autodrive::workflow::proto::CameraValidFlag* mutable_camera_flag_data(int index);
  ::autodrive::workflow::proto::CameraValidFlag* add_camera_flag_data();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CameraValidFlag >*
      mutable_camera_flag_data();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CameraValidFlag >&
      camera_flag_data() const;

  // repeated .autodrive.workflow.proto.ObstacleRawsData obstacle_raw_data = 4;
  int obstacle_raw_data_size() const;
  void clear_obstacle_raw_data();
  static const int kObstacleRawDataFieldNumber = 4;
  const ::autodrive::workflow::proto::ObstacleRawsData& obstacle_raw_data(int index) const;
  ::autodrive::workflow::proto::ObstacleRawsData* mutable_obstacle_raw_data(int index);
  ::autodrive::workflow::proto::ObstacleRawsData* add_obstacle_raw_data();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ObstacleRawsData >*
      mutable_obstacle_raw_data();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ObstacleRawsData >&
      obstacle_raw_data() const;

  // repeated .autodrive.workflow.proto.Real3DData real3d_data = 5;
  int real3d_data_size() const;
  void clear_real3d_data();
  static const int kReal3DDataFieldNumber = 5;
  const ::autodrive::workflow::proto::Real3DData& real3d_data(int index) const;
  ::autodrive::workflow::proto::Real3DData* mutable_real3d_data(int index);
  ::autodrive::workflow::proto::Real3DData* add_real3d_data();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DData >*
      mutable_real3d_data();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DData >&
      real3d_data() const;

  // repeated .autodrive.workflow.proto.CylinderParsingImageData parsing_data = 6;
  int parsing_data_size() const;
  void clear_parsing_data();
  static const int kParsingDataFieldNumber = 6;
  const ::autodrive::workflow::proto::CylinderParsingImageData& parsing_data(int index) const;
  ::autodrive::workflow::proto::CylinderParsingImageData* mutable_parsing_data(int index);
  ::autodrive::workflow::proto::CylinderParsingImageData* add_parsing_data();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingImageData >*
      mutable_parsing_data();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingImageData >&
      parsing_data() const;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.CylinderMultiTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CameraValidFlag > camera_flag_data_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ObstacleRawsData > obstacle_raw_data_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DData > real3d_data_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingImageData > parsing_data_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  mutable int _cached_size_;
  friend struct ::protobuf_cylinder_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_cylinder_5fmultitask_2eproto::InitDefaultsCylinderMultiTaskImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraValidFlag

// .autodrive.workflow.proto.perception_base.ImageId sensor_id = 1;
inline void CameraValidFlag::clear_sensor_id() {
  sensor_id_ = 0;
}
inline ::autodrive::workflow::proto::perception_base::ImageId CameraValidFlag::sensor_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CameraValidFlag.sensor_id)
  return static_cast< ::autodrive::workflow::proto::perception_base::ImageId >(sensor_id_);
}
inline void CameraValidFlag::set_sensor_id(::autodrive::workflow::proto::perception_base::ImageId value) {
  
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CameraValidFlag.sensor_id)
}

// bool obstacle_raw_data_valid = 2;
inline void CameraValidFlag::clear_obstacle_raw_data_valid() {
  obstacle_raw_data_valid_ = false;
}
inline bool CameraValidFlag::obstacle_raw_data_valid() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CameraValidFlag.obstacle_raw_data_valid)
  return obstacle_raw_data_valid_;
}
inline void CameraValidFlag::set_obstacle_raw_data_valid(bool value) {
  
  obstacle_raw_data_valid_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CameraValidFlag.obstacle_raw_data_valid)
}

// bool real3d_data_valid = 3;
inline void CameraValidFlag::clear_real3d_data_valid() {
  real3d_data_valid_ = false;
}
inline bool CameraValidFlag::real3d_data_valid() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CameraValidFlag.real3d_data_valid)
  return real3d_data_valid_;
}
inline void CameraValidFlag::set_real3d_data_valid(bool value) {
  
  real3d_data_valid_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CameraValidFlag.real3d_data_valid)
}

// bool parsing_data_valid = 4;
inline void CameraValidFlag::clear_parsing_data_valid() {
  parsing_data_valid_ = false;
}
inline bool CameraValidFlag::parsing_data_valid() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CameraValidFlag.parsing_data_valid)
  return parsing_data_valid_;
}
inline void CameraValidFlag::set_parsing_data_valid(bool value) {
  
  parsing_data_valid_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.CameraValidFlag.parsing_data_valid)
}

// -------------------------------------------------------------------

// CylinderMultiTask

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool CylinderMultiTask::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& CylinderMultiTask::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderMultiTask.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* CylinderMultiTask::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CylinderMultiTask.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* CylinderMultiTask::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderMultiTask.header)
  return header_;
}
inline void CylinderMultiTask::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CylinderMultiTask.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool CylinderMultiTask::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& CylinderMultiTask::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderMultiTask.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* CylinderMultiTask::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.CylinderMultiTask.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* CylinderMultiTask::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderMultiTask.error)
  return error_;
}
inline void CylinderMultiTask::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.CylinderMultiTask.error)
}

// repeated .autodrive.workflow.proto.CameraValidFlag camera_flag_data = 3;
inline int CylinderMultiTask::camera_flag_data_size() const {
  return camera_flag_data_.size();
}
inline void CylinderMultiTask::clear_camera_flag_data() {
  camera_flag_data_.Clear();
}
inline const ::autodrive::workflow::proto::CameraValidFlag& CylinderMultiTask::camera_flag_data(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderMultiTask.camera_flag_data)
  return camera_flag_data_.Get(index);
}
inline ::autodrive::workflow::proto::CameraValidFlag* CylinderMultiTask::mutable_camera_flag_data(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderMultiTask.camera_flag_data)
  return camera_flag_data_.Mutable(index);
}
inline ::autodrive::workflow::proto::CameraValidFlag* CylinderMultiTask::add_camera_flag_data() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.CylinderMultiTask.camera_flag_data)
  return camera_flag_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CameraValidFlag >*
CylinderMultiTask::mutable_camera_flag_data() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.CylinderMultiTask.camera_flag_data)
  return &camera_flag_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CameraValidFlag >&
CylinderMultiTask::camera_flag_data() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.CylinderMultiTask.camera_flag_data)
  return camera_flag_data_;
}

// repeated .autodrive.workflow.proto.ObstacleRawsData obstacle_raw_data = 4;
inline int CylinderMultiTask::obstacle_raw_data_size() const {
  return obstacle_raw_data_.size();
}
inline const ::autodrive::workflow::proto::ObstacleRawsData& CylinderMultiTask::obstacle_raw_data(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderMultiTask.obstacle_raw_data)
  return obstacle_raw_data_.Get(index);
}
inline ::autodrive::workflow::proto::ObstacleRawsData* CylinderMultiTask::mutable_obstacle_raw_data(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderMultiTask.obstacle_raw_data)
  return obstacle_raw_data_.Mutable(index);
}
inline ::autodrive::workflow::proto::ObstacleRawsData* CylinderMultiTask::add_obstacle_raw_data() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.CylinderMultiTask.obstacle_raw_data)
  return obstacle_raw_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ObstacleRawsData >*
CylinderMultiTask::mutable_obstacle_raw_data() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.CylinderMultiTask.obstacle_raw_data)
  return &obstacle_raw_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ObstacleRawsData >&
CylinderMultiTask::obstacle_raw_data() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.CylinderMultiTask.obstacle_raw_data)
  return obstacle_raw_data_;
}

// repeated .autodrive.workflow.proto.Real3DData real3d_data = 5;
inline int CylinderMultiTask::real3d_data_size() const {
  return real3d_data_.size();
}
inline const ::autodrive::workflow::proto::Real3DData& CylinderMultiTask::real3d_data(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderMultiTask.real3d_data)
  return real3d_data_.Get(index);
}
inline ::autodrive::workflow::proto::Real3DData* CylinderMultiTask::mutable_real3d_data(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderMultiTask.real3d_data)
  return real3d_data_.Mutable(index);
}
inline ::autodrive::workflow::proto::Real3DData* CylinderMultiTask::add_real3d_data() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.CylinderMultiTask.real3d_data)
  return real3d_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DData >*
CylinderMultiTask::mutable_real3d_data() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.CylinderMultiTask.real3d_data)
  return &real3d_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Real3DData >&
CylinderMultiTask::real3d_data() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.CylinderMultiTask.real3d_data)
  return real3d_data_;
}

// repeated .autodrive.workflow.proto.CylinderParsingImageData parsing_data = 6;
inline int CylinderMultiTask::parsing_data_size() const {
  return parsing_data_.size();
}
inline const ::autodrive::workflow::proto::CylinderParsingImageData& CylinderMultiTask::parsing_data(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.CylinderMultiTask.parsing_data)
  return parsing_data_.Get(index);
}
inline ::autodrive::workflow::proto::CylinderParsingImageData* CylinderMultiTask::mutable_parsing_data(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.CylinderMultiTask.parsing_data)
  return parsing_data_.Mutable(index);
}
inline ::autodrive::workflow::proto::CylinderParsingImageData* CylinderMultiTask::add_parsing_data() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.CylinderMultiTask.parsing_data)
  return parsing_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingImageData >*
CylinderMultiTask::mutable_parsing_data() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.CylinderMultiTask.parsing_data)
  return &parsing_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::CylinderParsingImageData >&
CylinderMultiTask::parsing_data() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.CylinderMultiTask.parsing_data)
  return parsing_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cylinder_5fmultitask_2eproto__INCLUDED
