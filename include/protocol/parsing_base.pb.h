// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parsing_base.proto

#ifndef PROTOBUF_parsing_5fbase_2eproto__INCLUDED
#define PROTOBUF_parsing_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "perception_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_parsing_5fbase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsIpmParsingImageDataImpl();
void InitDefaultsIpmParsingImageData();
void InitDefaultsRleImpl();
void InitDefaultsRle();
void InitDefaultsRleContourPointerImpl();
void InitDefaultsRleContourPointer();
void InitDefaultsConnectRegionImpl();
void InitDefaultsConnectRegion();
void InitDefaultsRleCompressedDataImpl();
void InitDefaultsRleCompressedData();
inline void InitDefaults() {
  InitDefaultsIpmParsingImageData();
  InitDefaultsRle();
  InitDefaultsRleContourPointer();
  InitDefaultsConnectRegion();
  InitDefaultsRleCompressedData();
}
}  // namespace protobuf_parsing_5fbase_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class ConnectRegion;
class ConnectRegionDefaultTypeInternal;
extern ConnectRegionDefaultTypeInternal _ConnectRegion_default_instance_;
class IpmParsingImageData;
class IpmParsingImageDataDefaultTypeInternal;
extern IpmParsingImageDataDefaultTypeInternal _IpmParsingImageData_default_instance_;
class Rle;
class RleDefaultTypeInternal;
extern RleDefaultTypeInternal _Rle_default_instance_;
class RleCompressedData;
class RleCompressedDataDefaultTypeInternal;
extern RleCompressedDataDefaultTypeInternal _RleCompressedData_default_instance_;
class RleContourPointer;
class RleContourPointerDefaultTypeInternal;
extern RleContourPointerDefaultTypeInternal _RleContourPointer_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum RLEContourMode {
  kRLEContourModeRetrExternal = 0,
  kRLEContourModeRetrList = 1,
  RLEContourMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RLEContourMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RLEContourMode_IsValid(int value);
const RLEContourMode RLEContourMode_MIN = kRLEContourModeRetrExternal;
const RLEContourMode RLEContourMode_MAX = kRLEContourModeRetrList;
const int RLEContourMode_ARRAYSIZE = RLEContourMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RLEContourMode_descriptor();
inline const ::std::string& RLEContourMode_Name(RLEContourMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RLEContourMode_descriptor(), value);
}
inline bool RLEContourMode_Parse(
    const ::std::string& name, RLEContourMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RLEContourMode>(
    RLEContourMode_descriptor(), name, value);
}
// ===================================================================

class IpmParsingImageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.IpmParsingImageData) */ {
 public:
  IpmParsingImageData();
  virtual ~IpmParsingImageData();

  IpmParsingImageData(const IpmParsingImageData& from);

  inline IpmParsingImageData& operator=(const IpmParsingImageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IpmParsingImageData(IpmParsingImageData&& from) noexcept
    : IpmParsingImageData() {
    *this = ::std::move(from);
  }

  inline IpmParsingImageData& operator=(IpmParsingImageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpmParsingImageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpmParsingImageData* internal_default_instance() {
    return reinterpret_cast<const IpmParsingImageData*>(
               &_IpmParsingImageData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(IpmParsingImageData* other);
  friend void swap(IpmParsingImageData& a, IpmParsingImageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IpmParsingImageData* New() const PROTOBUF_FINAL { return New(NULL); }

  IpmParsingImageData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IpmParsingImageData& from);
  void MergeFrom(const IpmParsingImageData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IpmParsingImageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 channel = 4;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.IpmParsingImageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 channel_;
  mutable int _cached_size_;
  friend struct ::protobuf_parsing_5fbase_2eproto::TableStruct;
  friend void ::protobuf_parsing_5fbase_2eproto::InitDefaultsIpmParsingImageDataImpl();
};
// -------------------------------------------------------------------

class Rle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.Rle) */ {
 public:
  Rle();
  virtual ~Rle();

  Rle(const Rle& from);

  inline Rle& operator=(const Rle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rle(Rle&& from) noexcept
    : Rle() {
    *this = ::std::move(from);
  }

  inline Rle& operator=(Rle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rle* internal_default_instance() {
    return reinterpret_cast<const Rle*>(
               &_Rle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Rle* other);
  friend void swap(Rle& a, Rle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rle* New() const PROTOBUF_FINAL { return New(NULL); }

  Rle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rle& from);
  void MergeFrom(const Rle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 y = 1;
  void clear_y();
  static const int kYFieldNumber = 1;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 xstart = 2;
  void clear_xstart();
  static const int kXstartFieldNumber = 2;
  ::google::protobuf::int32 xstart() const;
  void set_xstart(::google::protobuf::int32 value);

  // int32 xend = 3;
  void clear_xend();
  static const int kXendFieldNumber = 3;
  ::google::protobuf::int32 xend() const;
  void set_xend(::google::protobuf::int32 value);

  // int32 length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // int32 value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.Rle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 xstart_;
  ::google::protobuf::int32 xend_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend struct ::protobuf_parsing_5fbase_2eproto::TableStruct;
  friend void ::protobuf_parsing_5fbase_2eproto::InitDefaultsRleImpl();
};
// -------------------------------------------------------------------

class RleContourPointer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.RleContourPointer) */ {
 public:
  RleContourPointer();
  virtual ~RleContourPointer();

  RleContourPointer(const RleContourPointer& from);

  inline RleContourPointer& operator=(const RleContourPointer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RleContourPointer(RleContourPointer&& from) noexcept
    : RleContourPointer() {
    *this = ::std::move(from);
  }

  inline RleContourPointer& operator=(RleContourPointer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RleContourPointer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RleContourPointer* internal_default_instance() {
    return reinterpret_cast<const RleContourPointer*>(
               &_RleContourPointer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RleContourPointer* other);
  friend void swap(RleContourPointer& a, RleContourPointer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RleContourPointer* New() const PROTOBUF_FINAL { return New(NULL); }

  RleContourPointer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RleContourPointer& from);
  void MergeFrom(const RleContourPointer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RleContourPointer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.RleContourPointer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_parsing_5fbase_2eproto::TableStruct;
  friend void ::protobuf_parsing_5fbase_2eproto::InitDefaultsRleContourPointerImpl();
};
// -------------------------------------------------------------------

class ConnectRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.ConnectRegion) */ {
 public:
  ConnectRegion();
  virtual ~ConnectRegion();

  ConnectRegion(const ConnectRegion& from);

  inline ConnectRegion& operator=(const ConnectRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRegion(ConnectRegion&& from) noexcept
    : ConnectRegion() {
    *this = ::std::move(from);
  }

  inline ConnectRegion& operator=(ConnectRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRegion* internal_default_instance() {
    return reinterpret_cast<const ConnectRegion*>(
               &_ConnectRegion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ConnectRegion* other);
  friend void swap(ConnectRegion& a, ConnectRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRegion* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectRegion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectRegion& from);
  void MergeFrom(const ConnectRegion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.Rle rle_list_region = 3;
  int rle_list_region_size() const;
  void clear_rle_list_region();
  static const int kRleListRegionFieldNumber = 3;
  const ::autodrive::workflow::proto::Rle& rle_list_region(int index) const;
  ::autodrive::workflow::proto::Rle* mutable_rle_list_region(int index);
  ::autodrive::workflow::proto::Rle* add_rle_list_region();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle >*
      mutable_rle_list_region();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle >&
      rle_list_region() const;

  // repeated .autodrive.workflow.proto.RleContourPointer contour_points = 4;
  int contour_points_size() const;
  void clear_contour_points();
  static const int kContourPointsFieldNumber = 4;
  const ::autodrive::workflow::proto::RleContourPointer& contour_points(int index) const;
  ::autodrive::workflow::proto::RleContourPointer* mutable_contour_points(int index);
  ::autodrive::workflow::proto::RleContourPointer* add_contour_points();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::RleContourPointer >*
      mutable_contour_points();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::RleContourPointer >&
      contour_points() const;

  // .autodrive.workflow.proto.perception_base.Rect boundbox = 1;
  bool has_boundbox() const;
  void clear_boundbox();
  static const int kBoundboxFieldNumber = 1;
  const ::autodrive::workflow::proto::perception_base::Rect& boundbox() const;
  ::autodrive::workflow::proto::perception_base::Rect* release_boundbox();
  ::autodrive::workflow::proto::perception_base::Rect* mutable_boundbox();
  void set_allocated_boundbox(::autodrive::workflow::proto::perception_base::Rect* boundbox);

  // int32 nArea = 2;
  void clear_narea();
  static const int kNAreaFieldNumber = 2;
  ::google::protobuf::int32 narea() const;
  void set_narea(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.ConnectRegion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle > rle_list_region_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::RleContourPointer > contour_points_;
  ::autodrive::workflow::proto::perception_base::Rect* boundbox_;
  ::google::protobuf::int32 narea_;
  mutable int _cached_size_;
  friend struct ::protobuf_parsing_5fbase_2eproto::TableStruct;
  friend void ::protobuf_parsing_5fbase_2eproto::InitDefaultsConnectRegionImpl();
};
// -------------------------------------------------------------------

class RleCompressedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.RleCompressedData) */ {
 public:
  RleCompressedData();
  virtual ~RleCompressedData();

  RleCompressedData(const RleCompressedData& from);

  inline RleCompressedData& operator=(const RleCompressedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RleCompressedData(RleCompressedData&& from) noexcept
    : RleCompressedData() {
    *this = ::std::move(from);
  }

  inline RleCompressedData& operator=(RleCompressedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RleCompressedData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RleCompressedData* internal_default_instance() {
    return reinterpret_cast<const RleCompressedData*>(
               &_RleCompressedData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RleCompressedData* other);
  friend void swap(RleCompressedData& a, RleCompressedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RleCompressedData* New() const PROTOBUF_FINAL { return New(NULL); }

  RleCompressedData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RleCompressedData& from);
  void MergeFrom(const RleCompressedData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RleCompressedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.Rle rle_list_buf = 6;
  int rle_list_buf_size() const;
  void clear_rle_list_buf();
  static const int kRleListBufFieldNumber = 6;
  const ::autodrive::workflow::proto::Rle& rle_list_buf(int index) const;
  ::autodrive::workflow::proto::Rle* mutable_rle_list_buf(int index);
  ::autodrive::workflow::proto::Rle* add_rle_list_buf();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle >*
      mutable_rle_list_buf();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle >&
      rle_list_buf() const;

  // repeated .autodrive.workflow.proto.ConnectRegion connect_regions = 7;
  int connect_regions_size() const;
  void clear_connect_regions();
  static const int kConnectRegionsFieldNumber = 7;
  const ::autodrive::workflow::proto::ConnectRegion& connect_regions(int index) const;
  ::autodrive::workflow::proto::ConnectRegion* mutable_connect_regions(int index);
  ::autodrive::workflow::proto::ConnectRegion* add_connect_regions();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ConnectRegion >*
      mutable_connect_regions();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ConnectRegion >&
      connect_regions() const;

  // int32 valid_height = 1;
  void clear_valid_height();
  static const int kValidHeightFieldNumber = 1;
  ::google::protobuf::int32 valid_height() const;
  void set_valid_height(::google::protobuf::int32 value);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // uint32 free_label = 4;
  void clear_free_label();
  static const int kFreeLabelFieldNumber = 4;
  ::google::protobuf::uint32 free_label() const;
  void set_free_label(::google::protobuf::uint32 value);

  // int32 begin_y = 8;
  void clear_begin_y();
  static const int kBeginYFieldNumber = 8;
  ::google::protobuf::int32 begin_y() const;
  void set_begin_y(::google::protobuf::int32 value);

  // int32 end_y = 9;
  void clear_end_y();
  static const int kEndYFieldNumber = 9;
  ::google::protobuf::int32 end_y() const;
  void set_end_y(::google::protobuf::int32 value);

  // bool inited = 5;
  void clear_inited();
  static const int kInitedFieldNumber = 5;
  bool inited() const;
  void set_inited(bool value);

  // bool has_build_connect_region = 13;
  void clear_has_build_connect_region();
  static const int kHasBuildConnectRegionFieldNumber = 13;
  bool has_build_connect_region() const;
  void set_has_build_connect_region(bool value);

  // int32 begin_x = 10;
  void clear_begin_x();
  static const int kBeginXFieldNumber = 10;
  ::google::protobuf::int32 begin_x() const;
  void set_begin_x(::google::protobuf::int32 value);

  // int32 end_x = 11;
  void clear_end_x();
  static const int kEndXFieldNumber = 11;
  ::google::protobuf::int32 end_x() const;
  void set_end_x(::google::protobuf::int32 value);

  // int32 step = 12;
  void clear_step();
  static const int kStepFieldNumber = 12;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.RleCompressedData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle > rle_list_buf_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ConnectRegion > connect_regions_;
  ::google::protobuf::int32 valid_height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::uint32 free_label_;
  ::google::protobuf::int32 begin_y_;
  ::google::protobuf::int32 end_y_;
  bool inited_;
  bool has_build_connect_region_;
  ::google::protobuf::int32 begin_x_;
  ::google::protobuf::int32 end_x_;
  ::google::protobuf::int32 step_;
  mutable int _cached_size_;
  friend struct ::protobuf_parsing_5fbase_2eproto::TableStruct;
  friend void ::protobuf_parsing_5fbase_2eproto::InitDefaultsRleCompressedDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IpmParsingImageData

// bytes data = 1;
inline void IpmParsingImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IpmParsingImageData::data() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingImageData.data)
  return data_.GetNoArena();
}
inline void IpmParsingImageData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.IpmParsingImageData.data)
}
#if LANG_CXX11
inline void IpmParsingImageData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.IpmParsingImageData.data)
}
#endif
inline void IpmParsingImageData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.IpmParsingImageData.data)
}
inline void IpmParsingImageData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.IpmParsingImageData.data)
}
inline ::std::string* IpmParsingImageData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.IpmParsingImageData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpmParsingImageData::release_data() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.IpmParsingImageData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpmParsingImageData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.IpmParsingImageData.data)
}

// uint32 width = 2;
inline void IpmParsingImageData::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 IpmParsingImageData::width() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingImageData.width)
  return width_;
}
inline void IpmParsingImageData::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.IpmParsingImageData.width)
}

// uint32 height = 3;
inline void IpmParsingImageData::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 IpmParsingImageData::height() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingImageData.height)
  return height_;
}
inline void IpmParsingImageData::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.IpmParsingImageData.height)
}

// uint32 channel = 4;
inline void IpmParsingImageData::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 IpmParsingImageData::channel() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.IpmParsingImageData.channel)
  return channel_;
}
inline void IpmParsingImageData::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.IpmParsingImageData.channel)
}

// -------------------------------------------------------------------

// Rle

// int32 y = 1;
inline void Rle::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Rle::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Rle.y)
  return y_;
}
inline void Rle::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Rle.y)
}

// int32 xstart = 2;
inline void Rle::clear_xstart() {
  xstart_ = 0;
}
inline ::google::protobuf::int32 Rle::xstart() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Rle.xstart)
  return xstart_;
}
inline void Rle::set_xstart(::google::protobuf::int32 value) {
  
  xstart_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Rle.xstart)
}

// int32 xend = 3;
inline void Rle::clear_xend() {
  xend_ = 0;
}
inline ::google::protobuf::int32 Rle::xend() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Rle.xend)
  return xend_;
}
inline void Rle::set_xend(::google::protobuf::int32 value) {
  
  xend_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Rle.xend)
}

// int32 length = 4;
inline void Rle::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 Rle::length() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Rle.length)
  return length_;
}
inline void Rle::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Rle.length)
}

// int32 value = 5;
inline void Rle::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 Rle::value() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.Rle.value)
  return value_;
}
inline void Rle::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.Rle.value)
}

// -------------------------------------------------------------------

// RleContourPointer

// int32 x = 1;
inline void RleContourPointer::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 RleContourPointer::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleContourPointer.x)
  return x_;
}
inline void RleContourPointer::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleContourPointer.x)
}

// int32 y = 2;
inline void RleContourPointer::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 RleContourPointer::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleContourPointer.y)
  return y_;
}
inline void RleContourPointer::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleContourPointer.y)
}

// -------------------------------------------------------------------

// ConnectRegion

// .autodrive.workflow.proto.perception_base.Rect boundbox = 1;
inline bool ConnectRegion::has_boundbox() const {
  return this != internal_default_instance() && boundbox_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::Rect& ConnectRegion::boundbox() const {
  const ::autodrive::workflow::proto::perception_base::Rect* p = boundbox_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ConnectRegion.boundbox)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::Rect*>(
      &::autodrive::workflow::proto::perception_base::_Rect_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::Rect* ConnectRegion::release_boundbox() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.ConnectRegion.boundbox)
  
  ::autodrive::workflow::proto::perception_base::Rect* temp = boundbox_;
  boundbox_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::Rect* ConnectRegion::mutable_boundbox() {
  
  if (boundbox_ == NULL) {
    boundbox_ = new ::autodrive::workflow::proto::perception_base::Rect;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ConnectRegion.boundbox)
  return boundbox_;
}
inline void ConnectRegion::set_allocated_boundbox(::autodrive::workflow::proto::perception_base::Rect* boundbox) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(boundbox_);
  }
  if (boundbox) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      boundbox = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, boundbox, submessage_arena);
    }
    
  } else {
    
  }
  boundbox_ = boundbox;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.ConnectRegion.boundbox)
}

// int32 nArea = 2;
inline void ConnectRegion::clear_narea() {
  narea_ = 0;
}
inline ::google::protobuf::int32 ConnectRegion::narea() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ConnectRegion.nArea)
  return narea_;
}
inline void ConnectRegion::set_narea(::google::protobuf::int32 value) {
  
  narea_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.ConnectRegion.nArea)
}

// repeated .autodrive.workflow.proto.Rle rle_list_region = 3;
inline int ConnectRegion::rle_list_region_size() const {
  return rle_list_region_.size();
}
inline void ConnectRegion::clear_rle_list_region() {
  rle_list_region_.Clear();
}
inline const ::autodrive::workflow::proto::Rle& ConnectRegion::rle_list_region(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ConnectRegion.rle_list_region)
  return rle_list_region_.Get(index);
}
inline ::autodrive::workflow::proto::Rle* ConnectRegion::mutable_rle_list_region(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ConnectRegion.rle_list_region)
  return rle_list_region_.Mutable(index);
}
inline ::autodrive::workflow::proto::Rle* ConnectRegion::add_rle_list_region() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.ConnectRegion.rle_list_region)
  return rle_list_region_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle >*
ConnectRegion::mutable_rle_list_region() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.ConnectRegion.rle_list_region)
  return &rle_list_region_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle >&
ConnectRegion::rle_list_region() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.ConnectRegion.rle_list_region)
  return rle_list_region_;
}

// repeated .autodrive.workflow.proto.RleContourPointer contour_points = 4;
inline int ConnectRegion::contour_points_size() const {
  return contour_points_.size();
}
inline void ConnectRegion::clear_contour_points() {
  contour_points_.Clear();
}
inline const ::autodrive::workflow::proto::RleContourPointer& ConnectRegion::contour_points(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.ConnectRegion.contour_points)
  return contour_points_.Get(index);
}
inline ::autodrive::workflow::proto::RleContourPointer* ConnectRegion::mutable_contour_points(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.ConnectRegion.contour_points)
  return contour_points_.Mutable(index);
}
inline ::autodrive::workflow::proto::RleContourPointer* ConnectRegion::add_contour_points() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.ConnectRegion.contour_points)
  return contour_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::RleContourPointer >*
ConnectRegion::mutable_contour_points() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.ConnectRegion.contour_points)
  return &contour_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::RleContourPointer >&
ConnectRegion::contour_points() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.ConnectRegion.contour_points)
  return contour_points_;
}

// -------------------------------------------------------------------

// RleCompressedData

// int32 valid_height = 1;
inline void RleCompressedData::clear_valid_height() {
  valid_height_ = 0;
}
inline ::google::protobuf::int32 RleCompressedData::valid_height() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.valid_height)
  return valid_height_;
}
inline void RleCompressedData::set_valid_height(::google::protobuf::int32 value) {
  
  valid_height_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.valid_height)
}

// int32 width = 2;
inline void RleCompressedData::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 RleCompressedData::width() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.width)
  return width_;
}
inline void RleCompressedData::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.width)
}

// int32 height = 3;
inline void RleCompressedData::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 RleCompressedData::height() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.height)
  return height_;
}
inline void RleCompressedData::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.height)
}

// uint32 free_label = 4;
inline void RleCompressedData::clear_free_label() {
  free_label_ = 0u;
}
inline ::google::protobuf::uint32 RleCompressedData::free_label() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.free_label)
  return free_label_;
}
inline void RleCompressedData::set_free_label(::google::protobuf::uint32 value) {
  
  free_label_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.free_label)
}

// bool inited = 5;
inline void RleCompressedData::clear_inited() {
  inited_ = false;
}
inline bool RleCompressedData::inited() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.inited)
  return inited_;
}
inline void RleCompressedData::set_inited(bool value) {
  
  inited_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.inited)
}

// repeated .autodrive.workflow.proto.Rle rle_list_buf = 6;
inline int RleCompressedData::rle_list_buf_size() const {
  return rle_list_buf_.size();
}
inline void RleCompressedData::clear_rle_list_buf() {
  rle_list_buf_.Clear();
}
inline const ::autodrive::workflow::proto::Rle& RleCompressedData::rle_list_buf(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.rle_list_buf)
  return rle_list_buf_.Get(index);
}
inline ::autodrive::workflow::proto::Rle* RleCompressedData::mutable_rle_list_buf(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.RleCompressedData.rle_list_buf)
  return rle_list_buf_.Mutable(index);
}
inline ::autodrive::workflow::proto::Rle* RleCompressedData::add_rle_list_buf() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.RleCompressedData.rle_list_buf)
  return rle_list_buf_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle >*
RleCompressedData::mutable_rle_list_buf() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.RleCompressedData.rle_list_buf)
  return &rle_list_buf_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Rle >&
RleCompressedData::rle_list_buf() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.RleCompressedData.rle_list_buf)
  return rle_list_buf_;
}

// repeated .autodrive.workflow.proto.ConnectRegion connect_regions = 7;
inline int RleCompressedData::connect_regions_size() const {
  return connect_regions_.size();
}
inline void RleCompressedData::clear_connect_regions() {
  connect_regions_.Clear();
}
inline const ::autodrive::workflow::proto::ConnectRegion& RleCompressedData::connect_regions(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.connect_regions)
  return connect_regions_.Get(index);
}
inline ::autodrive::workflow::proto::ConnectRegion* RleCompressedData::mutable_connect_regions(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.RleCompressedData.connect_regions)
  return connect_regions_.Mutable(index);
}
inline ::autodrive::workflow::proto::ConnectRegion* RleCompressedData::add_connect_regions() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.RleCompressedData.connect_regions)
  return connect_regions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ConnectRegion >*
RleCompressedData::mutable_connect_regions() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.RleCompressedData.connect_regions)
  return &connect_regions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::ConnectRegion >&
RleCompressedData::connect_regions() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.RleCompressedData.connect_regions)
  return connect_regions_;
}

// int32 begin_y = 8;
inline void RleCompressedData::clear_begin_y() {
  begin_y_ = 0;
}
inline ::google::protobuf::int32 RleCompressedData::begin_y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.begin_y)
  return begin_y_;
}
inline void RleCompressedData::set_begin_y(::google::protobuf::int32 value) {
  
  begin_y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.begin_y)
}

// int32 end_y = 9;
inline void RleCompressedData::clear_end_y() {
  end_y_ = 0;
}
inline ::google::protobuf::int32 RleCompressedData::end_y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.end_y)
  return end_y_;
}
inline void RleCompressedData::set_end_y(::google::protobuf::int32 value) {
  
  end_y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.end_y)
}

// int32 begin_x = 10;
inline void RleCompressedData::clear_begin_x() {
  begin_x_ = 0;
}
inline ::google::protobuf::int32 RleCompressedData::begin_x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.begin_x)
  return begin_x_;
}
inline void RleCompressedData::set_begin_x(::google::protobuf::int32 value) {
  
  begin_x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.begin_x)
}

// int32 end_x = 11;
inline void RleCompressedData::clear_end_x() {
  end_x_ = 0;
}
inline ::google::protobuf::int32 RleCompressedData::end_x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.end_x)
  return end_x_;
}
inline void RleCompressedData::set_end_x(::google::protobuf::int32 value) {
  
  end_x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.end_x)
}

// int32 step = 12;
inline void RleCompressedData::clear_step() {
  step_ = 0;
}
inline ::google::protobuf::int32 RleCompressedData::step() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.step)
  return step_;
}
inline void RleCompressedData::set_step(::google::protobuf::int32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.step)
}

// bool has_build_connect_region = 13;
inline void RleCompressedData::clear_has_build_connect_region() {
  has_build_connect_region_ = false;
}
inline bool RleCompressedData::has_build_connect_region() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.RleCompressedData.has_build_connect_region)
  return has_build_connect_region_;
}
inline void RleCompressedData::set_has_build_connect_region(bool value) {
  
  has_build_connect_region_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.RleCompressedData.has_build_connect_region)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::RLEContourMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::RLEContourMode>() {
  return ::autodrive::workflow::proto::RLEContourMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_parsing_5fbase_2eproto__INCLUDED
