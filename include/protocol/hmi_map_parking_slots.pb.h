// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_map_parking_slots.proto

#ifndef PROTOBUF_hmi_5fmap_5fparking_5fslots_2eproto__INCLUDED
#define PROTOBUF_hmi_5fmap_5fparking_5fslots_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "basic.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_hmi_5fmap_5fparking_5fslots_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMapParkingSlotImpl();
void InitDefaultsMapParkingSlot();
void InitDefaultsMapParkingSlotsImpl();
void InitDefaultsMapParkingSlots();
void InitDefaultsMapParkingSlotsMsgImpl();
void InitDefaultsMapParkingSlotsMsg();
inline void InitDefaults() {
  InitDefaultsMapParkingSlot();
  InitDefaultsMapParkingSlots();
  InitDefaultsMapParkingSlotsMsg();
}
}  // namespace protobuf_hmi_5fmap_5fparking_5fslots_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class MapParkingSlot;
class MapParkingSlotDefaultTypeInternal;
extern MapParkingSlotDefaultTypeInternal _MapParkingSlot_default_instance_;
class MapParkingSlots;
class MapParkingSlotsDefaultTypeInternal;
extern MapParkingSlotsDefaultTypeInternal _MapParkingSlots_default_instance_;
class MapParkingSlotsMsg;
class MapParkingSlotsMsgDefaultTypeInternal;
extern MapParkingSlotsMsgDefaultTypeInternal _MapParkingSlotsMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class MapParkingSlot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapParkingSlot) */ {
 public:
  MapParkingSlot();
  virtual ~MapParkingSlot();

  MapParkingSlot(const MapParkingSlot& from);

  inline MapParkingSlot& operator=(const MapParkingSlot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapParkingSlot(MapParkingSlot&& from) noexcept
    : MapParkingSlot() {
    *this = ::std::move(from);
  }

  inline MapParkingSlot& operator=(MapParkingSlot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapParkingSlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapParkingSlot* internal_default_instance() {
    return reinterpret_cast<const MapParkingSlot*>(
               &_MapParkingSlot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MapParkingSlot* other);
  friend void swap(MapParkingSlot& a, MapParkingSlot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapParkingSlot* New() const PROTOBUF_FINAL { return New(NULL); }

  MapParkingSlot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapParkingSlot& from);
  void MergeFrom(const MapParkingSlot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapParkingSlot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.Vector3f slot_points = 4;
  int slot_points_size() const;
  void clear_slot_points();
  static const int kSlotPointsFieldNumber = 4;
  const ::autodrive::workflow::proto::Vector3f& slot_points(int index) const;
  ::autodrive::workflow::proto::Vector3f* mutable_slot_points(int index);
  ::autodrive::workflow::proto::Vector3f* add_slot_points();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f >*
      mutable_slot_points();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f >&
      slot_points() const;

  // int32 slot_id = 1;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 1;
  ::google::protobuf::int32 slot_id() const;
  void set_slot_id(::google::protobuf::int32 value);

  // int32 slot_state = 2;
  void clear_slot_state();
  static const int kSlotStateFieldNumber = 2;
  ::google::protobuf::int32 slot_state() const;
  void set_slot_state(::google::protobuf::int32 value);

  // int32 slot_type = 3;
  void clear_slot_type();
  static const int kSlotTypeFieldNumber = 3;
  ::google::protobuf::int32 slot_type() const;
  void set_slot_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapParkingSlot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f > slot_points_;
  ::google::protobuf::int32 slot_id_;
  ::google::protobuf::int32 slot_state_;
  ::google::protobuf::int32 slot_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::TableStruct;
  friend void ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlotImpl();
};
// -------------------------------------------------------------------

class MapParkingSlots : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapParkingSlots) */ {
 public:
  MapParkingSlots();
  virtual ~MapParkingSlots();

  MapParkingSlots(const MapParkingSlots& from);

  inline MapParkingSlots& operator=(const MapParkingSlots& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapParkingSlots(MapParkingSlots&& from) noexcept
    : MapParkingSlots() {
    *this = ::std::move(from);
  }

  inline MapParkingSlots& operator=(MapParkingSlots&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapParkingSlots& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapParkingSlots* internal_default_instance() {
    return reinterpret_cast<const MapParkingSlots*>(
               &_MapParkingSlots_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MapParkingSlots* other);
  friend void swap(MapParkingSlots& a, MapParkingSlots& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapParkingSlots* New() const PROTOBUF_FINAL { return New(NULL); }

  MapParkingSlots* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapParkingSlots& from);
  void MergeFrom(const MapParkingSlots& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapParkingSlots* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.MapParkingSlot all_map_parking_slots = 1;
  int all_map_parking_slots_size() const;
  void clear_all_map_parking_slots();
  static const int kAllMapParkingSlotsFieldNumber = 1;
  const ::autodrive::workflow::proto::MapParkingSlot& all_map_parking_slots(int index) const;
  ::autodrive::workflow::proto::MapParkingSlot* mutable_all_map_parking_slots(int index);
  ::autodrive::workflow::proto::MapParkingSlot* add_all_map_parking_slots();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapParkingSlot >*
      mutable_all_map_parking_slots();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapParkingSlot >&
      all_map_parking_slots() const;

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapParkingSlots)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapParkingSlot > all_map_parking_slots_;
  mutable int _cached_size_;
  friend struct ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::TableStruct;
  friend void ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlotsImpl();
};
// -------------------------------------------------------------------

class MapParkingSlotsMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.MapParkingSlotsMsg) */ {
 public:
  MapParkingSlotsMsg();
  virtual ~MapParkingSlotsMsg();

  MapParkingSlotsMsg(const MapParkingSlotsMsg& from);

  inline MapParkingSlotsMsg& operator=(const MapParkingSlotsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapParkingSlotsMsg(MapParkingSlotsMsg&& from) noexcept
    : MapParkingSlotsMsg() {
    *this = ::std::move(from);
  }

  inline MapParkingSlotsMsg& operator=(MapParkingSlotsMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapParkingSlotsMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapParkingSlotsMsg* internal_default_instance() {
    return reinterpret_cast<const MapParkingSlotsMsg*>(
               &_MapParkingSlotsMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MapParkingSlotsMsg* other);
  friend void swap(MapParkingSlotsMsg& a, MapParkingSlotsMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapParkingSlotsMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  MapParkingSlotsMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapParkingSlotsMsg& from);
  void MergeFrom(const MapParkingSlotsMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapParkingSlotsMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.MapParkingSlots map_parking_slots = 3;
  bool has_map_parking_slots() const;
  void clear_map_parking_slots();
  static const int kMapParkingSlotsFieldNumber = 3;
  const ::autodrive::workflow::proto::MapParkingSlots& map_parking_slots() const;
  ::autodrive::workflow::proto::MapParkingSlots* release_map_parking_slots();
  ::autodrive::workflow::proto::MapParkingSlots* mutable_map_parking_slots();
  void set_allocated_map_parking_slots(::autodrive::workflow::proto::MapParkingSlots* map_parking_slots);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.MapParkingSlotsMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::MapParkingSlots* map_parking_slots_;
  mutable int _cached_size_;
  friend struct ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::TableStruct;
  friend void ::protobuf_hmi_5fmap_5fparking_5fslots_2eproto::InitDefaultsMapParkingSlotsMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapParkingSlot

// int32 slot_id = 1;
inline void MapParkingSlot::clear_slot_id() {
  slot_id_ = 0;
}
inline ::google::protobuf::int32 MapParkingSlot::slot_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapParkingSlot.slot_id)
  return slot_id_;
}
inline void MapParkingSlot::set_slot_id(::google::protobuf::int32 value) {
  
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapParkingSlot.slot_id)
}

// int32 slot_state = 2;
inline void MapParkingSlot::clear_slot_state() {
  slot_state_ = 0;
}
inline ::google::protobuf::int32 MapParkingSlot::slot_state() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapParkingSlot.slot_state)
  return slot_state_;
}
inline void MapParkingSlot::set_slot_state(::google::protobuf::int32 value) {
  
  slot_state_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapParkingSlot.slot_state)
}

// int32 slot_type = 3;
inline void MapParkingSlot::clear_slot_type() {
  slot_type_ = 0;
}
inline ::google::protobuf::int32 MapParkingSlot::slot_type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapParkingSlot.slot_type)
  return slot_type_;
}
inline void MapParkingSlot::set_slot_type(::google::protobuf::int32 value) {
  
  slot_type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.MapParkingSlot.slot_type)
}

// repeated .autodrive.workflow.proto.Vector3f slot_points = 4;
inline int MapParkingSlot::slot_points_size() const {
  return slot_points_.size();
}
inline const ::autodrive::workflow::proto::Vector3f& MapParkingSlot::slot_points(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapParkingSlot.slot_points)
  return slot_points_.Get(index);
}
inline ::autodrive::workflow::proto::Vector3f* MapParkingSlot::mutable_slot_points(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapParkingSlot.slot_points)
  return slot_points_.Mutable(index);
}
inline ::autodrive::workflow::proto::Vector3f* MapParkingSlot::add_slot_points() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.MapParkingSlot.slot_points)
  return slot_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f >*
MapParkingSlot::mutable_slot_points() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.MapParkingSlot.slot_points)
  return &slot_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::Vector3f >&
MapParkingSlot::slot_points() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.MapParkingSlot.slot_points)
  return slot_points_;
}

// -------------------------------------------------------------------

// MapParkingSlots

// repeated .autodrive.workflow.proto.MapParkingSlot all_map_parking_slots = 1;
inline int MapParkingSlots::all_map_parking_slots_size() const {
  return all_map_parking_slots_.size();
}
inline void MapParkingSlots::clear_all_map_parking_slots() {
  all_map_parking_slots_.Clear();
}
inline const ::autodrive::workflow::proto::MapParkingSlot& MapParkingSlots::all_map_parking_slots(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapParkingSlots.all_map_parking_slots)
  return all_map_parking_slots_.Get(index);
}
inline ::autodrive::workflow::proto::MapParkingSlot* MapParkingSlots::mutable_all_map_parking_slots(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapParkingSlots.all_map_parking_slots)
  return all_map_parking_slots_.Mutable(index);
}
inline ::autodrive::workflow::proto::MapParkingSlot* MapParkingSlots::add_all_map_parking_slots() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.MapParkingSlots.all_map_parking_slots)
  return all_map_parking_slots_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapParkingSlot >*
MapParkingSlots::mutable_all_map_parking_slots() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.MapParkingSlots.all_map_parking_slots)
  return &all_map_parking_slots_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::MapParkingSlot >&
MapParkingSlots::all_map_parking_slots() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.MapParkingSlots.all_map_parking_slots)
  return all_map_parking_slots_;
}

// -------------------------------------------------------------------

// MapParkingSlotsMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool MapParkingSlotsMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& MapParkingSlotsMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapParkingSlotsMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* MapParkingSlotsMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapParkingSlotsMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* MapParkingSlotsMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapParkingSlotsMsg.header)
  return header_;
}
inline void MapParkingSlotsMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapParkingSlotsMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool MapParkingSlotsMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& MapParkingSlotsMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapParkingSlotsMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* MapParkingSlotsMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapParkingSlotsMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* MapParkingSlotsMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapParkingSlotsMsg.error)
  return error_;
}
inline void MapParkingSlotsMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapParkingSlotsMsg.error)
}

// .autodrive.workflow.proto.MapParkingSlots map_parking_slots = 3;
inline bool MapParkingSlotsMsg::has_map_parking_slots() const {
  return this != internal_default_instance() && map_parking_slots_ != NULL;
}
inline void MapParkingSlotsMsg::clear_map_parking_slots() {
  if (GetArenaNoVirtual() == NULL && map_parking_slots_ != NULL) {
    delete map_parking_slots_;
  }
  map_parking_slots_ = NULL;
}
inline const ::autodrive::workflow::proto::MapParkingSlots& MapParkingSlotsMsg::map_parking_slots() const {
  const ::autodrive::workflow::proto::MapParkingSlots* p = map_parking_slots_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.MapParkingSlotsMsg.map_parking_slots)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MapParkingSlots*>(
      &::autodrive::workflow::proto::_MapParkingSlots_default_instance_);
}
inline ::autodrive::workflow::proto::MapParkingSlots* MapParkingSlotsMsg::release_map_parking_slots() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.MapParkingSlotsMsg.map_parking_slots)
  
  ::autodrive::workflow::proto::MapParkingSlots* temp = map_parking_slots_;
  map_parking_slots_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MapParkingSlots* MapParkingSlotsMsg::mutable_map_parking_slots() {
  
  if (map_parking_slots_ == NULL) {
    map_parking_slots_ = new ::autodrive::workflow::proto::MapParkingSlots;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.MapParkingSlotsMsg.map_parking_slots)
  return map_parking_slots_;
}
inline void MapParkingSlotsMsg::set_allocated_map_parking_slots(::autodrive::workflow::proto::MapParkingSlots* map_parking_slots) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete map_parking_slots_;
  }
  if (map_parking_slots) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_parking_slots = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_parking_slots, submessage_arena);
    }
    
  } else {
    
  }
  map_parking_slots_ = map_parking_slots;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.MapParkingSlotsMsg.map_parking_slots)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hmi_5fmap_5fparking_5fslots_2eproto__INCLUDED
