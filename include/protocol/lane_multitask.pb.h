// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_multitask.proto

#ifndef PROTOBUF_lane_5fmultitask_2eproto__INCLUDED
#define PROTOBUF_lane_5fmultitask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "road_info.pb.h"
#include "basic.pb.h"
#include "perception_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_lane_5fmultitask_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLaneParsingImageDataImpl();
void InitDefaultsLaneParsingImageData();
void InitDefaultsEdgePointImpl();
void InitDefaultsEdgePoint();
void InitDefaultsLaneTransitionPointImpl();
void InitDefaultsLaneTransitionPoint();
void InitDefaultsLineBasicInfoPtsImpl();
void InitDefaultsLineBasicInfoPts();
void InitDefaultsLineExtraInfoPtsImpl();
void InitDefaultsLineExtraInfoPts();
void InitDefaultsLaneContourImpl();
void InitDefaultsLaneContour();
void InitDefaultsLaneMultitaskMsgImpl();
void InitDefaultsLaneMultitaskMsg();
inline void InitDefaults() {
  InitDefaultsLaneParsingImageData();
  InitDefaultsEdgePoint();
  InitDefaultsLaneTransitionPoint();
  InitDefaultsLineBasicInfoPts();
  InitDefaultsLineExtraInfoPts();
  InitDefaultsLaneContour();
  InitDefaultsLaneMultitaskMsg();
}
}  // namespace protobuf_lane_5fmultitask_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class EdgePoint;
class EdgePointDefaultTypeInternal;
extern EdgePointDefaultTypeInternal _EdgePoint_default_instance_;
class LaneContour;
class LaneContourDefaultTypeInternal;
extern LaneContourDefaultTypeInternal _LaneContour_default_instance_;
class LaneMultitaskMsg;
class LaneMultitaskMsgDefaultTypeInternal;
extern LaneMultitaskMsgDefaultTypeInternal _LaneMultitaskMsg_default_instance_;
class LaneParsingImageData;
class LaneParsingImageDataDefaultTypeInternal;
extern LaneParsingImageDataDefaultTypeInternal _LaneParsingImageData_default_instance_;
class LaneTransitionPoint;
class LaneTransitionPointDefaultTypeInternal;
extern LaneTransitionPointDefaultTypeInternal _LaneTransitionPoint_default_instance_;
class LineBasicInfoPts;
class LineBasicInfoPtsDefaultTypeInternal;
extern LineBasicInfoPtsDefaultTypeInternal _LineBasicInfoPts_default_instance_;
class LineExtraInfoPts;
class LineExtraInfoPtsDefaultTypeInternal;
extern LineExtraInfoPtsDefaultTypeInternal _LineExtraInfoPts_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class LaneParsingImageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LaneParsingImageData) */ {
 public:
  LaneParsingImageData();
  virtual ~LaneParsingImageData();

  LaneParsingImageData(const LaneParsingImageData& from);

  inline LaneParsingImageData& operator=(const LaneParsingImageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneParsingImageData(LaneParsingImageData&& from) noexcept
    : LaneParsingImageData() {
    *this = ::std::move(from);
  }

  inline LaneParsingImageData& operator=(LaneParsingImageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneParsingImageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneParsingImageData* internal_default_instance() {
    return reinterpret_cast<const LaneParsingImageData*>(
               &_LaneParsingImageData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LaneParsingImageData* other);
  friend void swap(LaneParsingImageData& a, LaneParsingImageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneParsingImageData* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneParsingImageData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneParsingImageData& from);
  void MergeFrom(const LaneParsingImageData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneParsingImageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 channel = 4;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LaneParsingImageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 channel_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneParsingImageDataImpl();
};
// -------------------------------------------------------------------

class EdgePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.EdgePoint) */ {
 public:
  EdgePoint();
  virtual ~EdgePoint();

  EdgePoint(const EdgePoint& from);

  inline EdgePoint& operator=(const EdgePoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EdgePoint(EdgePoint&& from) noexcept
    : EdgePoint() {
    *this = ::std::move(from);
  }

  inline EdgePoint& operator=(EdgePoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EdgePoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgePoint* internal_default_instance() {
    return reinterpret_cast<const EdgePoint*>(
               &_EdgePoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EdgePoint* other);
  friend void swap(EdgePoint& a, EdgePoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EdgePoint* New() const PROTOBUF_FINAL { return New(NULL); }

  EdgePoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EdgePoint& from);
  void MergeFrom(const EdgePoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EdgePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float prob = 3;
  void clear_prob();
  static const int kProbFieldNumber = 3;
  float prob() const;
  void set_prob(float value);

  // .autodrive.workflow.proto.RoadBorderSide side = 4;
  void clear_side();
  static const int kSideFieldNumber = 4;
  ::autodrive::workflow::proto::RoadBorderSide side() const;
  void set_side(::autodrive::workflow::proto::RoadBorderSide value);

  // .autodrive.workflow.proto.RoadBorderType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::autodrive::workflow::proto::RoadBorderType type() const;
  void set_type(::autodrive::workflow::proto::RoadBorderType value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.EdgePoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float prob_;
  int side_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_lane_5fmultitask_2eproto::InitDefaultsEdgePointImpl();
};
// -------------------------------------------------------------------

class LaneTransitionPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LaneTransitionPoint) */ {
 public:
  LaneTransitionPoint();
  virtual ~LaneTransitionPoint();

  LaneTransitionPoint(const LaneTransitionPoint& from);

  inline LaneTransitionPoint& operator=(const LaneTransitionPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneTransitionPoint(LaneTransitionPoint&& from) noexcept
    : LaneTransitionPoint() {
    *this = ::std::move(from);
  }

  inline LaneTransitionPoint& operator=(LaneTransitionPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneTransitionPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneTransitionPoint* internal_default_instance() {
    return reinterpret_cast<const LaneTransitionPoint*>(
               &_LaneTransitionPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LaneTransitionPoint* other);
  friend void swap(LaneTransitionPoint& a, LaneTransitionPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneTransitionPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneTransitionPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneTransitionPoint& from);
  void MergeFrom(const LaneTransitionPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneTransitionPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.TransitionPoints transition_points = 1;
  int transition_points_size() const;
  void clear_transition_points();
  static const int kTransitionPointsFieldNumber = 1;
  const ::autodrive::workflow::proto::TransitionPoints& transition_points(int index) const;
  ::autodrive::workflow::proto::TransitionPoints* mutable_transition_points(int index);
  ::autodrive::workflow::proto::TransitionPoints* add_transition_points();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::TransitionPoints >*
      mutable_transition_points();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::TransitionPoints >&
      transition_points() const;

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LaneTransitionPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::TransitionPoints > transition_points_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneTransitionPointImpl();
};
// -------------------------------------------------------------------

class LineBasicInfoPts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LineBasicInfoPts) */ {
 public:
  LineBasicInfoPts();
  virtual ~LineBasicInfoPts();

  LineBasicInfoPts(const LineBasicInfoPts& from);

  inline LineBasicInfoPts& operator=(const LineBasicInfoPts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LineBasicInfoPts(LineBasicInfoPts&& from) noexcept
    : LineBasicInfoPts() {
    *this = ::std::move(from);
  }

  inline LineBasicInfoPts& operator=(LineBasicInfoPts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LineBasicInfoPts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineBasicInfoPts* internal_default_instance() {
    return reinterpret_cast<const LineBasicInfoPts*>(
               &_LineBasicInfoPts_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LineBasicInfoPts* other);
  friend void swap(LineBasicInfoPts& a, LineBasicInfoPts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LineBasicInfoPts* New() const PROTOBUF_FINAL { return New(NULL); }

  LineBasicInfoPts* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LineBasicInfoPts& from);
  void MergeFrom(const LineBasicInfoPts& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LineBasicInfoPts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector2f pt = 1;
  bool has_pt() const;
  void clear_pt();
  static const int kPtFieldNumber = 1;
  const ::autodrive::workflow::proto::Vector2f& pt() const;
  ::autodrive::workflow::proto::Vector2f* release_pt();
  ::autodrive::workflow::proto::Vector2f* mutable_pt();
  void set_allocated_pt(::autodrive::workflow::proto::Vector2f* pt);

  // .autodrive.workflow.proto.Vector2f pt_rle = 2;
  bool has_pt_rle() const;
  void clear_pt_rle();
  static const int kPtRleFieldNumber = 2;
  const ::autodrive::workflow::proto::Vector2f& pt_rle() const;
  ::autodrive::workflow::proto::Vector2f* release_pt_rle();
  ::autodrive::workflow::proto::Vector2f* mutable_pt_rle();
  void set_allocated_pt_rle(::autodrive::workflow::proto::Vector2f* pt_rle);

  // .autodrive.workflow.proto.Vector2f pt_oriimg = 3;
  bool has_pt_oriimg() const;
  void clear_pt_oriimg();
  static const int kPtOriimgFieldNumber = 3;
  const ::autodrive::workflow::proto::Vector2f& pt_oriimg() const;
  ::autodrive::workflow::proto::Vector2f* release_pt_oriimg();
  ::autodrive::workflow::proto::Vector2f* mutable_pt_oriimg();
  void set_allocated_pt_oriimg(::autodrive::workflow::proto::Vector2f* pt_oriimg);

  // .autodrive.workflow.proto.Vector2f pt_img = 4;
  bool has_pt_img() const;
  void clear_pt_img();
  static const int kPtImgFieldNumber = 4;
  const ::autodrive::workflow::proto::Vector2f& pt_img() const;
  ::autodrive::workflow::proto::Vector2f* release_pt_img();
  ::autodrive::workflow::proto::Vector2f* mutable_pt_img();
  void set_allocated_pt_img(::autodrive::workflow::proto::Vector2f* pt_img);

  // uint64 label = 5;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::uint64 label() const;
  void set_label(::google::protobuf::uint64 value);

  // int32 conf = 6;
  void clear_conf();
  static const int kConfFieldNumber = 6;
  ::google::protobuf::int32 conf() const;
  void set_conf(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LineBasicInfoPts)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector2f* pt_;
  ::autodrive::workflow::proto::Vector2f* pt_rle_;
  ::autodrive::workflow::proto::Vector2f* pt_oriimg_;
  ::autodrive::workflow::proto::Vector2f* pt_img_;
  ::google::protobuf::uint64 label_;
  ::google::protobuf::int32 conf_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLineBasicInfoPtsImpl();
};
// -------------------------------------------------------------------

class LineExtraInfoPts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LineExtraInfoPts) */ {
 public:
  LineExtraInfoPts();
  virtual ~LineExtraInfoPts();

  LineExtraInfoPts(const LineExtraInfoPts& from);

  inline LineExtraInfoPts& operator=(const LineExtraInfoPts& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LineExtraInfoPts(LineExtraInfoPts&& from) noexcept
    : LineExtraInfoPts() {
    *this = ::std::move(from);
  }

  inline LineExtraInfoPts& operator=(LineExtraInfoPts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LineExtraInfoPts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineExtraInfoPts* internal_default_instance() {
    return reinterpret_cast<const LineExtraInfoPts*>(
               &_LineExtraInfoPts_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LineExtraInfoPts* other);
  friend void swap(LineExtraInfoPts& a, LineExtraInfoPts& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LineExtraInfoPts* New() const PROTOBUF_FINAL { return New(NULL); }

  LineExtraInfoPts* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LineExtraInfoPts& from);
  void MergeFrom(const LineExtraInfoPts& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LineExtraInfoPts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector2f pt_rle_c = 5;
  bool has_pt_rle_c() const;
  void clear_pt_rle_c();
  static const int kPtRleCFieldNumber = 5;
  const ::autodrive::workflow::proto::Vector2f& pt_rle_c() const;
  ::autodrive::workflow::proto::Vector2f* release_pt_rle_c();
  ::autodrive::workflow::proto::Vector2f* mutable_pt_rle_c();
  void set_allocated_pt_rle_c(::autodrive::workflow::proto::Vector2f* pt_rle_c);

  // .autodrive.workflow.proto.Vector2f width_info = 6;
  bool has_width_info() const;
  void clear_width_info();
  static const int kWidthInfoFieldNumber = 6;
  const ::autodrive::workflow::proto::Vector2f& width_info() const;
  ::autodrive::workflow::proto::Vector2f* release_width_info();
  ::autodrive::workflow::proto::Vector2f* mutable_width_info();
  void set_allocated_width_info(::autodrive::workflow::proto::Vector2f* width_info);

  // int32 xstart = 1;
  void clear_xstart();
  static const int kXstartFieldNumber = 1;
  ::google::protobuf::int32 xstart() const;
  void set_xstart(::google::protobuf::int32 value);

  // int32 xend = 2;
  void clear_xend();
  static const int kXendFieldNumber = 2;
  ::google::protobuf::int32 xend() const;
  void set_xend(::google::protobuf::int32 value);

  // int32 y_parsing = 3;
  void clear_y_parsing();
  static const int kYParsingFieldNumber = 3;
  ::google::protobuf::int32 y_parsing() const;
  void set_y_parsing(::google::protobuf::int32 value);

  // int32 gray = 4;
  void clear_gray();
  static const int kGrayFieldNumber = 4;
  ::google::protobuf::int32 gray() const;
  void set_gray(::google::protobuf::int32 value);

  // bool flag_dash_endpt = 7;
  void clear_flag_dash_endpt();
  static const int kFlagDashEndptFieldNumber = 7;
  bool flag_dash_endpt() const;
  void set_flag_dash_endpt(bool value);

  // bool horizontal = 8;
  void clear_horizontal();
  static const int kHorizontalFieldNumber = 8;
  bool horizontal() const;
  void set_horizontal(bool value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LineExtraInfoPts)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector2f* pt_rle_c_;
  ::autodrive::workflow::proto::Vector2f* width_info_;
  ::google::protobuf::int32 xstart_;
  ::google::protobuf::int32 xend_;
  ::google::protobuf::int32 y_parsing_;
  ::google::protobuf::int32 gray_;
  bool flag_dash_endpt_;
  bool horizontal_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLineExtraInfoPtsImpl();
};
// -------------------------------------------------------------------

class LaneContour : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LaneContour) */ {
 public:
  LaneContour();
  virtual ~LaneContour();

  LaneContour(const LaneContour& from);

  inline LaneContour& operator=(const LaneContour& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneContour(LaneContour&& from) noexcept
    : LaneContour() {
    *this = ::std::move(from);
  }

  inline LaneContour& operator=(LaneContour&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneContour& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneContour* internal_default_instance() {
    return reinterpret_cast<const LaneContour*>(
               &_LaneContour_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LaneContour* other);
  friend void swap(LaneContour& a, LaneContour& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneContour* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneContour* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneContour& from);
  void MergeFrom(const LaneContour& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneContour* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.LineBasicInfoPts basic_pts = 1;
  int basic_pts_size() const;
  void clear_basic_pts();
  static const int kBasicPtsFieldNumber = 1;
  const ::autodrive::workflow::proto::LineBasicInfoPts& basic_pts(int index) const;
  ::autodrive::workflow::proto::LineBasicInfoPts* mutable_basic_pts(int index);
  ::autodrive::workflow::proto::LineBasicInfoPts* add_basic_pts();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineBasicInfoPts >*
      mutable_basic_pts();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineBasicInfoPts >&
      basic_pts() const;

  // repeated .autodrive.workflow.proto.LineExtraInfoPts extra_pts = 2;
  int extra_pts_size() const;
  void clear_extra_pts();
  static const int kExtraPtsFieldNumber = 2;
  const ::autodrive::workflow::proto::LineExtraInfoPts& extra_pts(int index) const;
  ::autodrive::workflow::proto::LineExtraInfoPts* mutable_extra_pts(int index);
  ::autodrive::workflow::proto::LineExtraInfoPts* add_extra_pts();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineExtraInfoPts >*
      mutable_extra_pts();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineExtraInfoPts >&
      extra_pts() const;

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LaneContour)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineBasicInfoPts > basic_pts_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineExtraInfoPts > extra_pts_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneContourImpl();
};
// -------------------------------------------------------------------

class LaneMultitaskMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LaneMultitaskMsg) */ {
 public:
  LaneMultitaskMsg();
  virtual ~LaneMultitaskMsg();

  LaneMultitaskMsg(const LaneMultitaskMsg& from);

  inline LaneMultitaskMsg& operator=(const LaneMultitaskMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneMultitaskMsg(LaneMultitaskMsg&& from) noexcept
    : LaneMultitaskMsg() {
    *this = ::std::move(from);
  }

  inline LaneMultitaskMsg& operator=(LaneMultitaskMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneMultitaskMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneMultitaskMsg* internal_default_instance() {
    return reinterpret_cast<const LaneMultitaskMsg*>(
               &_LaneMultitaskMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(LaneMultitaskMsg* other);
  friend void swap(LaneMultitaskMsg& a, LaneMultitaskMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneMultitaskMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneMultitaskMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneMultitaskMsg& from);
  void MergeFrom(const LaneMultitaskMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneMultitaskMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 4;
  int lane_parsing_image_size() const;
  void clear_lane_parsing_image();
  static const int kLaneParsingImageFieldNumber = 4;
  const ::autodrive::workflow::proto::LaneParsingImageData& lane_parsing_image(int index) const;
  ::autodrive::workflow::proto::LaneParsingImageData* mutable_lane_parsing_image(int index);
  ::autodrive::workflow::proto::LaneParsingImageData* add_lane_parsing_image();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneParsingImageData >*
      mutable_lane_parsing_image();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneParsingImageData >&
      lane_parsing_image() const;

  // repeated .autodrive.workflow.proto.LaneContour lane_contours = 6;
  int lane_contours_size() const;
  void clear_lane_contours();
  static const int kLaneContoursFieldNumber = 6;
  const ::autodrive::workflow::proto::LaneContour& lane_contours(int index) const;
  ::autodrive::workflow::proto::LaneContour* mutable_lane_contours(int index);
  ::autodrive::workflow::proto::LaneContour* add_lane_contours();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneContour >*
      mutable_lane_contours();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneContour >&
      lane_contours() const;

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.LaneTransitionPoint lane_transition_point = 3;
  bool has_lane_transition_point() const;
  void clear_lane_transition_point();
  static const int kLaneTransitionPointFieldNumber = 3;
  const ::autodrive::workflow::proto::LaneTransitionPoint& lane_transition_point() const;
  ::autodrive::workflow::proto::LaneTransitionPoint* release_lane_transition_point();
  ::autodrive::workflow::proto::LaneTransitionPoint* mutable_lane_transition_point();
  void set_allocated_lane_transition_point(::autodrive::workflow::proto::LaneTransitionPoint* lane_transition_point);

  // .autodrive.workflow.proto.perception_base.Rect roi = 7;
  bool has_roi() const;
  void clear_roi();
  static const int kRoiFieldNumber = 7;
  const ::autodrive::workflow::proto::perception_base::Rect& roi() const;
  ::autodrive::workflow::proto::perception_base::Rect* release_roi();
  ::autodrive::workflow::proto::perception_base::Rect* mutable_roi();
  void set_allocated_roi(::autodrive::workflow::proto::perception_base::Rect* roi);

  // int32 camera_id = 5;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 5;
  ::google::protobuf::int32 camera_id() const;
  void set_camera_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LaneMultitaskMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneParsingImageData > lane_parsing_image_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneContour > lane_contours_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::LaneTransitionPoint* lane_transition_point_;
  ::autodrive::workflow::proto::perception_base::Rect* roi_;
  ::google::protobuf::int32 camera_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fmultitask_2eproto::TableStruct;
  friend void ::protobuf_lane_5fmultitask_2eproto::InitDefaultsLaneMultitaskMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneParsingImageData

// bytes data = 1;
inline void LaneParsingImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaneParsingImageData::data() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneParsingImageData.data)
  return data_.GetNoArena();
}
inline void LaneParsingImageData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LaneParsingImageData.data)
}
#if LANG_CXX11
inline void LaneParsingImageData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:autodrive.workflow.proto.LaneParsingImageData.data)
}
#endif
inline void LaneParsingImageData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:autodrive.workflow.proto.LaneParsingImageData.data)
}
inline void LaneParsingImageData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:autodrive.workflow.proto.LaneParsingImageData.data)
}
inline ::std::string* LaneParsingImageData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneParsingImageData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneParsingImageData::release_data() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneParsingImageData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneParsingImageData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneParsingImageData.data)
}

// uint32 width = 2;
inline void LaneParsingImageData::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 LaneParsingImageData::width() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneParsingImageData.width)
  return width_;
}
inline void LaneParsingImageData::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LaneParsingImageData.width)
}

// uint32 height = 3;
inline void LaneParsingImageData::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 LaneParsingImageData::height() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneParsingImageData.height)
  return height_;
}
inline void LaneParsingImageData::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LaneParsingImageData.height)
}

// uint32 channel = 4;
inline void LaneParsingImageData::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 LaneParsingImageData::channel() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneParsingImageData.channel)
  return channel_;
}
inline void LaneParsingImageData::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LaneParsingImageData.channel)
}

// -------------------------------------------------------------------

// EdgePoint

// float x = 1;
inline void EdgePoint::clear_x() {
  x_ = 0;
}
inline float EdgePoint::x() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.EdgePoint.x)
  return x_;
}
inline void EdgePoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.EdgePoint.x)
}

// float y = 2;
inline void EdgePoint::clear_y() {
  y_ = 0;
}
inline float EdgePoint::y() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.EdgePoint.y)
  return y_;
}
inline void EdgePoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.EdgePoint.y)
}

// float prob = 3;
inline void EdgePoint::clear_prob() {
  prob_ = 0;
}
inline float EdgePoint::prob() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.EdgePoint.prob)
  return prob_;
}
inline void EdgePoint::set_prob(float value) {
  
  prob_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.EdgePoint.prob)
}

// .autodrive.workflow.proto.RoadBorderSide side = 4;
inline void EdgePoint::clear_side() {
  side_ = 0;
}
inline ::autodrive::workflow::proto::RoadBorderSide EdgePoint::side() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.EdgePoint.side)
  return static_cast< ::autodrive::workflow::proto::RoadBorderSide >(side_);
}
inline void EdgePoint::set_side(::autodrive::workflow::proto::RoadBorderSide value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.EdgePoint.side)
}

// .autodrive.workflow.proto.RoadBorderType type = 5;
inline void EdgePoint::clear_type() {
  type_ = 0;
}
inline ::autodrive::workflow::proto::RoadBorderType EdgePoint::type() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.EdgePoint.type)
  return static_cast< ::autodrive::workflow::proto::RoadBorderType >(type_);
}
inline void EdgePoint::set_type(::autodrive::workflow::proto::RoadBorderType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.EdgePoint.type)
}

// -------------------------------------------------------------------

// LaneTransitionPoint

// repeated .autodrive.workflow.proto.TransitionPoints transition_points = 1;
inline int LaneTransitionPoint::transition_points_size() const {
  return transition_points_.size();
}
inline const ::autodrive::workflow::proto::TransitionPoints& LaneTransitionPoint::transition_points(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneTransitionPoint.transition_points)
  return transition_points_.Get(index);
}
inline ::autodrive::workflow::proto::TransitionPoints* LaneTransitionPoint::mutable_transition_points(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneTransitionPoint.transition_points)
  return transition_points_.Mutable(index);
}
inline ::autodrive::workflow::proto::TransitionPoints* LaneTransitionPoint::add_transition_points() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.LaneTransitionPoint.transition_points)
  return transition_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::TransitionPoints >*
LaneTransitionPoint::mutable_transition_points() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.LaneTransitionPoint.transition_points)
  return &transition_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::TransitionPoints >&
LaneTransitionPoint::transition_points() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.LaneTransitionPoint.transition_points)
  return transition_points_;
}

// -------------------------------------------------------------------

// LineBasicInfoPts

// .autodrive.workflow.proto.Vector2f pt = 1;
inline bool LineBasicInfoPts::has_pt() const {
  return this != internal_default_instance() && pt_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& LineBasicInfoPts::pt() const {
  const ::autodrive::workflow::proto::Vector2f* p = pt_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineBasicInfoPts.pt)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* LineBasicInfoPts::release_pt() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LineBasicInfoPts.pt)
  
  ::autodrive::workflow::proto::Vector2f* temp = pt_;
  pt_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* LineBasicInfoPts::mutable_pt() {
  
  if (pt_ == NULL) {
    pt_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LineBasicInfoPts.pt)
  return pt_;
}
inline void LineBasicInfoPts::set_allocated_pt(::autodrive::workflow::proto::Vector2f* pt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pt_);
  }
  if (pt) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt, submessage_arena);
    }
    
  } else {
    
  }
  pt_ = pt;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LineBasicInfoPts.pt)
}

// .autodrive.workflow.proto.Vector2f pt_rle = 2;
inline bool LineBasicInfoPts::has_pt_rle() const {
  return this != internal_default_instance() && pt_rle_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& LineBasicInfoPts::pt_rle() const {
  const ::autodrive::workflow::proto::Vector2f* p = pt_rle_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineBasicInfoPts.pt_rle)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* LineBasicInfoPts::release_pt_rle() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LineBasicInfoPts.pt_rle)
  
  ::autodrive::workflow::proto::Vector2f* temp = pt_rle_;
  pt_rle_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* LineBasicInfoPts::mutable_pt_rle() {
  
  if (pt_rle_ == NULL) {
    pt_rle_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LineBasicInfoPts.pt_rle)
  return pt_rle_;
}
inline void LineBasicInfoPts::set_allocated_pt_rle(::autodrive::workflow::proto::Vector2f* pt_rle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pt_rle_);
  }
  if (pt_rle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pt_rle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt_rle, submessage_arena);
    }
    
  } else {
    
  }
  pt_rle_ = pt_rle;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LineBasicInfoPts.pt_rle)
}

// .autodrive.workflow.proto.Vector2f pt_oriimg = 3;
inline bool LineBasicInfoPts::has_pt_oriimg() const {
  return this != internal_default_instance() && pt_oriimg_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& LineBasicInfoPts::pt_oriimg() const {
  const ::autodrive::workflow::proto::Vector2f* p = pt_oriimg_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineBasicInfoPts.pt_oriimg)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* LineBasicInfoPts::release_pt_oriimg() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LineBasicInfoPts.pt_oriimg)
  
  ::autodrive::workflow::proto::Vector2f* temp = pt_oriimg_;
  pt_oriimg_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* LineBasicInfoPts::mutable_pt_oriimg() {
  
  if (pt_oriimg_ == NULL) {
    pt_oriimg_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LineBasicInfoPts.pt_oriimg)
  return pt_oriimg_;
}
inline void LineBasicInfoPts::set_allocated_pt_oriimg(::autodrive::workflow::proto::Vector2f* pt_oriimg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pt_oriimg_);
  }
  if (pt_oriimg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pt_oriimg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt_oriimg, submessage_arena);
    }
    
  } else {
    
  }
  pt_oriimg_ = pt_oriimg;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LineBasicInfoPts.pt_oriimg)
}

// .autodrive.workflow.proto.Vector2f pt_img = 4;
inline bool LineBasicInfoPts::has_pt_img() const {
  return this != internal_default_instance() && pt_img_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& LineBasicInfoPts::pt_img() const {
  const ::autodrive::workflow::proto::Vector2f* p = pt_img_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineBasicInfoPts.pt_img)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* LineBasicInfoPts::release_pt_img() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LineBasicInfoPts.pt_img)
  
  ::autodrive::workflow::proto::Vector2f* temp = pt_img_;
  pt_img_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* LineBasicInfoPts::mutable_pt_img() {
  
  if (pt_img_ == NULL) {
    pt_img_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LineBasicInfoPts.pt_img)
  return pt_img_;
}
inline void LineBasicInfoPts::set_allocated_pt_img(::autodrive::workflow::proto::Vector2f* pt_img) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pt_img_);
  }
  if (pt_img) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pt_img = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt_img, submessage_arena);
    }
    
  } else {
    
  }
  pt_img_ = pt_img;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LineBasicInfoPts.pt_img)
}

// uint64 label = 5;
inline void LineBasicInfoPts::clear_label() {
  label_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LineBasicInfoPts::label() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineBasicInfoPts.label)
  return label_;
}
inline void LineBasicInfoPts::set_label(::google::protobuf::uint64 value) {
  
  label_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LineBasicInfoPts.label)
}

// int32 conf = 6;
inline void LineBasicInfoPts::clear_conf() {
  conf_ = 0;
}
inline ::google::protobuf::int32 LineBasicInfoPts::conf() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineBasicInfoPts.conf)
  return conf_;
}
inline void LineBasicInfoPts::set_conf(::google::protobuf::int32 value) {
  
  conf_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LineBasicInfoPts.conf)
}

// -------------------------------------------------------------------

// LineExtraInfoPts

// int32 xstart = 1;
inline void LineExtraInfoPts::clear_xstart() {
  xstart_ = 0;
}
inline ::google::protobuf::int32 LineExtraInfoPts::xstart() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineExtraInfoPts.xstart)
  return xstart_;
}
inline void LineExtraInfoPts::set_xstart(::google::protobuf::int32 value) {
  
  xstart_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LineExtraInfoPts.xstart)
}

// int32 xend = 2;
inline void LineExtraInfoPts::clear_xend() {
  xend_ = 0;
}
inline ::google::protobuf::int32 LineExtraInfoPts::xend() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineExtraInfoPts.xend)
  return xend_;
}
inline void LineExtraInfoPts::set_xend(::google::protobuf::int32 value) {
  
  xend_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LineExtraInfoPts.xend)
}

// int32 y_parsing = 3;
inline void LineExtraInfoPts::clear_y_parsing() {
  y_parsing_ = 0;
}
inline ::google::protobuf::int32 LineExtraInfoPts::y_parsing() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineExtraInfoPts.y_parsing)
  return y_parsing_;
}
inline void LineExtraInfoPts::set_y_parsing(::google::protobuf::int32 value) {
  
  y_parsing_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LineExtraInfoPts.y_parsing)
}

// int32 gray = 4;
inline void LineExtraInfoPts::clear_gray() {
  gray_ = 0;
}
inline ::google::protobuf::int32 LineExtraInfoPts::gray() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineExtraInfoPts.gray)
  return gray_;
}
inline void LineExtraInfoPts::set_gray(::google::protobuf::int32 value) {
  
  gray_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LineExtraInfoPts.gray)
}

// .autodrive.workflow.proto.Vector2f pt_rle_c = 5;
inline bool LineExtraInfoPts::has_pt_rle_c() const {
  return this != internal_default_instance() && pt_rle_c_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& LineExtraInfoPts::pt_rle_c() const {
  const ::autodrive::workflow::proto::Vector2f* p = pt_rle_c_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineExtraInfoPts.pt_rle_c)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* LineExtraInfoPts::release_pt_rle_c() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LineExtraInfoPts.pt_rle_c)
  
  ::autodrive::workflow::proto::Vector2f* temp = pt_rle_c_;
  pt_rle_c_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* LineExtraInfoPts::mutable_pt_rle_c() {
  
  if (pt_rle_c_ == NULL) {
    pt_rle_c_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LineExtraInfoPts.pt_rle_c)
  return pt_rle_c_;
}
inline void LineExtraInfoPts::set_allocated_pt_rle_c(::autodrive::workflow::proto::Vector2f* pt_rle_c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pt_rle_c_);
  }
  if (pt_rle_c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pt_rle_c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt_rle_c, submessage_arena);
    }
    
  } else {
    
  }
  pt_rle_c_ = pt_rle_c;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LineExtraInfoPts.pt_rle_c)
}

// .autodrive.workflow.proto.Vector2f width_info = 6;
inline bool LineExtraInfoPts::has_width_info() const {
  return this != internal_default_instance() && width_info_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& LineExtraInfoPts::width_info() const {
  const ::autodrive::workflow::proto::Vector2f* p = width_info_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineExtraInfoPts.width_info)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* LineExtraInfoPts::release_width_info() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LineExtraInfoPts.width_info)
  
  ::autodrive::workflow::proto::Vector2f* temp = width_info_;
  width_info_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* LineExtraInfoPts::mutable_width_info() {
  
  if (width_info_ == NULL) {
    width_info_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LineExtraInfoPts.width_info)
  return width_info_;
}
inline void LineExtraInfoPts::set_allocated_width_info(::autodrive::workflow::proto::Vector2f* width_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(width_info_);
  }
  if (width_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      width_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, width_info, submessage_arena);
    }
    
  } else {
    
  }
  width_info_ = width_info;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LineExtraInfoPts.width_info)
}

// bool flag_dash_endpt = 7;
inline void LineExtraInfoPts::clear_flag_dash_endpt() {
  flag_dash_endpt_ = false;
}
inline bool LineExtraInfoPts::flag_dash_endpt() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineExtraInfoPts.flag_dash_endpt)
  return flag_dash_endpt_;
}
inline void LineExtraInfoPts::set_flag_dash_endpt(bool value) {
  
  flag_dash_endpt_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LineExtraInfoPts.flag_dash_endpt)
}

// bool horizontal = 8;
inline void LineExtraInfoPts::clear_horizontal() {
  horizontal_ = false;
}
inline bool LineExtraInfoPts::horizontal() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LineExtraInfoPts.horizontal)
  return horizontal_;
}
inline void LineExtraInfoPts::set_horizontal(bool value) {
  
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LineExtraInfoPts.horizontal)
}

// -------------------------------------------------------------------

// LaneContour

// repeated .autodrive.workflow.proto.LineBasicInfoPts basic_pts = 1;
inline int LaneContour::basic_pts_size() const {
  return basic_pts_.size();
}
inline void LaneContour::clear_basic_pts() {
  basic_pts_.Clear();
}
inline const ::autodrive::workflow::proto::LineBasicInfoPts& LaneContour::basic_pts(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneContour.basic_pts)
  return basic_pts_.Get(index);
}
inline ::autodrive::workflow::proto::LineBasicInfoPts* LaneContour::mutable_basic_pts(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneContour.basic_pts)
  return basic_pts_.Mutable(index);
}
inline ::autodrive::workflow::proto::LineBasicInfoPts* LaneContour::add_basic_pts() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.LaneContour.basic_pts)
  return basic_pts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineBasicInfoPts >*
LaneContour::mutable_basic_pts() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.LaneContour.basic_pts)
  return &basic_pts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineBasicInfoPts >&
LaneContour::basic_pts() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.LaneContour.basic_pts)
  return basic_pts_;
}

// repeated .autodrive.workflow.proto.LineExtraInfoPts extra_pts = 2;
inline int LaneContour::extra_pts_size() const {
  return extra_pts_.size();
}
inline void LaneContour::clear_extra_pts() {
  extra_pts_.Clear();
}
inline const ::autodrive::workflow::proto::LineExtraInfoPts& LaneContour::extra_pts(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneContour.extra_pts)
  return extra_pts_.Get(index);
}
inline ::autodrive::workflow::proto::LineExtraInfoPts* LaneContour::mutable_extra_pts(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneContour.extra_pts)
  return extra_pts_.Mutable(index);
}
inline ::autodrive::workflow::proto::LineExtraInfoPts* LaneContour::add_extra_pts() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.LaneContour.extra_pts)
  return extra_pts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineExtraInfoPts >*
LaneContour::mutable_extra_pts() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.LaneContour.extra_pts)
  return &extra_pts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LineExtraInfoPts >&
LaneContour::extra_pts() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.LaneContour.extra_pts)
  return extra_pts_;
}

// -------------------------------------------------------------------

// LaneMultitaskMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool LaneMultitaskMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& LaneMultitaskMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneMultitaskMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* LaneMultitaskMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneMultitaskMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* LaneMultitaskMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneMultitaskMsg.header)
  return header_;
}
inline void LaneMultitaskMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneMultitaskMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool LaneMultitaskMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& LaneMultitaskMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneMultitaskMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* LaneMultitaskMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneMultitaskMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* LaneMultitaskMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneMultitaskMsg.error)
  return error_;
}
inline void LaneMultitaskMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneMultitaskMsg.error)
}

// .autodrive.workflow.proto.LaneTransitionPoint lane_transition_point = 3;
inline bool LaneMultitaskMsg::has_lane_transition_point() const {
  return this != internal_default_instance() && lane_transition_point_ != NULL;
}
inline void LaneMultitaskMsg::clear_lane_transition_point() {
  if (GetArenaNoVirtual() == NULL && lane_transition_point_ != NULL) {
    delete lane_transition_point_;
  }
  lane_transition_point_ = NULL;
}
inline const ::autodrive::workflow::proto::LaneTransitionPoint& LaneMultitaskMsg::lane_transition_point() const {
  const ::autodrive::workflow::proto::LaneTransitionPoint* p = lane_transition_point_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneMultitaskMsg.lane_transition_point)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::LaneTransitionPoint*>(
      &::autodrive::workflow::proto::_LaneTransitionPoint_default_instance_);
}
inline ::autodrive::workflow::proto::LaneTransitionPoint* LaneMultitaskMsg::release_lane_transition_point() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneMultitaskMsg.lane_transition_point)
  
  ::autodrive::workflow::proto::LaneTransitionPoint* temp = lane_transition_point_;
  lane_transition_point_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::LaneTransitionPoint* LaneMultitaskMsg::mutable_lane_transition_point() {
  
  if (lane_transition_point_ == NULL) {
    lane_transition_point_ = new ::autodrive::workflow::proto::LaneTransitionPoint;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneMultitaskMsg.lane_transition_point)
  return lane_transition_point_;
}
inline void LaneMultitaskMsg::set_allocated_lane_transition_point(::autodrive::workflow::proto::LaneTransitionPoint* lane_transition_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lane_transition_point_;
  }
  if (lane_transition_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_transition_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_transition_point, submessage_arena);
    }
    
  } else {
    
  }
  lane_transition_point_ = lane_transition_point;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneMultitaskMsg.lane_transition_point)
}

// repeated .autodrive.workflow.proto.LaneParsingImageData lane_parsing_image = 4;
inline int LaneMultitaskMsg::lane_parsing_image_size() const {
  return lane_parsing_image_.size();
}
inline void LaneMultitaskMsg::clear_lane_parsing_image() {
  lane_parsing_image_.Clear();
}
inline const ::autodrive::workflow::proto::LaneParsingImageData& LaneMultitaskMsg::lane_parsing_image(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneMultitaskMsg.lane_parsing_image)
  return lane_parsing_image_.Get(index);
}
inline ::autodrive::workflow::proto::LaneParsingImageData* LaneMultitaskMsg::mutable_lane_parsing_image(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneMultitaskMsg.lane_parsing_image)
  return lane_parsing_image_.Mutable(index);
}
inline ::autodrive::workflow::proto::LaneParsingImageData* LaneMultitaskMsg::add_lane_parsing_image() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.LaneMultitaskMsg.lane_parsing_image)
  return lane_parsing_image_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneParsingImageData >*
LaneMultitaskMsg::mutable_lane_parsing_image() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.LaneMultitaskMsg.lane_parsing_image)
  return &lane_parsing_image_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneParsingImageData >&
LaneMultitaskMsg::lane_parsing_image() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.LaneMultitaskMsg.lane_parsing_image)
  return lane_parsing_image_;
}

// int32 camera_id = 5;
inline void LaneMultitaskMsg::clear_camera_id() {
  camera_id_ = 0;
}
inline ::google::protobuf::int32 LaneMultitaskMsg::camera_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneMultitaskMsg.camera_id)
  return camera_id_;
}
inline void LaneMultitaskMsg::set_camera_id(::google::protobuf::int32 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LaneMultitaskMsg.camera_id)
}

// repeated .autodrive.workflow.proto.LaneContour lane_contours = 6;
inline int LaneMultitaskMsg::lane_contours_size() const {
  return lane_contours_.size();
}
inline void LaneMultitaskMsg::clear_lane_contours() {
  lane_contours_.Clear();
}
inline const ::autodrive::workflow::proto::LaneContour& LaneMultitaskMsg::lane_contours(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneMultitaskMsg.lane_contours)
  return lane_contours_.Get(index);
}
inline ::autodrive::workflow::proto::LaneContour* LaneMultitaskMsg::mutable_lane_contours(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneMultitaskMsg.lane_contours)
  return lane_contours_.Mutable(index);
}
inline ::autodrive::workflow::proto::LaneContour* LaneMultitaskMsg::add_lane_contours() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.LaneMultitaskMsg.lane_contours)
  return lane_contours_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneContour >*
LaneMultitaskMsg::mutable_lane_contours() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.LaneMultitaskMsg.lane_contours)
  return &lane_contours_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::LaneContour >&
LaneMultitaskMsg::lane_contours() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.LaneMultitaskMsg.lane_contours)
  return lane_contours_;
}

// .autodrive.workflow.proto.perception_base.Rect roi = 7;
inline bool LaneMultitaskMsg::has_roi() const {
  return this != internal_default_instance() && roi_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::Rect& LaneMultitaskMsg::roi() const {
  const ::autodrive::workflow::proto::perception_base::Rect* p = roi_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneMultitaskMsg.roi)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::Rect*>(
      &::autodrive::workflow::proto::perception_base::_Rect_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::Rect* LaneMultitaskMsg::release_roi() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneMultitaskMsg.roi)
  
  ::autodrive::workflow::proto::perception_base::Rect* temp = roi_;
  roi_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::Rect* LaneMultitaskMsg::mutable_roi() {
  
  if (roi_ == NULL) {
    roi_ = new ::autodrive::workflow::proto::perception_base::Rect;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneMultitaskMsg.roi)
  return roi_;
}
inline void LaneMultitaskMsg::set_allocated_roi(::autodrive::workflow::proto::perception_base::Rect* roi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(roi_);
  }
  if (roi) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    
  } else {
    
  }
  roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneMultitaskMsg.roi)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lane_5fmultitask_2eproto__INCLUDED
