// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fail_safe_result.proto

#ifndef PROTOBUF_fail_5fsafe_5fresult_2eproto__INCLUDED
#define PROTOBUF_fail_5fsafe_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "perception_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_fail_5fsafe_5fresult_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFailSafeLevelImpl();
void InitDefaultsFailSafeLevel();
void InitDefaultsFailSafeResultImpl();
void InitDefaultsFailSafeResult();
void InitDefaultsFailSafeResultsImpl();
void InitDefaultsFailSafeResults();
void InitDefaultsFailsafeResultMsgImpl();
void InitDefaultsFailsafeResultMsg();
inline void InitDefaults() {
  InitDefaultsFailSafeLevel();
  InitDefaultsFailSafeResult();
  InitDefaultsFailSafeResults();
  InitDefaultsFailsafeResultMsg();
}
}  // namespace protobuf_fail_5fsafe_5fresult_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class FailSafeLevel;
class FailSafeLevelDefaultTypeInternal;
extern FailSafeLevelDefaultTypeInternal _FailSafeLevel_default_instance_;
class FailSafeResult;
class FailSafeResultDefaultTypeInternal;
extern FailSafeResultDefaultTypeInternal _FailSafeResult_default_instance_;
class FailSafeResults;
class FailSafeResultsDefaultTypeInternal;
extern FailSafeResultsDefaultTypeInternal _FailSafeResults_default_instance_;
class FailsafeResultMsg;
class FailsafeResultMsgDefaultTypeInternal;
extern FailsafeResultMsgDefaultTypeInternal _FailsafeResultMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

enum SeverityLevel {
  kSeverityLevelNone = 0,
  kSeverityLevelMild = 1,
  kSeverityLevelModerate = 2,
  kSeverityLevelSevere = 3,
  SeverityLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SeverityLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SeverityLevel_IsValid(int value);
const SeverityLevel SeverityLevel_MIN = kSeverityLevelNone;
const SeverityLevel SeverityLevel_MAX = kSeverityLevelSevere;
const int SeverityLevel_ARRAYSIZE = SeverityLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeverityLevel_descriptor();
inline const ::std::string& SeverityLevel_Name(SeverityLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeverityLevel_descriptor(), value);
}
inline bool SeverityLevel_Parse(
    const ::std::string& name, SeverityLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeverityLevel>(
    SeverityLevel_descriptor(), name, value);
}
enum OutOfCalibTsrBs {
  kTSROutOfCalib = 0,
  kTSROutOfCalibAEB = 1,
  kTSROutOfCalibYaw = 2,
  kTSROutOfCalibHorizon = 3,
  OutOfCalibTsrBs_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OutOfCalibTsrBs_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OutOfCalibTsrBs_IsValid(int value);
const OutOfCalibTsrBs OutOfCalibTsrBs_MIN = kTSROutOfCalib;
const OutOfCalibTsrBs OutOfCalibTsrBs_MAX = kTSROutOfCalibHorizon;
const int OutOfCalibTsrBs_ARRAYSIZE = OutOfCalibTsrBs_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutOfCalibTsrBs_descriptor();
inline const ::std::string& OutOfCalibTsrBs_Name(OutOfCalibTsrBs value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutOfCalibTsrBs_descriptor(), value);
}
inline bool OutOfCalibTsrBs_Parse(
    const ::std::string& name, OutOfCalibTsrBs* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutOfCalibTsrBs>(
    OutOfCalibTsrBs_descriptor(), name, value);
}
// ===================================================================

class FailSafeLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.FailSafeLevel) */ {
 public:
  FailSafeLevel();
  virtual ~FailSafeLevel();

  FailSafeLevel(const FailSafeLevel& from);

  inline FailSafeLevel& operator=(const FailSafeLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FailSafeLevel(FailSafeLevel&& from) noexcept
    : FailSafeLevel() {
    *this = ::std::move(from);
  }

  inline FailSafeLevel& operator=(FailSafeLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FailSafeLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FailSafeLevel* internal_default_instance() {
    return reinterpret_cast<const FailSafeLevel*>(
               &_FailSafeLevel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FailSafeLevel* other);
  friend void swap(FailSafeLevel& a, FailSafeLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FailSafeLevel* New() const PROTOBUF_FINAL { return New(NULL); }

  FailSafeLevel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FailSafeLevel& from);
  void MergeFrom(const FailSafeLevel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FailSafeLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.SeverityLevel rain_severity_level = 1;
  void clear_rain_severity_level();
  static const int kRainSeverityLevelFieldNumber = 1;
  ::autodrive::workflow::proto::SeverityLevel rain_severity_level() const;
  void set_rain_severity_level(::autodrive::workflow::proto::SeverityLevel value);

  // .autodrive.workflow.proto.SeverityLevel full_blockage_severity_level = 2;
  void clear_full_blockage_severity_level();
  static const int kFullBlockageSeverityLevelFieldNumber = 2;
  ::autodrive::workflow::proto::SeverityLevel full_blockage_severity_level() const;
  void set_full_blockage_severity_level(::autodrive::workflow::proto::SeverityLevel value);

  // .autodrive.workflow.proto.SeverityLevel blurred_image_severity_level = 3;
  void clear_blurred_image_severity_level();
  static const int kBlurredImageSeverityLevelFieldNumber = 3;
  ::autodrive::workflow::proto::SeverityLevel blurred_image_severity_level() const;
  void set_blurred_image_severity_level(::autodrive::workflow::proto::SeverityLevel value);

  // .autodrive.workflow.proto.SeverityLevel splashes_severity_level = 4;
  void clear_splashes_severity_level();
  static const int kSplashesSeverityLevelFieldNumber = 4;
  ::autodrive::workflow::proto::SeverityLevel splashes_severity_level() const;
  void set_splashes_severity_level(::autodrive::workflow::proto::SeverityLevel value);

  // .autodrive.workflow.proto.SeverityLevel low_sun_severity_level = 5;
  void clear_low_sun_severity_level();
  static const int kLowSunSeverityLevelFieldNumber = 5;
  ::autodrive::workflow::proto::SeverityLevel low_sun_severity_level() const;
  void set_low_sun_severity_level(::autodrive::workflow::proto::SeverityLevel value);

  // .autodrive.workflow.proto.SeverityLevel sun_ray_severity_level = 6;
  void clear_sun_ray_severity_level();
  static const int kSunRaySeverityLevelFieldNumber = 6;
  ::autodrive::workflow::proto::SeverityLevel sun_ray_severity_level() const;
  void set_sun_ray_severity_level(::autodrive::workflow::proto::SeverityLevel value);

  // .autodrive.workflow.proto.SeverityLevel partial_blockage_severity_level = 9;
  void clear_partial_blockage_severity_level();
  static const int kPartialBlockageSeverityLevelFieldNumber = 9;
  ::autodrive::workflow::proto::SeverityLevel partial_blockage_severity_level() const;
  void set_partial_blockage_severity_level(::autodrive::workflow::proto::SeverityLevel value);

  // bool out_of_focus_severity_level = 7;
  void clear_out_of_focus_severity_level();
  static const int kOutOfFocusSeverityLevelFieldNumber = 7;
  bool out_of_focus_severity_level() const;
  void set_out_of_focus_severity_level(bool value);

  // bool out_of_calibration_severity_level = 8;
  void clear_out_of_calibration_severity_level();
  static const int kOutOfCalibrationSeverityLevelFieldNumber = 8;
  bool out_of_calibration_severity_level() const;
  void set_out_of_calibration_severity_level(bool value);

  // bool free_sight = 12;
  void clear_free_sight();
  static const int kFreeSightFieldNumber = 12;
  bool free_sight() const;
  void set_free_sight(bool value);

  // .autodrive.workflow.proto.SeverityLevel frozen_windshield_severity_level = 10;
  void clear_frozen_windshield_severity_level();
  static const int kFrozenWindshieldSeverityLevelFieldNumber = 10;
  ::autodrive::workflow::proto::SeverityLevel frozen_windshield_severity_level() const;
  void set_frozen_windshield_severity_level(::autodrive::workflow::proto::SeverityLevel value);

  // .autodrive.workflow.proto.SeverityLevel fog_severity_level = 11;
  void clear_fog_severity_level();
  static const int kFogSeverityLevelFieldNumber = 11;
  ::autodrive::workflow::proto::SeverityLevel fog_severity_level() const;
  void set_fog_severity_level(::autodrive::workflow::proto::SeverityLevel value);

  // .autodrive.workflow.proto.OutOfCalibTsrBs out_of_calib_tsr_bs = 13;
  void clear_out_of_calib_tsr_bs();
  static const int kOutOfCalibTsrBsFieldNumber = 13;
  ::autodrive::workflow::proto::OutOfCalibTsrBs out_of_calib_tsr_bs() const;
  void set_out_of_calib_tsr_bs(::autodrive::workflow::proto::OutOfCalibTsrBs value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.FailSafeLevel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int rain_severity_level_;
  int full_blockage_severity_level_;
  int blurred_image_severity_level_;
  int splashes_severity_level_;
  int low_sun_severity_level_;
  int sun_ray_severity_level_;
  int partial_blockage_severity_level_;
  bool out_of_focus_severity_level_;
  bool out_of_calibration_severity_level_;
  bool free_sight_;
  int frozen_windshield_severity_level_;
  int fog_severity_level_;
  int out_of_calib_tsr_bs_;
  mutable int _cached_size_;
  friend struct ::protobuf_fail_5fsafe_5fresult_2eproto::TableStruct;
  friend void ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeLevelImpl();
};
// -------------------------------------------------------------------

class FailSafeResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.FailSafeResult) */ {
 public:
  FailSafeResult();
  virtual ~FailSafeResult();

  FailSafeResult(const FailSafeResult& from);

  inline FailSafeResult& operator=(const FailSafeResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FailSafeResult(FailSafeResult&& from) noexcept
    : FailSafeResult() {
    *this = ::std::move(from);
  }

  inline FailSafeResult& operator=(FailSafeResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FailSafeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FailSafeResult* internal_default_instance() {
    return reinterpret_cast<const FailSafeResult*>(
               &_FailSafeResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FailSafeResult* other);
  friend void swap(FailSafeResult& a, FailSafeResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FailSafeResult* New() const PROTOBUF_FINAL { return New(NULL); }

  FailSafeResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FailSafeResult& from);
  void MergeFrom(const FailSafeResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FailSafeResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.FailSafeLevel fail_safe_result = 2;
  bool has_fail_safe_result() const;
  void clear_fail_safe_result();
  static const int kFailSafeResultFieldNumber = 2;
  const ::autodrive::workflow::proto::FailSafeLevel& fail_safe_result() const;
  ::autodrive::workflow::proto::FailSafeLevel* release_fail_safe_result();
  ::autodrive::workflow::proto::FailSafeLevel* mutable_fail_safe_result();
  void set_allocated_fail_safe_result(::autodrive::workflow::proto::FailSafeLevel* fail_safe_result);

  // .autodrive.workflow.proto.perception_base.SceneParsing scene = 3;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 3;
  const ::autodrive::workflow::proto::perception_base::SceneParsing& scene() const;
  ::autodrive::workflow::proto::perception_base::SceneParsing* release_scene();
  ::autodrive::workflow::proto::perception_base::SceneParsing* mutable_scene();
  void set_allocated_scene(::autodrive::workflow::proto::perception_base::SceneParsing* scene);

  // .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
  void clear_image_id();
  static const int kImageIdFieldNumber = 1;
  ::autodrive::workflow::proto::perception_base::ImageId image_id() const;
  void set_image_id(::autodrive::workflow::proto::perception_base::ImageId value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.FailSafeResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::FailSafeLevel* fail_safe_result_;
  ::autodrive::workflow::proto::perception_base::SceneParsing* scene_;
  int image_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_fail_5fsafe_5fresult_2eproto::TableStruct;
  friend void ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeResultImpl();
};
// -------------------------------------------------------------------

class FailSafeResults : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.FailSafeResults) */ {
 public:
  FailSafeResults();
  virtual ~FailSafeResults();

  FailSafeResults(const FailSafeResults& from);

  inline FailSafeResults& operator=(const FailSafeResults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FailSafeResults(FailSafeResults&& from) noexcept
    : FailSafeResults() {
    *this = ::std::move(from);
  }

  inline FailSafeResults& operator=(FailSafeResults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FailSafeResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FailSafeResults* internal_default_instance() {
    return reinterpret_cast<const FailSafeResults*>(
               &_FailSafeResults_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FailSafeResults* other);
  friend void swap(FailSafeResults& a, FailSafeResults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FailSafeResults* New() const PROTOBUF_FINAL { return New(NULL); }

  FailSafeResults* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FailSafeResults& from);
  void MergeFrom(const FailSafeResults& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FailSafeResults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autodrive.workflow.proto.FailSafeResult fail_safe_result_data = 1;
  int fail_safe_result_data_size() const;
  void clear_fail_safe_result_data();
  static const int kFailSafeResultDataFieldNumber = 1;
  const ::autodrive::workflow::proto::FailSafeResult& fail_safe_result_data(int index) const;
  ::autodrive::workflow::proto::FailSafeResult* mutable_fail_safe_result_data(int index);
  ::autodrive::workflow::proto::FailSafeResult* add_fail_safe_result_data();
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FailSafeResult >*
      mutable_fail_safe_result_data();
  const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FailSafeResult >&
      fail_safe_result_data() const;

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.FailSafeResults)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FailSafeResult > fail_safe_result_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_fail_5fsafe_5fresult_2eproto::TableStruct;
  friend void ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailSafeResultsImpl();
};
// -------------------------------------------------------------------

class FailsafeResultMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.FailsafeResultMsg) */ {
 public:
  FailsafeResultMsg();
  virtual ~FailsafeResultMsg();

  FailsafeResultMsg(const FailsafeResultMsg& from);

  inline FailsafeResultMsg& operator=(const FailsafeResultMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FailsafeResultMsg(FailsafeResultMsg&& from) noexcept
    : FailsafeResultMsg() {
    *this = ::std::move(from);
  }

  inline FailsafeResultMsg& operator=(FailsafeResultMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FailsafeResultMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FailsafeResultMsg* internal_default_instance() {
    return reinterpret_cast<const FailsafeResultMsg*>(
               &_FailsafeResultMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FailsafeResultMsg* other);
  friend void swap(FailsafeResultMsg& a, FailsafeResultMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FailsafeResultMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  FailsafeResultMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FailsafeResultMsg& from);
  void MergeFrom(const FailsafeResultMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FailsafeResultMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.FailSafeResults safe_results = 3;
  bool has_safe_results() const;
  void clear_safe_results();
  static const int kSafeResultsFieldNumber = 3;
  const ::autodrive::workflow::proto::FailSafeResults& safe_results() const;
  ::autodrive::workflow::proto::FailSafeResults* release_safe_results();
  ::autodrive::workflow::proto::FailSafeResults* mutable_safe_results();
  void set_allocated_safe_results(::autodrive::workflow::proto::FailSafeResults* safe_results);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.FailsafeResultMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::FailSafeResults* safe_results_;
  mutable int _cached_size_;
  friend struct ::protobuf_fail_5fsafe_5fresult_2eproto::TableStruct;
  friend void ::protobuf_fail_5fsafe_5fresult_2eproto::InitDefaultsFailsafeResultMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FailSafeLevel

// .autodrive.workflow.proto.SeverityLevel rain_severity_level = 1;
inline void FailSafeLevel::clear_rain_severity_level() {
  rain_severity_level_ = 0;
}
inline ::autodrive::workflow::proto::SeverityLevel FailSafeLevel::rain_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.rain_severity_level)
  return static_cast< ::autodrive::workflow::proto::SeverityLevel >(rain_severity_level_);
}
inline void FailSafeLevel::set_rain_severity_level(::autodrive::workflow::proto::SeverityLevel value) {
  
  rain_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.rain_severity_level)
}

// .autodrive.workflow.proto.SeverityLevel full_blockage_severity_level = 2;
inline void FailSafeLevel::clear_full_blockage_severity_level() {
  full_blockage_severity_level_ = 0;
}
inline ::autodrive::workflow::proto::SeverityLevel FailSafeLevel::full_blockage_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.full_blockage_severity_level)
  return static_cast< ::autodrive::workflow::proto::SeverityLevel >(full_blockage_severity_level_);
}
inline void FailSafeLevel::set_full_blockage_severity_level(::autodrive::workflow::proto::SeverityLevel value) {
  
  full_blockage_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.full_blockage_severity_level)
}

// .autodrive.workflow.proto.SeverityLevel blurred_image_severity_level = 3;
inline void FailSafeLevel::clear_blurred_image_severity_level() {
  blurred_image_severity_level_ = 0;
}
inline ::autodrive::workflow::proto::SeverityLevel FailSafeLevel::blurred_image_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.blurred_image_severity_level)
  return static_cast< ::autodrive::workflow::proto::SeverityLevel >(blurred_image_severity_level_);
}
inline void FailSafeLevel::set_blurred_image_severity_level(::autodrive::workflow::proto::SeverityLevel value) {
  
  blurred_image_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.blurred_image_severity_level)
}

// .autodrive.workflow.proto.SeverityLevel splashes_severity_level = 4;
inline void FailSafeLevel::clear_splashes_severity_level() {
  splashes_severity_level_ = 0;
}
inline ::autodrive::workflow::proto::SeverityLevel FailSafeLevel::splashes_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.splashes_severity_level)
  return static_cast< ::autodrive::workflow::proto::SeverityLevel >(splashes_severity_level_);
}
inline void FailSafeLevel::set_splashes_severity_level(::autodrive::workflow::proto::SeverityLevel value) {
  
  splashes_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.splashes_severity_level)
}

// .autodrive.workflow.proto.SeverityLevel low_sun_severity_level = 5;
inline void FailSafeLevel::clear_low_sun_severity_level() {
  low_sun_severity_level_ = 0;
}
inline ::autodrive::workflow::proto::SeverityLevel FailSafeLevel::low_sun_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.low_sun_severity_level)
  return static_cast< ::autodrive::workflow::proto::SeverityLevel >(low_sun_severity_level_);
}
inline void FailSafeLevel::set_low_sun_severity_level(::autodrive::workflow::proto::SeverityLevel value) {
  
  low_sun_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.low_sun_severity_level)
}

// .autodrive.workflow.proto.SeverityLevel sun_ray_severity_level = 6;
inline void FailSafeLevel::clear_sun_ray_severity_level() {
  sun_ray_severity_level_ = 0;
}
inline ::autodrive::workflow::proto::SeverityLevel FailSafeLevel::sun_ray_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.sun_ray_severity_level)
  return static_cast< ::autodrive::workflow::proto::SeverityLevel >(sun_ray_severity_level_);
}
inline void FailSafeLevel::set_sun_ray_severity_level(::autodrive::workflow::proto::SeverityLevel value) {
  
  sun_ray_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.sun_ray_severity_level)
}

// bool out_of_focus_severity_level = 7;
inline void FailSafeLevel::clear_out_of_focus_severity_level() {
  out_of_focus_severity_level_ = false;
}
inline bool FailSafeLevel::out_of_focus_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.out_of_focus_severity_level)
  return out_of_focus_severity_level_;
}
inline void FailSafeLevel::set_out_of_focus_severity_level(bool value) {
  
  out_of_focus_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.out_of_focus_severity_level)
}

// bool out_of_calibration_severity_level = 8;
inline void FailSafeLevel::clear_out_of_calibration_severity_level() {
  out_of_calibration_severity_level_ = false;
}
inline bool FailSafeLevel::out_of_calibration_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.out_of_calibration_severity_level)
  return out_of_calibration_severity_level_;
}
inline void FailSafeLevel::set_out_of_calibration_severity_level(bool value) {
  
  out_of_calibration_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.out_of_calibration_severity_level)
}

// .autodrive.workflow.proto.SeverityLevel partial_blockage_severity_level = 9;
inline void FailSafeLevel::clear_partial_blockage_severity_level() {
  partial_blockage_severity_level_ = 0;
}
inline ::autodrive::workflow::proto::SeverityLevel FailSafeLevel::partial_blockage_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.partial_blockage_severity_level)
  return static_cast< ::autodrive::workflow::proto::SeverityLevel >(partial_blockage_severity_level_);
}
inline void FailSafeLevel::set_partial_blockage_severity_level(::autodrive::workflow::proto::SeverityLevel value) {
  
  partial_blockage_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.partial_blockage_severity_level)
}

// .autodrive.workflow.proto.SeverityLevel frozen_windshield_severity_level = 10;
inline void FailSafeLevel::clear_frozen_windshield_severity_level() {
  frozen_windshield_severity_level_ = 0;
}
inline ::autodrive::workflow::proto::SeverityLevel FailSafeLevel::frozen_windshield_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.frozen_windshield_severity_level)
  return static_cast< ::autodrive::workflow::proto::SeverityLevel >(frozen_windshield_severity_level_);
}
inline void FailSafeLevel::set_frozen_windshield_severity_level(::autodrive::workflow::proto::SeverityLevel value) {
  
  frozen_windshield_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.frozen_windshield_severity_level)
}

// .autodrive.workflow.proto.SeverityLevel fog_severity_level = 11;
inline void FailSafeLevel::clear_fog_severity_level() {
  fog_severity_level_ = 0;
}
inline ::autodrive::workflow::proto::SeverityLevel FailSafeLevel::fog_severity_level() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.fog_severity_level)
  return static_cast< ::autodrive::workflow::proto::SeverityLevel >(fog_severity_level_);
}
inline void FailSafeLevel::set_fog_severity_level(::autodrive::workflow::proto::SeverityLevel value) {
  
  fog_severity_level_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.fog_severity_level)
}

// bool free_sight = 12;
inline void FailSafeLevel::clear_free_sight() {
  free_sight_ = false;
}
inline bool FailSafeLevel::free_sight() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.free_sight)
  return free_sight_;
}
inline void FailSafeLevel::set_free_sight(bool value) {
  
  free_sight_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.free_sight)
}

// .autodrive.workflow.proto.OutOfCalibTsrBs out_of_calib_tsr_bs = 13;
inline void FailSafeLevel::clear_out_of_calib_tsr_bs() {
  out_of_calib_tsr_bs_ = 0;
}
inline ::autodrive::workflow::proto::OutOfCalibTsrBs FailSafeLevel::out_of_calib_tsr_bs() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeLevel.out_of_calib_tsr_bs)
  return static_cast< ::autodrive::workflow::proto::OutOfCalibTsrBs >(out_of_calib_tsr_bs_);
}
inline void FailSafeLevel::set_out_of_calib_tsr_bs(::autodrive::workflow::proto::OutOfCalibTsrBs value) {
  
  out_of_calib_tsr_bs_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeLevel.out_of_calib_tsr_bs)
}

// -------------------------------------------------------------------

// FailSafeResult

// .autodrive.workflow.proto.perception_base.ImageId image_id = 1;
inline void FailSafeResult::clear_image_id() {
  image_id_ = 0;
}
inline ::autodrive::workflow::proto::perception_base::ImageId FailSafeResult::image_id() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeResult.image_id)
  return static_cast< ::autodrive::workflow::proto::perception_base::ImageId >(image_id_);
}
inline void FailSafeResult::set_image_id(::autodrive::workflow::proto::perception_base::ImageId value) {
  
  image_id_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.FailSafeResult.image_id)
}

// .autodrive.workflow.proto.FailSafeLevel fail_safe_result = 2;
inline bool FailSafeResult::has_fail_safe_result() const {
  return this != internal_default_instance() && fail_safe_result_ != NULL;
}
inline void FailSafeResult::clear_fail_safe_result() {
  if (GetArenaNoVirtual() == NULL && fail_safe_result_ != NULL) {
    delete fail_safe_result_;
  }
  fail_safe_result_ = NULL;
}
inline const ::autodrive::workflow::proto::FailSafeLevel& FailSafeResult::fail_safe_result() const {
  const ::autodrive::workflow::proto::FailSafeLevel* p = fail_safe_result_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeResult.fail_safe_result)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::FailSafeLevel*>(
      &::autodrive::workflow::proto::_FailSafeLevel_default_instance_);
}
inline ::autodrive::workflow::proto::FailSafeLevel* FailSafeResult::release_fail_safe_result() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FailSafeResult.fail_safe_result)
  
  ::autodrive::workflow::proto::FailSafeLevel* temp = fail_safe_result_;
  fail_safe_result_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::FailSafeLevel* FailSafeResult::mutable_fail_safe_result() {
  
  if (fail_safe_result_ == NULL) {
    fail_safe_result_ = new ::autodrive::workflow::proto::FailSafeLevel;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FailSafeResult.fail_safe_result)
  return fail_safe_result_;
}
inline void FailSafeResult::set_allocated_fail_safe_result(::autodrive::workflow::proto::FailSafeLevel* fail_safe_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fail_safe_result_;
  }
  if (fail_safe_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fail_safe_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fail_safe_result, submessage_arena);
    }
    
  } else {
    
  }
  fail_safe_result_ = fail_safe_result;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FailSafeResult.fail_safe_result)
}

// .autodrive.workflow.proto.perception_base.SceneParsing scene = 3;
inline bool FailSafeResult::has_scene() const {
  return this != internal_default_instance() && scene_ != NULL;
}
inline const ::autodrive::workflow::proto::perception_base::SceneParsing& FailSafeResult::scene() const {
  const ::autodrive::workflow::proto::perception_base::SceneParsing* p = scene_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeResult.scene)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::perception_base::SceneParsing*>(
      &::autodrive::workflow::proto::perception_base::_SceneParsing_default_instance_);
}
inline ::autodrive::workflow::proto::perception_base::SceneParsing* FailSafeResult::release_scene() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FailSafeResult.scene)
  
  ::autodrive::workflow::proto::perception_base::SceneParsing* temp = scene_;
  scene_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::perception_base::SceneParsing* FailSafeResult::mutable_scene() {
  
  if (scene_ == NULL) {
    scene_ = new ::autodrive::workflow::proto::perception_base::SceneParsing;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FailSafeResult.scene)
  return scene_;
}
inline void FailSafeResult::set_allocated_scene(::autodrive::workflow::proto::perception_base::SceneParsing* scene) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scene_);
  }
  if (scene) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scene = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scene, submessage_arena);
    }
    
  } else {
    
  }
  scene_ = scene;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FailSafeResult.scene)
}

// -------------------------------------------------------------------

// FailSafeResults

// repeated .autodrive.workflow.proto.FailSafeResult fail_safe_result_data = 1;
inline int FailSafeResults::fail_safe_result_data_size() const {
  return fail_safe_result_data_.size();
}
inline void FailSafeResults::clear_fail_safe_result_data() {
  fail_safe_result_data_.Clear();
}
inline const ::autodrive::workflow::proto::FailSafeResult& FailSafeResults::fail_safe_result_data(int index) const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailSafeResults.fail_safe_result_data)
  return fail_safe_result_data_.Get(index);
}
inline ::autodrive::workflow::proto::FailSafeResult* FailSafeResults::mutable_fail_safe_result_data(int index) {
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FailSafeResults.fail_safe_result_data)
  return fail_safe_result_data_.Mutable(index);
}
inline ::autodrive::workflow::proto::FailSafeResult* FailSafeResults::add_fail_safe_result_data() {
  // @@protoc_insertion_point(field_add:autodrive.workflow.proto.FailSafeResults.fail_safe_result_data)
  return fail_safe_result_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FailSafeResult >*
FailSafeResults::mutable_fail_safe_result_data() {
  // @@protoc_insertion_point(field_mutable_list:autodrive.workflow.proto.FailSafeResults.fail_safe_result_data)
  return &fail_safe_result_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autodrive::workflow::proto::FailSafeResult >&
FailSafeResults::fail_safe_result_data() const {
  // @@protoc_insertion_point(field_list:autodrive.workflow.proto.FailSafeResults.fail_safe_result_data)
  return fail_safe_result_data_;
}

// -------------------------------------------------------------------

// FailsafeResultMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool FailsafeResultMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& FailsafeResultMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailsafeResultMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* FailsafeResultMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FailsafeResultMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* FailsafeResultMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FailsafeResultMsg.header)
  return header_;
}
inline void FailsafeResultMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FailsafeResultMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool FailsafeResultMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& FailsafeResultMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailsafeResultMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* FailsafeResultMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FailsafeResultMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* FailsafeResultMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FailsafeResultMsg.error)
  return error_;
}
inline void FailsafeResultMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FailsafeResultMsg.error)
}

// .autodrive.workflow.proto.FailSafeResults safe_results = 3;
inline bool FailsafeResultMsg::has_safe_results() const {
  return this != internal_default_instance() && safe_results_ != NULL;
}
inline void FailsafeResultMsg::clear_safe_results() {
  if (GetArenaNoVirtual() == NULL && safe_results_ != NULL) {
    delete safe_results_;
  }
  safe_results_ = NULL;
}
inline const ::autodrive::workflow::proto::FailSafeResults& FailsafeResultMsg::safe_results() const {
  const ::autodrive::workflow::proto::FailSafeResults* p = safe_results_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.FailsafeResultMsg.safe_results)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::FailSafeResults*>(
      &::autodrive::workflow::proto::_FailSafeResults_default_instance_);
}
inline ::autodrive::workflow::proto::FailSafeResults* FailsafeResultMsg::release_safe_results() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.FailsafeResultMsg.safe_results)
  
  ::autodrive::workflow::proto::FailSafeResults* temp = safe_results_;
  safe_results_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::FailSafeResults* FailsafeResultMsg::mutable_safe_results() {
  
  if (safe_results_ == NULL) {
    safe_results_ = new ::autodrive::workflow::proto::FailSafeResults;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.FailsafeResultMsg.safe_results)
  return safe_results_;
}
inline void FailsafeResultMsg::set_allocated_safe_results(::autodrive::workflow::proto::FailSafeResults* safe_results) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete safe_results_;
  }
  if (safe_results) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      safe_results = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, safe_results, submessage_arena);
    }
    
  } else {
    
  }
  safe_results_ = safe_results;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.FailsafeResultMsg.safe_results)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autodrive::workflow::proto::SeverityLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::SeverityLevel>() {
  return ::autodrive::workflow::proto::SeverityLevel_descriptor();
}
template <> struct is_proto_enum< ::autodrive::workflow::proto::OutOfCalibTsrBs> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autodrive::workflow::proto::OutOfCalibTsrBs>() {
  return ::autodrive::workflow::proto::OutOfCalibTsrBs_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fail_5fsafe_5fresult_2eproto__INCLUDED
