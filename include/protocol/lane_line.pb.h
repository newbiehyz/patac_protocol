// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lane_line.proto

#ifndef PROTOBUF_lane_5fline_2eproto__INCLUDED
#define PROTOBUF_lane_5fline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "basic.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_lane_5fline_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLaneLinePointImpl();
void InitDefaultsLaneLinePoint();
void InitDefaultsLaneLinePointsImpl();
void InitDefaultsLaneLinePoints();
void InitDefaultsLaneLinePointsMsgImpl();
void InitDefaultsLaneLinePointsMsg();
inline void InitDefaults() {
  InitDefaultsLaneLinePoint();
  InitDefaultsLaneLinePoints();
  InitDefaultsLaneLinePointsMsg();
}
}  // namespace protobuf_lane_5fline_2eproto
namespace autodrive {
namespace workflow {
namespace proto {
class LaneLinePoint;
class LaneLinePointDefaultTypeInternal;
extern LaneLinePointDefaultTypeInternal _LaneLinePoint_default_instance_;
class LaneLinePoints;
class LaneLinePointsDefaultTypeInternal;
extern LaneLinePointsDefaultTypeInternal _LaneLinePoints_default_instance_;
class LaneLinePointsMsg;
class LaneLinePointsMsgDefaultTypeInternal;
extern LaneLinePointsMsgDefaultTypeInternal _LaneLinePointsMsg_default_instance_;
}  // namespace proto
}  // namespace workflow
}  // namespace autodrive
namespace autodrive {
namespace workflow {
namespace proto {

// ===================================================================

class LaneLinePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LaneLinePoint) */ {
 public:
  LaneLinePoint();
  virtual ~LaneLinePoint();

  LaneLinePoint(const LaneLinePoint& from);

  inline LaneLinePoint& operator=(const LaneLinePoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneLinePoint(LaneLinePoint&& from) noexcept
    : LaneLinePoint() {
    *this = ::std::move(from);
  }

  inline LaneLinePoint& operator=(LaneLinePoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneLinePoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneLinePoint* internal_default_instance() {
    return reinterpret_cast<const LaneLinePoint*>(
               &_LaneLinePoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LaneLinePoint* other);
  friend void swap(LaneLinePoint& a, LaneLinePoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneLinePoint* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneLinePoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneLinePoint& from);
  void MergeFrom(const LaneLinePoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneLinePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.Vector2f line_start_point_vcs = 1;
  bool has_line_start_point_vcs() const;
  void clear_line_start_point_vcs();
  static const int kLineStartPointVcsFieldNumber = 1;
  const ::autodrive::workflow::proto::Vector2f& line_start_point_vcs() const;
  ::autodrive::workflow::proto::Vector2f* release_line_start_point_vcs();
  ::autodrive::workflow::proto::Vector2f* mutable_line_start_point_vcs();
  void set_allocated_line_start_point_vcs(::autodrive::workflow::proto::Vector2f* line_start_point_vcs);

  // .autodrive.workflow.proto.Vector2f line_end_point_vcs = 2;
  bool has_line_end_point_vcs() const;
  void clear_line_end_point_vcs();
  static const int kLineEndPointVcsFieldNumber = 2;
  const ::autodrive::workflow::proto::Vector2f& line_end_point_vcs() const;
  ::autodrive::workflow::proto::Vector2f* release_line_end_point_vcs();
  ::autodrive::workflow::proto::Vector2f* mutable_line_end_point_vcs();
  void set_allocated_line_end_point_vcs(::autodrive::workflow::proto::Vector2f* line_end_point_vcs);

  // uint32 flag = 3;
  void clear_flag();
  static const int kFlagFieldNumber = 3;
  ::google::protobuf::uint32 flag() const;
  void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LaneLinePoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::Vector2f* line_start_point_vcs_;
  ::autodrive::workflow::proto::Vector2f* line_end_point_vcs_;
  ::google::protobuf::uint32 flag_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fline_2eproto::TableStruct;
  friend void ::protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePointImpl();
};
// -------------------------------------------------------------------

class LaneLinePoints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LaneLinePoints) */ {
 public:
  LaneLinePoints();
  virtual ~LaneLinePoints();

  LaneLinePoints(const LaneLinePoints& from);

  inline LaneLinePoints& operator=(const LaneLinePoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneLinePoints(LaneLinePoints&& from) noexcept
    : LaneLinePoints() {
    *this = ::std::move(from);
  }

  inline LaneLinePoints& operator=(LaneLinePoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneLinePoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneLinePoints* internal_default_instance() {
    return reinterpret_cast<const LaneLinePoints*>(
               &_LaneLinePoints_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LaneLinePoints* other);
  friend void swap(LaneLinePoints& a, LaneLinePoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneLinePoints* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneLinePoints* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneLinePoints& from);
  void MergeFrom(const LaneLinePoints& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneLinePoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.LaneLinePoint near_line = 1;
  bool has_near_line() const;
  void clear_near_line();
  static const int kNearLineFieldNumber = 1;
  const ::autodrive::workflow::proto::LaneLinePoint& near_line() const;
  ::autodrive::workflow::proto::LaneLinePoint* release_near_line();
  ::autodrive::workflow::proto::LaneLinePoint* mutable_near_line();
  void set_allocated_near_line(::autodrive::workflow::proto::LaneLinePoint* near_line);

  // .autodrive.workflow.proto.LaneLinePoint far_line = 2;
  bool has_far_line() const;
  void clear_far_line();
  static const int kFarLineFieldNumber = 2;
  const ::autodrive::workflow::proto::LaneLinePoint& far_line() const;
  ::autodrive::workflow::proto::LaneLinePoint* release_far_line();
  ::autodrive::workflow::proto::LaneLinePoint* mutable_far_line();
  void set_allocated_far_line(::autodrive::workflow::proto::LaneLinePoint* far_line);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LaneLinePoints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::LaneLinePoint* near_line_;
  ::autodrive::workflow::proto::LaneLinePoint* far_line_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fline_2eproto::TableStruct;
  friend void ::protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePointsImpl();
};
// -------------------------------------------------------------------

class LaneLinePointsMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autodrive.workflow.proto.LaneLinePointsMsg) */ {
 public:
  LaneLinePointsMsg();
  virtual ~LaneLinePointsMsg();

  LaneLinePointsMsg(const LaneLinePointsMsg& from);

  inline LaneLinePointsMsg& operator=(const LaneLinePointsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneLinePointsMsg(LaneLinePointsMsg&& from) noexcept
    : LaneLinePointsMsg() {
    *this = ::std::move(from);
  }

  inline LaneLinePointsMsg& operator=(LaneLinePointsMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneLinePointsMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneLinePointsMsg* internal_default_instance() {
    return reinterpret_cast<const LaneLinePointsMsg*>(
               &_LaneLinePointsMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LaneLinePointsMsg* other);
  friend void swap(LaneLinePointsMsg& a, LaneLinePointsMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneLinePointsMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneLinePointsMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneLinePointsMsg& from);
  void MergeFrom(const LaneLinePointsMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneLinePointsMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .autodrive.workflow.proto.MsgHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::autodrive::workflow::proto::MsgHeader& header() const;
  ::autodrive::workflow::proto::MsgHeader* release_header();
  ::autodrive::workflow::proto::MsgHeader* mutable_header();
  void set_allocated_header(::autodrive::workflow::proto::MsgHeader* header);

  // .autodrive.workflow.proto.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::autodrive::workflow::proto::Error& error() const;
  ::autodrive::workflow::proto::Error* release_error();
  ::autodrive::workflow::proto::Error* mutable_error();
  void set_allocated_error(::autodrive::workflow::proto::Error* error);

  // .autodrive.workflow.proto.LaneLinePoints lane_line_points = 3;
  bool has_lane_line_points() const;
  void clear_lane_line_points();
  static const int kLaneLinePointsFieldNumber = 3;
  const ::autodrive::workflow::proto::LaneLinePoints& lane_line_points() const;
  ::autodrive::workflow::proto::LaneLinePoints* release_lane_line_points();
  ::autodrive::workflow::proto::LaneLinePoints* mutable_lane_line_points();
  void set_allocated_lane_line_points(::autodrive::workflow::proto::LaneLinePoints* lane_line_points);

  // @@protoc_insertion_point(class_scope:autodrive.workflow.proto.LaneLinePointsMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::autodrive::workflow::proto::MsgHeader* header_;
  ::autodrive::workflow::proto::Error* error_;
  ::autodrive::workflow::proto::LaneLinePoints* lane_line_points_;
  mutable int _cached_size_;
  friend struct ::protobuf_lane_5fline_2eproto::TableStruct;
  friend void ::protobuf_lane_5fline_2eproto::InitDefaultsLaneLinePointsMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneLinePoint

// .autodrive.workflow.proto.Vector2f line_start_point_vcs = 1;
inline bool LaneLinePoint::has_line_start_point_vcs() const {
  return this != internal_default_instance() && line_start_point_vcs_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& LaneLinePoint::line_start_point_vcs() const {
  const ::autodrive::workflow::proto::Vector2f* p = line_start_point_vcs_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneLinePoint.line_start_point_vcs)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* LaneLinePoint::release_line_start_point_vcs() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneLinePoint.line_start_point_vcs)
  
  ::autodrive::workflow::proto::Vector2f* temp = line_start_point_vcs_;
  line_start_point_vcs_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* LaneLinePoint::mutable_line_start_point_vcs() {
  
  if (line_start_point_vcs_ == NULL) {
    line_start_point_vcs_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneLinePoint.line_start_point_vcs)
  return line_start_point_vcs_;
}
inline void LaneLinePoint::set_allocated_line_start_point_vcs(::autodrive::workflow::proto::Vector2f* line_start_point_vcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(line_start_point_vcs_);
  }
  if (line_start_point_vcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line_start_point_vcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line_start_point_vcs, submessage_arena);
    }
    
  } else {
    
  }
  line_start_point_vcs_ = line_start_point_vcs;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneLinePoint.line_start_point_vcs)
}

// .autodrive.workflow.proto.Vector2f line_end_point_vcs = 2;
inline bool LaneLinePoint::has_line_end_point_vcs() const {
  return this != internal_default_instance() && line_end_point_vcs_ != NULL;
}
inline const ::autodrive::workflow::proto::Vector2f& LaneLinePoint::line_end_point_vcs() const {
  const ::autodrive::workflow::proto::Vector2f* p = line_end_point_vcs_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneLinePoint.line_end_point_vcs)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Vector2f*>(
      &::autodrive::workflow::proto::_Vector2f_default_instance_);
}
inline ::autodrive::workflow::proto::Vector2f* LaneLinePoint::release_line_end_point_vcs() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneLinePoint.line_end_point_vcs)
  
  ::autodrive::workflow::proto::Vector2f* temp = line_end_point_vcs_;
  line_end_point_vcs_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Vector2f* LaneLinePoint::mutable_line_end_point_vcs() {
  
  if (line_end_point_vcs_ == NULL) {
    line_end_point_vcs_ = new ::autodrive::workflow::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneLinePoint.line_end_point_vcs)
  return line_end_point_vcs_;
}
inline void LaneLinePoint::set_allocated_line_end_point_vcs(::autodrive::workflow::proto::Vector2f* line_end_point_vcs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(line_end_point_vcs_);
  }
  if (line_end_point_vcs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line_end_point_vcs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line_end_point_vcs, submessage_arena);
    }
    
  } else {
    
  }
  line_end_point_vcs_ = line_end_point_vcs;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneLinePoint.line_end_point_vcs)
}

// uint32 flag = 3;
inline void LaneLinePoint::clear_flag() {
  flag_ = 0u;
}
inline ::google::protobuf::uint32 LaneLinePoint::flag() const {
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneLinePoint.flag)
  return flag_;
}
inline void LaneLinePoint::set_flag(::google::protobuf::uint32 value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:autodrive.workflow.proto.LaneLinePoint.flag)
}

// -------------------------------------------------------------------

// LaneLinePoints

// .autodrive.workflow.proto.LaneLinePoint near_line = 1;
inline bool LaneLinePoints::has_near_line() const {
  return this != internal_default_instance() && near_line_ != NULL;
}
inline void LaneLinePoints::clear_near_line() {
  if (GetArenaNoVirtual() == NULL && near_line_ != NULL) {
    delete near_line_;
  }
  near_line_ = NULL;
}
inline const ::autodrive::workflow::proto::LaneLinePoint& LaneLinePoints::near_line() const {
  const ::autodrive::workflow::proto::LaneLinePoint* p = near_line_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneLinePoints.near_line)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::LaneLinePoint*>(
      &::autodrive::workflow::proto::_LaneLinePoint_default_instance_);
}
inline ::autodrive::workflow::proto::LaneLinePoint* LaneLinePoints::release_near_line() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneLinePoints.near_line)
  
  ::autodrive::workflow::proto::LaneLinePoint* temp = near_line_;
  near_line_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::LaneLinePoint* LaneLinePoints::mutable_near_line() {
  
  if (near_line_ == NULL) {
    near_line_ = new ::autodrive::workflow::proto::LaneLinePoint;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneLinePoints.near_line)
  return near_line_;
}
inline void LaneLinePoints::set_allocated_near_line(::autodrive::workflow::proto::LaneLinePoint* near_line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete near_line_;
  }
  if (near_line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      near_line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, near_line, submessage_arena);
    }
    
  } else {
    
  }
  near_line_ = near_line;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneLinePoints.near_line)
}

// .autodrive.workflow.proto.LaneLinePoint far_line = 2;
inline bool LaneLinePoints::has_far_line() const {
  return this != internal_default_instance() && far_line_ != NULL;
}
inline void LaneLinePoints::clear_far_line() {
  if (GetArenaNoVirtual() == NULL && far_line_ != NULL) {
    delete far_line_;
  }
  far_line_ = NULL;
}
inline const ::autodrive::workflow::proto::LaneLinePoint& LaneLinePoints::far_line() const {
  const ::autodrive::workflow::proto::LaneLinePoint* p = far_line_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneLinePoints.far_line)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::LaneLinePoint*>(
      &::autodrive::workflow::proto::_LaneLinePoint_default_instance_);
}
inline ::autodrive::workflow::proto::LaneLinePoint* LaneLinePoints::release_far_line() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneLinePoints.far_line)
  
  ::autodrive::workflow::proto::LaneLinePoint* temp = far_line_;
  far_line_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::LaneLinePoint* LaneLinePoints::mutable_far_line() {
  
  if (far_line_ == NULL) {
    far_line_ = new ::autodrive::workflow::proto::LaneLinePoint;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneLinePoints.far_line)
  return far_line_;
}
inline void LaneLinePoints::set_allocated_far_line(::autodrive::workflow::proto::LaneLinePoint* far_line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete far_line_;
  }
  if (far_line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      far_line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, far_line, submessage_arena);
    }
    
  } else {
    
  }
  far_line_ = far_line;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneLinePoints.far_line)
}

// -------------------------------------------------------------------

// LaneLinePointsMsg

// .autodrive.workflow.proto.MsgHeader header = 1;
inline bool LaneLinePointsMsg::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::autodrive::workflow::proto::MsgHeader& LaneLinePointsMsg::header() const {
  const ::autodrive::workflow::proto::MsgHeader* p = header_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneLinePointsMsg.header)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::MsgHeader*>(
      &::autodrive::workflow::proto::_MsgHeader_default_instance_);
}
inline ::autodrive::workflow::proto::MsgHeader* LaneLinePointsMsg::release_header() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneLinePointsMsg.header)
  
  ::autodrive::workflow::proto::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::MsgHeader* LaneLinePointsMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::autodrive::workflow::proto::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneLinePointsMsg.header)
  return header_;
}
inline void LaneLinePointsMsg::set_allocated_header(::autodrive::workflow::proto::MsgHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneLinePointsMsg.header)
}

// .autodrive.workflow.proto.Error error = 2;
inline bool LaneLinePointsMsg::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::autodrive::workflow::proto::Error& LaneLinePointsMsg::error() const {
  const ::autodrive::workflow::proto::Error* p = error_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneLinePointsMsg.error)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::Error*>(
      &::autodrive::workflow::proto::_Error_default_instance_);
}
inline ::autodrive::workflow::proto::Error* LaneLinePointsMsg::release_error() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneLinePointsMsg.error)
  
  ::autodrive::workflow::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::Error* LaneLinePointsMsg::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::autodrive::workflow::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneLinePointsMsg.error)
  return error_;
}
inline void LaneLinePointsMsg::set_allocated_error(::autodrive::workflow::proto::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneLinePointsMsg.error)
}

// .autodrive.workflow.proto.LaneLinePoints lane_line_points = 3;
inline bool LaneLinePointsMsg::has_lane_line_points() const {
  return this != internal_default_instance() && lane_line_points_ != NULL;
}
inline void LaneLinePointsMsg::clear_lane_line_points() {
  if (GetArenaNoVirtual() == NULL && lane_line_points_ != NULL) {
    delete lane_line_points_;
  }
  lane_line_points_ = NULL;
}
inline const ::autodrive::workflow::proto::LaneLinePoints& LaneLinePointsMsg::lane_line_points() const {
  const ::autodrive::workflow::proto::LaneLinePoints* p = lane_line_points_;
  // @@protoc_insertion_point(field_get:autodrive.workflow.proto.LaneLinePointsMsg.lane_line_points)
  return p != NULL ? *p : *reinterpret_cast<const ::autodrive::workflow::proto::LaneLinePoints*>(
      &::autodrive::workflow::proto::_LaneLinePoints_default_instance_);
}
inline ::autodrive::workflow::proto::LaneLinePoints* LaneLinePointsMsg::release_lane_line_points() {
  // @@protoc_insertion_point(field_release:autodrive.workflow.proto.LaneLinePointsMsg.lane_line_points)
  
  ::autodrive::workflow::proto::LaneLinePoints* temp = lane_line_points_;
  lane_line_points_ = NULL;
  return temp;
}
inline ::autodrive::workflow::proto::LaneLinePoints* LaneLinePointsMsg::mutable_lane_line_points() {
  
  if (lane_line_points_ == NULL) {
    lane_line_points_ = new ::autodrive::workflow::proto::LaneLinePoints;
  }
  // @@protoc_insertion_point(field_mutable:autodrive.workflow.proto.LaneLinePointsMsg.lane_line_points)
  return lane_line_points_;
}
inline void LaneLinePointsMsg::set_allocated_lane_line_points(::autodrive::workflow::proto::LaneLinePoints* lane_line_points) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lane_line_points_;
  }
  if (lane_line_points) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_line_points = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_line_points, submessage_arena);
    }
    
  } else {
    
  }
  lane_line_points_ = lane_line_points;
  // @@protoc_insertion_point(field_set_allocated:autodrive.workflow.proto.LaneLinePointsMsg.lane_line_points)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace workflow
}  // namespace autodrive

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lane_5fline_2eproto__INCLUDED
